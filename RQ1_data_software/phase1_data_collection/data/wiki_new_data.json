[
{"url": "https://index.ros.org/p/ackermann_msgs", "package": "ackermann_msgs", "package_summary": "ROS2 messages for robots using Ackermann steering.", "package_details": "ackermann_msgs ROS messages vehicles front-wheel Ackermann steering. defined ROS Ackermann steering group. ROS documentation: http://www.ros.org/wiki/ackermann_msgs"},
{"url": "https://index.ros.org/p/adi_3dtof_adtf31xx", "package": "adi_3dtof_adtf31xx", "package_summary": "The ROS node to capture depth and AB images from ADI's 3D ToF ADTF31xx sensor", "package_details": "Analog Devices 3DToF ADTF31xx Overview ADI 3DToF ADTF31xx ROS (Robot Operating System) package working ADI\u2019s EVAL-ADTF3175D-NXZ ToF sensor. node captures Depth frames sensor publishes ROS topics. node ADI ToF SDK APIs capture frames sensor. node publishes Depth Images resolutions. Hardware EVAL-ADTF3175D-NXZ Module USB Type-C Type-A cable 5gbps data speed support Host laptop intel higher cpu running Ubuntu-22.04LTS [!note] Refer EVAL-ADTF3175D-NXZ User Guide ensure Eval module adequate power supply operation. [!important] EVAL-ADTF3175D-NXZ Sensor module firmware version Refer user guide firmware upgrade, upgrading firmware. Operation Modes package operation modes. Refer intra-links setup package Camera Sensor Mode File-IO Mode Network Mode Camera Sensor Mode package built sensor module interfaces image sensor. adi_3dtof_nxp_ubuntu_20_04_relx.x.x.img EVAL-ADTF3175D-NXZ sensor ROS package pre-built. order package, connect sensor SSH SSH Sensor ssh analog@10.43.0.1 Password: analog Source ROS Humble source /opt/ros/humble/install/setup.bash Source workspace source ~/ros2_ws/install/setup.bash Launch adi_3dtof_adtf31xx package. ros2 launch adi_3dtof_adtf31xx adi_3dtof_adtf31xx_launch.py arg_input_sensor_mode:=0 [!note] operation mode determined launch parameter arg_input_sensor_mode:=0. modified launch file. Refer parameter table parameters passed. Updating package [!warning] time date incorrect sensor issues updating package. update time date, refer updating date time. order update rebuild package latest version, run commands: ~/ros2_ws/src/adi_3dtof_adtf31xx git pull ~/ros2_ws export MAKEFLAGS=\"-j1\" colcon build --symlink-install --executor sequential --cmake-args -DCMAKE_BUILD_TYPE=Release -DNXP=1 --packages-up-to adi_3dtof_adtf31xx File-IO Mode camera mode, package built Host order evaluate properties package running pre-recorded bin file outputs sensor module. Building package file-io create workspace mkdir ~/ros2_ws/src Clone repository ~/ros2_ws/src git clone https://github.com/analogdevicesinc/adi_3dtof_adtf31xx.git Build workspace rosdep install --from-paths src --ignore-src colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DSENSOR_CONNECTED=False Running node file-io order run package file-io, input files release image. Follow steps existing bin files, follow steps create bin files. installation directory ADI 3DToF ADTF31xx application ~/Analog Devices/ADI3DToFADTF31xx-Rel2.1.0 Run get_videos.sh script download adi_3dtof_input_video_files.zip file current directory. Unzip copy directory ~/ros2_ws/src/adi_3dtof_input_video_files. Update input file argument arg_in_file_name launch file adi_3dtof_adtf31xx_launch.py file path. Run commands: ```bash Source workspace source ~/ros2_ws/install/setup.bash Launch package ros2 launch adi_3dtof_adtf31xx adi_3dtof_adtf31xx_launch.py arg_input_sensor_mode:=2 File truncated lines full file"},
{"url": "https://index.ros.org/p/adi_3dtof_image_stitching", "package": "adi_3dtof_image_stitching", "package_summary": "The adi_3dtof_image_stitching package", "package_details": "Analog Devices 3DToF Image Stitching Overview ADI 3DToF Image Stitching ROS (Robot Operating System) package stitching depth images multiple Time-Of-Flight sensors ADI\u2019s ADTF3175D ToF sensor. node subscribes captured Depth images multiple ADI 3DToF ADTF31xx nodes, stitches create single expanded field view publishes stitched Depth, PointCloud ROS topics. node publishes Stitched Depth Images bits image) resolution 10FPS realtime mode AAEON BOXER-8250AI, stitching inputs EVAL-ADTF3175D giving expanded FOV Degrees. Stitched Depth frames, Stitched Point Cloud published 10FPS. Background Supported Time-of-flight boards: ADTF3175D Supported ROS distro: Humble (Ubuntu Ubuntu 20.04(Source Build)) Supported platform: armV8 64-bit (arm64) Intel Core x86_64(amd64) processors(Core Core Core Hardware tested setup GPU inference support, EVAL-ADTF3175D AAEON BOXER-8250AI External power supply Usb type-c type-A cables 5gbps data speed support Minimum requirements test setup host laptop/computer CPU: EVAL-ADTF3175D Host laptop intel higher cpu running Ubuntu-20.04LTS WSL2 Ubuntu-20.04 USB type-c type-A cables 5gbps data speed support USB power hub :memo: _Note: Refer User Guide ensure eval module adequate power supply operation. image shows connection diagram setup labels): image shows actual setup reference): Hardware setup Follow mentioned steps hardware setup ready: Setup ToF devices adi_3dtof_adtf31xx_sensor node steps mentioned repository. Ensure devices running 10fps steps. Position cameras properly dimentions shown Diagram. :memo: Notes: contact Maintainers CAD design baseplate setup shown Finally, connect devices host(Linux AAEON BOXER-8250AI) usb cables shown Software Software Dependencies Assumptions building package: Linux System WSL2(Only Simulation Mode supported) running Ubuntu 22.04LTS ROS2 Humble: installed, follow steps. Setup colcon workspace workspace folder named \u201cros2_ws\u201d). System Date/Time updated: Date/Time set properly compiling running application. Connecting WiFi network Date/Time set properly. NTP server setup device Synchronization. refer Link setup NTP server Host. Software Requirements Running AAEON BOXER-8250AI Nvidia Jetpack CUDA preinstalled Jetpack follow steps. Clone Clone repo checkout correct release branch/ tag ros2 workspace directory ~/ros2_ws/src git clone https://github.com/analogdevicesinc/adi_3dtof_image_stitching.git Build proper exports source /opt/ros/<ROS version>/setup.bash \u201cROS version\u201d user\u2019s actual ROS version setup GPU inference support CUDA: ~/ros2_ws/ colcon build --cmake-target clean colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DENABLE_GPU=True --event-handlers console_direct+ source install/setup.bash setup CPU inference support openMP: ```bash ~/ros2_ws/ File truncated lines full file"},
{"url": "https://index.ros.org/p/async_web_server_cpp", "package": "async_web_server_cpp", "package_summary": "Asynchronous Web/WebSocket Server in C++", "package_details": "async_web_server_cpp Asynchronous Web/WebSocket Server implementation HTTP web server built top Boost.Asio Library. ability handle websocket upgrade requests. License async_web_server_cpp released BSD license. full terms conditions, LICENSE file. Original Authors package fork defunct GT-RAIL async_web_server_cpp package. originally written Mitchell Wills maintained Russell Toris. maintained Timo R\u00f6hling"},
{"url": "https://index.ros.org/p/backward_ros", "package": "backward_ros", "package_summary": "The backward_ros package is a ros wrapper of backward-cpp from https://github.com/bombela/backward-cpp", "package_details": "ROS info backward-cpp project check https://github.com/bombela/backward-cpp wrapper easy integrate backward_cpp ROS2 packages. Integration backward_ros Add backward_ros package.xml <depend>backward_ros</depend> Add backward_ros CMakeLists.txt find_package(backward_ros REQUIRED) You\u2019re automatically add library executables, crash, print nice stacktrace line numbers details, build debug information enabled (CMAKE_BUILD_TYPE Debug RelWithDebInfo)"},
{"url": "https://index.ros.org/p/bcr_bot", "package": "bcr_bot", "package_summary": "bcr_bot", "package_details": "BCR Bot https://github.com/blackcoffeerobotics/bcr_bot/assets/13151010/0fc570a3-c70c-415b-8222-b9573d5911c8 repository Gazebo Isaac Sim simulation differential drive robot, equipped IMU, depth camera, stereo camera LiDAR. primary contriution project support multiple ROS Gazebo distros. project supports versions ROS Noetic Gazebo Classic (branch ros1) ROS2 Humble Gazebo Classic (branch ros2) ROS2 Humble Gazebo Fortress (branch ros2) ROS2 Humble Gazebo Harmonic (branch ros2) ROS2 Humble Isaac Sim (branch ros2) sections describes depedencies, build run instructions combinations Noetic Classic (Ubuntu Dependencies addition ROS1 Noetic Gazebo Classic installations, dependencies installed rosdep root directory workspace. install mentioned package.xml rosdep install --from-paths src --ignore-src Source Build catkin build --packages-select bcr_bot Binary Install install BCR bot binaries: sudo apt-get install ros-noetic-bcr-bot Run launch robot Gazebo, roslaunch bcr_bot gazebo.launch view rviz, roslaunch bcr_bot rviz.launch Configuration launch file accepts multiple launch arguments, roslaunch bcr_bot gazebo.launch camera_enabled:=True two_d_lidar_enabled:=True position_x:=0.0 position_y:=0.0 orientation_yaw:=0.0 odometry_source:=world world_file:=small_warehouse.world robot_namespace:=\"bcr_bot\" Note: stereo_image_proc stereo images excute command: ROS_NAMESPACE=bcr_bot/stereo_camera rosrun stereo_image_proc stereo_image_proc Humble Classic (Ubuntu Dependencies addition ROS2 Humble Gazebo Classic installations, manually install gazebo_ros_pkgs branch supports Classic Fortress) sudo apt-get install ros-humble-gazebo-ros-pkgs Remainder dependencies installed rosdep root directory workspace. install mentioned package.xml rosdep install --from-paths src --ignore-src Source Build colcon build --packages-select bcr_bot Binary Install install BCR bot binaries: sudo apt-get install ros-humble-bcr-bot Run launch robot Gazebo, File truncated lines full file"},
{"url": "https://index.ros.org/p/behaviortree_cpp", "package": "behaviortree_cpp", "package_summary": "This package provides the Behavior Trees core library.", "package_details": "BehaviorTree.CPP library framework create BehaviorTrees. designed flexible, easy reactive fast. main use-case robotics, library build games, replace Finite State Machines. features BehaviorTree.CPP unique, compared implementations: asynchronous Actions, non-blocking, first-class citizen. build reactive behaviors execute multiple Actions concurrently (orthogonality). Trees defined Domain Specific scripting language (based XML), loaded run-time; words, written morphology Trees hard-coded. statically link custom TreeNodes convert plugins load run-time. type-safe flexible mechanism Dataflow Nodes Tree. includes logging/profiling infrastructure user visualize, record, replay analyze state transitions. Documentation Community learn main concepts, API tutorials https://www.behaviortree.dev/ automatically generated API documentation https://BehaviorTree.github.io/BehaviorTree.CPP/ documentation doesn\u2019t answer questions and/or connect BT.CPP users, visit forum GUI Editor Editing BehaviorTree simple editing XML file favorite text editor. fancy graphical user interface check Groot2 compile BT.CPP requires compile supports build systems supported: colcon (ament), ROS2 conan (Linux/Windows). straight cmake personally responsible dependencies Compiling conan: [!NOTE] Conan builds require CMake newer. Assuming root directory BehaviorTree.CPP: conan install build_type=Release --build=missing cmake --preset conan-release cmake --build --preset conan-release dependencies ZeroMQ SQlite installed don\u2019t conan, simply type: mkdir build_release cmake build_release cmake --build build_release --parallel build pixi project (conda virtual environment). pixi run build BT.CPP application, refer https://github.com/BehaviorTree/btcpp_sample Commercial support BT.CPP commercial product technical support consulting? contact primary author, dfaconti@aurynrobotics.com, discuss case Star History File truncated lines full file"},
{"url": "https://index.ros.org/p/beluga", "package": "beluga", "package_summary": "A generic MCL library for ROS2.", "package_details": "Beluga Beluga ROS-agnostic library implementations Monte Carlo-based localization algorithms widely robotics applications. modularity users compose solutions reusable modules combine configure MCL algorithm suits Features current set features includes: Particle containers: Support Array-of-Structures Structure-of-Arrays tuple containers Composable range adaptor views, actions, algorithms: Multivariate normal distributions space Multivariate uniform distributions compatible occupancy grids Multinomial resampling particle range Adaptive KLD resampling Selective resampling, on-motion resampling, interval resampling policies Support sequential parallel execution policies Weighted covariance statistics pose estimation Sensor models: Likelihood field model Beam model Landmark-based models landmark position bearing) Motion models: Differential drive model Omnidirectional model Documentation Auto-generated Doxygen documentation https://ekumen-os.github.io/beluga/. Dependencies Beluga built top open source libraries: Eigen: well-known template library linear algebra: matrices, vectors, numerical solvers, related algorithms. Sophus: implementation Lie groups Eigen. Range: basis library std::ranges. libciabatta: composable mixin support library."},
{"url": "https://index.ros.org/p/beluga_amcl", "package": "beluga_amcl", "package_summary": "An AMCL node implementation for ROS2 using Beluga.", "package_details": "Beluga AMCL Beluga AMCL ROS node based Beluga library aims fully compatible Navigation AMCL node. compatibility beluga_amcl longstanding counterparts ROS ecosystem simple migration path projects able integrate power modularity Beluga library existing nav2_amcl-based project. Table Contents Beluga AMCL Table Contents ROS Interface Parameters Subscribed Topics Published Topics Published Transforms Advertised Services Performance Steps ROS Interface Parameters Beluga AMCL supports majority ROS parameters Navigation AMCL. Beluga AMCL documentation reference. Subscribed Topics subscribed topic names changed parameters map_topic, scan_topic, initial_pose_topic. Topic Type Description map nav_msgs/OccupancyGrid Input topic map updates. scan sensor_msgs/LaserScan Input topic laser scan updates. initial_pose geometry_msgs/PoseWithCovarianceStamped Input topic pose covariance initialize particle filter. Alternatively, scan_topic, set point_cloud_topic. Point clouds assumed contained constant plane base frame reference. assumed plane plane map pose estimates defined. case, Beluga AMCL misbehave. user filter point clouds assumption hold. Published Topics Topic Type Description particle_cloud geometry_msgs/PoseArray Output topic particle cloud poses published fixed frequency. particle_markers visualization_msgs/MarkerArray Output topic particle cloud markers published fixed frequency. likelihood_field nav_msgs/OccupancyGrid Output topic likelihood field, published update applicable. pose geometry_msgs/PoseWithCovarianceStamped Output topic estimated pose covariance map frame. Published Transforms frame names changed parameters global_frame_id, odom_frame_id base_frame_id. Defaults map, odom base. Transform Description odom base Input transform motion models resampling policies. base laser Input transform convert laser scan points base frame. map odom Output transform calculated estimated pose current odom-to-base transform. Advertised Services Topic Type Description reinitialize_global_localization std_srvs/Empty Request reinitialize global localization initial pose estimate. request_nomotion_update std_srvs/Empty Trigger forced update filter estimates. Performance Performance reports periodically generated uploaded track performance improvements regressions. reports generated set scripts beluga_benchmark package compare performance beluga_amcl nav2_amcl synthetic dataset. plot displays RSS (Resident Set Size), CPU usage, APE (Absolute Pose Error) processing latency statistics beluga_amcl nav2_amcl, particle sizes ranging sensor model likelihood field. plot displays RSS (Resident Set Size), CPU usage, APE (Absolute Pose Error) processing latency statistics beluga_amcl nav2_amcl, particle sizes ranging sensor model beam. details reports folder Steps launch files showing run Beluga-based nodes. benchmarks scripts comparison AMCL implementations."},
{"url": "https://index.ros.org/p/beluga_benchmark", "package": "beluga_benchmark", "package_summary": "Scripts to benchmark, profile and compare beluga with other AMCL implementations.", "package_details": "Beluga Benchmark package scripts benchmark, profile compare Beluga AMCL implementations. Started View reports comparing Beluga\u2019s performance AMCL implementations. benchmark Beluga? profile Beluga?"},
{"url": "https://index.ros.org/p/beluga_example", "package": "beluga_example", "package_summary": "Example launch files for Beluga AMCL.", "package_details": "Beluga package launch files demonstrate Beluga-based nodes Beluga AMCL) external ROS bags simulation software. Examples examples easier run Beluga development containers. Run application ROS bag. ROS distributions, run: source install/setup.bash ros2 launch beluga_example perfect_odometry.launch.xml Run application simulation teleop controls. ROS distributions, separate terminals run: source install/setup.bash ros2 launch beluga_example simulation.launch.xml ros2 run teleop_twist_keyboard teleop_twist_keyboard Note [Flatland](https://flatland-simulator.readthedocs.io) simulation. Flatland source installation provisioned development containers. provision run Launch localization node manually. ROS distributions, run: ros2 launch beluga_example localization_launch.py use_composition:=True localization_params_file:=<PARAMS_PATH> localization_map:=<MAP_YAML_PATH> localization_params_file argument ommited default AMCL parameters compatible robot. RViz visualize localization output. ROS distributions, run: rviz2 $(ros2 pkg prefix --share beluga_example)/rviz/amcl.ros2.rviz Quality Service ROS subscribing output topics localization, recommend QoS settings: Topic Depth History Reliability Durability map Reliable Transient local particle_cloud effort Volatile pose Reliable Volatile"},
{"url": "https://index.ros.org/p/beluga_system_tests", "package": "beluga_system_tests", "package_summary": "System tests for beluga.", "package_details": "Beluga System Tests package system integration tests Beluga."},
{"url": "https://index.ros.org/p/beluga_vdb", "package": "beluga_vdb", "package_summary": "A beluga extension to facilitate the use of OpenVDB.", "package_details": "Beluga VDB Overview BelugaVDB library extension beluga integrates OpenVDB, enabling advanced localization capabilities. extension OpenVDB efficiently process maps pointcloud data. Mapping BelugaVDB requires level-set maps vdb format order work properly. VDB maps generated suitables party packages VDB Mapping, resulting map converted level-set map. simple post-processing code adapting map generated VDB Mapping vdb level-set map shown #include <openvdb/openvdb.h> #include <openvdb/tools/TopologyToLevelSet.h> int main() openvdb::initialize(); Create VDB file object. openvdb::io::File file(\"vdb_mapping_map.vdb\"); Open file. reads file header, grids. file.open(); Print names grid (openvdb::io::File::NameIterator nameIter file.beginName(); nameIter file.endName(); ++nameIter) std::cout \"Grid nameIter.gridName() std::endl; Retrieve shared pointer openvdb::GridBase::Ptr baseGrid; baseGrid file.readGrid(\"[0]\"); Close file file.close(); Cast generic grid pointer FloatGrid pointer. openvdb::FloatGrid::Ptr grid openvdb::gridPtrCast<openvdb::FloatGrid>(baseGrid); Transform level set openvdb::FloatGrid::Ptr grid_levelset nullptr; grid_levelset openvdb::tools::topologyToLevelSet(*grid, Save grid openvdb::io::File(\"levle_set_map.vdb\").write({grid_levelset}); vdb level-set maps generated pcd maps (created SLAM libraries FAST-LIO). simple code generate vdb level-set map pcd file shown ```cpp #include <openvdb/openvdb.h> #include <openvdb/tree/Tree.h> #include <openvdb/tools/TopologyToLevelSet.h> #include <openvdb/math/Transform.h> #include <pcl/io/pcd_io.h> #include <pcl/point_types.h> #include int main() openvdb::initialize(); pcl::PointCloud<pcl::PointXYZ>::Ptr cloud pcl::PointCloud<pcl::PointXYZ>); Open PCD file (pcl::io::loadPCDFile<pcl::PointXYZ> (\"map.pcd\", *cloud) load file PCL_ERROR read file map.pcd return std::cout \"Loaded cloud succesfuly\"<< std::endl; Create VDB grid resolution openvdb::FloatGrid::Ptr grid openvdb::FloatGrid::create(); grid->setTransform(openvdb::math::Transform::createLinearTransform(0.5)); grid->setGridClass(openvdb::GRID_LEVEL_SET); accessor coordinate-based access voxels. openvdb::FloatGrid::Accessor accessor grid->getAccessor(); Fill grid (const auto& point: *cloud) World coordinates openvdb::Vec3f world_vect(point.x, point.y, point.z); Transform index world openvdb::math::Transform transform; openvdb::math::Coord ijk transform.worldToIndexCellCentered(world_vect); File truncated lines full file"},
{"url": "https://index.ros.org/p/boost_plugin_loader", "package": "boost_plugin_loader", "package_summary": "Boost plugin loader implementation", "package_details": "Boost Plugin Loader Plugin loading library based Boost DLL Platform Status Linux (Focal, Jammy, Noble) Windows Lint (Clang-Format) Lint (CMake-Format) Lint (Clang-Tidy) Usage plugin loader names libraries search plugins. library names prefix lib/) suffix library names set ways: Set search_libraries member code Add list library names arbitrary environment variable (separated colon), set search_libraries_env member environment variable. plugin loader paths libraries plugins. paths set ways: Set search_system_folders member true. plugin loader plugins directories system environment variables LD_LIBRARY_PATH). Generally easiest approach. Set search_paths member code Add list library names arbitrary environment variable (separated colon), set search_paths_env member environment variable Defining plugin base class minimum, requirements definition base class plugin loader. optional requirement enabling plugin loader discover names plugins inheriting specific base class type. plugin base class member function static std::string getSection() defines section plugin accessible PluginLoader has_getSection classes. section unique 8-byte string associates implementations base class. plugin loader method getAvailablePlugins identify symbols library section return implementations base class. generally define export macro base class invokes EXPORT_CLASS_SECTIONED macro section test plugin base class definition Declaring plugin implementations Creating implementation plugin simple inheriting plugin base class, calling EXPORT_CLASS_SECTIONED macro correct section calling custom export macro defined plugin base class, test plugin implementations Usage Notes Multiple instances plugin varying configuration Objects loaded PluginLoader<T>::createInstance effectively singleton objects. Multiple calls PluginLoader<T>::createInstance arguments create pointer object. load multiple instances type plugin configured differently, making plugin base class factory capable creating configuring objects. ShapeFactory plugin implementation. plugins scope plugin object scope, library providing unloaded, resulting undefined behavior potential segfaults. plugin object scope long objects created boost_plugin_loader::PluginLoader<ShapeFactory> plugin_loader; Shape::Ptr shape; ShapeFactory::Ptr square_factory plugin_loader.createInstance(\"Square\"); shape square_factory.create(2.0); Library providing \"Square\" plugin unloaded `square_factory` scope std::cout \"Square area: shape->area() std::endl; segfault library providing plugin factory object generated unloaded"},
{"url": "https://index.ros.org/p/class_loader", "package": "class_loader", "package_summary": "The class_loader package is a ROS-independent package for loading plugins during runtime and the foundation of the higher level ROS \"pluginlib\" library.\n    class_loader utilizes the host operating system's runtime loader to open runtime libraries (e.g. .so/.dll files), introspect the library for exported plugin classes, and allows users to instantiate objects of these exported classes without the explicit declaration (i.e. header file) for those classes.", "package_details": "class_loader class_loader package ROS-independent package loading plugins runtime foundation higher level ROS pluginlib library. class_loader utilizes host operating system\u2019s runtime loader open runtime libraries .so/.dll/dylib files), introspect library exported plugin classes, users instantiate objects exported classes explicit declaration header file) classes. class_loader pluginlib class_loader implementation higher-level ROS package pluginlib encouraged method loading plugins ROS ecosystem. class_loader creating plugins intended non-ROS packages pluginlib exporting plugins ROS packages. Quality Declaration package claims Quality Level category, Quality Declaration details. Usage interface classes, class_loader::ClassLoader class_loader::MultiLibraryClassLoader. provide similar interfaces binds single runtime library associate multiple libraries. typical workflow Include class_loader/class_loader.h source code Instantiate class_loader::ClassLoader object passing path library open class_loader::ClassLoader loader(\"libMyLibrary.so\"); Query class exported classes interface defined base class (MyBase std::vector<std::string> classes loader.getAvailableClasses<MyBase>() Create/destroy objects exported classes for(unsigned int classes.size(); boost::shared_ptr<MyBase> plugin loader.createInstance<MyBase>(classes[c]); plugin->someMethod(); //'plugin' automatically deleted scope Destroy ClassLoader object shutdown library. Basic Workflow ClassLoader #include <class_loader/class_loader.h> #include \"MyBase.h\" //Defines class MyBase int main() class_loader::ClassLoader loader(\"libMyLibrary.so\"); std::vector<std::string> classes loader.getAvailableClasses<MyBase>(); for(unsigned int classes.size(); boost::shared_ptr<MyBase> plugin loader.createInstance<MyBase>(classes[c]); plugin->someMethod(); Visit class_loader API documentation complete list main components."},
{"url": "https://index.ros.org/p/control_box_rst", "package": "control_box_rst", "package_summary": "The control_box_rst package provides C++ libraries for predictive control, \n               direct optimal control, optimization and simulation.", "package_details": "Control-Box RST Status ROS package: ROS Melodic (melodic-devel): Documentation Build installation instructions documentation project wiki. Authors Christoph R\u00f6smann christoph.roesmann@tu-dortmund.de Maximilian Kr\u00e4mer maximilian.kraemer@tu-dortmund.de Citing Software lot time effort development, cite publications software published work. Standard MPC Hypergraph R\u00f6smann, Kr\u00e4mer, Makarow, Hoffmann und Bertram: Exploiting Sparse Structures Nonlinear Model Predictive Control Hypergraphs, IEEE/ASME International Conference Advanced Intelligent Mechatronics (AIM), Zealand, July Time-Optimal MPC Hypergraph R\u00f6smann: Time-optimal nonlinear model predictive control, Direct transcription methods variable discretization structural sparsity exploitation. Dissertation, Technische Universit\u00e4t Dortmund, Oct. Uniform Grid Time-Optimal MPC R\u00f6smann, Hoffmann und Bertram: Timed-Elastic-Bands Time-Optimal Point-to-Point Nonlinear Model Predictive Control, European Control Conference (ECC), Austria, July R\u00f6smann, Hoffman und Bertram: Convergence Analysis Time-Optimal Model Predictive Control Limited Computational Resources, European Control Conference (ECC), Denmark, June Non-Uniform Grid Time-Optimal MPC R\u00f6smann, Makarow, Hoffmann und Bertram: Sparse Shooting Adaptive Temporal Resolution Time-Optimal Model Predictive Control, IEEE Conference Decision Control (CDC), Australia, December R\u00f6smann, Makarow, Hoffmann und Bertram: Time-Optimal Nonlinear Model Predictive Control Minimal Control Interventions, IEEE Conference Control Technology Applications (CCTA), Hawai\u2019i, August License Copyright Dortmund Institute Control Theory Systems Engineering. rights reserved. program free software: redistribute and/or modify terms GNU General Public License published Free Software Foundation, version License, option) version. program distributed hope WARRANTY; implied warranty MERCHANTABILITY FITNESS PURPOSE. GNU General Public License details. received copy GNU General Public License program. https://www.gnu.org/licenses/. third-party dependencies included licensed terms: Eigen, MPL2 license, http://eigen.tuxfamily.org Optional included third-party dependencies (selected configuration) gRPC, Apache License https://grpc.io protobuf, parts BSD, https://developers.google.com/protocol-buffers qcustomplot, GPLv3, https://www.qcustomplot.com googletest, BSD-3-Clause, https://github.com/google/googletest yaml-cpp, MIT License, https://github.com/jbeder/yaml-cpp Optional third-party dependencies (optional linking) Ipopt, EPL https://github.com/coin-or/Ipopt OSQP, Apache https://osqp.org/ licensing options https://www.qt.io/"},
{"url": "https://index.ros.org/p/control_toolbox", "package": "control_toolbox", "package_summary": "The control toolbox contains modules that are useful across all controllers.", "package_details": "control_toolbox package classes filter plugins writing controllers. documentation ros2_control release infos index.ros.org. Contributing open-source project, contributor, background experience. Pick review create project, read contributing guide information started. happy contribution. Build status ROS2 Distro Branch Build status Documentation Package build Rolling master API Kilted kilted API Jazzy jazzy API Humble humble API Acknowledgements project received major contributions companies institutions listed control.ros.org"},
{"url": "https://index.ros.org/p/create_description", "package": "create_description", "package_summary": "Robot URDF descriptions for create_robot", "package_details": "create_description place URDF models meshes iRobot\u2019s Create Sources Original URDF Create mesh: https://github.com/turtlebot/turtlebot_create Original Create mesh: https://github.com/goncabrita/roomba_robot"},
{"url": "https://index.ros.org/p/create_driver", "package": "create_driver", "package_summary": "ROS driver for iRobot's Create and Roomba platforms, based on libcreate", "package_details": "create_driver ROS driver iRobot\u2019s Create"},
{"url": "https://index.ros.org/p/dataspeed_can_msg_filters", "package": "dataspeed_can_msg_filters", "package_summary": "Time synchronize multiple CAN messages to get a single callback", "package_details": "dataspeed_can_filters Time synchronize multiple messages single callback Similar ROS ApproximateTime message synchronization policy dbw_ford_can/DbwNode usage"},
{"url": "https://index.ros.org/p/dataspeed_can_tools", "package": "dataspeed_can_tools", "package_summary": "CAN bus introspection", "package_details": "===can_node=== START: node.cpp Create CanDriver.cpp instance CanDriver.cpp CHANGE: Add Sync Time support Create CanUsb.cpp instance creates reference data stream callback USB data read device. Set CanUsb callback CanDriver.cpp::recvDevice bitrate error_topic information channel fetched individually vector. bitrate[0] modified launch parameter \u201cbitrate_1\u201d, filter_masks matches. Open driver (run CanUsb.cpp::open) Read version number channel count channel, print filter masks, filter matches console channel, attempt set bitrates, print console channel bitrates set successfully, set ROS pub/subs: channel nonzero bitrate, create node (can_bus_#) Create subscriber (can_tx) receive messages send device Create publisher (can_rx) send messages device sends data Create error publisher (can_err) argument set data received device, publish can_msgs::Frame channel can_msgs standard message type: http://docs.ros.org/kinetic/api/can_msgs/html/msg/Frame.html unique data length code (dlc), data bytes) ===dbc_node=== START: dbc_node.cpp Create Node NodeHandle dbc_file parameter; doesn\u2019t exist, exit. Create CanExtractor.cpp object, passing dbc_file Create subscriber can_rx published can_node) can_msgs::Frame message received, extended msg) put RosCanMsgStruct Run CanExtractor::getMessage(RosCanMsgStruct), returns true/false true, run CanExtractor::initPublishers(RosCanMsgStruct, NodeHandle) Run CanExtractor::pubMessage(can_msgs::Frame), posts data ROS topic CanExtractor.cpp dbc_ DBCIterator.cpp object msgs_ map message IDs RosCanMsgStructs getMessage(RosCanMsgStruct) Check RosCanMsgStruct msgs_ map. set RosCanMsgStruct reference stored return false message type processed). isn\u2019t, iterate dbc_, searching matching DBCMessage::Message create RosCanSigStruct based append RosCanMsgStruct store RosCanMsgStruct return result RosCanMsgStruct, message RosCanMsgStruct can_msgs::Frame publisher sends message received, vector RosCanSigStructs, publisher sends individual fields message received. initPublishers(RosCanMsgStruct, NodeHandle) Creates publisher message (can_msgs::Frame) attaches RosCanMsgStruct Creates publishers signal registerCanSignalPublisher(RosCanSigStruct NodeHandle) registerCanSignalPublisher(RosCanSigStruct NodeHandle) Creates std_msgs::Int/Float64/Bool publisher (signed/unsigned/size based RosCanSigStruct) Attaches publisher RosCanSigStruct pubMessage() Retrieve RosCanMsgStruct msgs_ map based message messageID isn\u2019t msgs_ map, return. 8-byte integer (uint64) stores message data. CHANGE: Loop list signals signal multiplexor enum MULTIPLEXOR. Save break set signal, data retrieved based start bit length (signed unsigned). CHANGE: signal, multiplexor conditional check signal\u2019s multiplexor enum MULTIPLEXED; check multiplexNum equal multiplexor loop publish values match. DBCIterator.cpp messageList: Vector DBCMessage.Message objects init CHANGE: Support multiple file streams Open file stream DBCMessage::Message overrides operator, stream process fails stream errors clear loop exit) add message messageList. DBCIterator iterates file\u2019s messages, DBCMessage iterates message\u2019s signals DBCMessage.cpp line start throw error parent iterator clear line. fetch data: iterate lines; stream creating valid signal objects,\u00a0\u00bb create DbcSignal.cpp objects. DBCSignal.cpp line, cleanup) line empty start throw error parent iterator finish parsing signals. fetch signal data: Multiplexor blank (meaning appears message), case Fieldname Multiplexor blank, meaning multiplexor numbers, meaning signal appears message multiplexor equal multiplexed signal Byteorder Motorola (big-endian/network) Intel (little-endian/math) Signed (unsigned (signed phys digits factor offset ===DBC License: EPAS EXPIRED MAB MUX MAB FEAT_BASE_TRIALS_USED MAB DATE1 MAB File truncated lines full file"},
{"url": "https://index.ros.org/p/depthai", "package": "depthai", "package_summary": "DepthAI core is a C++ library which comes with firmware and an API to interact with OAK Platform", "package_details": "DepthAI Library Core library Documentation Documentation Luxonis DepthAI API Disclaimer DepthAI library doesn\u2019t provide API stability guarantees. care properly deprecate functions, breaking. expect provide API stability version onwards. Dependencies CMake compiler [optional] OpenCV (required building examples) [optional] PCL (required point cloud install OpenCV: MacOS: brew install opencv Linux: sudo apt install libopencv-dev install PCL: MacOS: brew install pcl Linux: sudo apt install libpcl-dev Linux distributions based RPMs, install perl-core required OpenSSL dependency. sudo yum install perl-core option disable CURL support setting DEPTHAI_ENABLE_CURL=OFF configuring CMake. cmake -Bbuild -D'DEPTHAI_ENABLE_CURL=OFF' Building submodules updated git submodule update --init --recursive configure build cmake -Bbuild cmake --build build speed build times, cmake --build build --parallel [num CPU cores] (CMake older versions Linux/macOS: cmake --build build -j[num CPU cores], MSVC: cmake --build build /MP[num CPU cores] CMake commands error CMake Error: source directory exist. replace argument Dynamic library build dynamic version library configure option added cmake -Bbuild -D'BUILD_SHARED_LIBS=ON' cmake --build build Android Android supported extent actively pursued tested. PRs improvements Steps: Install Android NDK Android Studio). Set NDK path: export ANDROID_HOME=$HOME/.local/lib/Android export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools export NDK=$ANDROID_HOME/ndk/23.1.7779620/ Check version Ensure version cmake (apt version outdated, install snap install cmake \u2013classic) Run cmake, set ABI Platform needed: cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-25 cmake --build build Running examples build examples configure option added cmake -Bbuild -D'DEPTHAI_BUILD_EXAMPLES=ON' cmake --build build navigate build/examples folder run preferred build/examples ./MobileNet/rgb_mobilenet File truncated lines full file"},
{"url": "https://index.ros.org/p/depthimage_to_laserscan", "package": "depthimage_to_laserscan", "package_summary": "depthimage_to_laserscan", "package_details": "depthimage_to_laserscan ROS driver convert depth image laser scan navigation localization. Published Topics scan (sensor_msgs/msg/LaserScan) laser scan computed depth image. Subscribed Topics depth_camera_info (sensor_msgs/msg/CameraInfo) camera info. depth (sensor_msgs/msg/Image) depth image. Parameters scan_time (float) time seconds scans report consumer LaserScan message. set published message. Defaults seconds. range_min (float) minimum distance meters projected point Points closer discarded. Defaults meters. range_max (float) maximum distance meters projected point Points discarded. Defaults meters. scan_height (int) row depth image laser projection. Defaults output_frame (string) frame publish LaserScan message. Defaults \u201ccamera_depth_frame\u201d."},
{"url": "https://index.ros.org/p/diagnostic_aggregator", "package": "diagnostic_aggregator", "package_summary": "diagnostic_aggregator", "package_details": "General information repository, including legal information issues/limitations, README.md repository root. diagnostic_aggregator package package aggregator_node. listens diagnostic_msgs/DiagnosticArray messages /diagnostics topic aggregates published /diagnostics_agg topic. case package aggregate diagnostics robot. Aggregation means diagnostics robot grouped aspects, location robot, type, easily part robot causing problems. robot arms legs. robot side. robot camera sensors, left front diagnostic sources: /arms/left/motor /arms/right/motor /legs/left/motor /legs/right/motor /sensors/left/cam /sensors/right/cam /sensors/front/cam /sensors/rear/cam group diagnostics sensors motors left side robot side robot achieve creating configuration file example_analyzers.yaml): analyzers: ros__parameters: path: Aggregation arms: type: diagnostic_aggregator/GenericAnalyzer path: Arms startswith: '/arms' legs: type: diagnostic_aggregator/GenericAnalyzer path: Legs startswith: '/legs' sensors: type: diagnostic_aggregator/GenericAnalyzer path: Sensors startswith: '/sensors' motors: type: diagnostic_aggregator/GenericAnalyzer path: Motors '/motor' topology: type: 'diagnostic_aggregator/AnalyzerGroup' path: Topology analyzers: left: type: diagnostic_aggregator/GenericAnalyzer path: Left '/left' type: diagnostic_aggregator/GenericAnalyzer path: '/right' Based configuration, rqt_robot_monitor display diagnostics information well-arranged manner Note display highest state group glance part robot working properly. image, left side robot working properly, left camera ERROR state. Analyzers aggregator_node load analyzers process diagnostics data. analyzer plugin inherits diagnostic_aggregator::Analyzer class. Analyzers implemented packages depend pluginlib diagnostic_aggregator. diagnostic_aggregator::Analyzer class purely virtual derived classes implement methods: init() Analyzer initialized base path namespace match() Returns true analyzer interested status message analyze() Returns true analyzer analyze status message report() Returns results analysis vector status messages getPath() Returns prefix path analyzer \u201c/robot/motors/\u201d) getName() Returns analyzer \u201cMotors\u201d) Analyzers choose error level output. error level output highest error level input. analyzers responsible setting item output correctly. aggregator_node Configuration aggregator_node configured launch time yaml pub_rate: Optional, defaults base_path: \u2018PRE\u2019 Optional, defaults File truncated lines full file"},
{"url": "https://index.ros.org/p/diagnostic_common_diagnostics", "package": "diagnostic_common_diagnostics", "package_summary": "diagnostic_common_diagnostics", "package_details": "General information repository, including legal information, build instructions issues/limitations, README.md repository root. diagnostic_common_diagnostics package package generic nodes monitor Linux host. NTP monitor ported ROS2. Nodes cpu_monitor.py cpu_monitor module users monitor CPU usage system real-time. publishes usage percentage diagnostic message. node \u201ccpu_monitor_\u201d hostname. args: warning_percentage: CPU usage warning_percentage, WARN status publised. window: maximum length collections.deque queuing CPU readings. Published Topics /diagnostics diagnostic_msgs/DiagnosticArray diagnostics information. Parameters warning_percentage (default: warning percentage threshold. window (default: Length CPU readings queue. ntp_monitor.py Runs \u2018ntpdate\u2019 check system clock synchronized NTP server. offset smaller offset-tolerance, status published. offset larger configured offset-tolerance, WARN status published, bigger error-offset-tolerance, ERROR status published. error running ntpdate, ERROR status published. Published Topics /diagnostics diagnostic_msgs/DiagnosticArray diagnostics information. Parameters ntp_hostname (default: \u201cpool.ntp.org\u201d) Hostname NTP server. offset-tolerance\u201d (default: Allowed offset NTP host. warning. error-offset-tolerance (default: offset NTP host exceeds reported error warning. self_offset-tolerance (default: Offset diag-hostname Computer diagnostics output no-self-test (default: True) Disable test. hd_monitor.py Runs \u2018shutil.disk_usage\u2019 check space left device. default parameters, thresholds free space left, status published. WARN status published, ERROR status published. Published Topics /diagnostics diagnostic_msgs/DiagnosticArray diagnostics information. Parameters path (default: home directory Path check remaining space. free_percent_low (default: Warning threshold. free_percent_crit (default: Error threshold. ram_monitor.py ram_monitor module users monitor RAM usage system real-time. publishes usage percentage diagnostic message. node \u201cram_monitor_\u201d hostname. args: warning_percentage: RAM usage warning_percentage, WARN status published. window: maximum length collections.deque queuing RAM readings. File truncated lines full file"},
{"url": "https://index.ros.org/p/diagnostic_remote_logging", "package": "diagnostic_remote_logging", "package_summary": "diagnostic_remote_logging", "package_details": "General information repository, including legal information issues/limitations, README.md repository root. diagnostic_remote_logging package package influx node, listens diagnostic messages integrates InfluxDB monitoring visualization. Specifically, subscribes diagnostic_msgs/DiagnosticArray messages /diagnostics_agg topic diagnostic_msgs/DiagnosticStatus messages /diagnostics_toplevel_state topic. node processes messages, sending statistics levels InfluxDB database, enabling tools Grafana. support InfluxDB support older versions proxy Telegraf. section Telegraf setup. Node Configuration send data InfluxDB ways: database proxy Telegraf. methods valid, proxy generally recommended due benefits: Efficient Data Transmission: Telegraf aggregates multiple measurements sends single request, reducing bandwidth usage minimizing database load. Enhanced Reliability: buffering case connection issues, ensuring data lost. Comprehensive Metric Collection: Telegraf send additional system metrics RAM, CPU, network usage) minimal configuration. Data Filtering Transformation: Supports preprocessing, filtering transforming data, sending InfluxDB. method, ensure running instance InfluxDB. simplest set InfluxDB Cloud. Parameters influx node supports parameters. configuration: /influx: ros__parameters: connection: url: http://localhost:8086/api/v2/write token: bucket: organization: send: diagnostics: true period: top_level_state: true send.diagnostics: Enables disables subscription /diagnostics topic. send.period: Specifies interval seconds sending diagnostic data InfluxDB. period, incoming /diagnostics messages collected transmitted batch InfluxDB. send.top_level_state: Enables disables subscription /diagnostics_toplevel_state topic. InfluxDB Configuration Set parameters configuration match InfluxDB instance: connection.url: URL InfluxDB write API endpoint. connection.token: InfluxDB authentication token. connection.bucket: target bucket InfluxDB. connection.organization: InfluxDB organization. Starting node Afterward configurations set run node command: ros2 run diagnostic_remote_logging influx --ros-args --params-file <path_to_yaml_file> Telegraf Proxy configure Telegraf proxy InfluxDB: Ensure Telegraf set send data InfluxDB instance configuration file (/etc/telegraf/telegraf.conf). Check link Add telegraf configuration file enable InfluxDB listener: [[inputs.influxdb_v2_listener]] service_address Update influx node configuration point URL. Telegraf running host influx node, default http://localhost:8086/api/v2/write work. Leave parameters empty influx node configuration Telegraf proxy: connection.token connection.bucket connection.organization run node command: ros2 run diagnostic_remote_logging influx --ros-args --params-file <path_to_yaml_file>"},
{"url": "https://index.ros.org/p/diagnostic_updater", "package": "diagnostic_updater", "package_summary": "diagnostic_updater contains tools for easily updating diagnostics. it is commonly used in device drivers to keep track of the status of output topics, device status, etc.", "package_details": "General information repository, including legal information, build instructions issues/limitations, README.md repository root. diagnostic_updater package package implement collection diagnostics information. Overview update state sensors actors robot. Common tasks include Publish status sensor topic device driver Report hardware device closed Send error bounds temperature) file example.cpp diagnostic_updater. Python API main classes DiagnosticStatusWrapper class create diagnostic message. simplifies creation message providing methods set level, message values. possibility merge multiple DiagnosticStatusWrapper Updater class collect diagnostic messages publish DiagnosedPublisher ROS publisher included diagnostics. diagnoses frequency published messages. Parameters Parameters diagnostic_updater.period (double, default: Sets publishing period seconds) diagnostic updater. overrides set constructor diagnostic_updater. diagnostic_updater.use_fqn (bool, default: false) true, diagnostics published fully qualified ROS node /ns/node_name) node_name."},
{"url": "https://index.ros.org/p/self_test", "package": "self_test", "package_summary": "self_test", "package_details": "General information repository, including legal information, build instructions issues/limitations, README.md repository root. self_test package package implement tests ROS packages. Overview publishes service node call perform test. performs multiple user-defined checks node reports results. file selftest_example.cpp self_test package. call ros2 run self_test run_selftest output: [INFO] test FAILED device [INFO] Pretest [INFO] Pretest completed successfully. [INFO] Lookup [INFO] Lookup successful [INFO] Exception generating test [ERROR] Uncaught exception: threw exception [INFO] generating test [INFO] successfully changed [INFO] [INFO] testing test [INFO] observed change API TestRunner class main class tests. method _add add specific test callback methods. TestRunner advertises relevant self_test service calls aforemntioned callbacks requested. Nodes run_selftest node call test service."},
{"url": "https://index.ros.org/p/dynamixel_workbench_toolbox", "package": "dynamixel_workbench_toolbox", "package_summary": "This package is composed of 'dynamixel_item', 'dynamixel_tool', 'dynamixel_driver' and 'dynamixel_workbench' class.\n    The 'dynamixel_item' is saved as control table item and information of DYNAMIXEL.\n    The 'dynamixel_tool' class loads its by model number of DYNAMIXEL.\n    The 'dynamixel_driver' class includes wraped function used in DYNAMIXEL SDK.\n    The 'dynamixel_workbench' class make simple to use DYNAMIXEL.", "package_details": "run dynamixel_workbench linux ROS Downloads DynamixelSDK git clone https://github.com/ROBOTIS-GIT/DynamixelSDK Build DynamixelSDK http://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_sdk/library_setup/cpp_linux/#build-the-library Downloads Dynamixel-Workbench git clone https://github.com/ROBOTIS-GIT/dynamixel-workbench Build Dynamixel-Workbench Run examples ${YOUR_DOWNLOAD_PATH}/dynamixel_workbench/dynamixel_workbench_toolbox/examples mkdir build build cmake sudo chmod a+rw ${USB_PORT} ./monitor"},
{"url": "https://index.ros.org/p/eigenpy", "package": "eigenpy", "package_summary": "Bindings between Numpy and Eigen using Boost.Python", "package_details": "EigenPy Versatile efficient Python bindings Numpy Eigen EigenPy open-source framework binding famous Eigen library Python Boost.Python. EigenPy full memory sharing Numpy Eigen, avoiding memory allocation full support Eigen::Ref avoiding memory allocation full support Eigen::Tensor module exposition Geometry module Eigen easy code prototyping standard matrix decomposion routines Eigen Cholesky, SVD decompositions full support SWIG objects full support runtime declaration Numpy scalar types extended API expose STL types Boost equivalents: optional types, std::pair, maps, variants\u2026 full support vectorization Python hold objects properly aligned memory) Installation installation EigenPy computer easy Linux/BSD, Mac Windows environments. Conda simply simple line: conda install eigenpy conda-forge Ubuntu easily install EigenPy binaries. Add robotpkg apt repository Register authentication certificate robotpkg: curl http://robotpkg.openrobots.org/packages/debian/robotpkg.asc sudo tee /etc/apt/keyrings/robotpkg.asc Add robotpkg source repository apt: sudo tee /etc/apt/sources.list.d/robotpkg.list <<EOF deb [arch=amd64 signed-by=/etc/apt/keyrings/robotpkg.asc] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release robotpkg EOF run apt update fetch package descriptions: sudo apt update Install EigenPy installation EigenPy dependencies line: sudo apt install robotpkg-py35-eigenpy replaced Python work robotpkg-py36-eigenpy work Python Mac installation EigenPy Mac HomeBrew. register tap software repository. brew tap gepetto/homebrew-gepetto install EigenPy Python brew install eigenpy Docker docker run ghcr.io/stack-of-tasks/eigenpy:devel Build Build instruction Credits people involved development EigenPy: Justin Carpentier (Inria): main developer manager project Nicolas Mansard (LAAS-CNRS): initial project instructor Wolfgang Merkt (University Edinburgh): ROS integration support Sean Yen (Microsoft): Windows integration Lo\u00efc Est\u00e8ve (Inria): Conda integration File truncated lines full file"},
{"url": "https://index.ros.org/p/eiquadprog", "package": "eiquadprog", "package_summary": "Eiquadprog a QP solver using active sets", "package_details": "eiquadprog repo implementations algorithm Goldfarb Idnani solution (convex) Quadratic Programming problem means dual method. problem form: min CE^T CI^T implementations: eiquadprog.hpp: original implementation eiquadprog-fast.hpp: improved version employing wrapper, avoiding dynamic memory allocation eiquadprog-rt.hpp: similar employs fixed-size Eigen vectors. requires problem dimensions compile time recommended small problems. refer unit tests examples usage. Authors Eiquadprog created LAAS-CNRS Gabriele Buondonno, based parts TSID Andrea Del Prete. work based previous libraries: QuadProg++, Copyright Luca Gaspero, MIT License. uQuadProg, Copyright Angelo Furfaro, LGPL eiquadprog.hpp, Copyright Benjamin Stephens, GPL quadprog++ Copyright Gael Guennebaud, LGPL"},
{"url": "https://index.ros.org/p/fields2cover", "package": "fields2cover", "package_summary": "Robust and efficient coverage paths for autonomous agricultural vehicles.\n    A modular and extensible Coverage Path Planning library", "package_details": "Fields2Cover Robust efficient coverage paths autonomous agricultural vehicles {.align-center} extended documentation coverage path planning problem (CPP) aims create path cover area vehicles. CPP application cleaning robots, surveillance, de-mining agriculture. application requirements. cleaning robots environment unknown objective improve probability cover area. hand, CPP agriculture area cover, coverage complete. Fields2Cover library algorithms plan coverage path kind fields: {.align-center width=\u201d500px\u201d} development project focused offline planning agricultural vehicles, library accepts pull requests types coverage planners. version version Fields2Cover support non-convex fields fields obstacles!! huge request community finally quick list additions library: Decomposition algorithms: Trapezoidal Boustrophedon decomposition. algorithms split concave field convex sub-fields. Route planner: Route optimizer OR-tools order swaths, pattern. Support point start points route. Path planner: Support routes route optimizer. Swath generator: Speed improvement swath generation. cost function: [NSwathModified]{.title-ref}. approximation compute number swaths, reducing computation costs. bugs fixed. Citing cite paper (https://ieeexplore.ieee.org/document/10050562) Fields2Cover research: @article{Mier_Fields2Cover_An_open-source_2023, author={Mier, Gonzalo Valente, Jo\u00e3o Bruin, Sytze}, journal={IEEE Robotics Automation Letters}, title={Fields2Cover: Open-Source Coverage Path Planning Library Unmanned Agricultural Vehicles}, year={2023}, volume={8}, number={4}, pages={2166-2172}, doi={10.1109/LRA.2023.3248439} CPP papers code implementation. Due research topic slow implement algorithm compare Fields2Cover flexible structure algorithms compare developer research topic easily. Installation Fields2Cover package tested Ubuntu able run operative systems, open issue/PR added guide Requirements Linux File truncated lines full file"},
{"url": "https://index.ros.org/p/filters", "package": "filters", "package_summary": "This library provides a standardized interface for processing data as a sequence\n    of filters.  This package contains a base class upon which to build specific implementations\n    as well as an interface which dynamically loads filters based on runtime parameters.", "package_details": "Filters Usage ament_cmake recommended approach link filters project, filters::realtime_circular_buffer target. find_package(filters CONFIG REQUIRED) add_library(my_library) library stuff target_link_libraries(my_library PUBLIC filters::realtime_circular_buffer) information ament_cmake, ament_cmake tutorial. Filters creates CMake targets, including: filters::realtime_circular_buffer filters::filter_chain filters::mean filters::params filters::increment filters::median filters::transfer_function recommended link libraries needed. Linking filters::filter_base pulls libraries include directories targets classes extend FilterBase. writing filter."},
{"url": "https://index.ros.org/p/find_object_2d", "package": "find_object_2d", "package_summary": "The find_object_2d package", "package_details": "find-object Linux Windows </tbody> </table> Standalone Find-Object project, visit [home page](http://introlab.github.io/find-object/) information. ROS1 Install Binaries: ```bash sudo apt-get install ros-$ROS_DISTRO-find-object-2d Source: include `xfeatures2d` and/or `nonfree` modules OpenCV, avoid conflicts `cv_bridge`, build OpenCV version `cv_bridge`. Install `/usr/local` (default). ```bash ~/catkin_ws git clone https://github.com/introlab/find-object.git src/find_object_2d catkin_make Run ```bash roscore Launch preferred usb camera driver rosrun uvc_camera uvc_camera_node rosrun find_object_2d find_object_2d image:=image_raw [find_object_2d](http://wiki.ros.org/find_object_2d) information. ROS2 Install Binaries: ```bash Source: ```bash ~/ros2_ws git clone https://github.com/introlab/find-object.git src/find_object_2d colcon build Run ```bash Launch preferred usb camera driver ros2 launch realsense2_camera rs_launch.py Launch find_object_2d node: ros2 launch find_object_2d find_object_2d.launch.py image:=/camera/color/image_raw Draw objects detected image: ros2 run find_object_2d print_objects_detected --ros-args image:=/camera/color/image_raw Pose RGB-D camera required. Realsense camera: ```bash Launch preferred usb camera driver ros2 launch realsense2_camera rs_launch.py align_depth.enable:=true Launch find_object_2d node: ros2 launch find_object_2d find_object_3d.launch.py rgb_topic:=/camera/color/image_raw depth_topic:=/camera/aligned_depth_to_color/image_raw camera_info_topic:=/camera/color/camera_info Show pose camera frame: ros2 run find_object_2d tf_example [find_object_2d](http://wiki.ros.org/find_object_2d) information parameters/topics ROS1 ROS2 versions)."},
{"url": "https://index.ros.org/p/flexbe_app", "package": "flexbe_app", "package_summary": "flexbe_app provides a user interface (editor + runtime control) for the FlexBE behavior engine.", "package_details": "FlexBE App User interface (editor runtime control) FlexBE behavior engine. Humble Installation Clone repos ROS workspace: git clone https://github.com/FlexBE/flexbe_behavior_engine.git present git clone https://github.com/FlexBE/flexbe_app.git branches consistent git checkout humble) Install required dependencies. rosdep update rosdep install --from-paths src --ignore-src Build workspace: colcon build sourcing setup required, download required nwjs binaries run FlexBE App: ros2 run flexbe_app nwjs_install Note: installed install folder. install folder deleted, nwjs binaries reinstalled script. Workspace order create prepare repository behavior development, run script ROS workspace pass project identifier: ros2 run flexbe_widget create_repo [your_project_name] initialize local git repository correct workspace structure push desired remote location. build workspace Usage desired, run command create shortcut application menu: ros2 run flexbe_app shortcut create ros2 run flexbe_app shortcut remove remove shortcut command run FlexBE App developing behaviors, executing ros2 run flexbe_app run_app --offline Omitting --offline arg App connect ROS. manually connect/disconnect App Configuration view. launch file run FlexBE\u2019s operator control station, FlexBE requires operator machine controlling behavior execution: ros2 launch flexbe_app flexbe_ocs.launch.py ros2 launch flexbe_onboard behavior_onboard.launch.py counterpart expected run robot launch file run local behavior execution: ros2 launch flexbe_app flexbe_full.launch.py note state behavior packages detected changed breaks direct compatibility. Follow instructions required Behavior packages converted automatically FlexBE App. State packages package state package FlexBE package.xml declares export flexbe_states: <package> <export> <flexbe_states </export> </package> expected provide Python class definitions Developing Basic States. flexbe_states Behavior packages behavior package code manifest files generated FlexBE App. modify manually. behavior package identified export statement package.xml: <package> <export> <flexbe_behaviors </export> </package> File truncated lines full file"},
{"url": "https://index.ros.org/p/flir_camera_description", "package": "flir_camera_description", "package_summary": "FLIR camera Description package", "package_details": "flir_camera_description package urdf files meshes FLIR cameras. Install package ROS package, launch demo: ros2 launch flir_camera_description demo.launch.py ros2 run rviz2 rviz2 rviz, add \u201cRobotModel\u201d set topic \u201crobot_description\u201d. License: Licensed BSD License. Copyright Carnegie Mellon University. rights reserved. Copyright Clearpath Robotics, rights reserved."},
{"url": "https://index.ros.org/p/flir_camera_msgs", "package": "flir_camera_msgs", "package_summary": "messages related to flir camera driver", "package_details": "messages related FLIR camera drivers package defines messages meta data control messages. external exposure control FLIR spinnaker camera driver."},
{"url": "https://index.ros.org/p/spinnaker_camera_driver", "package": "spinnaker_camera_driver", "package_summary": "ROS2 driver for flir spinnaker sdk", "package_details": "Spinnaker ROS2 Camera Driver {.toctree maxdepth=\u201d2\u201d} package ROS2 driver Teledyne/FLIR cameras Spinnaker SDK. hardware-synchronized cameras Spinnaker synchronized camera driver link flir driver repository. NOTE: driver written supported FLIR. Tested Configurations Cameras cameras successfully driver: Blackfly (USB3, GigE) Blackfly (GigE) Grashopper (USB3) Oryx (reported working) Chameleon (USB3, tested firmware FLIR (GigE) Note: cameras work, report ideally submit pull request camera config file created. Platforms ROS2 Galactic Ubuntu LTS longer actively tested) ROS2 Humble/Iron Ubuntu LTS ROS2 Rolling/Jazzy Ubuntu LTS Spinnaker versions work continuous integration builds install driver installing Spinnaker SDK, installing Spinnaker SDK recommended installation USB kernel configuration modified needed suitable access permissions granted (udev rules). choose Spinnaker SDK, run linux setup script running ros2 run spinnaker_camera_driver linux_setup_flir perform required setup steps manually, Setting Linux Spinnaker SDK. setup steps, ROS driver detect camera. install Spinnaker SDK spinview tool), follow manual setup steps mentioned earlier. Installing packages architectures ros distributions simply install apt package: sudo apt install ros-${ROS_DISTRO}-spinnaker-camera-driver package bring set Spinnaker SDK libraries, don\u2019t necessarily install SDK, recommended, Building source Install FLIR spinnaker driver. skip part, driver attempt download Spinnaker SDK automatically obtain header files libraries. Prepare ROS2 driver build: ROS2 environment sourced: source /opt/ros/<my_ros_distro>/setup.bash Create workspace clone repo: mkdir ~/ws/src ~/ws/src git clone --branch humble-devel https://github.com/ros-drivers/flir_camera_driver automatically install packages `flir_camera_driver` packages depends run top workspace: rosdep install --from-paths src --ignore-src Build driver source workspace: colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_EXPORT_COMPILE_COMMANDS=ON install/setup.bash Topics Published: ~/image_raw: camera image (image_transport) ~/image_raw/camera_info: camera calibration File truncated lines full file"},
{"url": "https://index.ros.org/p/spinnaker_synchronized_camera_driver", "package": "spinnaker_synchronized_camera_driver", "package_summary": "ROS2 driver for synchronized flir cameras using the Spinnaker SDK", "package_details": "Spinnaker ROS2 Synchronized Camera Driver package driver specifically hardware synchronized cameras Teledyne/FLIR work Spinnaker SDK. main difference running instances unsynchronized camera driver driver assign identical header time stamps frames generated synchronization pulse. NOTE: driver written supported FLIR. Tested Configurations Cameras cameras driver: Blackfly (USB3) Blackfly (GigE) Platforms ROS2 Galactic Ubuntu LTS longer actively tested) ROS2 Humble/Iron/Rolling Ubuntu LTS Spinnaker versions work continuous integration builds install installation analogous unsynchronized spinnaker camera driver. recommended cameras working SpinView, single-camera driver individually proceeding synchronized setup. synchronized camera server works instantiating number individual camera servers exposure controllers. camera server fully configurable parameters listed spinnaker camera driver. exposure controller parameter set. types controllers: master controllers followers. master controllers regulate brightness camera controlling, follower controllers set exposure parameters camera controlling based exposure parameters master controller follow. parameters involved setup tricky. recommended start follower_example.launch.py stereo camera VIO, master_example.launch.py running cameras individual exposure control. Topics Published: ~/<camera_name>/image_raw: synchronized camera image ~/<camera_name>/camera_info: synchronized camera calibration messages ~/<camera_name>/meta: synchronized meta data exposure time gain Synchronized server parameters cameras (list strings): names cameras. Default: empty list. exposure_controllers (list strings): names exposure controllers. List length list camera names. Camera server parameters list parameters, spinnaker camera driver. parameters exposed <camera_name>.parameter. Exposure controller parameters Master exposure controller: brightness target (int): average image brightness accomplish. range Default: brightness_tolerance (int): actual brightness deviate brightness_target control parameters updated. Default: exposure_parameter (string): ROS parameter exposure time accessible single camera driver. match ros parameter Spinnaker node controls exposure time, set camera .yaml config file. Default: exposure_time. gain_parameter (string): ROS parameter controlling camera gain. camera .yaml config file. Default: gain. File truncated lines full file"},
{"url": "https://index.ros.org/p/fmi_adapter", "package": "fmi_adapter", "package_summary": "Wraps FMUs for co-simulation", "package_details": "General information repository, including legal information, build instructions issues/limitations, README.md repository root. fmi_adapter package fmi_adapter small ROS package wrapping functional mockup units (FMUs) co-simulation physical models ROS nodes. FMUs defined FMI standard. package supports co-simulation FMUs FMI standard FMUs created variety modeling simulation tools. Examples Dymola, MATLAB/Simulink, OpenModelica, SimulationX, Wolfram System Modeler. Technically, co-simulation FMU zip file suffix .fmu) physical model solver shared library XML file describing inputs, outputs parameters model details solver configuration. addition, zip file source code model solver programming language. fmi_adapter_node fmi_adapter ROS node fmi_adapter_node (class FMIAdapterNode derived LifecycleNode), takes FMU creates subscribers publishers input output variables FMU, runs FMU\u2019s solver user-definable update period. approach illustrated diagram. fmi_adapter_node searches counterparts FMU parameter variable ROS node parameters initializes FMU correspondingly. purpose, package provide launch file argument fmu_path. Simply call ros2 launch fmi_adapter fmi_adapter_node.launch.py fmu_path:=[PathToTheFMUFile] README.md fmi_adapter_examples package step-by-step description fmi_adapter_node damped pendulum model FMU. fmi_adapter library fmi_adapter library convenience functions based common ROS types load FMU runtime, retrieve input, output, parameter names, set timestamped input values, run FMU\u2019s numeric solver, query resulting output. functions class FMIAdapter. Instances class integrated application-specific ROS nodes libraries illustrated architecture diagram. parsing XML description FMU running FMU\u2019s solver, fmi_adapter library FMI Library. purpose, fmi_adapter depends fmilibrary_vendor package, downloads builds FMI Library cmake\u2019s externalproject_add command. Running FMU ROS node library give code snippets load run FMU file application-specific ROS node library. Step Include FMIAdapter.hpp fmi_adapter package code. #include \"fmi_adapter/FMIAdapter.hpp\" Step Instantiate adapter class path FMU file desired simulation step size. step-size argument omitted, default step size FMU file rclcpp::Duration stepSize(0.001); auto adapter std::make_shared<fmi_adapter::FMIAdapter>(get_logger(), fmuPath, stepSize); Step Create subscribers timers set FMU\u2019s input values. auto subscription create_subscription<std_msgs::msg::Float64>(\"angle_x\", [this](std_msgs::msg::Float64::SharedPtr msg) adapter->setInputValue(\"angleX\", msg->data); angle_x topic angleX input variable FMU. adapter->getInputVariableNames() list input variables. Step Create timer subscriber triggers simulation FMU adapter->doStepsUntil(..). auto timer create_wall_timer(update_period, adapter->doStepsUntil(now()); double adapter->getOutputValue(\"angleY\"); publish topic adapter->getOutputVariableNames() list output variables. Step Set parameters initial values FMU: adapter->setInitialValue(\"dampingParam\", adapter->setInitialValue(\"angleX\", function adapter->initializeFromROSParameters(get_node_parameters_interface()) initialize parameters ROS parameters. note characters FMU parameter names supported ROS replaced FMIAdapter::rosifyName(name). Step setup step, exit FMU\u2019s initialization mode set ROS time refers FMU\u2019s internal timepoint adapter->exitInitializationMode(now()); Papers cite repository/package, cite book chapter (PDF Springer Link) File truncated lines full file"},
{"url": "https://index.ros.org/p/fmi_adapter_examples", "package": "fmi_adapter_examples", "package_summary": "Provides small examples for use of the fmi_adapter package", "package_details": "General information repository, including legal information, build instructions issues/limitations, README.md repository root. fmi_adapter_examples package ROS package examples fmi_adapter package. FMU files DampedPendulum.fmu TransportDelay.fmu created FMU SDK) launch files. includes model damped pendulum Modelica language create FMU. Running sample FMUs ros2 launch fmi_adapter_examples simple_damped_pendulum.launch.py simulate damped pendulum (share/DampedPendulum.fmu) length pendulum\u2019s angle published topic default rate step size FMU\u2019s solver print angle data console, invoke ros2 topic echo damped_pendulum_with_transport_delay.launch.py starts nodes named /example/damped_pendulum /example/transport_delay. simulates share/DampedPendulum.fmu, length parameter set launch file. node runs share/TransportDelay.fmu, delay parameter set input subscription transport delay remapped pendulum\u2019s angle topic delayed angle published /example/y. Create simulate DampedPendulum.fmu modeling tools support Modelica language provide FMU export. Examples Dymola, JModelica, OpenModelica. explain process OpenModelica, create model damped pendulum share/DampedPendulum.mo. Download install OpenModelica Linux https://openmodelica.org/download/download-linux. Launch OMEdit load share/DampedPendulum.mo model file. Click DampedPendulum model project tree left. Navigate Tools Options FMI ensure Version=2.0, Type=Co-Simulation Platforms=Dynamic selected. click File Export FMU. path resulting FMU file shown message browser bottom window, typically /tmp/OpenModelica_[user]/OMEdit/DampedPendulum/DampedPendulum.fmu. prepared simulating FMU fmi_adapter package. generic launch file package ros2 launch fmi_adapter fmi_adapter_node.launch.py fmu_path:=/tmp/OpenModelica_[user]/OMEdit/DampedPendulum/DampedPendulum.fmu print pendulum\u2019s angle console ros2 topic echo /revolute1_angle README.md fmi_adapter package load run FMU application-specific ROS node library. Note bug mmc_mk_modelica_array OpenModelica fmi_adapter crashes error message undefined symbol: mmc_mk_modelica_array, patch files /usr/include/omc/c/meta/meta_modelica.h /usr/include/omc/c/meta/meta_modelica_data.h https://github.com/OpenModelica/OMCompiler/pull/2397/files export FMU Details bug https://trac.openmodelica.org/OpenModelica/ticket/4899."},
{"url": "https://index.ros.org/p/four_wheel_steering_msgs", "package": "four_wheel_steering_msgs", "package_summary": "ROS messages for robots using FourWheelSteering.", "package_details": "four_wheel_steering_msgs ROS messages vehicles wheel steering."},
{"url": "https://index.ros.org/p/foxglove_bridge", "package": "foxglove_bridge", "package_summary": "ROS Foxglove Bridge", "package_details": "foxglove_bridge High performance ROS WebSocket bridge Foxglove SDK, written [!NOTE] version foxglove_bridge repo support ROS ROS user, find source code legacy version foxglove_bridge ROS foxglove_bridge repo. Motivation Live debugging ROS systems traditionally relied running ROS tooling rviz. requires GUI connected peripherals robot, replicating ROS environment network-connected development machine including version ROS, custom message definitions, overcome limitation remote debugging web tooling non-ROS systems, rosbridge developed. rosbridge suffers performance problems high frequency topics and/or large messages, protocol support full visibility ROS systems interacting parameters full graph publishers subscribers. foxglove_bridge Foxglove SDK repo!), similar protocol rosbridge ability support additional schema formats ROS .msg ROS .idl, parameters, graph introspection, non-ROS systems. bridge written designed high performance overhead minimize impact robot stack. Install Install apt install foxglove_bridge apt official ROS package channels supported ROS distribution, ROS Rolling. sudo apt install ros-$ROS_DISTRO-foxglove-bridge Note packages coming ROS channels updated frequently repository. latest set features, building source installing Docker. Install Docker Docker images built published public Docker image registry convenience. [!NOTE] provide Docker builds targeted linux/amd64 platform. Images pulled docker pull us-central1-docker.pkg.dev/foxglove-images/images/foxglove_bridge:<tag> <tag> takes form ros-<ROS distro>-<package version> wanted pull image based ROS Kilted package version docker pull us-central1-docker.pkg.dev/foxglove-images/images/foxglove_bridge:ros-kilted-v3.2.1 Build source sources Clone repo GitHub local ROS workspace: git clone https://github.com/foxglove/foxglove-sdk foxglove-sdk/ros commands README assume you\u2019re /ros subdirectory relative repository\u2019s root. Build ROS environment ROS installed setup files sourced. build: Build Docker build bridge ROS environment Docker container: append preferred ROS distro codename docker-build-jazzy). omitted, ROS 'rolling' docker-build built ROS workspace written /ros foxglove_sdk directory. Running bridge run bridge node, recommended launch file. foxglove_bridge built ROS workspace, source local setup files ROS find source install/local_setup.bash ROS aware foxglove_bridge package, launch bridge process: ros2 launch foxglove_bridge foxglove_bridge_launch.xml port:=8765 add foxglove_bridge existing launch file: File truncated lines full file"},
{"url": "https://index.ros.org/p/gazebo_set_joint_positions_plugin", "package": "gazebo_set_joint_positions_plugin", "package_summary": "Set gazebo robot joint positions", "package_details": "Gazebo Set Joint Positions Plugin Distro Status Noetic Humble Motivation Multi joint robot drivers publish current joint positions JointState topic. order simulate robots Gazebo, set Gazebo Model joint state drivers joint state required. plugin sets RobotModel\u2019s joint values latest published values speicifed JointState topic ROS. topic typically published robot driver Universal Robotics driver) ROS2 Control. plugin required gazebo_ros_control_plugin ROS control Goals Listen JointState default topic /joint_states, set Gazebo Model match joint states. Definitions Definition Description Model instanced SDF Gazebo. Models consist Links connected Joints. Link component Model. plugin creates static \u2018attachment\u2019 Joints Links. Links geometry elements attached plugins. Joint connection Links Gazebo. Assumptions number joints published JointState message match number Joints Model. joints JointState message match joint Model. Limitations joints set revolute type. published JointState Joint upper joint limits defined Model SDF), joint limits enforced joint set limit Authors Boeing Company Boeing Reasearch Technology Advanced Production Systems Team License package released Apache License Contributing contribution repository Apache-2 License, dictated license contribute, issue @brta-jc (jason.cochrane@boeing.com)"},
{"url": "https://index.ros.org/p/geometric_shapes", "package": "geometric_shapes", "package_summary": "This package contains generic definitions of geometric shapes and bodies.", "package_details": "Geometric Shapes package generic definitions geometric shapes bodies, tools operating shape messages. Shapes represent form object. Bodies shapes pose. Routines point containment ray intersections Supported shapes: sphere box cone cylinder mesh Note: Bodies meshes compute convex hull meshes order provide point containment ray intersection routines. Note: shape_tools package merged package Note: bodies::Box::corner1_ renamed minCorner_ bodies::Box::corner2_ maxCorner_. Note: bodies::ConvexMesh::MeshData implementation-private longer accessible file. Build Status Code Coverage Grid: Devel Job: Debian Job:"},
{"url": "https://index.ros.org/p/graph_msgs", "package": "graph_msgs", "package_summary": "ROS messages for publishing graphs of different data types", "package_details": "graph_msgs ROS messages publishing graphs data types Continuous Integration Status Supported Graph Types graph simply node message type, edge connects nodes geometry_msgs::Point Future Direction Add data types"},
{"url": "https://index.ros.org/p/grasping_msgs", "package": "grasping_msgs", "package_summary": "Messages for describing objects and how to grasp them.", "package_details": "grasping_msgs messages primarily https://github.com/mikeferguson/simple_grasping"},
{"url": "https://index.ros.org/p/gtsam", "package": "gtsam", "package_summary": "gtsam", "package_details": "GTSAM: Georgia Tech Smoothing Mapping Library Important Note January develop branch officially \u201cPre mode. envision API-breaking switch boost. addition, features deprecated removed. stable release features. easily converted tracked disabling cmake flag GTSAM_ALLOW_DEPRECATED_SINCE_V42. GTSAM? GTSAM library implements smoothing mapping (SAM) robotics vision, Factor Graphs Bayes Networks underlying computing paradigm sparse matrices. Status Platform Compiler Ubuntu MacOS Windows gcc/clang,MSVC Latest Windows/Ubuntu/Mac pypi files; Windows| top library, GTSAM includes wrappers MATLAB Python. Documentation API Docs: https://gtsam.org/doxygen/ Python API Docs: https://borglab.github.io/gtsam/ Quickstart root library folder execute: #!bash mkdir build build cmake check optional, runs unit tests install Prerequisites: modern compiler: Mac: xcode-14.2 Linux: clang-11 gcc-9 Windows: msvc-14.2 CMake Ubuntu: sudo apt-get install cmake Optional Boost prerequisite: Boost optional. cmake flags govern behavior: GTSAM_USE_BOOST_FEATURES ON|OFF: timers concept checking tests depend boost. GTSAM_ENABLE_BOOST_SERIALIZATION ON|OFF: serialization factor graphs, factors, boost flags install Boost Mac: brew install boost Ubuntu: sudo apt-get install libboost-all-dev Windows: highly recommend vcpkg package manager. installation methods troubleshooting, guidance cmake/HandleBoost.cmake script. Optional prerequisites automatically findable CMake: Intel Threaded Building Blocks (TBB) (Ubuntu: sudo apt-get install libtbb-dev) Intel Math Kernel Library (MKL) (Ubuntu: installing APT) INSTALL.md installation information Note MKL provide speedup cases. benchmark problem MKL. GTSAM Compatibility GTSAM introduces features, notably Expressions Python toolbox. introduces traits, technique optimizing non-GTSAM types. opens door retiring geometric types Point2 Point3 pure Eigen types, significant change trigger compile error zero-initializing Point2 Point3 deprecated, aware render functions default constructor incorrect. flag GTSAM_ALLOW_DEPRECATED_SINCE_V43 newly deprecated methods release, default, allowing pull version compile. Wrappers provide support MATLAB Python wrappers GTSAM. refer linked documents details. Citation GTSAM academic work, citation: ```bibtex @software{gtsam, author {Frank Dellaert GTSAM Contributors}, title {borglab/gtsam}, month File truncated lines full file"},
{"url": "https://index.ros.org/p/hatchbed_common", "package": "hatchbed_common", "package_summary": "Common Hatchbed C++ utility code for ROS, such registering and handling updates to ros parameters.", "package_details": "hatchbed_common Common Hatchbed utility code ROS, registering handling updates ros parameters. Param Handler functionality design similar ddynamic_reconfigure swri_roscpp dynamic parameters created managed programatically needing define .cfg file. objectives minimize boilerplate code defining accessing parameters support code clarity defining parameters provide similar interface static dynamic parameters provide similar interface ros1 ros2 add minor quality life improvements logging parameter values startup change enforcing range constraints publishing static (readonly) parameters dynamic reconfig easier runtime inspection API ParamHandler convenience class managing static dynamic ROS parameters. automatically send parameter config description messages parameters registered handler handle receiving sending parameter updates. static dynamic parameters included config description, static parameters labeled \u2018(readonly)\u2019 prevent updates Registering Parameters registering parameter param handler return parameter object access parameter thread safe parameters require default description. Optionally, pointer existing variable passed registering parameter. case variable store parameter access protected, single threaded applications. registering parameter chain additional configuration items parameter, .callback(): provide callback function parameter implies .dynamic() .dynamic(): parameter modified dynamic reconfig .enum(): enumeration integer integer array element) parameters .max(): maximum numeric numeric array element) parameters .min(): minimun numeric numeric array element) parameters .step(): step size numeric numeric array element) parameters parameter configured, call .declare() method. Static Parameters static parameters generally sufficient immediately store method. auto node std::make_shared<rclcpp::Node>(\"param_handler_example\"); hatchbed_common::ParamHandler params(node); integer parameter (note cast internal ros2 int64_t param int background check bounds)) int num_tries params.param(\"num_tries\", \"Number tries\").min(1).max(50).declare().value(); integer parameter (int64_t) short form pointer overload) int64_t, bit integer suffix) literals. interpreted int int64_t num_tries_long params.param(\"num_tries_long\", \"Number tries\").min(1).max(50).declare().value(); string parameter std::string frame_id params.param(\"frame_id\", std::string(\"base_link\"), frame\").declare().value(); bool parameter bool debug params.param(\"debug\", false, \"Enable debug mode\").value(); double parameter double threshold params.param(\"threshold\", \"Threshold value\").min(0.0).max(1.0).declare().value(); enum parameter int mode params.param(\"mode\", \"Operating mode\").enumerate({ \"Default\", \"Default operating mode\"}, \"Advanced\", \"Advanced operating mode\"}, \"Legacy\", \"Legacy operating mode\"}}).declare().value(); Array Parameters Param Handler handle lists values parameters. ROS doesn\u2019t support range/step constraints numeric arrays, min/max/step methods numeric arrays. ROS adds support array constraints updated. auto node std::make_shared<rclcpp::Node>(\u201cparam_handler_example\u201d); hatchbed_common::ParamHandler params(node); integer array parameter std::vector num_tries_list params.param(\"num_tries_list\", std::vector{1, \"Number list\").min(0).max(10).declare().value(); double array parameter std::vector thresholds params.param(\"thresholds\", std::vector{0.75, \"Thresholds\").min(0.0).max(1.0).declare().value(); string array parameter File truncated lines full file"},
{"url": "https://index.ros.org/p/hls_lfcd_lds_driver", "package": "hls_lfcd_lds_driver", "package_summary": "ROS package for LDS(HLS-LFCD2).\n    The LDS (Laser Distance Sensor) is a sensor sending the data to Host for the simultaneous localization and mapping (SLAM). Simultaneously the detecting obstacle data can also be sent to Host. HLDS(Hitachi-LG Data Storage) is developing the technology for the moving platform sensor such as Robot Vacuum Cleaners, Home Robot, Robotics Lawn Mower Sensor, etc.", "package_details": "HLDS HLS-LFCD-LDS (LDS-01) ROBOTIS e-Manual TurtleBot3 LDS-01 ROBOTIS e-Manual TurtleBot3 LDS-01 Wiki hls_lfcd_lds_driver Packages http://wiki.ros.org/hls_lfcd_lds_driver Open Source related TurtleBot3 LDS-01 turtlebot3 turtlebot3_msgs turtlebot3_simulations turtlebot3_applications_msgs turtlebot3_applications turtlebot3_autorace turtlebot3_deliver hls_lfcd_lds_driver robotis_manipulator open_manipulator_msgs open_manipulator open_manipulator_simulations open_manipulator_perceptions open_manipulator_with_tb3_msgs open_manipulator_with_tb3 open_manipulator_with_tb3_simulations dynamixel_sdk dynamixel_workbench OpenCR-Hardware OpenCR Documents Videos related TurtleBot3 LDS-01 ROBOTIS e-Manual LDS-01 ROBOTIS e-Manual TurtleBot3 ROBOTIS e-Manual OpenManipulator ROBOTIS e-Manual Dynamixel SDK ROBOTIS e-Manual Dynamixel Workbench Website TurtleBot Series e-Book TurtleBot3 Videos TurtleBot3"},
{"url": "https://index.ros.org/p/coal", "package": "coal", "package_summary": "An extension of the Flexible Collision Library.", "package_details": "Coal extension Flexible Collision Library FCL forked creating project called HPP-FCL. large part code rewritten removed (unused untested code), features introduced Due major decided rename HPP-FCL project Coal. Coal projects research papers, cite features Compared original FCL library, main features dedicated efficient implementations GJK EPA algorithms rely libccd) support safety margins collision detection accelerated version collision detection Nesterov, leads increased performance factor details paper computation bound distance objects collision checking performed, collision implementation Python bindings easy code prototyping support geometries height fields, capsules, ellipsoids, enhance reliability fix myriad bugs efficient computation contact points contact patches objects full support object serialization Boost.Serialization Note: broad phase reintroduced Justin Carpentier based FCL version project robotics frameworks Pinocchio, open-source library implements efficient versatile rigid-body dynamics algorithms, Humanoid Path Planner, open-source library Motion Manipulation Planning. Coal develop Simple, (differentiable) efficient simulator robotics high-performance library original FCL library, Coal implements well-established GJK algorithm variants collision detection distance computation. implementations lead state-of-the-art performance, shown figures hand, benchmarked Coal major state-of-the-art software alternatives: Bullet simulator, original FCL library Drake framework), libccd library MuJoCo). results depicted figure, notably shows accelerated variants GJK largely outperform large margin times faster). notice y-axis log scale. hand, care dedicated collision detection solvers GJK narrow phase? simply formulate collision detection problem quadratic problem call off-the-shelf optimization solver ProxQP)? observe GJK-based approaches largely outperform solutions based classic optimization solvers solver ProxQP), notably large geometries composed tens hundreds vertices. Open-source projects relying Coal Pinocchio fast flexible implementation Rigid Body Dynamics algorithms analytical derivatives. IfcOpenShell Open source IFC library geometry engine. Crocoddyl software realize model predictive control complex robotics platforms. TSID software implements Task Space Inverse Dynamics HPP SDK implements motion planners humanoids robots. Jiminy simulator based Pinocchio. ocs2 toolbox Optimal Control Switched Systems (OCS2) Installation Conda Coal installed conda-forge channel: conda install coal conda-forge Docker docker run ghcr.io/coal-library/coal:devel Build find build instruction library python bindings installed simply conda conda-forge install coal. library, include files python bindings installed $CONDA_PREFIX/lib, $CONDA_PREFIX/include $CONDA_PREFIX/lib/python3.XX/site-packages. Coal ```cpp #include \u201ccoal/math/transform.h\u201d #include \u201ccoal/mesh_loader/loader.h\u201d #include \u201ccoal/BVH/BVH_model.h\u201d File truncated lines full file"},
{"url": "https://index.ros.org/p/hri_actions_msgs", "package": "hri_actions_msgs", "package_summary": "Action definitions useful for Human-Robot Interaction", "package_details": "hri_actions_msgs Note: branch ROS support. ROS check main branch. repository set ROS messages interfaces) importance human-robot interaction applications. repository covers \u201cactions\u201d side, \u201cperception\u201d side covered hri_msgs."},
{"url": "https://index.ros.org/p/hri_msgs", "package": "hri_msgs", "package_summary": "Messages, services and action definitions useful for Human-Robot Interaction", "package_details": "hri_msgs Note: branch ROS support. ROS check master branch. repository set ROS messages interfaces) importance human-robot interaction applications. related ROS REP-155."},
{"url": "https://index.ros.org/p/hri_rviz", "package": "hri_rviz", "package_summary": "Set of rviz plugins for ROS4HRI data visualization", "package_details": "hri_rviz package list rviz2 plugins human-related data visualisation. part ROS4HRI ecosystem. Plugins Humans plugin visualising information overlayed camera stream (ideally, stream detect plugin visualise: Face bounding boxes Face landmarks Body bounding boxes skeleton keypoints add Displays panel; press Add button bottom istantiate plugin; select topic; topics, select Humans plugin camera stream interested created plugin, select type information visualise (face bounging boxes, skeleton landmarks, enjoy! Skeletons3D plugin visualising estimated poses detected humans. add Displays panel; press Add button bottom istantiate plugin; select display type; select Skeletons3D; enjoy! TF_HRI plugin visualising human-related frames. higly dynamical, appearing disappearing matter seconds. classic plugin result crowded chaotic frames visualisation. plugin: detected faces bodies; displays face bodies frames detected bodies faces; readily remove frames bodies faces tracked, avoiding disappearing phase observed original frame non-updated frames. select human frames visualise face frames; gaze frames; body frames; add Displays panel; press Add button bottom istantiate plugin; select display type; select TF_HRI; enjoy! Test test hri_rviz plugins: Download hri_face_detect hri_fullbody; build start RGB camera stream; start face body detection: ros2 launch hri_face_detect face_detect.launch.py filtering_frame:=<camera_frame> rgb_camera:=<rgb_camera_stream_ns> ros2 launch hri_fullbody hri_fullbody.launch.py rgb_camera:=<rgb_camera_stream_ns> <rgb_camera_stream_ns> RGB camera stream namespace /camera/color). expects raw RGB images published <rgb_camera_stream_ns>/image_raw. Check launch files parameters options. start plugins previously"},
{"url": "https://index.ros.org/p/human_description", "package": "human_description", "package_summary": "This package contains a parametric kinematic description of humans. \n        The files in this package are parsed and used by a variety of other \n        components, notably in the context of human-robot interaction.\n        Most users will not interact directly with this package.", "package_details": "human_description Parametric kinematic model humans, URDF format, usage robotics HRI Part ROS4HRI project. Testing Install package, launch ros2 launch human_description show.launch.py. display human model, GUI control human joint state install joint_state_publisher_gui system script script/create_human_urdf.py generate URDF model template, showcasing parameters configured."},
{"url": "https://index.ros.org/p/camera_info_manager_py", "package": "camera_info_manager_py", "package_summary": "Python interface for camera calibration information.\n\n    This ROS package provides a CameraInfo interface for Python camera\n    drivers similar to the C++ camera_info_manager package.", "package_details": "Overview ROS package defines Python camera_info_manager interface, providing sensor_msgs/CameraInfo support camera drivers written Python. ROS wiki documentation: camera_info_manager_py. interface similar camera_info_manager package, identical."},
{"url": "https://index.ros.org/p/tracetools_image_pipeline", "package": "tracetools_image_pipeline", "package_summary": "LTTng tracing provider wrapper for image_pipeline ROS 2 meta-package.", "package_details": "tracetools_image_pipeline LTTng tracing provider wrapper image_pipeline ROS meta-package. tracetools_image_pipeline fork tracetools, refer package original work. Quality Declaration quality claimed REP-2004."},
{"url": "https://index.ros.org/p/interactive_marker_twist_server", "package": "interactive_marker_twist_server", "package_summary": "Interactive control for generic Twist-based robots using interactive markers", "package_details": "interactive_marker_twist_server Usage config argument, default, config set linear: ros2 launch interactive_marker_twist_server interactive_markers_launch.py ros2 launch interactive_marker_twist_server interactive_markers.launch.xml config argument changed linear, planar, aerial: ros2 launch interactive_marker_twist_server interactive_markers_launch.py config:=planar ros2 launch interactive_marker_twist_server interactive_markers.launch.xml config:=planar"},
{"url": "https://index.ros.org/p/joint_state_publisher", "package": "joint_state_publisher", "package_summary": "This package contains a tool for setting and publishing joint state values for a given URDF.", "package_details": "Joint State Publisher package publishing sensor_msgs/msg/JointState messages robot URDF. URDF passed command-line /robot_description topic), node continually publish values movable joints URDF /joint_states topic. combination robot_state_publisher, ensures valid transform joints joint doesn\u2019t encoder data. Published Topics /joint_states (sensor_msgs/msg/JointState) state movable joints system. Subscribed Topics (optional) /robot_description (std_msgs/msg/String) URDF command-line, node listen /robot_description topic URDF published. received node start publish joint values /joint_states. (optional) /any_topic (sensor_msgs/msg/JointState) sources_list parameter empty Parameters named topic parameter subscribed joint state updates. add default /joint_states topic list, endless loop! Parameters rate (int) rate publish updates /joint_states topic. Defaults publish_default_positions (bool) publish default position movable joint /joint_states topic. Defaults True. publish_default_velocities (bool) publish default velocity movable joint /joint_states topic. Defaults False. publish_default_efforts (bool) publish default effort movable joint /joint_states topic. Defaults False. use_mimic_tags (bool) honor <mimic> tags URDF. Defaults True. use_smallest_joint_limits (bool) honor <safety_controller> tags URDF. Defaults True. source_list (array strings) string array represents topic string, create subscription named topic type sensor_msgs/msg/JointStates. Publication topic update joints named message. Defaults empty array. delta (double) automatically move joints iteration. Defaults Mapped Parameters parameters map joint_names values. format parameters <parameter>.<key>:=<value>, parameter defined key. examples. zeros (map string float) map joint_names initial starting values joint. Eloquent parameter command-line ros2 run joint_state_publisher joint_state_publisher --ros-args --param zeros.joint_name1:=value1 --param zeros.joint_name2:=value2. parameter set default, joints start joints isn\u2019t joint range, range\u2019s (max min) dependent_joints (map string map \u2018parent\u2019, \u2018factor\u2019, \u2018offset\u2019 float) map joint_names joints mimic; compare <mimic> tag URDF. joint listed mimic movements \u2018parent\u2019 joint, subject \u2018factor\u2019 \u2018offset\u2019 \u2018parent\u2019 \u2018factor\u2019 \u2018offset\u2019 parameters optional default Eloquent parameter command-line ros2 run joint_state_publisher joint_state_publisher --ros-args --param dependent_joints.left_leg.parent:=right_leg --param dependent_joints.left_leg.offset:=0.0 --param dependent_joints.left_leg.factor:=2.0. parameter set default, case joints marked <mimic> URDF mimiced."},
{"url": "https://index.ros.org/p/joy", "package": "joy", "package_summary": "The joy package contains joy_node, a node that interfaces a generic joystick to ROS\n    2. This node publishes a \"Joy\" message, which contains the current state of each one of the\n    joystick's buttons and axes.", "package_details": "ROS Driver Generic Joysticks Game Controllers joy package joy_node, game_controller node interface generic joysticks game controllers ROS nodes publish \u201csensor_msgs/msg/Joy\u201d messages, state devices button axes. Examples game controllers released game consoles market clones. game_controller_node SDL2\u2019s built device mapping database give buttons axes consistent order \u201csensor_msgs/msg/Joy\u201d. Custom mappings supplied SDL\u2019s SDL_GAMECONTROLLERCONFIG environment variable. party tool create mapping string. joy_node supports joysticks game controllers order buttons axes message dependend manufacturer device. game_controller_node tables detail indexes buttons axes. Index Button (CROSS) (CIRCLE) (SQUARE) (TRIANGLE) (SELECT) GUIDE (Middle/Manufacturer Button) START LEFTSTICK RIGHTSTICK LEFTSHOULDER RIGHTSHOULDER DPAD_UP DPAD_DOWN DPAD_LEFT DPAD_RIGHT MISC1 (Depends controller manufacturer, similar location controller back/start) PADDLE1 (Upper left, facing controller present) PADDLE2 (Upper facing controller present) PADDLE3 left, facing controller present) PADDLE4 facing controller present) TOUCHPAD present. Button status Index Axis LEFTX LEFTY RIGHTX RIGHTY TRIGGERLEFT TRIGGERRIGHT joy_node run ros2 run joy joy_node terminal ros2 topic echo /joy Pressing buttons moving sticks determine location \u201csensor_msgs/msg/Joy\u201d. Supported Hardware nodes work joystick game controller supported SDL. Published Topics joy (sensor_msgs/msg/Joy): outputs joystick state. Subscribed Topics joy/set_feedback (sensor_msgs/msg/JoyFeedback: Controls \u201crumble\u201d device joystick, Parameters device_id (int, default: joystick device ros2 run joy joy_enumerate_devices wil list attached devices. device_name (string, default: joystick multiple joysticks attached. device_name device_id device_name takes precedence. deadzone (double, default: Amount joystick move considered off-center. parameter relative axis normalized means joystick move edge axis\u2019s range axis output non-zero autorepeat_rate (double, default: Rate joystick non-changing state resend previously message. set autorepeat disabled, meaning joy messages published joystick larger sticky_buttons (bool, default: false) buttons \u201csticky\u201d. false default), button press result output, button release result output. true, button press toggle current state button, button release hitting button switch button pressed coalesce_interval_ms (int, default: number milliseconds wait axis event publishing message. kernel sends event change, significantly reduce number messages published. Setting disables behavior. default good compromise message delays number messages published. Technical note interfacing joysticks game controllers Linux Linux ways interface joystick. distinction difference attempting pass device container virtual machine. interface joystick driver subsystem, generally shows device /dev/input/js0 numbers \u201cjoy_linux\u201d package accesses joystick. interface generic event subsystem, generally shows /dev/input/event7 numbers SDL \u201cjoy\u201d package) accesses joysticks."},
{"url": "https://index.ros.org/p/joy_linux", "package": "joy_linux", "package_summary": "ROS2 driver for a generic Linux joystick.\n    Will contain a MacOS and Windows version later.\n    The joy package contains joy_node, a node that interfaces a\n    generic Linux joystick to ROS2. This node publishes a \"Joy\"\n    message, which contains the current state of each one of the\n    joystick's buttons and axes.", "package_details": "ROS Driver Generic Linux Joysticks joy_linux package joy_linux_node, node interfaces generic Linux joystick ROS. lightweight, Linux-only node external dependencies. embedded type Linux system joystick driver, driver cases, modern, cross-platform, supported \u201cjoy_node\u201d Supported Hardware node work joystick supported Linux. Published Topics joy (sensor_msgs/msg/Joy): outputs joystick state. Device Selection parameters controlling device ~dev (string, default: \u201c/dev/input/js0\u201d) ~dev_name (string, default: (empty disabled)) ~dev_name empty, ~dev defines Linux joystick device read joystick events. ~dev_name defined, node enumerates joysticks, /dev/input/js*. joystick matching ~dev_name opened. joystick matches desired device device ~dev fallback. list names connected joysticks, invalid ~dev_name ros2 run joy_linux joy_linux_node --ros-args dev_name:=\"*\" output INFO]: joystick: LIS3LV02DL Accelerometer (/dev/input/js1). INFO]: joystick: Microsoft X-Box pad (/dev/input/js0). [ERROR]: find joystick Falling default device. node started device list. ros2 run joy_linux joy_linux_node --ros-args dev_name:=\"Microsoft X-Box pad\" Advanced Parameters ~deadzone (double, default: Amount joystick move considered off-center. parameter relative axis normalized means joystick move edge axis\u2019s range axis output non-zero Linux deadzone processing, cases set ~autorepeat_rate (double, default: (disabled)) Rate joystick non-changing state resend previously message. ~coalesce_interval (double, default: Axis events received coalesce_interval (seconds) single ROS message. kernel sends axis motion separate event, coalescing greatly reduces rate messages option limit rate outgoing messages. Button events immediately avoid missing button presses. Information information Wiki page."},
{"url": "https://index.ros.org/p/sdl2_vendor", "package": "sdl2_vendor", "package_summary": "Vendor library for SDL2.", "package_details": "sdl2_vendor Vendor package providing SDL2 build."},
{"url": "https://index.ros.org/p/spacenav", "package": "spacenav", "package_summary": "ROS interface to the 3Dconnexion SpaceNavigator 6DOF joystick.", "package_details": "Spacenav Node Published topics spacenav/offset (geometry_msgs/msg/Vector3) Publishes linear component joystick\u2019s position. Approximately normalized range spacenav/rot_offset(geometry_msgs/msg/Vector3) Publishes angular component joystick\u2019s position. Approximately normalized range spacenav/twist (geometry_msgs/msg/Twist) Combines offset rot_offset single message. spacenav/joy (sensor_msgs/msg/Joy) Outputs spacenav\u2019s degrees freedom buttons joystick message. Parameters sets values spacenav moving zero_when_static (boolean, default: true) static_count_threshold (int, default: number polls needed device considered \u201cstatic\u201d static_trans_deadband (float, default: sets translational deadband static_rot_deadband (float, default: sets rotational deadband linear_scale/x (float, default: linear_scale/y (float, default: linear_scale/z (float, default: sets scale linear output angular_scale/x (float, default: angular_scale/y (float, default: angular_scale/z (float, default: sets scale angular output Running spacenav node Running node straightforward ros2 run spacenav spacenav_node node publishing topics listed"},
{"url": "https://index.ros.org/p/wiimote", "package": "wiimote", "package_summary": "The wiimote package allows ROS nodes to communicate with a Nintendo Wiimote\n    and its related peripherals, including the Nunchuk, Motion Plus, and\n    (experimentally) the Classic. The package implements a ROS node that uses\n    Bluetooth to communicate with the Wiimote device, obtaining accelerometer\n    and gyro data, the state of LEDs, the IR camera, rumble (vibrator),\n    buttons, joystick, and battery state. The node additionally enables ROS\n    nodes to control the Wiimote's LEDs and vibration for feedback to the human\n    Wiimote operator. LEDs and vibration may be switched on and off, or made to\n    operate according to a timed pattern.", "package_details": "Wiimote Nodes Additional Documentation Testing procedure ROS Wiki Tutorials Teleop Wiimote wiimote_node.py Original Python version wiimote node. wiimote_node implementation designed focus reduced resource consumption. Parameters bluetooth_addr [str] Bluetooth address pairing. Default: device) pair_timeout [int] Pair timeout seconds. means timeout. Default: Differences Python Implementation \u201c/wiimote/nunchuk\u201d \u201c/wiimote/classic\u201d topics published Nunchuk Classic Controller connected wiimote Wiimote data polled controller data required publish topic subscriber. Calibration joysticks (Nunchuk Classic Controller) polled find current position assumed center. joysticks rest theoretical center position. Joysticks (Nunchuk Classic Controller) minimum maximum values start theoretical minimum/maximum values dynamically updated joystick full range values reached joysticks due physical limitations. adjust, full range reached joysticks. Joysticks (Nunchuk Classic Controller) center deadzone scaled based granularity joystick; python code assumed Connecting accessory (Nunchuk, Classic Controller, MotionPlus) automatically start calibration sequence."},
{"url": "https://index.ros.org/p/lanelet2_core", "package": "lanelet2_core", "package_summary": "Lanelet2 core module", "package_details": "Lanelet2 Core overview Lanelet2 architecture, package core library Lanelet2: basic primitives, including LaneletMap Geometry functions usage examples, refer lanelet2_examples package. Debugging Debugging Lanelet objects annoying, deeply nested. improve Lanelet2 offers helpers GDB QtCreator."},
{"url": "https://index.ros.org/p/lanelet2_examples", "package": "lanelet2_examples", "package_summary": "Examples for working with Lanelet2", "package_details": "Lanelet2 Examples package executable usage examples people work lanelet2 map. Simply code individual lessons. equipped lots explaining comments. build run action. examples divided individual lessons step step understand lanelet2. Simply overview tutorials. python tutorials shorter demonstrate similarity interface."},
{"url": "https://index.ros.org/p/lanelet2_io", "package": "lanelet2_io", "package_summary": "Parser/Writer module for lanelet2", "package_details": "Lanelet2 Module parsing writing LaneletMaps. reader/writer functions formats. format determined extension filename. writer/parser registered extension, chosen automatically. modules OSM (.osm) writes/loads specialized lanelet maps OpenStreetMap html files. maps module primer Binary (.bin) writes/loads map to/from internal bin format. efficient writing reading human-readable Projections modules require projection WGS84 (lat/lon) local metric coordinate system. loaded map correct important choose correct origin correct projector. origin close map overview projections, projection module. Usage read file .osm write .bin: #include <lanelet2_io/io.h> std::string filename_in \"mymap.osm\"; lanelet::Origin origin(49.0, lanelet::LaneletMapPtr laneletMap lanelet::load(filenameIn, origin); std::string filename_out \"mymap.bin\"; lanelet::write(filenameOut, *laneletMap);"},
{"url": "https://index.ros.org/p/lanelet2_maps", "package": "lanelet2_maps", "package_summary": "Example maps in the lanelet2-format", "package_details": "Lanelet2 Maps repo tools creating modifying maps. Editing Lanelet2 maps Lanelet2 maps edited OpenStreetMap-Editor JOSM. josm folder package styles presets simple set-up. repository stylesheets. visualizing physical layer map markings borders) visualizing lanelet/area layer. JOSM: Unzip images style_images.zip images traffic signs) Preferences->Map Settings Map Paint styles add select lanelets.mapcss lines.mapcss add lanelet2 styles JOSM. Preferences->Map Settings Tagging Presets add select laneletpresets.xml add lanelet2 tagging style JOSM access presets Presets->lanelet2. faster access, add toolbar Preferences->Toolbar customization. Reading Writing OSM Lanelet2 utilizes osm xml format default format read write map data. simple mapping library \u201ctransform\u201d lanelet primitives osm primitives. primitive recommend positive Ids, OSM editors treat negative Ids modifiable continue change attributes translated tags OSM primitive. Points Points transformed OSM Nodes. \u201cele\u201d tag represent z-coordinate point. denotes distance earth ellipsoid WGS84. LineStrings LineStrings transformed OSM Ways. Polygons Polygons OSM Ways identified tag area=yes. Start point point sufficient Lanelets Lanelets represented OSM relations tag type=lanelet. bound relation member type role left bound relation member type role left centerline present) relation member type role centerline regulatory elements relation members type relation role regulatory_element members lanelet relation mentioned Lanelet2 raise error. Areas Areas represented OSM relations making multipolygon representation. tag type=multipolygon. outer bound ordered list relation members roles outer, bounds ordered list relation members roles Lanelet2 parses bounds order starts hole point linestring matches Regulatory Elements Regulatory elements represented OSM relations type=regulatory_element parameters role translated relations. relations type wrong type) parsing .osm data."},
{"url": "https://index.ros.org/p/lanelet2_matching", "package": "lanelet2_matching", "package_summary": "Library to match objects to lanelets", "package_details": "Lanelet2 Matching Module module functions determine lanelet object is/could located. Matching functions Deterministic matching: Find lanelets object Euclidean distance. lanelets orientation, lanelet considered regular inverted, distance Probabilistic matching: Compute squared Mahalanobis distance object pose lanelet reason probability match, suggested Petrich (DOI:0.1109/ITSC.2013.6728549) distance includes orientation, lanelet considered regular inverted, distances Accounting traffic rules: case expect traffic rule compliant behavior, remove non-compliant matches providing traffic rule element participant matching pedestrian lanelets vehicles inverted lanelets, means driving wrong direction). Usage #include <lanelet2_matching/LaneletMatching.h> create objects match lanelet::matching::Object2d obj; deterministic lanelet::matching::ObjectWithCovariance2d obj2; uncertainty retrieve lanelet matches map auto detMatches getDeterministicMatches(laneletMap, obj, max distance auto probMatches getProbabilisticMatches(laneletMap, obj2, max distance remove non-compliant matches driving wrong direction) auto compliantDetMatches removeNonRuleCompliantMatches(detMatches, trafficRulesPtr); auto compliantProbMatches removeNonRuleCompliantMatches(probMatches, trafficRulesPtr); unittests examples Python import lanelet2 Note: standalone version lanelet2_matching, python module named \"lanelet2_matching\". submodule lanelet2: \"lanelet2.matching\" create objects match obj lanelet2.matching.Object2d() retrieve lanelet matches map matches lanelet2.matching.getDeterministicMatches(lanelet_map, obj, max distance remove non-compliant matches driving wrong direction) compliant_matches lanelet2.matching.removeNonRuleCompliantMatches(matches, traffic_rules) python unittests examples, supports uncertainty License package distributed 3-Clause BSD License, LICENSE."},
{"url": "https://index.ros.org/p/lanelet2_projection", "package": "lanelet2_projection", "package_summary": "Lanelet2 projection library for lat/lon to local x/y conversion", "package_details": "Lanelet2 Projection Module module implements projection functions required lanelet2_io. projections map data commonly stored WGS84 (lat/lon/ele) lanelet2 operates metrical data, precise projection functions good projection functions correct origin (close location map). Maps loaded wrong origin easily distorted Angle calculations wrong details, read Supported Projections UTM.h: WGS84 storage .osm files) UTM (internal processing) (wrapper https://sourceforge.net/projects/geographiclib/). projection advantage precise, points map fit UTM Tile. points exceed margin, map loaded. Mercator.h: WGS84 storage .osm files) Local Mercator liblanelet. Approximates earth Geocentric.h: WGS84 ECEF (wrapper https://sourceforge.net/projects/geographiclib/). LocalCartesian.h: WGS84 LocalCartesian (wrapper https://sourceforge.net/projects/geographiclib/). similar UTM; properly treats elevation."},
{"url": "https://index.ros.org/p/lanelet2_python", "package": "lanelet2_python", "package_summary": "Python bindings for lanelet2", "package_details": "Lanelet2 python python bindings Lanelet2 modules. Usage building sourcing follwoing python(2): import lanelet2 map lanelet2.io.load(\"myfile.osm\", lanelet2.io.Origin(49,8.4)) Modify/Add attribute lanelets elem map.laneletLayer: \"participant:vehicle\" elem.attributes: elem.attributes[\"participant:vehicle\"] usage examples refer package."},
{"url": "https://index.ros.org/p/lanelet2_routing", "package": "lanelet2_routing", "package_summary": "Routing module for lanelet2", "package_details": "Lanelet2 routing routing module lanelet2. short version presentation. images render correctly, clone repository open html file browser. readme covers basics. API offers Components Vocabulary create Routing Graph needed components create routing graph Routing Cost Modules: generically determine routing cost travelling lanelet/area length, travel time dynamically select querying routing graph easily plug routing cost calculation Influences prefered path Traffic Rules Specific Participant lanelet2_traffic_rules) Determines lanelets/areas passable Influences paths Lanelet Map: lanelet2_core) Map Lanelets, Areas, Regulatory Elements, Relations Lanelets part routing graph relations relations left, (reachable lane change) adjacent left, adjacent (lanelets neighbours reachable lane change) succeeding (relation subsequent lanelets) conflicting (intersecting lanelets/areas) area (reachable area lanelet/area relation) Route Path Sequence querying data routing graph, terms route, path sequence. contrast simple set lanelets (data-wise vector lanelets), special meaning data-wise classes. route means lanelets destination driving road. connected generic sequence lane successors. path (LaneletPath LaneletOrAreaPath) ordered list Lanelets/Areas lead destination. connected lane sequence (LaneletSequence) sequence subsequent Lanelets separated lane change lane). lead destination, ends lane change required. image, lanelets form valid sequence valid path), lanelets valid path, valid sequence. Code Usage Create Routing Graph namespace lanelet; Load map LaneletMapPtr map load(\"map.osm\", Origin({49, origin close map data lat/lon coordinates Initialize traffic rules TrafficRulesPtr trafficRules{TrafficRulesFactory::instance().create(Locations::Germany, Participants::Vehicle)}; Optional: Initalize routing costs double laneChangeCost RoutingCostPtrs costPtrs{std::make_shared<RoutingCostDistance>(laneChangeCost)}; Optional: Initialize config routing graph: RoutingGraph::Configuration routingGraphConf; routingGraphConf.emplace(std::make_pair(RoutingGraph::ParticipantHeight, Attribute(\"2.\"))); Create routing graph RoutingGraphPtr graph RoutingGraph::build(map, trafficRules costPtrs, routingGraphConf*/); traffic rules object represents view map interpreted. routing vehicle traffic rules yield results routing bicycle traffic rules. Routing bicycles include lanelets (motorized)vehicles vice versa. python interface works similarly: import lanelet2 map lanelet2.io.load(\"map.osm\", lanelet2.io.Origin(49, trafficRules lanelet2.traffic_rules.create(lanelet2.traffic_rules.Locations.Germany, lanelet2.traffic_rules.Participants.Vehicle) graph lanelet2.routing.RoutingGraph(map, trafficRules) shortest path Optional<routing::LaneletPath> shortestPath graph->shortestPath(fromLanelet, toLanelet); Optional uninitialized (false) path shortestPathWithVia python: shortestPath graph.shortestPath(fromLanelet, toLanelet) python, shortestPath simply returns path. write route File truncated lines full file"},
{"url": "https://index.ros.org/p/lanelet2_traffic_rules", "package": "lanelet2_traffic_rules", "package_summary": "Package for interpreting traffic rules in a lanelet map", "package_details": "Lanelet2 Traffic Rules package functionality interpreting traffic rules lanelet map depending country traffic participant. functionality determine speed limits legally reachable lanelets participant. Usage #include <lanelet2_traffic_rules/TrafficRulesFactory.h> lanelet::traffic_rules::TrafficRulesPtr trafficRulesPtr lanelet::traffic_rules::TrafficRulesFactory::create(lanelet::Locations::Germany, lanelet::Participants::Vehicle); bool passable trafficRulesPtr->canPass(myLanelet); lanelet::traffic_rules::SpeedLimitInformation speedLimit trafficRulesPtr->speedLimit(myLanelet); Structure package offers abstract TrafficRules class interface interpret data map. information lanelet usable/drivable, lane speed limits Derived abstract GenericTrafficRules class implements traffic rules based tagging specification. class derived create traffic rules individual countries participants. important speed limits interpreting country specific traffic signs. registering class RegisterTrafficRules, Lanelet2 able create instances traffic rule TrafficRuleFactory. Hierarchical Structure Participants classes participants, vehicles, follow hierarchical structure. traffic rule class registered upper level class expected handle specializations class. TrafficRules implementation registered vehicle, instanciated vehicle:car, vice versa. lanelets/areas tags specialized participants, \u201cparticipant:vehicle:car=no\u201d, TrafficRule class handle appropriately. tags specialized instance, result conservative means TrafficRule instance vehicle finds participants:vehicle:car=no participants:vehicle:bus=yes, lanelet passable. instanciated vehicle:bus vehicle lanelet reported passable."},
{"url": "https://index.ros.org/p/lanelet2_validation", "package": "lanelet2_validation", "package_summary": "Package for sanitizing lanelet maps", "package_details": "Lanelet2 Validation Validation package lanelet2. Runs checks common mapping errors reports Usage Building package create program lanelet2_validate. test map, simply run lanelet2_validate <mymap>, lanelet2_validate <mymap> --lat <lat> --lon <lon>, lat/lon origin map. tool output errors warnings map. advanced usage, lanelet2_validate Adding Validators implementing check, choose suitable validator. types validators: Map validators validate primitives map search obvious mapping issues (tags, positioning, Traffic rule validators primitives interpreted traffic rules chose user Routing graph validators check issues routing graph, isolated nodes. Validators check single implement validators implement validator, inherit base classes BasicValidator.cpp, implement operator() function. format `*.cpp` file, register validator registry functions namespace RegisterTrafficRuleValidator RegisterRoutingGraphValidator... validation::RegisterMapValidator<MyCheckClass> register; namespace"},
{"url": "https://index.ros.org/p/laser_proc", "package": "laser_proc", "package_summary": "laser_proc", "package_details": "laser_proc Converts representations sensor_msgs/LaserScan sensor_msgs/MultiEchoLaserScan"},
{"url": "https://index.ros.org/p/lgsvl_msgs", "package": "lgsvl_msgs", "package_summary": "Message definitions for interfacing with the LGSVL Simulator for ROS and ROS 2.", "package_details": "ROS Package lgsvl_msgs SVL Automotive Simulator repository ROS message definitions lgsvl_msgs subscribe ROS messages published SVL Automotive Simulator rosbridge. Detection3DArray.msg list detections Detection3D.msg detection including label, score, bounding box BoundingBox3D.msg bounding box definition Detection2DArray.msg list detections Detection2D.msg detection including label, score, bounding box BoundingBox2D.msg bounding box definition SignalArray.msg list traffic light detections Signal.msg detection traffic light including label, score, bounding box CanBusData.msg bus data ego vehicle published simulator VehicleControlData.msg Vehicle control commands simulator subscribes VehicleStateData.msg Description full state ego vehicle Ultrasonic.msg Minimum detected distance ultrasonic sensor VehicleOdometry.msg Odometry ego vehicle Copyright License Copyright Electronics, software code licensed LICENSE."},
{"url": "https://index.ros.org/p/libaditof", "package": "libaditof", "package_summary": "The ADI ToF SDK ROS package", "package_details": "Analog Devices ToF SDK Overview ADI ToF SDK designed support ADI\u2019s ToF hardware. ToF Imager (ADSD3100 ADSD3030) ADSD3500 (Dual Single) (MIPI Frame Data) SPI Control) (Linux) Host Driver libaditof Hardware Connection Software Connection SDK API control ToF camera, depth frame streams. License Repos libaditof: ADTF3175D Eval Kit ADCAM3175 Camera Kit Note, prior committing repo important format source code, code formatting. Build libaditof SDK Linux Build git clone https://github.com/analogdevicesinc/libaditof libaditof git submodule update --init git checkout <branch tag> mkdir build build cmake -DNVIDA=1 -j\"$(nproc)\" SDK binary softlinks hare *build/libaditof.so Windows Build git clone https://github.com/analogdevicesinc/libaditof libaditof git submodule update --init git checkout <branch tag> mkdir build build cmake -DCMAKE_BUILD_TYPE=Release \"Visual Studio cmake --build --config RELEASE CMake Options build options CMakeLists.txt cmake/readme.md."},
{"url": "https://index.ros.org/p/libcreate", "package": "libcreate", "package_summary": "C++ library for interfacing with iRobot's Create 1 and Create 2", "package_details": "libcreate library interfacing iRobot\u2019s Create models Roomba. create_robot ROS wrapper library. Code API Protocol documentation: (Roomba series (Create Roomba series) (Create Roomba series) Author: Jacob Perron (Autonomy Lab, Simon Fraser University) Contributors: Mani Monajjemi, Ben Wolsieffer, Josh Gadeken Build Status Dependencies Boost System Library Boost Thread Library [Optional] googletest Install sudo apt-get install build-essential cmake libboost-system-dev libboost-thread-dev Optionally, install gtest building unit tests sudo apt-get install libgtest-dev /usr/src/gtest sudo cmake CMakeLists.txt sudo sudo /usr/lib Serial Permissions User permission requried connect Create serial. add user dialout group permission: sudo usermod dialout $USER Logout login effect. Build Note, examples \u201cexamples\u201d directory built library. cmake git clone https://github.com/AutonomyLab/libcreate.git libcreate mkdir build build cmake catkin Requires catkin_tools. mkdir create_ws/src create_ws catkin init src git clone https://github.com/AutonomyLab/libcreate.git catkin build Running Tests run unit tests, execute build directory: test Issues Clock Schedule buttons functional. bug related firmware. Inaccurate odometry angle Create series models incorrectly report Mode sensor stream (create_robot enable disable Mode reporting workaround, pass true false setModeReportWorkaround()"},
{"url": "https://index.ros.org/p/libfranka", "package": "libfranka", "package_summary": "libfranka is a C++ library for Franka Robotics research robots", "package_details": "libfranka: Library Franka Robotics Research Robots [![codecov][codecov-status]][codecov] libfranka library low-level control Franka Robotics research robots. [generated API documentation][api-docs] offers overview capabilities, [Franka Control Interface (FCI) documentation][fci-docs] information setting robot utilizing features functionalities. find version refer [Compatibility Matrix][compatibility-matrix]. Key Features Low-level control: Access precise motion control research robots. Real-time communication: Interact robot real-time. Started System Requirements libfranka, ensure system meets requirements: Operating System: [Linux PREEMPT_RT patched kernel][real-time-kernel] (Ubuntu Ubuntu recommended) Compiler: GCC CMake: Version Robot: Franka Robotics robot FCI feature installed Installing dependencies sudo apt-get update sudo apt-get install build-essential cmake git libpoco-dev libeigen3-dev libfmt-dev libfranka version install [pinocchio][stack-of-tasks] dependencies: sudo apt-get install lsb-release curl sudo mkdir /etc/apt/keyrings curl -fsSL http://robotpkg.openrobots.org/packages/debian/robotpkg.asc sudo tee /etc/apt/keyrings/robotpkg.asc echo \"deb [arch=amd64 signed-by=/etc/apt/keyrings/robotpkg.asc] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release robotpkg\" sudo tee /etc/apt/sources.list.d/robotpkg.list sudo apt-get update sudo apt-get install robotpkg-pinocchio Building Installation Source building installing source, uninstall existing installations libfranka avoid conflicts: sudo apt-get remove \"*libfranka*\" Clone Repository clone repository choose version selecting specific tag: git clone --recurse-submodules https://github.com/frankarobotics/libfranka.git libfranka List tags git tag Checkout specific tag git checkout Update submodules git submodule update Create build directory navigate mkdir build build Configure project build cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/opt/openrobots/lib/cmake -DBUILD_TESTS=OFF Installing libfranka Debian Package (Optional recommended) Building Debian package optional recommended easier installation management. build folder, execute: File truncated lines full file"},
{"url": "https://index.ros.org/p/hri", "package": "hri", "package_summary": "A wrapper library around the ROS4HRI ROS topics", "package_details": "libhri top-level README.md information."},
{"url": "https://index.ros.org/p/pyhri", "package": "pyhri", "package_summary": "A python wrapper around hri package", "package_details": "pyhri top-level README.md information."},
{"url": "https://index.ros.org/p/libnabo", "package": "libnabo", "package_summary": "libnabo is a fast K Nearest Neighbour library for low-dimensional spaces.", "package_details": "Logo Title _libnabo_ Hyperlink NorLab TeamCity GUI (VPN/intranet access) norlabulaval (Docker Hub) Description **libnabo fast Nearest Neighbour library low-dimensional spaces.** (====GitHub badges========================================================================) libnabo clean, legacy-free, scalar-type\u2013agnostic API templates. current CPU implementation strongly inspired [ANN], compact data types. average, libnabo faster [ANN]. Dependencies: libnabo depends [Eigen], modern matrix linear-algebra library. libnabo works version Eigen. libnabo optionally depends [Boost], general library, Python bindings. Credit: libnabo developed St\u00e9phane Magnenat part work ASL-ETH libnabo maintained NorLab interested pure-Rust version, check repository Supported Architecture libnabo tested build system architecture arm64/v8 Ubuntu bionic focal Note: libnabo reportedly works MacOs OsX (latest) Windows (latest) Version Release Note release libnabo introduces integration norlab-build-system (NBS) git submodule codebase development testing. Execute clone repository submodule: git clone --recurse-submodules https://github.com/norlab-ulaval/libnabo.git libnabo previously cloned, execute fetch submodule ```bash git submodule update \u2013remote \u2013recursive \u2013init File truncated lines full file"},
{"url": "https://index.ros.org/p/libpointmatcher", "package": "libpointmatcher", "package_summary": "libpointmatcher is a modular ICP library, useful for robotics and computer vision.", "package_details": "![banner](doc/images/banner_light.jpeg) Description **_libpointmatcher_ modular library implementing Iterative Closest Point (ICP) algorithm aligning point clouds. applications robotics computer vision.** library written efficiency [bindings Python](doc/index.md#python-). (====Badges===============================================================================) (====Awesome badges=======================================================================) [![Mentioned Awesome LIDAR](https://awesome.re/mentioned-badge.svg)](https://github.com/szenergy/awesome-lidar#basic-matching-algorithms) [![Mentioned Awesome Robotics Libraries](https://awesome.re/mentioned-badge.svg)](http://jslee02.github.io/awesome-robotics-libraries/#3d-mapping) [![Mentioned Awesome Robotics](https://awesome.re/mentioned-badge.svg)](https://github.com/ahundt/awesome-robotics#point-clouds) LIDAR Robotics Robotics Libraries Supported Architecture libpointmatcher tested build system Ubuntu bionic focal jammy Computer architecture: arm64/v8 Note: libpointmatcher reportedly works Mac (latest) Windows (latest) Version Release Note release libpointmatcher introduces integration norlab-build-system (NBS) git submodule codebase development testing. Execute clone repository submodule: git clone --recurse-submodules https://github.com/norlab-ulaval/libpointmatcher.git libpointmatcher previously cloned, execute fetch submodule git submodule update --remote --recursive --init Contributing Instructions contributing_instructions.md instructions related bug reporting, code contribution setting libpointmatcher-build-system workstation speed local development workflow. Documentation Tutorials **Quick link tutorial pages: Tutorials. tutorials written Markdown syntax stored project\u2019s /doc folder. scope ranges introductory material performing point cloud registration instructions experienced developer extend library\u2019s codebase. Libpointmatcher\u2019s source code fully documented based doxygen provide easy API developers. API suggested build version doc/html. libpointmatcher orginaly developed Fran\u00e7ois Pomerleau St\u00e9phane Magnenat part work ASL-ETH. maintained Northern Robotics Laboratory (Norlab), led Fran\u00e7ois Pomerleau. read latest release notes. Quick Start Docker images install docker related dependencies ubuntu, execute ```bash File truncated lines full file"},
{"url": "https://index.ros.org/p/bosch_locator_bridge", "package": "bosch_locator_bridge", "package_summary": "ROS interface to Rexroth ROKIT Locator", "package_details": "General information repository, including legal information build instructions README.md repository root. bosch_locator_bridge Overview package [ROS interface [Rexroth ROKIT Locator]. translates ROS messages ROKIT Locator API ROKIT Locator API documentation) vice versa. control ROKIT Locator ROS service calls. package tested [ROS Humble Ubuntu bridge compatible ROKIT Locator version earlier version, Support earlier versions ROKIT Locator. Quick Start section describes record environment, create map record localize Ensure ROKIT Locator reachable computer ROKIT Locator installed running computer network. test running command terminal (replace <LOCATOR_IP> address computer running ROKIT Locator): curl --header \"Content-Type: application/json\" --request POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"aboutModulesList\",\"params\":{\"query\":{}},\"id\":1}' http://<LOCATOR_IP>:8080 Start Bridge Node Start bridge node ros2 launch bosch_locator_bridge bridge.launch.xml bridge_ip:=<HOST_IP> locator_ip:=<LOCATOR_IP> locator_user:=<USER> locator_password:=<PASSWORD> scan_topic:=<SCAN_TOPIC> enable_odometry:=<ENABLE_ODOM> odom_topic:=<ODOM_TOPIC> <HOST_IP> address computer bridge started <LOCATOR_IP> address computer ROKIT Locator running <USER> <PASSWORD> credentials log ROKIT Locator <SCAN_TOPIC> topic laser scans <ENABLE_ODOM> boolean describes odometry ROS messages ROKIT Locator <ODOM_TOPIC> topic odometry Laser Localization Software running docker, <HOST_IP> set docker0 address localhost address user program providing laser data runs machine. additional parameters refer launch file bridge.launch.xml. Start Visual Recording laser scans published <SCAN_TOPIC>, start visual recording ros2 run rviz2 rviz2 $(ros2 pkg prefix bosch_locator_bridge)/share/bosch_locator_bridge/config/locator_bridge_visual_recording.rviz ros2 service call /bridge_node/start_visual_recording bosch_locator_bridge/srv/StartRecording 'ROS-Quickstart-$(date -Isecond)'\" laser scans, robot position previous path, recording built time. Stop Visual Recording stop recording ros2 service call /bridge_node/stop_visual_recording std_srvs/srv/Empty Create Map Recording create map recording ros2 run rviz2 rviz2 $(ros2 pkg prefix bosch_locator_bridge)/share/bosch_locator_bridge/config/locator_bridge_map_creation.rviz ros2 service call /bridge_node/start_map bosch_locator_bridge/srv/ClientMapStart map created, map server set active map. ros2 service call /bridge_node/send_map bosch_locator_bridge/srv/ClientMapSend ros2 service call /bridge_node/set_map bosch_locator_bridge/srv/ClientMapSet Start Localization Finally, start localization ros2 run rviz2 rviz2 $(ros2 pkg prefix bosch_locator_bridge)/share/bosch_locator_bridge/config/locator_bridge_localization.rviz ros2 service call /bridge_node/start_localization std_srvs/srv/Empty set initial pose robot clicking Pose Estimate\u201d button RViz, set pose map. Stop Localization stop localization ros2 service call /bridge_node/stop_localization std_srvs/srv/Empty Map Expansion Record build prior map (map priormap) usual. Start localization prior map move system localized. note pose move Enable map expansion rosservice call /bridge_node/enable_map_expansion \"prior_map_name: priormap\" Start visual recording visualize prior map rosrun rviz rviz `rospack find bosch_locator_bridge`/config/locator_bridge_visual_recording_with_prior_map.rviz pose step set current pose recording File truncated lines full file"},
{"url": "https://index.ros.org/p/bosch_locator_bridge_utils", "package": "bosch_locator_bridge_utils", "package_summary": "Utilities to use bosch_locator_bridge with Nav2", "package_details": "General information repository, including legal information build instructions README.md repository root. bosch_locator_bridge_utils Overview package utilities bosch_locator_bridge Nav2. ROKIT Locator map grid map, calculates transformation localization poses. package tested ROS Humble Ubuntu Quick Start section describes package setup localization part Nav2. Start ROKIT Locator ROS Bridge ROKIT Locator ROS bridge started. README.md bosch_locator_bridge package details. ros2 launch bosch_locator_bridge bridge.launch.xml Provide interface Nav2 start locator_node locator_map_server nodes ros2 launch bosch_locator_bridge_utils localization_launch.py localization poses, locator_node node calculates broadcasts transformation map odom frame, required complete transformation tree Nav2. map_server node converts point cloud map ROKIT Locator grid map, needed Nav2. map transformation tree, start RViz ros2 run rviz2 rviz2 $(ros2 pkg prefix bosch_locator_bridge_utils)/share/bosch_locator_bridge_utils/config/localization.rviz ready terms localization start navigating\u2026"},
{"url": "https://index.ros.org/p/log_view", "package": "log_view", "package_summary": "The log_view package provides a ncurses based terminal GUI for\n    viewing and filtering published ROS log messages.\n\n    This is an alternative to rqt_console and swri_console that doesn't depend\n    on qt and can be run directly in a terminal.", "package_details": "log_view log_viewer ncurses text viewing rosout logs. Motivation Receive, filter, navigate published rosout log messages terminal support debugging robot live. Problem rosout log messages don\u2019t printed terminal normal lots nodes/messages. convienient filter navigate real time. swri_console desired functionality based requires graphical interface. Solution log_viewer similar concept design swri_console, ncurses interface. Log messages filtered based log level node whitelist text filter exclude text filter log_viewer supports text searches jumping match match. Log messages copied clipboard selecting swri_console, log_viewer doesn\u2019t roscore start automatically connect/reconnect roscore Keybindings CTRL-c Exit log viewer CTRL-h Show/hide screen Arrow Scroll Arrow Scroll Left Arrow Scroll left Arrow Scroll Page Scroll screen Page Scroll screen Home Scroll message Scroll message follow Tab Change focus input Show/hide debug level Show/hide info level Show/hide warning level Show/hide error level Show hide fatal level Enable/disable node filter CTRL-a Select log lines copy clipboard CTRL-n Show/hide node selection CTRL-s Search matching string CTRL-x Clear search Backspace Prev match Enter match CTRL-e Enable/disable text exclude filter CTRL-f Enable/disable text include filter Mouse Support: limited mouse support selecting log messages enabling/disabling log level node filters. Due bug distributed version ncurses, mousewheel scrolling works direction. Improvements: Regular expression support ROS2 support Support loading logs bag files Support loading logs ROS log directory Refine design keybindings consistent/intuitive"},
{"url": "https://index.ros.org/p/lusb", "package": "lusb", "package_summary": "Library for interfacing to USB devices", "package_details": "lusb Library built libusb library provide access USB devices class. API"},
{"url": "https://index.ros.org/p/magic_enum", "package": "magic_enum", "package_summary": "Static reflection for enums (to string, from string, iteration) for modern C++,\n    work with any enum type without any macro or boilerplate code", "package_details": "Magic Enum Header-only library static reflection enums, work enum type macro boilerplate code. project, donating funds victims war Ukraine: https://u24.gov.ua. Documentation Reference Limitations Integration Features Examples Basic #include <magic_enum/magic_enum.hpp> #include <iostream> enum class Color RED BLUE GREEN int main() Color Color::RED; std::cout magic_enum::enum_name(c1) std::endl; RED return Enum string Color color Color::RED; auto color_name magic_enum::enum_name(color); color_name \"RED\" String enum std::string color_name{\"GREEN\"}; auto color magic_enum::enum_cast<Color>(color_name); (color.has_value()) color.value() Color::GREEN case insensitive enum_cast auto color magic_enum::enum_cast<Color>(value, magic_enum::case_insensitive); enum_cast BinaryPredicate auto color magic_enum::enum_cast<Color>(value, [](char lhs, char rhs) return std::tolower(lhs) std::tolower(rhs); enum_cast default auto color_or_default magic_enum::enum_cast<Color>(value).value_or(Color::NONE); Integer enum int color_integer auto color magic_enum::enum_cast<Color>(color_integer); (color.has_value()) color.value() Color::BLUE auto color_or_default magic_enum::enum_cast<Color>(value).value_or(Color::NONE); Indexed access enum std::size_t Color color magic_enum::enum_value<Color>(i); color Color::RED Enum sequence constexpr auto colors magic_enum::enum_values<Color>(); colors {Color::RED, Color::BLUE, Color::GREEN} colors[0] Color::RED Number enum elements constexpr std::size_t color_count magic_enum::enum_count<Color>(); color_count File truncated lines full file"},
{"url": "https://index.ros.org/p/marine_acoustic_msgs", "package": "marine_acoustic_msgs", "package_summary": "The marine_acoustic_msgs package, including messages for common\n  underwater sensors (DVL, multibeam sonar, imaging sonar)", "package_details": "marine_acoustic_msgs package includes messages commonly sensors research underwater autonomy: DVL Multibeam Imaging Sonar proposed messages based existing message variety manufacturers instrument type. confidence mature indexed ROS debs generalize sensors. Coordinate Frame Conventions Design decisions common multiple acoustic messages differences existing open source UUV messages acoustic sensors, number overarching design decisions defining individual messages. proposed set messages adheres guidelines: messages suitable wide variety hardware. sensor-specific metadata fields published separate message. Standards defining additional messages scope options include: Capture raw bytes received sensor WHOI\u2019s RawData.msg) Publish separate message datagrams sensor PD0.msg) Publish separate message additional data, duplication standard message, Image/CameraInfo pattern. order support generality wide range sensors, fields applicable sensors. supported array left empty. constant data frame, array length length array match length data. \u201craw/temporal\u201d Underwater acoustic messages include speed sound (field called sound_speed) sensor, information required raytrace data sound velocity profile. \u201cprocessed/spatial\u201d acoustic messages ray-tracing performed. beam geometry per-beam vector relative frame header. alternative approaches including: additional frames individual beams, quickly unwieldy array beam messages, beam includes geometry relative sensor. Abstracting individual beams doesn\u2019t serve simplify interpretation data, doesn\u2019t enable empty vector field isn\u2019t applicable. follow LaserScan convention derive geometry min/max/step, doesn\u2019t generalize sonars, beams spaced equiangualarly. Individual message types based data similarities data format. DVL ADCP messages combined, significant overlap hardware data. Consumers DVL data expect single velocity. Consumers ADCP data expect velocities array ranges. difference SonarImage SonarRanges (aka multibeam), typically interchangeable downstream processing algorithms, newer sensors blurring lines. sonar image consists intensities-vs-time, sonar ranges identify discrete returns. order consistent messages sensor_msgs, message types named type data type sensor: SonarImage.msg ImagingSonar.msg SonarRanges.msg Multibeam.msg ProfilingSonar.msg. DVL Existing Messages widely messages WHOI\u2019s ds_sensor_msgs/Dvl.msg. RDI Nortek instruments. UUV Simulator\u2019s uuv_sensor_ros_plugins_msgs/DVL.msg base marine_ros_conventions_discussion/DVL.msg) main implementation difference ds_sensor_msgs uuv_simulator top-level DVL message includes beam data array, array DvlBeam messages. UWSim\u2019s underwater_sensor_msgs/DVL.msg. idiomatic ROS message: Vector3 velocity, individual fields (wi_{x,y,z}_axis); transform frames, includes data instrument-referenced vehicle-referenced frames message. options agree DVL message include aggregate data instrument (estimated altitude velocity), differ included: Per-beam data (range, velocity, covariances): WHOI UUV Simulator bottom-track water-track velocities: WHOI UWSim Additional details sensor configuration: WHOI DVL-specific design decisions broad support including water-track velocity addition ground-track message definition? NPS interleaving DVL ADCP messages driver instrument ADCP profile DVL bottom-track velocity. approach. message type supports bottom track water track (single reading, profile), convention bottom track water track published topics subscribing nodes ignore water track velocities don\u2019t additional information sensor configuration (DVL_TYPE) belongs top-level message. messages sensor_msgs tend similar flags; depends able perform sound velocity corrections data DVL message. quality flag belong standardized message? Proposed Message https://github.com/apl-ocean-engineering/marine_msgs/blob/main/marine_acoustic_msgs/msg/Dvl.msg File truncated lines full file"},
{"url": "https://index.ros.org/p/marine_sensor_msgs", "package": "marine_sensor_msgs", "package_summary": "The marine_sensor_msgs package, meant to contain messages for common\n  underwater sensors (e.g., conductivity, turbidity, dissolved oxygen)", "package_details": "marine_sensor_msgs Messages common marine sensors. messages quantitative data temperature, turbidity, dissolved oxygen. \u201csimple\u201d messages publish measured quantity common unit metric. marine_sensor_msgs/RadarSector RadarSector message marine radars typically scan horizontal plane rotating antenna vertical axis. series return intensities reported ray angle. RadarSector message data rays. full scan covering degrees represented RadarSector messages."},
{"url": "https://index.ros.org/p/marker_msgs", "package": "marker_msgs", "package_summary": "The marker_msgs package contains messages usable to setup a marker/fiducial system. \n    The package distinguishes between two types of messages. \n    First messages to describe the properties of a marker/fiducial detection system and the detected markers. \n    Secondly messages used to represent a map of markers/features with covariances as it would be produced by a SLAM system or published by a map server for self-localization.", "package_details": "marker_msgs ROS message discribe detected marker sensor. https://github.com/tuw-robotics/marker_rviz_plugin visualization."},
{"url": "https://index.ros.org/p/libmavconn", "package": "libmavconn", "package_summary": "MAVLink communication library.\n    This library provide unified connection handling classes\n    and URL to connection object mapper.\n\n    This library can be used in standalone programs.", "package_details": "MAVCONN library mavlink connection communication library MAVROS. adopted ROS environment splitting individual package removing dependencies rosconsole. Connection URL Connection defined URL. pass URL MAVConnInterface::open_url() connection object. Supported schemas: Serial: /path/to/serial/device[:baudrate] Serial: serial:///path/to/serial/device[:baudrate][?ids=sysid,compid] Serial hardware flow control: serial-hwfc:///path/to/serial/device[:baudrate][?ids=sysid,compid] UDP: udp://[bind_host][:port]@[remote_host][:port][/?ids=sysid,compid] UDP broadcast GCS discovery: udp-b://[bind_host][:port]@[:port][/?ids=sysid,compid] UDP broadcast (permanent): udp-pb://[bind_host][:port]@[:port][/?ids=sysid,compid] TCP client: tcp://[server_host][:port][/?ids=sysid,compid] TCP server: tcp-l://[bind_port][:port][/?ids=sysid,compid] Note: ids URL overrides ids system_id component_id parameters. Dependencies mavros: Linux host Asio library https://think-async.com/Asio/ console-bridge library compiller support License Licensed terms LGPLv3, BSD, GPLv3."},
{"url": "https://index.ros.org/p/mavros", "package": "mavros", "package_summary": "MAVROS -- MAVLink extendable communication node for ROS\n    with proxy for Ground Control Station.", "package_details": "MAVROS MAVLink extendable communication node ROS2. ROS API documentation moved [wiki.ros.org][wiki]. Features Communication autopilot serial port, UDP TCP Pro][px4] [ArduPilot][apm]) Internal proxy Ground Control Station (serial, UDP, TCP) Plugin system ROS-MAVLink translation Parameter manipulation tool Waypoint manipulation tool PX4Flow support [mavros_extras][mrext]) OFFBOARD mode support Geographic coordinates conversions. Limitations Linux. package dependent [ros-*-mavlink][mlwiki] build [mavlink-gbp-release][mlgbp]. exists ROS package index updates month. Connection URL Connection defined URL, supported type FCU GCS. Supported schemas: Serial: /path/to/serial/device[:baudrate] Serial: serial:///path/to/serial/device[:baudrate][?ids=sysid,compid] Serial hardware flow control: serial-hwfc:///path/to/serial/device[:baudrate][?ids=sysid,compid] UDP: udp://[bind_host][:port]@[remote_host[:port]][/?ids=sysid,compid] UDP broadcast GCS discovery: udp-b://[bind_host][:port]@[:port][/?ids=sysid,compid] UDP broadcast (permanent): udp-pb://[bind_host][:port]@[:port][/?ids=sysid,compid] TCP client: tcp://[server_host][:port][/?ids=sysid,compid] TCP server: tcp-l://[bind_host][:port][/?ids=sysid,compid] Note: Ids URL overrides system_id component_id parameters. bind_host default UDP default ports: UDP remote address updated time incoming packet bind port. TCP default port: Coordinate frames MAVROS translate Aerospace NED frames, FCUs ROS ENU frames vice-versa. translate airframe related data simply apply rotation ROLL axis. local apply ROLL YAW axes. read documents issue additional information. conversions handled src/lib/ftf_frame_conversions.cpp src/lib/ftf_quaternion_utils.cpp tested test/test_frame_conversions.cpp test/test_quaternion_utils.cpp Related issues: (outdated)][iss49], (outdated)][iss216], (outdated)][iss317], (outdated)][iss319], (outdated)][iss321], [#473][iss473]. Documents: [Frame Conversions][iss473rfc], [Mavlink coordinate frames][iss473table]. MAVROS conversion geodetic geocentric coordinates [GeographicLib][geolib] geographic_msgs NatSatFix.msg require LLA fields filled WGS-84 datum, meaning altitude height WGS-84 ellipsoid. conversion height geoid (AMSL, egm96 geoid model) height WGS-84 ellipsoid, vice-versa, plugins; ROS REP earth frame propagated ECEF (Earth-Centered, Earth-Fixed) local coordinates. functionalities GeographicLib order conversion geodetic coordinates geocentric coordinates; translation GPS coordinates local geocentric coordinates require definition local origin map frame, ECEF, calculate offset ENU. conversions supported GeographicLib classes methods implemented global_position plugin. Composite nodes https://docs.ros.org/en/foxy/Tutorials/Composition.html mavros::router::Router router node required support connections FCU(s), GCS(es) UAS nodes. Router add/remove endpoints fly node restart. mavros::uas::UAS node plugin container manages protocol plugins. plugin subnode Programs File truncated lines full file"},
{"url": "https://index.ros.org/p/mavros_examples", "package": "mavros_examples", "package_summary": "Example scripts demonstrating MAVROS usage", "package_details": "MAVROS Examples Overview mavros_examples package comprehensive educational resource extensive collection hands-on demonstrations showcasing correct implementation MAVROS services topics ROS ecosystem. package specifically designed individuals steps MAVROS seeking deepen understanding establish effective communication autopilot systems\u2014whether running ArduPilot firmware\u2014through standardized ROS interfaces. MAVROS framework continues evolve active development, numerous topics services deprecated, renamed, structurally modified time. ongoing evolution presents challenges newcomers, struggle find up-to-date, functional examples comply latest API specifications practices. bridge gap, mavros_examples package serves pedagogical tool practical reference library, enabling users quickly gain proficiency MAVROS ROS providing well-documented verified code samples aligned current standards, package minimizes learning curve prevents frustration outdated incompatible code. developing drone application, exploring MAVROS research simulation, transitioning ROS ROS package offers clear, structured path mastering MAVROS concepts implementing reliable communication patterns flight controller. Scripts mavros_examples/flight_task_control.py demonstrates basic task control operations MAVROS services. ideal starting point learning interact MAVROS flight control services. mavros_examples/waypoint_mission_manager.py demonstrates mission management MAVROS. script helps users understand interact MAVLink mission services MAVROS ROS"},
{"url": "https://index.ros.org/p/mavros_extras", "package": "mavros_extras", "package_summary": "Extra nodes and plugins for", "package_details": "mavros extras extra plugins nodes [mavros][mr]. ADSB Publish/subscribe location information ADS-B vehicle. cam_imu_sync Publish camera trigger data synchronisation IMU camera frames. debug_value Subs/Pubs debug msgs FCU. distance_sensor Publish DISTANCE_SENSOR message data FCU connected sensors companion computer. fake_gps Sends fake GPS local position estimation source data (motion capture, vision) FCU. gimbal_control Adds support Mavlink Gimbal Protocol publish set parameter tf_send=True. implementation plugin tested Freefly Astro mapping payload Auterion Sim. plugin built specifications https://mavlink.io/en/services/gimbal_v2.html adaptation suit ROS2 support publishing child frame labels gimbal_device_id field gimbal_attitude_msg. enable support multiple gimbal devices target platform publishing leaves tree. assumed frame gimbal device base_link_frd. control gimbal GimbalManagerConfigure, sysid_primary set default gimbal_device_id gimbal devices. control gimbal, set RoI\u2019s manually set gimbal\u2019s orientation service calls topic publishers gimbal control successfully validated, possibly due implimentation Freefly Astro Auterion\u2019s simulator. Feel free reach mark.beaty@adinkratech.com questions feedback plugin! gps_input Send GPS_INPUT messages FCU. gps_status Publish GPS_RAW GPS_RTK messages FCU. gps_rtk Sends RTCM messages FCU RTK Fix. log_transfer Expose firmware functionality, related log transfer mocap_pose_estimate Send motion capture pose estimate FCU. FCU. Data send vision_position plugin. obstacle_distance Send obstacle distance report FCU. odom Send odometry FCU estimator. File truncated lines full file"},
{"url": "https://index.ros.org/p/message_tf_frame_transformer", "package": "message_tf_frame_transformer", "package_summary": "Transforms messages of arbitrary type to a different frame using tf2::doTransform", "package_details": "message_tf_frame_transformer message_tf_frame_transformer package ROS node transform messages arbitrary type coordinate frame. helpful modify source code ROS nodes require data valid specific coordinate frame. Simply launch message_tf_frame_transformer node transform arbitrary messages target coordinate frame. Installation docker-ros Usage Supported Message Types Nodes Acknowledgements Installation message_tf_frame_transformer package released official ROS package easily installed package manager. sudo apt install ros-$ROS_DISTRO-message-tf-frame-transformer install message_tf_frame_transformer source, simply clone repository ROS workspace. dependencies listed ROS package.xml installed rosdep. message_tf_frame_transformer$ rosdep install --ignore-src --from-paths workspace$ colcon build --packages-up-to message_tf_frame_transformer --cmake-args -DCMAKE_BUILD_TYPE=Release docker-ros message_tf_frame_transformer Docker image, containerized docker-ros. docker run ghcr.io/ika-rwth-aachen/message_tf_frame_transformer:latest distro-specific tags, :ros2-rolling Usage order transform messages topic $INPUT_TOPIC frame $TARGET_FRAME_ID publish topic $OUTPUT_TOPIC, message_tf_frame_transformer node started topic remappings parameter setting. target_frame_id parameter required. source_frame_id parameter required non-stamped messages std_msgs/Header. topics default ~/input ~/transformed node\u2019s private namespace. ros2 run message_tf_frame_transformer message_tf_frame_transformer --ros-args \\~/input:=$INPUT_TOPIC \\~/transformed:=$OUTPUT_TOPIC source_frame_id:=$SOURCE_FRAME_ID target_frame_id:=$TARGET_FRAME_ID launch file enables launch tf2_ros/static_transform_publisher message_tf_frame_transformer node. transform topic coordinate frame single command. ros2 launch message_tf_frame_transformer message_tf_frame_transformer.launch.xml input_topic:=$INPUT_TOPIC output_topic:=$OUTPUT_TOPIC source_frame_id:=$SOURCE_FRAME_ID target_frame_id:=$TARGET_FRAME_ID roll:=$ROLL pitch:=$PITCH yaw:=$YAW Supported Message Types message_tf_frame_transformer package able support ROS message type integrates tf2::doTransform. message types explicitly supported. ROS Message geometry_msgs/msg/Point geometry_msgs/msg/Point32 geometry_msgs/msg/PointStamped geometry_msgs/msg/Polygon geometry_msgs/msg/PolygonStamped geometry_msgs/msg/Pose geometry_msgs/msg/PoseStamped geometry_msgs/msg/PoseWithCovariance geometry_msgs/msg/PoseWithCovarianceStamped geometry_msgs/msg/Quaternion geometry_msgs/msg/QuaternionStamped geometry_msgs/msg/Transform geometry_msgs/msg/TransformStamped geometry_msgs/msg/Vector3 geometry_msgs/msg/Vector3Stamped geometry_msgs/msg/Wrench geometry_msgs/msg/WrenchStamped File truncated lines full file"},
{"url": "https://index.ros.org/p/microstrain_inertial_examples", "package": "microstrain_inertial_examples", "package_summary": "Simple examples using the microstrain_inertial_driver for MicroStrain sensors.", "package_details": "Description Collection simple examples started microstrain_inertial_driver. Table Contents Common Steps Device Examples CV7-INS GV7-INS GX5-GNSS CX5-GNSS GX5-AHRS CX5-AHRS GX5-AR CX5-AR Examples CV7-INS GV7-INS NMEA aux Common Steps examples, steps running Install udev rules ROS package index, installed automatically) Connect device. Modify port baudrate parameters .yml file running point port device connected important serial USB. Install build microstrain_inertial_examples microstrain_inertial_driver packages Source setup.bash building source, run: source install/setup.bash building installing ROS package index, run: source /opt/ros/<ROS Version>/setup.bash installing Device Examples package launch files show users simple starting configuration devices. CV7-INS GV7-INS NOTE: works 3DM-CV7-INS, 3DM-GV7-INS CV7-INS simple outputting relative position data CV7-INS displaying data rviz. shows input external position velocity sensor. run run command common steps: ros2 launch microstrain_inertial_examples cv7_ins_launch.py files: launch/cv7_ins_launch.py config/cv7_ins/cv7_ins.yml config/cv7_ins/display.rviz NOTE: works 3DM-CV7-AR, 3DM-CV7-AHRS, 3DM-GV7-AR, 3DM-GV7-AHRS. simple outputting orientation, angular linear velocity displaying data rviz. run run command common steps: ros2 launch microstrain_inertial_examples cv7_launch.py files: launch/cv7_launch.py config/cv7/cv7.yml config/cv7/display.rviz NOTE: works 3DM-GQ7 simple outputting global relative position data displaying data rviz. assumes user 3DM-RTK connected aux port, tweaked require 3DM-RTK. run common steps Ensure antennas connected. microstrain Antenna Installation page Update gnss1_antenna_offset gnss2_antenna_offset config/gq7/gq7.yml antenna offsets Run command: ros2 launch microstrain_inertial_examples gq7_launch.py files: launch/gq7_launch.py File truncated lines full file"},
{"url": "https://index.ros.org/p/mola_common", "package": "mola_common", "package_summary": "Common CMake scripts to all MOLA modules", "package_details": "Distro Build dev Build releases Stable version ROS Humble ROS Jazzy ROS Kilted ROS Rolling EOL distro version ROS1 Noetic ROS Iron mola_common Common CMake scripts MOLA modules Refer main MOLA repository. License: BSD-3"},
{"url": "https://index.ros.org/p/moveit_msgs", "package": "moveit_msgs", "package_summary": "Messages, services and actions used by MoveIt", "package_details": "MoveIt Msgs package includes ROS messages specific MoveIt Travis Continuous Integration GitHub Actions:"},
{"url": "https://index.ros.org/p/dual_arm_panda_moveit_config", "package": "dual_arm_panda_moveit_config", "package_summary": "", "package_details": "Dual Franka Emika Panda MoveIt Configuration"},
{"url": "https://index.ros.org/p/moveit_resources_fanuc_description", "package": "moveit_resources_fanuc_description", "package_summary": "Fanuc Resources used for MoveIt testing", "package_details": "fanuc_description URDF model meshes contained package copied ROS-Industrial fanuc_m10ia_support package adapted moveit_resources. imported files released BSD 3-Clause license."},
{"url": "https://index.ros.org/p/moveit_resources_fanuc_moveit_config", "package": "moveit_resources_fanuc_moveit_config", "package_summary": "", "package_details": "MoveIt Resources testing: Fanuc M-10iA. project-internal moveit configuration testing MoveIt. ROS-Industrial\u2019s upstream files work robot!"},
{"url": "https://index.ros.org/p/moveit_resources_panda_description", "package": "moveit_resources_panda_description", "package_summary": "panda Resources used for MoveIt testing", "package_details": "panda_description Note: package panda.urdf newer panda.urdf.xacro. XACRO created support finding package resource files dynamically needed Gazebo. URDF needed RobotModelTestUtils doesn\u2019t support xacro URDF model meshes contained package copied frankaemika franka_ros package adapted moveit_resources. imported files released Apache-2.0 license."},
{"url": "https://index.ros.org/p/moveit_resources_panda_moveit_config", "package": "moveit_resources_panda_moveit_config", "package_summary": "", "package_details": "MoveIt Resources testing: Franka Emika Panda project-internal moveit configuration testing MoveIt. official panda_moveit_config work robot!"},
{"url": "https://index.ros.org/p/moveit_visual_tools", "package": "moveit_visual_tools", "package_summary": "Helper functions for displaying and debugging MoveIt data in Rviz via published markers", "package_details": "MoveIt Visual Tools Helper functions displaying debugging MoveIt data Rviz published markers, trajectories, MoveIt collision objects. hard understand internally MoveIt, quick convenience functions easily visualize code. package built top rviz_visual_tools features included class inheritance. package helps visualize: Basic Rviz geometric shapes MoveIt collision objects MoveIt ROS trajectories Robot states effectors Interactive markers move robot arms remote applications open source project developed PickNik Robotics. professional ROS development consulting? Contact projects@picknik.ai free consultation. Status: ROS: Github Actions ROS Buildfarm AMD64 Focal Source Build Ubuntu LTS ROS Buildfarm AMD64 Focal Devel Build Ubuntu LTS ROS2: GHA: Build Test GHA: Formatting ROS2 Install Install Source Install moveit2 instructions sourcing moveit workspace clone repository colcon workspace, import install dependencies build: source ~/ws_moveit/install/setup.bash $COLCON_WS/src git clone ros2 https://github.com/ros-planning/moveit_visual_tools vcs import moveit_visual_tools/moveit_visual_tools.repos rosdep install --from-paths --ignore-src --rosdistro foxy $COLCON_WS colcon build --event-handlers desktop_notification- status- --cmake-args -DCMAKE_BUILD_TYPE=Release Quick Start Demo run demos displaying robot states collision objects: ros2 launch moveit_visual_tools demo_rviz.launch.py Code API VisualTools Class Reference Usage assume helper functions class. Initialize Add includes: #include <moveit_visual_tools/moveit_visual_tools.h> Add class\u2019s member variables: visualizing rviz moveit_visual_tools::MoveItVisualToolsPtr visual_tools_; class\u2019 constructor add: visual_tools_ std::make_shared<moveit_visual_tools::MoveItVisualTools>(node_, \"world\", \"/moveit_visual_tools\"); Collision Object Functions Helpers adding removing objects MoveIt planning scene. stands Collision Object ACO stands Active Collision Object. cleanupCO cleanupACO attachCO publishCollisionBlock publishCollisionCylinder publishCollisionTree publishCollisionTable publishCollisionWall Animate Trajectories Higher level robot trajectory functions publishTrajectoryPath publishTrajectoryPoint File truncated lines full file"},
{"url": "https://index.ros.org/p/mp2p_icp", "package": "mp2p_icp", "package_summary": "A repertory of multi primitive-to-primitive (MP2P) ICP algorithms in C++", "package_details": "Distro Build dev Build releases Stable version ROS Humble amd64 arm64 ROS Jazzy amd64 arm64 ROS Kilted amd64 arm64 ROS Rolling amd64 arm64 EOL Distro release ROS1 Noetic ROS Iron mp2p_icp libraries multi primitive-to-primitive (MP2P) ICP algorithms flexible point cloud processing pipelines. mp2p_icp mola_lidar_odometry framework: Main library documentation API License: BSD 3-Clause (Note module MOLA license) Introduction project libraries: mp2p_icp_map: mp2p_icp::metric_map_t generic metric map container. Metric map files extension serializations instances class. mp2p_icp_common: utility classes ParameterSources IMU-based velocity buffers. mp2p_icp: ICP algorithms. depends mp2p_icp_map. mp2p_icp_filters: point cloud filtering manipulation algorithms. depends mp2p_icp_map. applications: kitti2mm: Converts KITTI-like .bin files files. mm-filter: CLI tool apply pipeline input metric map saving result metric map file. mm-info: CLI tool read metric map describe contents. mm-viewer: GUI tool visualize (metric map) files. mm2txt: CLI tool export layers metric map CSV/TXT. icp-log-viewer: GUI inspect results ICP runs. icp-run: Standalone program run ICP pipelines. sm2mm: CLI tool convert simple map *.simplemap SLAM mapping session) metric map configurable pipeline configuration file. sm-cli: CLI tool inspect, visualize, modify simple maps *.simplemap SLAM mapping session). txt2mm: CLI tool convert pointclouds CSV/TXT files mp2p_icp Key classes project full docs): mp2p_icp::metric_map_t: generic data type store raw processed point clouds, segmented, discrete extracted features. Note filtering point clouds intentionally left scope library. MOLA implementations. mp2p_icp::ICP_Base: uniform API matching generic point clouds. Implementations/wrappers ICP algorithms uniform API. library exposes complete iterative ICP algorithms, underlying optimal transformation estimators run ICP iteration."},
{"url": "https://index.ros.org/p/mrpt_msgs", "package": "mrpt_msgs", "package_summary": "ROS messages for MRPT classes and objects", "package_details": "Distro Develop branch Build Stable release ROS2 Humble ROS2 Jazzy ROS2 Kilted ROS2 Rolling EOL Distro Stable release ROS1 Melodic ROS1 Noetic ROS2 Foxy ROS2 Galactic ROS2 Iron mrpt_msgs ROS messages MRPT classes objects ROS wiki: https://wiki.ros.org/mrpt_msgs Usage examples tutorials: https://wiki.ros.org/mrpt_navigation/Tutorials Branches: master common branch ROS1 ROS2."},
{"url": "https://index.ros.org/p/mrpt_map_server", "package": "mrpt_map_server", "package_summary": "This package provides a ROS 2 node that publishes a static map for other nodes to use it. Unlike classic ROS 1 ``map_server``, this node can publish a range of different metric maps, not only occupancy grids.", "package_details": "mrpt_map_server Table Contents Overview Node: mrpt_map_server Working rationale ROS Parameters Subscribed topics Published topics Services Template ROS launch files Demos Overview package ROS node publishes static map nodes classic ROS map_server, node publish range metric maps, occupancy grids. Node: mrpt_map_server Working rationale ROS node loads parameters start loads map requested parameters, publishes metric map topics. Messages transient local, subscribers receive start formats maps read: preferred format mp2p_icp\u2019s metric map file generated sm2mm MRPT \u201csimplemap\u201d (*.simplemap) SLAM session, mola_lidar_odometry. ROS standard YAML file. *.yaml file specifies metadata occupancy gridmap, stored accompanying image file. map encapsulated metric_map_t map layer map. serialized MRPT metric map file. *.metricmap file existing MRPT metric maps (point clouds, grid maps, custom applications SLAM packages. map encapsulated metric_map_t map layer map. map source, node internally build metric_map_t map layers, published uniform subscribers. Refer launch files file examples usage methods. ROS Parameters Related determining read map (Option mm_file (Default=undefined). Determine metric_map_t file load, coming sm2mm custom user application mp2p_icp. (Option map_yaml_file (Default=undefined): Define parameter load ROS standard YAML file gridmap. (Option mrpt_metricmap_file (Default=undefined). Related ROS published topics: frame_id (Default=map): frame. pub_mm_topic (Default=mrpt_map). map source, eventually stored mp2p_icp\u2019s metric_map_t structure, layer published layer topic type PointCloud2, OccupancyGrid,\u2026). metric map published generic serialized object topic defined parameter pub_mm_topic. Subscribed topics Published topics ${pub_mm_topic}/metric_map (Default: mrpt_map/metric_map) (mrpt_msgs::msg::GenericObject) (topic changed parameter pub_mm_topic). ${pub_mm_topic}/geo_ref (Default: mrpt_map/geo_ref) (mrpt_msgs::msg::GenericObject). MRPT-serialization mp2p_icp::metric_map_t::Georeferencing metadata (topic changed parameter pub_mm_topic). ${pub_mm_topic}/geo_ref_metadata (Default: mrpt_map/geo_ref_metadata)(mrpt_nav_interfaces::msgs::msg::GeoreferencingMetadata). ROS plain message contents mp2p_icp::metric_map_t::Georeferencing metadata. ${pub_mm_topic}/<LAYER_NAME> (Default: mrpt_map/<LAYER_NAME>) (mrpt_msgs::msg::GenericObject) ${pub_mm_topic}/<LAYER_NAME>_points (sensor_msgs::msg::PointCloud2), map layer. ${pub_mm_topic}/<LAYER_NAME>_gridmap (nav_msgs::msg::OccupancyGrid) ${pub_mm_topic}/<LAYER_NAME>_gridmap_metadata (nav_msgs::msg::MapMetaData) map layer options layer named map. Published geo-referenced maps Refer documentation MOLA project geo-referencing description utm enu frames, defined package fed file geo-referenced metadata. Services GetLayers: Returns list map layer names: usage: ros2 service call /map_server_node/get_layers mrpt_nav_interfaces/srv/GetLayers requester: making request: mrpt_nav_interfaces.srv.GetLayers_Request() response: mrpt_nav_interfaces.srv.GetLayers_Response(layers=['map']) GetGridmapLayer: request map layer type gridmap. ```bash usage: ros2 service call /map_server_node/get_grid_layer mrpt_nav_interfaces/srv/GetGridmapLayer \u201clayer_name: \u2018map\u2019\u201d File truncated lines full file"},
{"url": "https://index.ros.org/p/mrpt_navigation", "package": "mrpt_navigation", "package_summary": "Tools related to the Mobile Robot Programming Toolkit (MRPT).\n    Refer to https://wiki.ros.org/mrpt_navigation for further documentation.", "package_details": "MRPT ROS wrappers Mobile Robot Programming Toolkit (MRPT) classes apps. Refer http://wiki.ros.org/mrpt_navigation documentation."},
{"url": "https://index.ros.org/p/mrpt_pf_localization", "package": "mrpt_pf_localization", "package_summary": "Package for robot 2D self-localization using dynamic or static (MRPT or ROS) maps.\n\tThe interface is similar to amcl (https://wiki.ros.org/amcl)\n   but supports different particle-filter algorithms, several grid maps at\n   different heights, range-only localization, etc.", "package_details": "mrpt_pf_localization mrpt_pf_localization Overview Related papers Configuration Metric map conceptual model Demos LIDAR localization gridmap Range-only localization set fixed, radio beacons Node: mrpt_pf_localization Working rationale ROS parameters Subscribed topics Published topics Template ROS launch files Overview package ROS node self-localization particle filter-based algorithms number metric maps reference maps \u201ccompare\u201d sensor observations. sense, package equivalent classic ROS amcl, superpowers Features: number algorithms. map types: Occupancy grid maps images, ROS yaml files, MRPT binary format), point clouds, beacon map range-only sensors). present, combinations exposed node: Map: occupancy grid, Sensor: capable generating point cloud. occupancy grids, height, laser scans robot height. Map: beacons predefined positions, Sensor: range-only. Range-Only Localization. Map: point cloud, Sensor: Lidars (TO-DO Aug GNSS (GPS) readings, parallel (TO-DO Aug Multiple simultaneous sensors: combinations probabilistic information automatically fused Related papers Optimal particle filtering algorithm: Blanco, Gonzalez-Jimenez, Fernandez-Madrigal, \u201cOptimal Filtering Non-Parametric Observation Models: Applications Localization SLAM\u201d, International Journal Robotics Research (IJRR), vol. (PDF) Range-Only localization: Gonzalez-Jimenez, Blanco, Galindo, Ortiz-de-Galisteo, Fernandez-Madrigal, Moreno, Martinez, \u201cMobile Robot Localization based Ultra-Wide-Band Ranging: Particle Filter Approach\u201d, Robotics Autonomous Systems, vol. (PDF) Configuration algorithms parameters grouped conceptual topics: Algorithm: Parameters affecting particle filter adaptive sampling method. parameters set main config YAML file. Actions: motion model uncertainty. parameters set main config YAML file. Observations: parameters spread part observations lidar/sonar carry information noisy metric maps. key parameters MRPT called likelihood options metric map. Metric map conceptual model Metric map likelihood options key tuning localization system, \u201ctrust\u201d sensor readings, downsample rays, input metric map MRPT native mrpt::maps::CMetricMap format includes mp2p_icp\u2019s metric map files), map set likelihood parameters, defined time creating map source application. mrpt_pf_localization node overriding likelihood options ease tuning adjusting touching original map. MRPT-native map sources ROS gridmap yaml files), set important options overriding mechanism. Refer node launch arguments details. Demos LIDAR localization gridmap MVSim Demo video. Run: ros2 launch mrpt_tutorials demo_localization_pf_mvsim_2d_lidar.launch.py start: mrpt_pf_localization map received ROS topic, mrpt_map_server server loading publishing gridmap reference map ROS-styled map.yaml file, rviz2 visualization, mvsim simulate live robot teleoperated. Range-only localization set fixed, radio beacons Run: ros2 launch mrpt_localization demo_ro.launch start: File truncated lines full file"},
{"url": "https://index.ros.org/p/mrpt_reactivenav2d", "package": "mrpt_reactivenav2d", "package_summary": "Reactive navigation for wheeled robots using MRPT navigation algorithms (TP-Space)", "package_details": "mrpt_reactivenav2d Overview package ROS node reactive navigation wheeled robots MRPT navigation algorithms (TP-Space). cite Main papers IROS06 ([PDF](https://ingmec.ual.es/~jlblanco/papers/blanco2006tps_IROS.pdf)) ```bibtex @INPROCEEDINGS{, author {Blanco, Jos{\\'{e}}-Luis Gonz{\\'{a}}lez-Jim{\\'{e}}nez, Javier Fern{\\'{a}}ndez-Madrigal, Juan-Antonio}, month oct, title Trajectory Parameter Space (TP-Space): Space Representation Non-Holonomic Mobile Robot Reactive Navigation}, booktitle {IEEE International Conference Intelligent Robots Systems (IROS'06)}, year location {Beijing (China)} related papers [IEEE RAM 2023](https://ieeexplore.ieee.org/abstract/document/10355540/) ```bibtex @ARTICLE{xiao2023barn, author {Xiao, Xuesu Zifan Warnell, Garrett Stone, Peter Gebelli Guinjoan, Ferran Rodrigues, Romulo Bruyninckx, Herman Mandala, Hanjaya Christmann, Guilherme Blanco, Jos{\\'{e}}-Luis Somashekara Rai, Shravan}, month {{aug}}, title {Autonomous Ground Navigation Highly Constrained Spaces: Lessons learned BARN Challenge ICRA journal {IEEE Robotics Automation Magazine}, volume number year url {https://ieeexplore.ieee.org/abstract/document/10355540/}, doi {10.1109/MRA.2023.3322920}, pages IJARS [PDF](https://ingmec.ual.es/~jlblanco/papers/blanco2015tps_rrt.pdf) ```bibtex @ARTICLE{bellone2015tprrt, author {Blanco, Jos{\\'{e}}-Luis Bellone, Mauro Gim{\\'{e}}nez-Fern{\\'{a}}ndez, Antonio}, month title {TP-Space RRT: Kinematic path planning non-holonomic any-shape vehicles}, journal {International Journal Advanced Robotic Systems}, volume number year url {http://www.intechopen.com/journals/international_journal_of_advanced_robotic_systems/tp-space-rrt-ndash-kinematic-path-planning-of-non-holonomic-any-shape-vehicles}, doi Configuration main parameters approach Robot shape: foot-print\u201d robot. PTGs: families trajectories, plan interesting motor command. Motion decision: parameters tuned modify heuristics control motor actions selected. Demos Navigation simulated warehouse ros2 launch mrpt_tutorials reactive_nav_demo_with_mvsim.launch.py start: mrpt_reactivenav2d autonomous reactive navigation package), mrpt_pointcloud_pipeline generating input obstacles navigator lidar data, mvsim simulate live robot controlled navigator. Node: mrpt_reactivenav2d_node Working rationale ROS node comprises XXX ROS parameters XXX Subscribed topics xxx Published topics xxx reactivenav_events (std_msgs/String): message string keyword published important navigation event. File truncated lines full file"},
{"url": "https://index.ros.org/p/mrpt_tps_astar_planner", "package": "mrpt_tps_astar_planner", "package_summary": "ROS Path Planner with A* in TP-Space Engine", "package_details": "mrpt_tps_astar_planner Overview package ROS node PTG-based planner mrpt_path_planning publish waypoint sequences moving non-holonomic robot account real shape, orientation, kinematic constraints. cite TBD! Configuration Write Demos Write Node: mrpt_tps_astar_planner_node Working rationale lattice PTGs sample collision-free paths. implementation anytime algorithm. ROS parameters topic_wp_seq_pub (Default: /waypoints) Desired topic publish calculated paths. topic_goal_sub: topic subscribe goal poses (geometry_msgs/PoseStamped). show_gui: Shows MRPT GUI planned paths. topic_gridmap_sub: (comma separated) topic names subscribe occupancy grid maps. topic_obstacle_points_sub: (comma separated) topic names subscribe obstacle points. Subscribed topics xxx Published topics <topic_wp_seq_pub> (Default: /waypoints) (mrpt_msgs::msg::WaypointSequence): Calculated trajectory, mrpt_msgs format complete details waypoints. <topic_wp_seq_pub>_path (Default: /waypoints_path) (nav_msgs::msg::Path): Calculated trajectory, nav_msgs::Path. visualization Services Write Template ROS launch files package launch/tps_astar_planner.launch.py: ros2 launch tps_astar_planner tps_astar_planner.launch.py user projects launch planner, setting launch arguments: XXX: XXX"},
{"url": "https://index.ros.org/p/mrpt_path_planning", "package": "mrpt_path_planning", "package_summary": "Path planning and navigation algorithms for robots/vehicles moving on planar environments. This library builds upon mrpt-nav and the theory behind PTGs to generate libraries of \"motion primitives\" for vehicles with arbitrary shape and realistic kinematics and dynamics.", "package_details": "mrpt_path_planning Path planning navigation algorithms robots/vehicles moving planar environments. library builds mrpt-nav theory PTGs generate libraries \u201cmotion primitives\u201d vehicles arbitrary shape realistic kinematics dynamics. Status ROS build farm Distro Build dev Build releases Stable version ROS Humble ROS Jazzy ROS Kilted ROS Rolling EOL Distro version ROS Noetic ROS Iron Build requisites MRPT mvsim (optional run live control simulator). Ubuntu newer, installed sudo apt install libmrpt-dev older versions Ubuntu: MRPT PPA build sources preferred, ROS package `mrpt2`): sudo add-apt-repository ppa:joseluisblancoc/mrpt sudo apt update sudo apt install libmrpt-dev code CMake script: find_package(mrpt_path_planning REQUIRED) target_link_libraries(YOUR_TARGET mpp::mrpt_path_planning) Demo runs bin/path-planner-cli --write-planner-parameters tps-rrtstar.yaml Command-line app test planner: build-Release/bin/path-planner-cli --planner \"mpp::TPS_Astar\" share/ptgs_holonomic_robot.ini --obstacles share/obstacles_01.txt --planner-parameters share/mvsim-demo-astar-planner-params.yaml --costmap-obstacles share/costmap-obstacles.yaml build-Release/bin/path-planner-cli --write-planner-parameters tps-rrtstar.yaml Edit tps-rrtstar.yaml desired build-Release/bin/path-planner-cli share/ptgs_holonomic_robot.ini --obstacles share/obstacles_01.txt --planner-parameters tps-rrtstar.yaml --max-iterations --costmap-obstacles share/costmap-obstacles.yaml --random-seed GUI live navigation simulator: Holonomic robot: build-Release/bin/selfdriving-simulator-gui \u2013waypoints share/mvsim-demo-waypoints01.yaml share/mvsim-demo.xml share/ptgs_holonomic_robot.ini \u2013nav-engine-parameters share/nav-engine-params.yaml \u2013planner-parameters share/mvsim-demo-astar-planner-params.yaml \u2013prefer-waypoints-parameters share/costmap-prefer-waypoints.yaml \u2013global-costmap-parameters share/costmap-obstacles.yaml \u2013local-costmap-parameters share/costmap-obstacles.yaml DEBUG Ackermann vehicle: build-Release/bin/selfdriving-simulator-gui File truncated lines full file"},
{"url": "https://index.ros.org/p/mrt_cmake_modules", "package": "mrt_cmake_modules", "package_summary": "CMake Functions and Modules for automating CMake", "package_details": "MRT CMake Modules (Massively Reduced Time writing CMake Modules(*)) Maintainer status: maintained Maintainer: Kevin R\u00f6sch, Fabian Poggenhans Author: Johannes Beck, Claudio Bandera, Fabian Poggenhans License: BSD, files MIT Bug feature tracker: https://gitlab.mrt.uni-karlsruhe.de/MRT/mrt_cmake_modules/issues Source: git https://gitlab.mrt.uni-karlsruhe.de/MRT/mrt_cmake_modules.git (branch: master) Imagine whould write CMakeLists.txt file forget install update add file, time lost figuring call find_package dependencies, mrt_cmake_modules files fixed structure, library executable code separate packages package.xml packages depend don\u2019t agree ways require modify template file bit. hand, lot free: Resolution dependencies CMake Automatic generation Nodes/Nodelets Supports Python(2/3) Python bindings pybind11/boost-python Automated unittest detection execution (including ROS tests) Automated code coverage generation Support sanitizers Support running clang-tidy Automated install scripts/launchfiles/executables/libraries\u2026 correct location experimental support ROS2 Conan builds MRT stands *Institut Mess- und Regelungstechnik, institute develops package. Building mrt_cmake_modules leightweight CMake python) scripts. dependency catkin lcov code coverage). started Interested? order CMake template file, run small script: rosrun mrt_cmake_modules generate_cmakelists.py <package_name> [--ros] [--exe]. create CMakeLists.txt file ready project. distinguish types packages --ros --exe flags): Library package: dependency ros catkin). goal build lib<package>.so, headers, python module, python bindings. mixture unittests, Ros library package (\u2013ros): Similar message, action configuration files Executable package (\u2013exe): number executables, scripts python modules scripts. unittests Node/Nodelet package (\u2013ros \u2013exe): number nodes nodelets, python nodes launchfiles. rostests Package structure understand packages layed tree package, implies build. Libraries structure package called example_package. works box CMakeLists.txt created generate_cmakelists.py example_package --ros: CMakeLists.txt generated CMakeLists include headers package. package example_package ROS convention include/<package_name> a_header.hpp internal Headers cpp files package internal_header.hpp msg a_message.msg Messages files automatically generated --ros) package.xml pybind11-dev bindings python_api Folder python bindings. file becoms module python_bindings.cpp \"import example_package.python_bindings\" more_python_bindings.cpp Refer pybind11 doc content file README.md readme src cpp file filder part libexample_package.so examplefile.cpp onemorefile.cpp example_package Python modules src/<package_name> pythonmodule.py \"import example_package.pythonmodule\" __init__.py test unittests. executed running test run_tests target test_example_package.cpp file separate unittest executable test_pyapi.py file matches testMatch regular expression executed nosetest. Executables https://nose.readthedocs.io/ Note structure optional left don\u2019t CMakeLists.txt Executables, Nodes Nodelets structure package called example_package_ros_tool. works box CMakeLists.txt created generate_cmakelists.py example_package_ros_tool --exe --ros: ```bash CMakeLists.txt cfg ConfigFile.cfg Files passed dynamic_reconfigure launch launch files package some_node.launch some_nodelet.launch some_python_node.launch params parameter files installed some_parameters.yaml some_python_parameters.yaml nodelet_plugins.xml reference nodelet library lib/lib--nodelet package.xml manifest. reference nodelet_plugins.xml README.md File truncated lines full file"},
{"url": "https://index.ros.org/p/naoqi_libqi", "package": "naoqi_libqi", "package_summary": "Aldebaran's libqi: a core library for NAOqiOS development", "package_details": "ROS port libQi libQi middleware RPC, type-erasure, cross-language interoperability, abstractions, logging facilities, asynchronous task management, dynamic module loading. Compilation Clone project ROS workspace src/), run colcon build. shows features framework, refer documentation details. #include <boost/make_shared.hpp> #include <qi/log.hpp> #include <qi/applicationsession.hpp> #include <qi/anyobject.hpp> qiLogCategory(\"myapplication\"); class MyService public: void myFunction(int val) qiLogInfo() \"myFunction called val; qi::Signal<int> eventTriggered; qi::Property<float> angle; register service type-system QI_REGISTER_OBJECT(MyService, myFunction, eventTriggered, angle); void print() qiLogInfo() \"print called\"; int main(int argc, char* argv[]) qi::ApplicationSession app(argc, argv); connect session included app app.start(); qi::SessionPtr session app.session(); register service session->registerService(\"MyService\", boost::make_shared<MyService>()); service middleware qi::AnyObject obj session->service(\"MyService\").value(); call myFunction obj.call<void>(\"myFunction\", call print seconds qi::async(&print, qi::Seconds(2)); block ctrl-c app.run(); run program ./myservice --qi-standalone standalone server ./myservice --qi-url tcp://somemachine:9559 connect galaxy sessions Links Upstream repository: http://github.com/aldebaran/libqi Documentation: http://doc.aldebaran.com/libqi/ IRC Channel: freenode. Upstream Maintainers: Jo\u00ebl Lamotte jlamotte@aldebaran.com J\u00e9r\u00e9my Monnon jmonnon@aldebaran.com Matthieu Paindavoine matthieu.paindavoine@softbankrobotics.com Vincent Palancher vincent.palancher@external.softbankrobotics.com package.xml ROS maintainers. ROS Distro Binary Status Source Status Github Build Jazzy Iron Humble"},
{"url": "https://index.ros.org/p/naoqi_libqicore", "package": "naoqi_libqicore", "package_summary": "Aldebaran's libqicore: a layer on top of libqi", "package_details": "naoqi_libqicore fork define naoqi_libqicore ROS2 package, based libqicore. Compilation compile naoqi_libqicore, clone repository ROS workspace colcon build command. note naoqi_libqi dependency project, package ros-distro-naoqi-libqi installed, build naoqi_libqi project source workspace. note checkout branch ROS distro galactic-devel Galactic, foxy-devel Foxy, Working container work project dev container: docker build ros2-naoqi-libqicore --target dev_with_deps_sources docker run --volume=.:/home/user/ws/src/naoqi-libqicore ros2-naoqi-libqicore Edit Dockerfile set target distro work Status source binary status reflect buildfarm builds package. github build specifies wether build project source, assuming upstream packages released (naoqi_libqi). ROS Distro Binary Status Source Status Github Build Jazzy Iron Humble"},
{"url": "https://index.ros.org/p/network_interface", "package": "network_interface", "package_summary": "Network interfaces and messages.", "package_details": "Platform-agnostic Network Interface API library developed ROS nodes standardized, self-contained, platform-agnostic API TCP UDP communications."},
{"url": "https://index.ros.org/p/nmea_msgs", "package": "nmea_msgs", "package_summary": "The nmea_msgs package contains messages related to data in the NMEA format.", "package_details": "nmea_msgs package message definitions working NMEA data. ROS Wiki: http://wiki.ros.org/nmea_msgs"},
{"url": "https://index.ros.org/p/nmea_navsat_driver", "package": "nmea_navsat_driver", "package_summary": "Package to parse NMEA strings and publish a very simple GPS message. Does not\n        require or use the GPSD deamon.", "package_details": "nmea_navsat_driver ROS driver parse NMEA strings publish standard ROS NavSat message types. require GPSD daemon running. API package released Code API. ROS API documentation information http://ros.org/wiki/nmea_navsat_driver"},
{"url": "https://index.ros.org/p/nonpersistent_voxel_layer", "package": "nonpersistent_voxel_layer", "package_summary": "include\n        This package provides an implementation of a 3D costmap that takes in sensor\n        data from the world, builds a 3D occupancy grid of the data for only one iteration.", "package_details": "nonpersistent_voxel_layer ROS2 drop replacement voxel layer persist readings iterations ray tracing map maintenance undesirable. Bloom released, install sudo apt-get update sudo apt-get install ros-eloquent-nonpersistent-voxel-layer Created response rolling local costmap layer persist readings due specific sensor community, people ros answers asked similar tool. helps sensors sonars, blob marking, radars, aren\u2019t dense clear effectively. http://wiki.ros.org/nonpersistent_voxel_grid costmap commons global_costmap: global_costmap: ros__parameters: nonpersisting_obstacle_layer: plugin: nav2_costmap_2d/NonPersistentVoxelLayer enabled: true track_unknown_space: true max_obstacle_height: unknown_threshold: mark_threshold: combination_method: obstacle_range: origin_z: z_resolution: z_voxels: publish_voxel_map: true observation_sources: rgbd rgbd: data_type: PointCloud2 topic: camera/depth/points marking: true min_obstacle_height: max_obstacle_height: list plugins local/global global_costmap: global_costmap: ros__parameters: use_sim_time: True plugin_names: [\"static_layer\", \"nonpersisting_obstacle_layer\"] parameters Parameters voxel layer, clearing bits. Voxel Layer API. good minimum working"},
{"url": "https://index.ros.org/p/ntpd_driver", "package": "ntpd_driver", "package_summary": "ntpd_driver sends TimeReference message time to ntpd server", "package_details": "ntpd_driver ROS node listen sensor_msgs/TimeReference send ntpd SHM gpsd). Parameter ~/shm_unit define SHM unit ntp.conf) (int, default: Parameter ~/time_ref_topic define topic subscribe (string, default: \"~/time_ref\"). Parameter ~/fixup_date enable/disable date fixup (bool, default: false) System configuration ntpd configuration Add /etc/ntp.conf: GPS SHM driver server minpoll maxpoll fudge time1 stratum refid ROS restart ntp service. Run rosrun ntpd_driver shm_driver _shm_unit:=2 _time_ref_topic:=/mavros/time_reference chrony configuration Add /etc/chrony/chrony.conf: SHM driver refclock SHM delay refid ROS restart chrony service. Run rosrun ntpd_driver shm_driver _shm_unit:=0 _time_ref_topic:=/mavros/time_reference Date fixup configuration (sudo) Raspberry ntpd reject SHM data system date set JAN fix shm_driver set system time unset. setting date program requires root privileges, sudo. Add /etc/sudoers visudo): %sudo ALL=NOPASSWD: /bin/date"},
{"url": "https://index.ros.org/p/ntrip_client", "package": "ntrip_client", "package_summary": "NTRIP client that will publish RTCM corrections to a ROS topic, and optionally subscribe to NMEA messages to send to an NTRIP server", "package_details": "ROS NTRIP Client Description ROS node communicate NTRP caster receive RTCM connections publish ROS topic. works virtual NTRIP servers subscribing NMEA messages sending NTRIP server Important Branches important branches checkout: ros ROS1 implementation node. ros2 ROS2 implementation node. Build Instructions Building source Install ROS2 create workspace: Installing Configuring ROS2 Environment Move entire ntrip_client folder your_workspace/src directory. Install rosdeps package: rosdep install --from-paths ~/your_workspace/src --ignore-src Build workspace: ~/your_workspace colcon build source ~/your_workspace/install/setup.bash source command run terminal prior launching ROS node. Connect NTRIP caster server access NTRIP caster server connect internet. ros2 launch ntrip_client ntrip_client_launch.py Optional launch parameters: host: Hostname address NTRIP server connect port: Port connect server. Default: mountpoint: Mountpoint connect NTRIP server. ntrip_version: Ntrip-Version header initial HTTP request caster. authenticate: authenticate server, send unauthenticated request. set true, username, password supplied. username: Username authenticating NTRIP server. authenticate true password: Password authenticating NTRIP server. authenticate true ssl: connect SSL. cert, key, ca_cert options effect true cert: NTRIP caster configured cert based authentication, option client certificate key: NTRIP caster configured cert based authentication, option private key ca_cert: NTRIP caster signed certs, chain, option file rtcm_message_packege: type ROS RTCM message published node. Defaults mavros_msgs, supports rtcm_msgs Connect NTRIP \u201cdevice\u201d internet connection, NTRIP \u201cdevice\u201d receive connections MicroStrain 3DM-RTK. ros2 launch ntrip_client ntrip_serial_device_launch.py Optional launch parameters: port: Serial port device connected baudrate: Baudrate connect serial port Default rtcm_message_packege: type ROS RTCM message published node. Defaults mavros_msgs, supports rtcm_msgs Topics node topics interest: /rtcm: node publish RTCM corrections received server topic RTCM messages. messages consumed nodes microstrain_inertial_driver NOTE: type message switched mavros_msgs/RTCM rtcm_msgs/Message rtcm_message_package parameter /nmea: node subscribe topic receive NMEA sentence messages NTRIP server. needed virtual NTRIP server NTRIP device /fix: serves exact purpose /nmea, facilitates receiving global position NMEA format License ntrip_client released MIT License LICENSE file source distribution. Copyright MicroStrain HBK"},
{"url": "https://index.ros.org/p/octomap_ros", "package": "octomap_ros", "package_summary": "octomap_ros provides conversion functions between ROS and OctoMap's native types.\n    This enables a convenvient use of the octomap package in ROS.", "package_details": "octomap_ros ROS package provide conversion functions ROS OctoMap\u2019s native types. repository continues groovy branch imported SVN: http://alufr-ros-pkg.googlecode.com/svn/branches/octomap_stacks-groovy-devel/octomap_ros/ https://code.google.com/p/alufr-ros-pkg/ previous versions."},
{"url": "https://index.ros.org/p/octomap_rviz_plugins", "package": "octomap_rviz_plugins", "package_summary": "A set of plugins for displaying occupancy information decoded from binary octomap messages.", "package_details": "octomap_rviz_plugins RViz display plugins visualizing octomap messages (ROS groovy http://ros.org/wiki/octomap_rviz_plugins"},
{"url": "https://index.ros.org/p/ompl", "package": "ompl", "package_summary": "OMPL is a free sampling-based motion planning library.", "package_details": "Open Motion Planning Library (OMPL) OMPL free sampling-based motion planning library VAMP integration high-performance collision checking SIMD acceleration. Continuous Integration Status Installation Visit OMPL installation page detailed installation instructions. OMPL required dependencies: Boost (version higher) CMake (version higher) Eigen (version higher) yaml-cpp parsing YAML configuration files, required VAMP demos dependencies optional: VAMP (enabled default) Vector-Accelerated Motion Planning high-performance collision checking SIMD optimization (needed generate Python bindings) Doxygen (needed create local copy documentation https://ompl.kavrakilab.org/core) Flann (FLANN nearest neighbor queries OMPL) Spot constructing finite automata LTL formulae.) dependencies installed, build OMPL Linux, macOS, Windows. top-level directory OMPL type commands: git submodule update --init --recursive VAMP integration mkdir build/Release build/Release cmake step optional update_bindings Python bindings replace number cores machine"},
{"url": "https://index.ros.org/p/ortools_vendor", "package": "ortools_vendor", "package_summary": "Wrapper around ortools, it provides a fixed CMake module and an ExternalProject build of it.", "package_details": "Simulate packaging build locally patch warnings treated errors due build flags set dpkg-buildflags. Prepare sudo apt install debhelper dpkg-checkbuilddeps git clone git@github.com:aosmw/ortools_vendor.git Build ortools_vendor dpkg-buildpackage Rebuild .obj-x86_64-linux-gnu fixes patch .obj-x86_64-linux-gnu/ortools_vendor-prefix/src/ortools_vendor/ git diff ../../../../0001-sciperrormessage.patch Notes dpkg-buildflags ubuntu-22.04 dpkg-buildflags ASFLAGS= CFLAGS=-g -ffile-prefix-map=/home/wakem/contrib_github/n2/src/ros-deb-builder-action/src/ortools_vendor=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2 CXXFLAGS=-g -ffile-prefix-map=/home/wakem/contrib_github/n2/src/ros-deb-builder-action/src/ortools_vendor=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security DFLAGS=-frelease FCFLAGS=-g -ffile-prefix-map=/home/wakem/contrib_github/n2/src/ros-deb-builder-action/src/ortools_vendor=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong FFLAGS=-g -ffile-prefix-map=/home/wakem/contrib_github/n2/src/ros-deb-builder-action/src/ortools_vendor=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong GCJFLAGS=-g -ffile-prefix-map=/home/wakem/contrib_github/n2/src/ros-deb-builder-action/src/ortools_vendor=. -flto=auto -ffat-lto-objects -fstack-protector-strong LDFLAGS=-Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -flto=auto -Wl,-z,relro OBJCFLAGS=-g -ffile-prefix-map=/home/wakem/contrib_github/n2/src/ros-deb-builder-action/src/ortools_vendor=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security OBJCXXFLAGS=-g -ffile-prefix-map=/home/wakem/contrib_github/n2/src/ros-deb-builder-action/src/ortools_vendor=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security"},
{"url": "https://index.ros.org/p/osqp_vendor", "package": "osqp_vendor", "package_summary": "Wrapper around osqp that ships with a CMake module", "package_details": "osqp_vendor CMake wrapper downloading building osqp"},
{"url": "https://index.ros.org/p/pcl_msgs", "package": "pcl_msgs", "package_summary": "Package containing PCL (Point Cloud Library)-related ROS messages.", "package_details": "pcl_msgs ROS package PCL-related messages."},
{"url": "https://index.ros.org/p/pcl_conversions", "package": "pcl_conversions", "package_summary": "Provides conversions from PCL data types and ROS message types", "package_details": "pcl_conversions package conversions PCL data types ROS message types. Code tickets pcl_conversions http://ros.org/wiki/pcl_conversions Issues http://github.com/ros-perception/perception_pcl/issues"},
{"url": "https://index.ros.org/p/phidgets_accelerometer", "package": "phidgets_accelerometer", "package_summary": "Driver for the Phidgets Accelerometer devices", "package_details": "Phidgets accelerometer ROS driver ROS driver Phidgets accelerometers. Usage run driver standalone, ros2 launch phidgets_accelerometer accelerometer-launch.py Published Topics /imu/data_raw (sensor_msgs/Imu) raw accelerometer data. Parameters serial (int) serial number phidgets accelerometer connect default), connects accelerometer phidget hub_port (int) phidgets VINT hub port connect accelerometer phidget connected VINT hub. Defaults frame_id (string) header frame publishing message. Defaults REP-0145 compliant imu_link. linear_acceleration_stdev (double) standard deviation linear acceleration publishing message. Defaults time_resynchronization_interval_ms (int) number milliseconds wait resynchronizing time Phidgets spatial local time. Larger values \u201cjumps\u201d, timestamp drift. Setting disables resynchronization. Defaults data_interval_ms (int) number milliseconds acquisitions data device (allowed values dependent device). Defaults callback_delta_epsilon_ms (int) number milliseconds epsilon allowed callbacks attempting resynchronize time. set difference data_interval_ms millisecond considered viable resynchronization. Higher values give code leeway resynchronize, cost potentially bad resynchronizations values give results, result resynchronizing. data_interval_ms. Defaults publish_rate (double) driver publish data ROS topic. default), publish time update device data_interval_ms). positive, publish data rate acquisition interval."},
{"url": "https://index.ros.org/p/phidgets_analog_inputs", "package": "phidgets_analog_inputs", "package_summary": "Driver for the Phidgets Analog Input devices", "package_details": "Phidgets analog inputs ROS driver ROS driver Phidgets analog inputs. Usage run driver standalone, ros2 launch phidgets_analog_inputs analog_inputs-launch.py Published Topics /analog_inputXX (std_msgs/Float64) analog input data; topic created analog input device. Parameters serial (int) serial number phidgets analog input connect default), connects analog input phidget hub_port (int) phidgets VINT hub port connect analog input phidget connected VINT hub. Defaults is_hub_port_device (bool) device connected VINT hub port, connected widget hub port. analog input phidget connected VINT hub. Defaults false. data_interval_ms (int) number milliseconds acquisitions data device (allowed values dependent device). Defaults publish_rate (double) driver publish data ROS topic. default), publish time update device data_interval_ms). positive, publish data rate acquisition interval. gainXX (double) gain apply analog input published data scaled formula pub_value raw_value gainXX offsetXX. offsetXX (double) offset apply analog input published data scaled formula pub_value raw_value gainXX offsetXX."},
{"url": "https://index.ros.org/p/phidgets_analog_outputs", "package": "phidgets_analog_outputs", "package_summary": "Driver for the Phidgets Analog Output devices", "package_details": "Phidgets analog outputs ROS driver ROS driver Phidgets analog outputs. topics, services, parameters node operates listed Topics /analog_outputXX (std_msgs/msg/Float64) voltage set analog output; topic created analog output device. Services /set_analog_output (phidgets_msgs/srv/SetAnalogOutput) service set analog output index voltage. Parameters serial (int) serial number phidgets analog output connect default), connects analog output phidget hub_port (int) phidgets VINT hub port connect analog output phidget connected VINT hub. Defaults is_hub_port_device (bool) device connected VINT hub port, connected widget hub port. analog output phidget connected VINT hub. Defaults false. force_enable (bool) Force node send enable message output created. Defaults true."},
{"url": "https://index.ros.org/p/phidgets_digital_inputs", "package": "phidgets_digital_inputs", "package_summary": "Driver for the Phidgets Digital Input devices", "package_details": "Phidgets digital inputs ROS driver ROS driver Phidgets digital inputs. Usage run driver standalone, ros2 launch phidgets_digital_inputs digital_inputs-launch.py Published Topics /digital_inputXX (std_msgs/Bool) digital input state; topic created digital input device. Parameters serial (int) serial number phidgets digital input connect default), connects digital input phidget hub_port (int) phidgets VINT hub port connect digital input phidget connected VINT hub. Defaults is_hub_port_device (bool) device connected VINT hub port, connected widget hub port. digital input phidget connected VINT hub. Defaults false. publish_rate (double) driver publish data ROS topic. default), publish time update device. positive, publish data rate acquisition interval."},
{"url": "https://index.ros.org/p/phidgets_digital_outputs", "package": "phidgets_digital_outputs", "package_summary": "Driver for the Phidgets Digital Output devices", "package_details": "Phidgets digital inputs ROS driver ROS driver Phidgets digital outputs. Usage run driver standalone, ros2 launch phidgets_digital_outputs digital_outputs-launch.py Subscribed Topics /digital_outputXX (std_msgs/Bool) state set digital output topic created digital output device. Services /set_digital_output (phidgets_msgs/SetDigitalOutput) service set digital output index state. Parameters serial (int) serial number phidgets digital output connect default), connects digital output phidget hub_port (int) phidgets VINT hub port connect digital output phidget connected VINT hub. Defaults is_hub_port_device (bool) device connected VINT hub port, connected widget hub port. digital output phidget connected VINT hub. Defaults false."},
{"url": "https://index.ros.org/p/phidgets_gyroscope", "package": "phidgets_gyroscope", "package_summary": "Driver for the Phidgets Gyroscope devices", "package_details": "Phidgets gyroscope ROS driver ROS driver Phidgets gyroscope. Usage run driver standalone, ros2 launch phidgets_gyroscope gyroscope-launch.py Published Topics imu/is_calibrated (std_msgs/Bool) gyroscope calibrated; automatically startup time, re-done time calling imu/calibrate service. imu/data_raw (sensor_msgs/Imu) raw data coming gyroscope. Services imu/calibrate (std_srvs/Empty) Run calibration gyroscope. Parameters serial (int) serial number phidgets gyroscope connect default), connects gyroscope phidget hub_port (int) phidgets VINT hub port connect gyroscope phidget connected VINT hub. Defaults frame_id (string) header frame publishing message. Defaults REP-0145 compliant imu_link. angular_velocity_stdev (double) standard deviation angular velocity publishing message. Defaults 0.095deg/s. time_resynchronization_interval_ms (int) number milliseconds wait resynchronizing time Phidgets spatial local time. Larger values \u201cjumps\u201d, timestamp drift. Setting disables resynchronization. Defaults data_interval_ms (int) number milliseconds acquisitions data device (allowed values dependent device). Defaults callback_delta_epsilon_ms (int) number milliseconds epsilon allowed callbacks attempting resynchronize time. set difference data_interval_ms millisecond considered viable resynchronization. Higher values give code leeway resynchronize, cost potentially bad resynchronizations values give results, result resynchronizing. data_interval_ms. Defaults publish_rate (double) driver publish data ROS topic. default), publish time update device data_interval_ms). positive, publish data rate acquisition interval."},
{"url": "https://index.ros.org/p/phidgets_high_speed_encoder", "package": "phidgets_high_speed_encoder", "package_summary": "Driver for the Phidgets high speed encoder devices", "package_details": "Phidgets high speed encoder ROS driver ROS driver Phidgets high speed encoder. Usage run driver standalone, ros2 launch phidgets_high_speed_encoder high_speed_encoder-launch.py Published Topics /joint_states (sensor_msgs/JointState) joint state message current state encoders. /joint_states_chXX_decim_speed (phidgets_msgs/EncoderDecimatedSpeed) topic encoder decimated (average) speed reading encoder. Services (phidgets_msgs/srv::Trigger) Service encoder count specific channel. request takes integer channel returns success boolean message string. Parameters serial (int) serial number phidgets high speed encoder connect default), connects high speed encoder phidget hub_port (int) phidgets VINT hub port connect high speed encoder phidget connected VINT hub. Defaults frame_id (string) header frame publishing message. Defaults encoder_link. speed_filter_samples_len (int) number data points average speed. Defaults speed_filter_idle_iter_loops_before_reset (int) number idle loops (loops data) average speed reset Defaults publish_rate (double) driver publish data ROS topic. default), publish time update device (event-driven position change). positive, publish data rate acquisition interval. server_name (string) Optional: Phidgets network server connect server_ip (string) Optional: address Phidgets network server connect joint{i}_name (string) i-th joint JointState message joint{i}_tick2rad (double) Count multiplier applied i-th joint. instance, CPR encoder reduction, convert ticks radians, accounting quadrature cycles."},
{"url": "https://index.ros.org/p/phidgets_ik", "package": "phidgets_ik", "package_summary": "Driver for the Phidgets InterfaceKit devices", "package_details": "Phidgets interface kit ROS driver meta-ROS driver Phidgets interface kit. Phidgets interface kits composed digital inputs, digital outputs, analog inputs, compose driver launching individual drivers package launch file convenient launch Usage run driver standalone, ros2 launch phidgets_ik ik-launch.py"},
{"url": "https://index.ros.org/p/phidgets_magnetometer", "package": "phidgets_magnetometer", "package_summary": "Driver for the Phidgets Magnetometer devices", "package_details": "Phidgets magnetometer ROS driver ROS driver Phidgets magnetometer. Usage run driver standalone, ros2 launch phidgets_magnetometer magnetometer-launch.py Published Topics /imu/mag (sensor_msgs/MagneticField) raw magnetometer data. Parameters serial (int) serial number phidgets magnetometer connect default), connects magnetometer phidget hub_port (int) phidgets VINT hub port connect magnetometer phidget connected VINT hub. Defaults frame_id (string) header frame publishing message. Defaults REP-0145 compliant imu_link. magnetic_field_stdev standard deviation magnetic field publishing message. Defaults milligauss. time_resynchronization_interval_ms (int) number milliseconds wait resynchronizing time Phidgets spatial local time. Larger values \u201cjumps\u201d, timestamp drift. Setting disables resynchronization. Defaults data_interval_ms (int) number milliseconds acquisitions data device (allowed values dependent device). Defaults callback_delta_epsilon_ms (int) number milliseconds epsilon allowed callbacks attempting resynchronize time. set difference data_interval_ms millisecond considered viable resynchronization. Higher values give code leeway resynchronize, cost potentially bad resynchronizations values give results, result resynchronizing. data_interval_ms. Defaults publish_rate (double) driver publish data ROS topic. default), publish time update device data_interval_ms). positive, publish data rate acquisition interval. cc_mag_field (double) Ambient magnetic field calibration device\u2019s user guide information calibrate. cc_offset0 (double) Calibration offset device\u2019s user guide information calibrate. cc_offset1 (double) Calibration offset device\u2019s user guide information calibrate. cc_offset2 (double) Calibration offset device\u2019s user guide information calibrate. cc_gain0 (double) Gain device\u2019s user guide information calibrate. cc_gain1 (double) Gain device\u2019s user guide information calibrate. cc_gain2 (double) Gain device\u2019s user guide information calibrate. cc_t0 (double) device\u2019s user guide information calibrate. cc_t1 (double) device\u2019s user guide information calibrate. cc_t2 (double) device\u2019s user guide information calibrate. cc_t3 (double) device\u2019s user guide information calibrate. cc_t4 (double) device\u2019s user guide information calibrate. cc_t5 (double) device\u2019s user guide information calibrate"},
{"url": "https://index.ros.org/p/phidgets_motors", "package": "phidgets_motors", "package_summary": "Driver for the Phidgets Motor devices", "package_details": "Phidgets motor ROS driver ROS driver Phidgets motor. Usage run driver standalone, ros2 launch phidgets_motors motors-launch.py Published Topics /motor_duty_cycleXX (std_msgs/Float64) motor duty cycle. topic created motor attached. /motor_back_emfXX (std_msgs/Float64) motor EMF supported device. topic created motor attached. Subscribed Topics /set_motor_duty_cycleXX (std_msgs/Float64) Set motor duty cycle. topic created motor attached. Parameters serial (int) serial number phidgets motor connect default), connects motor phidget hub_port (int) phidgets VINT hub port connect motor phidget connected VINT hub. Defaults braking_strength (double) braking strength apply duty cycle Defaults data_interval_ms (int) number milliseconds acquisitions data device (allowed values dependent device). Defaults publish_rate (double) driver publish data ROS topic. default), publish time update device data_interval_ms). positive, publish data rate acquisition interval."},
{"url": "https://index.ros.org/p/phidgets_spatial", "package": "phidgets_spatial", "package_summary": "Driver for the Phidgets Spatial 3/3/3 devices", "package_details": "Phidgets spatial ROS driver ROS driver Phidgets spatial. Usage run driver standalone, ros2 launch phidgets_spatial spatial-launch.py Published Topics /imu/data_raw (sensor_msgs/Imu) raw accelerometer gyroscope data. imu/is_calibrated (std_msgs/Bool) gyroscope calibrated; automatically startup time, re-done time calling imu/calibrate service. /imu/mag (sensor_msgs/MagneticField) raw magnetometer data. Services imu/calibrate (std_srvs/Empty) Run calibration gyroscope. Parameters serial (int) serial number phidgets spatial connect default), connects spatial phidget hub_port (int) phidgets VINT hub port connect spatial phidget connected VINT hub. Defaults frame_id (string) header frame publishing message. Defaults REP-0145 compliant imu_link. use_orientation (bool) phidget spatials onboard orientation estimation; MOT0109 onwards. Set false older versions. Defaults false. spatial_algorithm (string) spatial algorithm orientation estimation \u201cahrs\u201d, \u201cimu\u201d); use_orientation set true. Defaults ahrs. ahrs_angular_velocity_threshold (double) Parameter AHRS orientation estimation; use_orientation set true. ahrs_angular_velocity_delta_threshold (double) Parameter AHRS orientation estimation; use_orientation set true. ahrs_acceleration_threshold (double) Parameter AHRS orientation estimation; use_orientation set true. ahrs_mag_time (double) Parameter AHRS orientation estimation; use_orientation set true. ahrs_accel_time (double) Parameter AHRS orientation estimation; use_orientation set true. ahrs_bias_time (double) Parameter AHRS orientation estimation; use_orientation set true. algorithm_magnetometer_gain (double) Gain magnetometer orientation estimation algorithm; use_orientation set true. Defaults heating_enabled (bool) internal heating element; MOT0109 onwards. set parameter older versions. linear_acceleration_stdev (double) standard deviation linear acceleration publishing message. Defaults angular_velocity_stdev (double) standard deviation angular velocity publishing message. Defaults deg/s. magnetic_field_stdev (double) standard deviation magnetic field publishing message. Defaults milligauss. time_resynchronization_interval_ms (int) number milliseconds wait resynchronizing time Phidgets spatial local time. Larger values \u201cjumps\u201d, timestamp drift. Setting disables resynchronization. Defaults data_interval_ms (int) number milliseconds acquisitions data device (allowed values dependent device). Defaults callback_delta_epsilon_ms (int) number milliseconds epsilon allowed callbacks attempting resynchronize time. set difference data_interval_ms millisecond considered viable resynchronization. Higher values give code leeway resynchronize, cost potentially bad resynchronizations values give results, result resynchronizing. data_interval_ms. Defaults publish_rate (double) driver publish data ROS topic. default), publish time update device data_interval_ms). positive, publish data rate acquisition interval. cc_mag_field (double) Ambient magnetic field calibration device\u2019s user guide information calibrate. cc_offset0 (double) Calibration offset device\u2019s user guide information calibrate. cc_offset1 (double) Calibration offset device\u2019s user guide information calibrate. cc_offset2 (double) Calibration offset device\u2019s user guide information calibrate. cc_gain0 (double) Gain offset device\u2019s user guide information calibrate. cc_gain1 (double) Gain offset device\u2019s user guide information calibrate. cc_gain2 (double) Gain offset device\u2019s user guide information calibrate. cc_t0 (double) offset device\u2019s user guide information calibrate. cc_t1 (double) offset device\u2019s user guide information calibrate. cc_t2 (double) offset device\u2019s user guide information calibrate. cc_t3 (double) offset device\u2019s user guide information calibrate. cc_t4 (double) offset device\u2019s user guide information calibrate. cc_t5 (double) offset device\u2019s user guide information calibrate."},
{"url": "https://index.ros.org/p/phidgets_stepper", "package": "phidgets_stepper", "package_summary": "Driver for the Phidgets Stepper devices", "package_details": "Phidgets stepper ROS driver ROS driver Phidgets stepper. Usage run driver standalone, ros2 launch phidgets_stepper stepper-launch.py Published Topics ~/config (phidgets_msgs/StepperConfig) min/max values configurable parameters ~/state (phidgets_msgs/StepperState) run time state (engaged, moving, target) ~/joint (sensor_msgs/JointState) Publish motor state standard joint message Subscribed Topics ~/command (phidgets_msgs/StepperCommand) Send command motor, position run mode, disengage motor Services (std_srvs/Trigger) Mark current position Parameters serial (int) serial number Phidgets stepper device connect default), connects suitable stepper device channel (int) channel number Phidgets device connect Defaults hub_port (int) phidgets VINT hub port connect motor phidget connected VINT hub. Defaults is_hub_port_device (bool) device connected VINT hub port, connected widget hub port. digital input phidget connected VINT hub. Defaults false. base_frame (string) base frame_id sensor_msgs/JointState messages. Defaults \u201cphidgets\u201d. joint_name (string) joint sensor_msgs/JointState messages. Defaults \u201cstepper\u201d. publish_rate (double) driver publish data ROS topic. default), publish time update device data_interval_ms). positive, publish data rate acquisition interval. server_name (string) Phidgets network server connect server_ip, driver attempt connect Phidgets device network. server_ip (string) address Phidgets network server. conjunction server_name. data_interval_ms (int) number milliseconds acquisitions data device (allowed values dependent device). Defaults failsafe_time_ms (int) failsafe time default position_offset (double) Position start default rescale_factor (double) Step multiplier applied measurement. stepper degree step reduction output radians. acceleration (double) Authorized acceleration, default max supported driver. velocity_limit (double) maximum velocity, overloaded messages published ~/command. current_limit (double) Authorized current limit, default max supported driver. holding_current_limit (double) Authorized holding current limit, default max supported driver."},
{"url": "https://index.ros.org/p/phidgets_temperature", "package": "phidgets_temperature", "package_summary": "Driver for the Phidgets Temperature devices", "package_details": "Phidgets temperature ROS driver ROS driver Phidgets temperature. Usage run driver standalone, ros2 launch phidgets_temperature temperature-launch.py Published Topics /temperature (std_msgs/Float64) current temperature degrees Celsius. Parameters serial (int) serial number phidgets gyroscope connect default), connects gyroscope phidget hub_port (int) phidgets VINT hub port connect gyroscope phidget connected VINT hub. Defaults thermocouple_type (int) type thermocouple connected. Allowed values thermocouple, default), J-Type), K-Type), E-Type), T-Type). https://www.phidgets.com/docs/Thermocouple_Primer information. data_interval_ms (int) number milliseconds acquisitions data device (allowed values dependent device). Defaults publish_rate (double) driver publish data ROS topic. default), publish time update device data_interval_ms). positive, publish data rate acquisition interval."},
{"url": "https://index.ros.org/p/pinocchio", "package": "pinocchio", "package_summary": "A fast and flexible implementation of Rigid Body Dynamics algorithms and their analytical derivatives.", "package_details": "Pinocchio instantiates state-of-the-art Rigid Body Algorithms poly-articulated systems based revisited Roy Featherstone\u2019s algorithms. Pinocchio analytical derivatives main Rigid-Body Algorithms, Recursive Newton-Euler Algorithm Articulated-Body Algorithm. Pinocchio tailored robotics applications, contexts (biomechanics, computer graphics, vision, built Eigen linear algebra FCL collision detection. Pinocchio Python interface fast code prototyping, accessible Conda. Pinocchio heart robotics software Crocoddyl, open-source efficient Differential Dynamic Programming solver robotics, Stack-of-Tasks, open-source versatile hierarchical controller framework Humanoid Path Planner, open-source software Motion Manipulation Planning. learn Pinocchio internal behaviors main features, invite read related paper online documentation. dive Pinocchio single line sufficient (assuming Conda): conda install pinocchio conda-forge pip Linux): pip install pin Table contents Table contents Pinocchio main features Documentation Examples Tutorials Pinocchio continuous integrations Performances Ongoing developments Installation ROS Visualization Citing Pinocchio Questions Issues Core-dev team Credits Open-source projects relying Pinocchio Acknowledgments Pinocchio main features Pinocchio fast: template library, cache friendly, support custom scalar type. Pinocchio versatile, implementing basic advanced rigid body dynamics algorithms: kinematics analytical derivatives, forward/inverse dynamics analytical derivatives, centroidal dynamics analytical derivatives, computations kinematic dynamic regressors system identification full support closed-loop mechanisms, state-of-the-art frictional contact solvers, low-complexity constrained articulated body algorithms, sparse constrained dynamics analytical derivatives, full support multiple-precision floating-point (MPFR) Python support modern open-source Automatic Differentiation frameworks CppAD CasADi, automatic code generation support CppADCodeGen. Pinocchio support description formats: URDF format, SDF format, MJCF format, SRDF format, programmatically. Pinocchio flexible: header template instantiation, compliant. Pinocchio extensible. File truncated lines full file"},
{"url": "https://index.ros.org/p/plotjuggler", "package": "plotjuggler", "package_summary": "PlotJuggler: juggle with data", "package_details": "Gold Sponsor: PlotJuggler PlotJuggler tool visualize time series fast, powerful intuitive. Noteworthy features: Simple Drag Drop user interface. Load data file. Connect live streaming data. Save visualization layout configurations reuse Fast OpenGL visualization. handle thousands timeseries millions data points. Transform data simple editor: derivative, moving average, integral, PlotJuggler easily extended plugins. Data sources (file streaming) Load CSV files. Load ULog Subscribe streaming sources: MQTT, WebSockets, ZeroMQ, UDP, Understand data formats JSON, CBOR, BSON, Message Pack, integrated ROS: open rosbags and/or subscribe ROS topics ROS1 ROS2). Supports Lab Streaming Layer, devices. Easily add custom data source and/or formats\u2026 Transform analyze data PlotJuggler easy visualize data analyze manipulate time series simple extendable Transform Editor. Alternatively, Custom Function Editor, create Multi-input Single-output functions scripting language based Lua. familiar Lua, don\u2019t afraid, won\u2019t minutes learn Tutorials learn PlotJuggler, check tutorials Tutorial Tutorial Tutorial Supported plugins plugins repository. individual README files include information needed compile plugin. submit specific issues, Pull Requests questions related Github repository: MQTT DataStreamer. Lab Streaming Layer DataStreamer. ROS plugins. .dbg DataLoader. simple learn write plugins, PlotJuggler/plotjuggler-sample-plugins Installation Snap (recommended Ubuntu, ROS users snap version PlotJuggler work ROS1 ROS2. install Ubuntu ROS2 support, run: sudo snap install plotjuggler ROS1 (Ubuntu install sudo snap install plotjuggler-ros File truncated lines full file"},
{"url": "https://index.ros.org/p/plotjuggler_msgs", "package": "plotjuggler_msgs", "package_summary": "Special Messages for PlotJuggler", "package_details": "plotjuggler_msgs Special format send custom datapoints PlotJuggler"},
{"url": "https://index.ros.org/p/plotjuggler_ros", "package": "plotjuggler_ros", "package_summary": "PlotJuggler plugin for ROS", "package_details": "ROS plugins PlotJuggler PlotJuggler works great ROS, \u201cROS\u201d application. ROS supported external plugins repository. Existing Plugins DataLoader rosbags (ROS ROS2). ROS topic subscriber (ROS ROS2). Logs/rosout visualizer (ROS Re-publisher similar rosbag play (ROS Install Debians Install PlotJuggler ROS plugins sudo apt install ros-${ROS_DISTRO}-plotjuggler-ros ROS2 installed: ros2 run plotjuggler plotjuggler compile PlotJuggler source Create catkin workspace clone repositories: mkdir ~/ws_plotjuggler/src ~/ws_plotjuggler/src git clone https://github.com/PlotJuggler/plotjuggler_msgs.git git clone https://github.com/facontidavide/PlotJuggler.git git clone https://github.com/PlotJuggler/plotjuggler-ros-plugins.git time compile: ~/ws_plotjuggler rosdep install --from-paths src --ignore-src colcon build ROS users version library support ROS2 (Hubmle older)"},
{"url": "https://index.ros.org/p/pointcloud_to_laserscan", "package": "pointcloud_to_laserscan", "package_summary": "Converts a 3D Point Cloud into a 2D laser scan. This is useful for making devices like the Kinect appear like a laser scanner for 2D-based algorithms (e.g. laser-based SLAM).", "package_details": "ROS pointcloud laserscan converters ROS package components convert sensor_msgs/msg/PointCloud2 messages sensor_msgs/msg/LaserScan messages essentially port original ROS package. pointcloud_to_laserscan::PointCloudToLaserScanNode ROS component projects sensor_msgs/msg/PointCloud2 messages sensor_msgs/msg/LaserScan messages. Published Topics scan (sensor_msgs/msg/LaserScan) output laser scan. Subscribed Topics cloud_in (sensor_msgs/msg/PointCloud2) input point cloud. input processed isn\u2019t subscriber scan topic. Parameters min_height (double, default: minimum height sample point cloud meters. max_height (double, default: maximum height sample point cloud meters. angle_min (double, default: minimum scan angle radians. angle_max (double, default: maximum scan angle radians. angle_increment (double, default: Resolution laser scan radians ray. queue_size (double, default: detected number cores) Input point cloud queue size. scan_time (double, default: scan rate seconds. populate scan_time field output laser scan message. range_min (double, default: minimum ranges return meters. range_max (double, default: maximum ranges return meters. target_frame (str, default: transform pointcloud frame converting laser scan. laser scan generated frame input point cloud. transform_tolerance (double, default: Time tolerance transform lookups. target_frame use_inf (boolean, default: true) disabled, report infinite range obstacle) range_max report infinite range +inf. pointcloud_to_laserscan::LaserScanToPointCloudNode ROS component re-publishes sensor_msgs/msg/LaserScan messages sensor_msgs/msg/PointCloud2 messages. Published Topics cloud (sensor_msgs/msg/PointCloud2) output point cloud. Subscribed Topics scan_in (sensor_msgs/msg/LaserScan) input laser scan. input processed isn\u2019t subscriber cloud topic. Parameters queue_size (double, default: detected number cores) Input laser scan queue size. target_frame (str, default: transform pointcloud frame converting laser scan. laser scan generated frame input point cloud. transform_tolerance (double, default: Time tolerance transform lookups. target_frame"},
{"url": "https://index.ros.org/p/pose_cov_ops", "package": "pose_cov_ops", "package_summary": "C++ library for SE(2)/SE(3) pose composition operations with uncertainty", "package_details": "Distro Develop branch Releases Stable release ROS2 Humble ROS Jazzy ROS Kilted ROS2 Rolling EOL distros Distro release ROS1 Melodic ROS1 Noetic ROS2 Foxy ROS2 Galactic ROS2 Iron pose_cov_ops MRPT library-wrapper poses points geometric operations uncertainty. ROS node projects show pose_cov_ops code: ROS https://github.com/mrpt-ros-pkg/pose_cov_ops_example_ros1_package ROS https://github.com/mrpt-ros-pkg/pose_cov_ops_example_ros2_package Docs: https://wiki.ros.org/pose_cov_ops"},
{"url": "https://index.ros.org/p/py_binding_tools", "package": "py_binding_tools", "package_summary": "Python binding tools for C++", "package_details": "Python binding tools package tools facilitate generation python bindings code, based pybind11. Automatic type conversion ROS message types Conversion native python types performed ROS message serialization deserialization, implemented templates. suffices include: #include <py_binding_tools/ros_msg_typecasters.h> PoseStamped message geometry_msgs package accepts single string argument. case, string interpreted header.frame_id field message pose identity transform. extension, include header #include <py_binding_tools/geometry_msg_typecasters.h> ROS initialization Python RCL implementations (rclpy rclcpp). initialize ROS domain additionally Python domain calling ROS-related functions wrapped functions classes. package python function rclcpp.init() class RCLInitializer. intended base class python wrapper classes: class FooWrapper protected RCLInitializer, public Foo ensure ROS infrastructure initialized usage wrapped class. Ensure list RCLInitializer base class, ROS functionality required constructor"},
{"url": "https://index.ros.org/p/py_trees", "package": "py_trees", "package_summary": "Pythonic implementation of behaviour trees.", "package_details": "Trees [What\u2019s [Documentation] Started] Steps] [Releases] [Developers] PyTrees python implementation behaviour trees designed facilitate rapid development medium sized decision making engines fields robotics. feature list: Behaviours, Decorators, Sequences, Selectors, Parallels BehaviourTree. Blackboards data sharing. library behaviours, decorators idioms. Serialise dot graph render ascii/unicode terminal. Tested Linux Mac (YMMV Windows). What\u2019s Release][new-2.2.x] Sequences Selectors memory. Started py_trees 5mins. poetry project configuration governed pyproject.toml. vestigial setup.py assist distribution PEP-517 supported. Documentation [![devel][docs-devel-image]][docs-devel] [![2.2.x][docs-2.2.x-image]][docs-2.2.x] [![2.1.x][docs-2.1.x-image]][docs-2.1.x] [![0.7.x][docs-0.7.x-image]][docs-0.7.x] [![0.6.x][docs-0.6.x-image]][docs-0.6.x] Started started CodeSpaces mismatched environment issues 5mins) Fork project personal account Click Code Codespaces Create Codespace Enter Terminal Install Dependencies (docker) zen@py_trees:/workspaces/py_trees$ poetry install Explore demos (docker) zen@py_trees:/workspaces/py_trees$ poetry shell (py-trees-py3.8) (docker) zen@py_trees:/workspaces/py_trees$ py-trees-demo-<tab>-<tab> py-trees-demo-action-behaviour py-trees-demo-context-switching py-trees-demo-logging py-trees-demo-behaviour-lifecycle py-trees-demo-display-modes py-trees-demo-pick-up-where-you-left-off py-trees-demo-blackboard py-trees-demo-dot-graphs py-trees-demo-selector py-trees-demo-blackboard-namespaces py-trees-demo-either-or py-trees-demo-sequence py-trees-demo-blackboard-remappings py-trees-demo-eternal-guard py-trees-demo-tree-stewardship (py-trees-py3.8) (docker) zen@py_trees:/workspaces/py_trees$ py-trees-demo-blackboard (py-trees-py3.8) (docker) zen@py_trees:/workspaces/py_trees$ exit Hack Code Run Formatter, Tests, Linters Mypy (docker) zen@py_trees:/workspaces/py_trees$ poetry run tox format check mypy38 mypy310 (docker) zen@py_trees:/workspaces/py_trees$ poetry run tox format (docker) zen@py_trees:/workspaces/py_trees$ poetry run tox (docker) zen@py_trees:/workspaces/py_trees$ poetry run tox check Contribute https://github.com/splintered-reality/py_trees/blob/devel/CONTRIBUTING.md work local environment poetry installed. you\u2019re VSCode don\u2019t reopen project devcontainer froody. Steps PyPi: py_trees py_trees_js Examples: ReadTheDocs PyTrees ROS Tutorials significantly edifying demos, incrementally walk process building decision making layer robot. ROS2 (sparsely), browsing enlightening Visualisation: py_trees_js javascript library building runtime visualisation tool Robotics: py_trees_ros tree manager behaviours designed specifically ROS2 py_trees_ros_viewer Qt/ROS2 implementation py_trees_js Releases Selectors, Sequences memory. Improved testing style/type checking. Chooser deprecated. API housekeeping. Blackboards Trees shutdown cleanly. StatusToBlackboard EternalGuard, Visitors finalise(). Fixes setup, tick-tock, Behaviours, Decorators, Composites, Blackboards, Tree Management tools. open source pre-releases. Devel Sources [![devel][sources-devel-image]][sources-devel] [![2.1.x][sources-2.2.x-image]][sources-2.2.x] [![2.1.x][sources-2.1.x-image]][sources-2.1.x] [![2.0.x][sources-2.0.x-image]][sources-2.0.x] [![1.2.x][sources-1.2.x-image]][sources-1.2.x] [![0.7.x][sources-0.7.x-image]][sources-0.7.x] [![0.6.x][sources-0.6.x-image]][sources-0.6.x] Compatibility [![Python 3.10][python310-image]][python310-docs] [![Python 3.8][python38-image]][python38-docs] [![Python 3.10][python310-image]][python310-docs] [![Python 3.8][python38-image]][python38-docs] [![Python 3.6][python36-image]][python36-docs] [![Python 3.6][python36-image]][python36-docs] [![Python 3.6][python36-image]][python36-docs] [![Python 3.6][python36-image]][python36-docs] [![Python 2.7][python27-image]][python27-docs] File truncated lines full file"},
{"url": "https://index.ros.org/p/py_trees_ros", "package": "py_trees_ros", "package_summary": "ROS2 extensions and behaviours for py_trees.", "package_details": "Trees ROS Behaviours, trees utilities extend py_trees ROS. Started (ROS2) Dive PyTree Docs basic primer (non-ROS) behaviour trees, move PyTree ROS Tutorials incrementally build scenario robot. PyTree ROS documentation api docs ROS specific trees, idioms behaviours version specific releases documentation, refer documentation links matrix ROS2 Rolling Humble Foxy Dashing [py_trees][py-trees-ros-index] [][py-trees-sources-2.2.x] [][py-trees-sources-2.2.x] [][py-trees-sources-2.1.x] [][py-trees-sources-1.3.x]- [py_trees_ros_interfaces][py-trees-ros-interfaces-ros-index] [][py-trees-ros-interfaces-sources-2.1.x][![Build Status][py-trees-ros-interfaces-build-status-rolling-image]][py-trees-ros-interfaces-build-status-rolling] [][py-trees-ros-interfaces-sources-2.1.x][![Build Status][py-trees-ros-interfaces-build-status-humble-image]][py-trees-ros-interfaces-build-status-humble] [][py-trees-ros-interfaces-sources-2.0.x][![Build Status][py-trees-ros-interfaces-build-status-foxy-image]][py-trees-ros-interfaces-build-status-foxy] [][py-trees-ros-interfaces-sources-1.2.x]- [py_trees_ros][py-trees-ros-ros-index] [][py-trees-ros-sources-2.2.x][][py-trees-ros-docs-2.2.x] [][py-trees-ros-sources-2.2.x][][py-trees-ros-docs-2.2.x] [][py-trees-ros-sources-2.1.x][![Build Status][py-trees-ros-build-status-foxy-image]][py-trees-ros-build-status-foxy][][py-trees-ros-docs-2.1.x] [][py-trees-ros-sources-1.2.x]-[][py-trees-ros-docs-1.2.x] [py_trees_ros_tutorials][py-trees-ros-tutorials-ros-index] [][py-trees-ros-tutorials-sources-2.1.x][![Build Status][py-trees-ros-tutorials-build-status-foxy-image]][py-trees-ros-tutorials-build-status-foxy][][py-trees-ros-tutorials-docs-2.1.x] [][py-trees-ros-tutorials-sources-1.0.x]-[][py-trees-ros-tutorials-docs-1.0.x] [py_trees_js][py-trees-js-ros-index] [][py-trees-js-sources-0.6.x][![Build Status][py-trees-js-build-status-foxy-image]][py-trees-js-build-status-foxy] [][py-trees-js-docs-0.6.x] [][py-trees-js-sources-0.5.x]- [][py-trees-js-docs-0.5.x] [py_trees_ros_viewer][py-trees-ros-viewer-ros-index] [][py-trees-ros-viewer-sources-0.2.x][![Build Status][py-trees-ros-viewer-build-status-foxy-image]][py-trees-ros-viewer-build-status-foxy] [][py-trees-ros-viewer-docs-0.2.x] [][py-trees-ros-viewer-sources-0.1.x]- [][py-trees-ros-viewer-docs-0.1.x] Started (ROS1) Refer documentation links matrix (note: you\u2019ll find tutorials py_trees_ros documentation). ROS1 Noetic Melodic Kinetic [py_trees][py-trees-wiki] [][py-trees-sources-0.7.x][![Docs Status][py-trees-docs-noetic-image]][py-trees-docs-noetic] [][py-trees-sources-0.6.x][![Docs Status][py-trees-docs-melodic-image]][py-trees-docs-melodic] [][py-trees-sources-0.5.x]-- [py_trees_msgs][py-trees-msgs-wiki] [][py-trees-msgs-sources-noetic][![Build Status][py-trees-msgs-build-status-noetic-image]][py-trees-msgs-build-status-noetic][![Docs Status][py-trees-msgs-docs-noetic-image]][py-trees-msgs-docs-noetic] [][py-trees-msgs-sources-melodic][![Build Status][py-trees-msgs-build-status-melodic-image]][py-trees-msgs-build-status-melodic][![Docs Status][py-trees-msgs-docs-melodic-image]][py-trees-msgs-docs-melodic] [][py-trees-msgs-sources-kinetic]-- [py_trees_ros][py-trees-ros-wiki] [][py-trees-ros-sources-0.6.x][![Build Status][py-trees-ros-build-status-noetic-image]][py-trees-ros-build-status-noetic][![Docs Status][py-trees-ros-docs-noetic-image]][py-trees-ros-docs-noetic] [][py-trees-ros-sources-0.5.x][![Build Status][py-trees-ros-build-status-melodic-image]][py-trees-ros-build-status-melodic][![Docs Status][py-trees-ros-docs-melodic-image]][py-trees-ros-docs-melodic] [][py-trees-ros-sources-0.5.x]-- [rqt_py_trees][rqt-py-trees-wiki] [][rqt-py-trees-sources-noetic][![Build Status][rqt-py-trees-build-status-noetic-image]][rqt-py-trees-build-status-noetic] [][rqt-py-trees-sources-melodic][![Build Status][rqt-py-trees-build-status-melodic-image]][rqt-py-trees-build-status-melodic] [][rqt-py-trees-sources-kinetic]- File truncated lines full file"},
{"url": "https://index.ros.org/p/python_qt_binding", "package": "python_qt_binding", "package_summary": "This stack provides Python bindings for Qt.\n    There are two providers: pyside and pyqt.  PySide2 is available under\n    the GPL, LGPL and a commercial license.  PyQt is released under the GPL.\n\n    Both the bindings and tools to build bindings are included from each\n    available provider.  For PySide, it is called \"Shiboken\".  For PyQt,\n    this is called \"SIP\".\n\n    Also provided is adapter code to make the user's Python code\n    independent of which binding provider was actually used which makes\n    it very easy to switch between these.", "package_details": "python_qt_binding stack Python bindings providers: pyside pyqt. PySide2 GPL, LGPL commercial license. PyQt released GPL. bindings tools build bindings included provider. PySide, called \u201cShiboken\u201d. PyQt, called \u201cSIP\u201d. adapter code user\u2019s Python code independent binding provider Contributing ROS open pull requests branch main. ROS open pull requests melodic-devel branch. older ROS distro branches, backporting considered latest branch. active ROS Distros. Branches branches repo ROS distros. main ROS Rolling galactic_devel ROS Galactic crystal-devel ROS Foxy, ROS Eloquent, ROS Dashing, ROS Crystal melodic-devel ROS Noetic, ROS Melodic kinetic-devel ROS Lunar, ROS Kinetic groovy-devel ROS Jade, ROS Indigo, ROS Hydro, ROS Groovy fuerte-devel ROS Fuerte"},
{"url": "https://index.ros.org/p/radar_msgs", "package": "radar_msgs", "package_summary": "Standard ROS messages for radars", "package_details": "radar_msgs set standard messages RADARs ROS"},
{"url": "https://index.ros.org/p/random_numbers", "package": "random_numbers", "package_summary": "This  library contains wrappers for generating floating point values, integers, quaternions using boost libraries.\n\n  The constructor of the wrapper is guaranteed to be thread safe and initialize its random number generator to a random seed.\n  Seeds are obtained using a separate and different random number generator.", "package_details": "random_numbers branch ported ROS library wrappers generating floating point values, integers, quaternions boost libraries. Build Status Branch Status ros2 master (ROS1) Features pass custom random number generator seed optional deterministic behavior debugging, testing, secondary constructor."},
{"url": "https://index.ros.org/p/raspimouse_description", "package": "raspimouse_description", "package_summary": "The raspimouse_description package", "package_details": "raspimouse_description ROS package URDF description macro Raspberry Mouse ROS package separated rt-net/raspimouse_sim. details rt-net/raspimouse_sim#42. main development branch ROS master. main development branch ROS ros2. Supported ROS distributions Melodic (melodic-devel) Foxy (foxy-devel) Humble (humble-devel) Installation Clone raspimouse_description install dependencies ~/ros2_ws/src git clone $ROS_DISTRO-devel https://github.com/rt-net/raspimouse_description rosdep install --from-paths Build package ~/ros2_ws colcon build --symlink-install source install/setup.bash Display Raspberry Mouse robot model RViz2 command: ros2 launch raspimouse_description display.launch.py display LiDAR mounted robot model command: ros2 launch raspimouse_description display.launch.py lidar:=rplidar lidar option supports urg, lds, rplidar. Similarly, display RGB Camera mounted robot model command: ros2 launch raspimouse_description display.launch.py use_rgb_camera:=true RGB Camera pointed command: ros2 launch raspimouse_description display.launch.py use_rgb_camera:=true camera_downward:=true LICENSE Corporation repository licensed MIT license, LICENSE. attributed repository MIT license. Acknowledgements Special https://gbiggs.github.io/rosjp_urdf_tutorial_text/index.html file robotis_lds01.stl released ROBOTIS licensed Apache License original file released turtlebot3_description package."},
{"url": "https://index.ros.org/p/rc_dynamics_api", "package": "rc_dynamics_api", "package_summary": "The rc_dynamics_api provides an API for easy handling of the dynamic-state data\n      streams provided by Roboception's stereo camera with self-localization.\n      See http://rc-visard.com\n\n      Dynamic-state estimates of the rc_visard relate to its self-localization and\n      ego-motion estimation. These states refer to rc_visard's current pose,\n      velocity, or acceleration and are published on demand via several data streams.\n      For a complete list and descriptions of these dynamics states and the\n      respective data streams please refer to rc_visard's user manual.", "package_details": "Roboception Dynamics API rc_dynamics_api API easy handling dynamic-state data streams Roboception\u2019s rc_visard stereo camera self-localization. Dynamic-state estimates rc_visard relate self-localization ego-motion estimation. states refer rc_visard\u2019s current pose, velocity, acceleration published demand data streams. complete list descriptions dynamics states respective data streams refer rc_visard\u2019s user manual. Compiling Installing package based open source projects listed dependencies submodules optionally packages system: Requests (version Requesting deleting data streams rc_visard\u2019s REST-API. library easy-to-use interface REST-API calls. Google Protocol Buffers: data rc_visard\u2019s data streams serialized Google protocol message definitions (/roboception/msgs). receiving data, rc_dynamics_api definitions order de-serialized project requires protobuf-compiler compiling protocol buffer definition files libprotobuf library. cloning git repository, packages cloned submodules git submodule update --init --recursive Additionally packages single header file JSON Modern (version simple modern JSON parsing library. Linux Building standard cmake build flow. <main-directory> mkdir build build cmake -DCMAKE_INSTALL_PREFIX=<install-directory> install Windows Visual Studio Building based cmake. cmake downloaded installed operating system https://cmake.org/download/ starting cmake-gui, path main directory build directory common choose sub-directory main directory \u2018build\u2019 temporary files created build process. setting paths, \u2018Configure\u2019 button pressed. up-coming dialog, chosen version Visual Studio platform Win64) project files generated. dialog closed pressing \u2018Finish\u2019. configuration, key \u2018CMAKE_INSTALL_PREFIX\u2019 changed install directory. default, install directory set path \u2018C:/Program Files/\u2026\u2019. \u2018Generate\u2019 button leads creating project file. Visual Studio opened project pressing \u2018Open Project\u2019 button. default, \u2018Debug\u2019 version compiled. changed \u2018Release\u2019 compiling optimized version. package created, pressing installing compiled package, \u2018INSTALL\u2019 target created project explorer. installation, install directory sub-directories. \u2018bin\u2019 directory tools DLLs. \u2018include\u2019 sub-directory sub-directories \u2018rc_dynamics_api\u2019 \u2018roboception\u2019. main headers library build applications. protobuf headers rc_dynamics interface. include directories created submodules. deleted. Finally, \u2018lib\u2019 sub-directories rc_dynamics_api link library required building applications. link libraries installed submodules. deleted. Tools rc_dynamics_api tool meant API: rcdynamics_stream Connect rc_visard device request specific data stream. received data messages aspects rc_visard\u2019s dynamic state simply printed std::out saved .csv-file. Simplest Connect rc_visard address request \u2018imu\u2019 stream. amount messages received simply print std::out File truncated lines full file"},
{"url": "https://index.ros.org/p/rc_genicam_api", "package": "rc_genicam_api", "package_summary": "GenICam/GigE Vision Convenience Layer.\n\n      This package combines the Roboception convenience layer for images with the\n      GenICam reference implementation and a GigE Vision transport layer. It is a\n      self contained package that permits configuration and image streaming of\n      GenICam / GigE Vision 2.0 compatible cameras like the Roboception rc_visard.\n\n      This package also provides some tools that can be called from the command line\n      for discovering cameras, changing their configuration and streaming images.\n      Although the tools are meant to be useful when working in a shell or in a\n      script, their main purpose is to serve as example on how to use the API for\n      reading and setting parameters, streaming and synchronizing images.\n\n      See LICENSE.md for licensing terms of the different parts.", "package_details": "Roboception GenICam Convenience Layer package combines Roboception convenience layer images GenICam reference implementation GigE Vision transport layer. contained package permits configuration image streaming GenICam GigE Vision compatible cameras Roboception rc_visard. API based compiled Linux Windows. package tools called command line discovering cameras, changing configuration streaming images. Prebuilt binaries downloaded releases page. Contents Minimum Requirements Compiling Installing Linux Windows Description Tools gc_info gc_config gc_stream gc_pointcloud gc_file Definition Device Finding Transport Layer Network Optimization Linux Minimum Requirements Linux gcc ARMhf: gcc Linux AArch64: gcc Windows Visual Studio Compiling Installing Linux Building standard cmake build flow. set install path compiling. happen transport layer calling tools. <main-directory> mkdir build build cmake -DCMAKE_INSTALL_PREFIX=<install-directory> install Bash completion install bash completion, configure cmake -DINSTALL_COMPLETION=ON Debian package Debian package built <main-directory> mkdir build build cmake -DCMAKE_INSTALL_PREFIX=/usr package Windows main directory script build_win.bat. Execute script Visual Studio Developer Command Prompt building package. Alternatively, cmake manually generate build project compilation favorite compiler. NOTE: libraries projects, define symbol GENICAM_NO_AUTO_IMPLIB project file avoid linker problems GenICam libraries. Description Tools tools offer graphical user interface. meant called shell Power Shell Windows) script controlled command line parameters. Calling tools parameters prints text standard output. NOTE: tool returns error transport layers path read section \u2018Transport Layer\u2019 gc_info Lists systems transport layers), interfaces devices information. device command line, complete GenICam nodemap parameters current values listed. File truncated lines full file"},
{"url": "https://index.ros.org/p/rcdiscover", "package": "rcdiscover", "package_summary": "This package contains tools for the discovery of Roboception devices via GigE Vision.", "package_details": "Discovery roboception sensors package tools discovery Roboception devices rc_visard rc_cube) GigE Vision. rcdiscover: console application discovering Roboception devices rcdiscover-gui: graphical application discovering Roboception devices sending magic packets resetting parameters Installation: find prebuilt packages Linux Windows releases page. Alternatively follow compilation steps sections. Compiling Linux compilation rcdiscover cmake required. rcdiscover-gui additionally requires FLTK. install Debian/Ubuntu sudo apt-get install cmake libfltk1.3-dev Building rcdiscover Building steps: mkdir build build cmake build gui pass CMAKE option BUILD_RCDISCOVER_GUI: cmake -DBUILD_RCDISCOVER_GUI=ON binaries build/tools/. Installation Installation install Debian derivatives Ubuntu) Debian packages built cmake -DCMAKE_INSTALL_PREFIX=\"/usr\" package installed sudo dpkg rcdiscover*.deb Discovering sensors subnets Linux distributions reverse path filtering turned restricts discoverability sensor subnet host. Check sysctl net.ipv4.conf.all.rp_filter sysctl net.ipv4.conf.default.rp_filter Reverse path filtering turned sudo sysctl net.ipv4.conf.all.rp_filter=0 sudo sysctl net.ipv4.conf.default.rp_filter=0 disable specific interface, sudo sysctl net.ipv4.conf.eth0.rp_filter=0 Note: settings persistent reboots! persist add file /etc/sysctl.d/ distributions. debian/50-rcdiscover-rpfilter.conf built Debian package package, automatically disable reverse path filtering package installation. Compiling Windows main directory rcdiscover script build_win.bat. script run Command Prompt Visual Studio. tested Visual Studio beginning, script check git cmake commands. commands script URL downloading stops. tools script clones git repository FLTK, compiles compiles rcdiscover rcdiscover-gui. successful compilation, executables build directory."},
{"url": "https://index.ros.org/p/reach", "package": "reach", "package_summary": "The reach package", "package_details": "REACH Robotic Evaluation Comparison Heuristic ![Robot Reach Study][1] ![Reach Study Demo][2] ![Reach Study Heat Map][3] Table Contents Description Installation ROS Integration Tips Description REACH repository tool users visualize quantitatively evaluate reach capability robot system workpiece. ROSCon presentation video detailed explanation reach study concept approach. Supported Distros Support Ubuntu Focal &check; Ubuntu Jammy &check; Structure reach ROS-independent package framework reach study process, defined diagram ![Reach Study Flow Diagram][4] reach package interface definition required reach study functions: TargetPoseGenerator Generates Cartesian target poses robot attempt reach reach study target poses expected relative kinematic base frame robot z-axis target poses expected oppose z-axis robot kinematic tip frame IKSolver Calculates inverse kinematics solution robot input degree-of-freedom Cartesian target Evaluator Calculates numerical \u201cfitness\u201d score solution robot joint pose) Cartesian target pose Higher values reachability numerical measures reachability include manipulability, distance closest collision, Display Visualizes robot/reach study environment, target Cartesian poses, solutions, reach study results Logger Logs messages status progress reach study Plugins interfaces exposed plugins boost_plugin_loader library support custom implementations. default dummy plugins created reach package. ROS-based plugins implemented reach_ros reach_ros2 packages. plugins built project discovered automatically plugin loader additional manual steps. plugin loader class finds plugin libraries environment variables: LD_LIBRARY_PATH plugin loader searches libraries plugins directories defined LD_LIBRARY_PATH environment variable. ROS-based build tool catkin colcon variable set automatically include system level workspace level folders sourcing <devel|install>/setup.bash REACH_PLUGINS: plugin loader libraries names defined environment variable REACH_PLUGINS directories environment variable LD_LIBRARY_PATH. names libraries include prefix lib) suffix separated colon variable set manually plugin libraries built project custom libraries created project libmy_custom_reach_plugins.so libcool_reach_plugins.so) REACH plugins, plugin libraries visible plugin loader setting REACH_PLUGINS environment variable export REACH_PLUGINS=my_custom_reach_plugins:cool_reach_plugins Installation Nominally, reach package ROS-independent, convenient ROS dependency management build tools build package. clone repository catkin workspace ~/reach_ws/src git clone https://github.com/ros-industrial/reach.git Install dependencies vcs import src src/reach/dependencies.repos rosdep install --from-paths src --ignore-src Build repository <catkin/colcon> build ROS Integration reach_ros reach_ros2 repositories ROS-based plugins, capability demos, general usage instructions. Tips Ensure object mesh reach target position scales match correct (visualize rviz). common factor set robot links allowed collide mesh, add names touch_links field MoveItIKSolver plugin reach study configuration file. selection solver key performance reach study. Gradient-based solvers KDL TRAC-IK) typically good choices. Additional constraints lack thereof, orientation freedom tool z-axis) incorporated solver parameters source code produce reach study results File truncated lines full file"},
{"url": "https://index.ros.org/p/realtime_tools", "package": "realtime_tools", "package_summary": "Contains a set of tools that can be used from a hard\n    realtime thread, without breaking the realtime behavior.", "package_details": "realtime_tools set tools hard realtime thread, breaking realtime behavior. documentation docs.ros.org. Contributing open-source project, contributor, background experience. Pick review create project, read contributing guide information started. happy contribution. Build status ROS2 Distro Branch Build status Documentation Package Build Rolling master API Kilted kilted API Jazzy jazzy API Humble humble API Acknowledgements project received major contributions companies institutions listed control.ros.org"},
{"url": "https://index.ros.org/p/robot_localization", "package": "robot_localization", "package_summary": "Provides nonlinear state estimation through sensor fusion of an abritrary number of sensors.", "package_details": "robot_localization robot_localization package nonlinear state estimation nodes. package developed Charles River Analytics, documentation http://wiki.ros.org/robot_localization"},
{"url": "https://index.ros.org/p/robot_state_publisher", "package": "robot_state_publisher", "package_summary": "This package take the joint angles of a robot as input, and publishes the 3D poses of the robot links to tf2, using a kinematic tree model of the robot.", "package_details": "Robot State Publisher package Robot State Publisher, node class publish state robot startup time, Robot State Publisher supplied kinematic tree model (URDF) robot. subscribes joint_states topic type sensor_msgs/msg/JointState) individual joint states. joint states update kinematic tree model, resulting poses published Robot State Publisher deals \u201cclasses\u201d joint types: fixed movable. Fixed joints type \u201cfixed\u201d) published transient_local /tf_static topic startup (transient_local topics history published, subscription latest state world). Movable joints published regular topic time joint updated joint_states message. Examples showing pass robot_description parameter launch file \u2018launch\u2019 subdirectory. Published Topics robot_description (std_msgs/msg/String) description robot URDF string. Republishes set robot_description parameter, informed dynamic URDF. Published \u201ctransient local\u201d quality service, subscribers \u201ctransient local\u201d. (tf2_msgs/msg/TFMessage) transforms movable joints robot. tf_static (tf2_msgs/msg/TFMessage) transforms static joints robot. Subscribed Topics joint_states (sensor_msgs/msg/JointState) joint state updates robot poses. RobotStatePublisher class takes updates, transformations mimic joints), publishes results topics. Parameters robot_description (string) original description robot URDF form. set robot_state_publisher startup time, node fail start. Updates parameter reflected robot_description topic. publish_frequency (double) maximum frequency non-static transforms joint states) published Defaults ignore_timestamp (bool) accept joint states matter timestamp (true), publish joint state updates newer publish_frequency (false). Defaults false. frame_prefix (string) arbitrary prefix add published frames. Defaults empty string."},
{"url": "https://index.ros.org/p/robot_upstart", "package": "robot_upstart", "package_summary": "The robot_upstart package provides scripts which may be used to install\n    and uninstall Ubuntu Linux upstart jobs which launch groups of roslaunch files.", "package_details": "robot_upstart Clearpath Robotics presents suite scripts assist launching background ROS processes Ubuntu Linux PCs. generated documentation ROS Wiki."},
{"url": "https://index.ros.org/p/robotraconteur", "package": "robotraconteur", "package_summary": "The robotraconteur package", "package_details": "Robot Raconteur Core Library Wrappers communication framework robotics, automation, Internet http://robotraconteur.com Wason Wen, \u201cRobot Raconteur\u00ae Updates Open Source Interoperable Middleware Robotics\u201d, Proc. IEEE Conference Automation Science Engineering, Aksoy, Saunders, Wason, Wen, \u201cPlug-and-play software architecture coordinating multiple industrial robots sensors multiple vendors\u201d, Proc. IEEE Conference Automation Science Engineering, Wason, \u201cRobot Raconteur\u00ae version Updated Communication System Robotics, Automation, Building Control, Internet Proc. IEEE Conference Automation Science Engineering, Wason Wen, \u201cRobot Raconteur: Communication Architecture Library Robotic Automation Systems\u201d, Proc. IEEE Conference Automation Science Engineering, Started Guide! Contents Robot Raconteur Core Library Wrappers Documentation Examples Quick Start Started Installation Building ROS Support LabVIEW Add-on Standard Service Types Companion Libraries Robot Raconteur Directory Package Quality Contributing License Acknowledgment Documentation https://github.com/robotraconteur/robotraconteur/wiki/Documentation documentation. Examples examples directory examples programming languages. bug! leave issue GitHub Issues page specific question Robot Raconteur: leave question GitHub Discussions general question comment: leave message GitHub Discussions. Quick Start Quick Start demonstrates basic functionality Robot Raconteur creating service, calling service client. \u201cReynard Robot\u201d Python package, simple cartoon robot. running install required packages: python pip install robotraconteur reynard-the-robot Linux, python3 python run Python interpreter. python3 rest examples reynard_quickstart_service.py File truncated lines full file"},
{"url": "https://index.ros.org/p/ros_industrial_cmake_boilerplate", "package": "ros_industrial_cmake_boilerplate", "package_summary": "Contains boilerplate cmake script, macros and utils", "package_details": "CMake Boilerplate Scripts collection boilerplate CMake scripts marcos. Note: package specific ROS-Industrial usable package CMake. prefix added facilitate releasing ROS distributions. {.contents depth=\u201d4\u201d} Table Contents Create Debian Package (Linux) NuGet Package (Windows) process generate Debian NuGet package leveraging CMake CPack based package located current directory. bash <workspace directory> catkin build -DRICB_PACKAGE=ON ./src/ros_industrial_cmake_boilerplate/.run-cpack` Macros Extract Package Metadata CMake macro extract package version package.xml file. create cmake variable ${PREFIX_ARG}_extracted_name ${PREFIX_ARG}_extracted_version. extract_package_metadata(${PREFIX_ARG}) Clang Tidy CMake macro add clang-tidy targets clang_tidy(ARGUMENTS ${ARGN}) clang_tidy(ARGUMENTS ${ARGN} ENABLE ${USER_ENABLE_ARG}) CMake macro add clang-tidy targets default arguments. clang_tidy(ARGUMENTS ${DEFAULT_CLANG_TIDY_CHECKS}) clang_tidy(ARGUMENTS ${DEFAULT_CLANG_TIDY_CHECKS} ENABLE ${USER_ENABLE_ARG}) Clears clang-tidy called defined code compilation. re-enabled call [clang_tidy()]{.title-ref}. reset_clang_tidy() CMake macro add clang-tidy target. clang-tidy documentation list clang-tidy checks note title Note macros ENABLE ON/OFF easily enabled external flag. automatically enabled. Single Argument Keywords: Keyword Type Description ENABLE ON/OFF Enable/Disable clang-tidy WARNINGS_AS_ERRORS ON/OFF Treat warnings errors. ERROR_CHECKS CHECKS treat errors. HEADER_FILTER String Default Regular expression matching names headers output diagnostics File truncated lines full file"},
{"url": "https://index.ros.org/p/rosapi", "package": "rosapi", "package_summary": "Provides services for getting various ROS meta-information, including ROS topic, services, interfaces or\naction servers and managing ROS parameters.", "package_details": "rosapi Nodes rosapi (Executable: rosapi_node) services ROS meta-information, including ROS topic, services, interfaces action servers managing ROS parameters. Services ~/topics (type: rosapi_msgs/srv/Topics) Return list topics published. ~/interfaces (type: rosapi_msgs/srv/Interfaces) Return list interfaces system. ~/topics_for_type (type: rosapi_msgs/srv/TopicsForType) Return list topics publishing type. ~/topics_and_raw_types (type: rosapi_msgs/srv/TopicsAndRawTypes) Return list topics published, raw types. ~/services (type: rosapi_msgs/srv/Services) Return list services advertised. ~/services_for_type (type: rosapi_msgs/srv/ServicesForType) Return list services publishing type. ~/nodes (type: rosapi_msgs/srv/Nodes) Return list nodes registered. ~/node_details (type: rosapi_msgs/srv/NodeDetails) Return node description including subscribing, publishing, services. ~/action_servers (type: rosapi_msgs/srv/GetActionServers) Return list action servers based actions standard topics. ~/action_type (type: rosapi_msgs/srv/ActionType) action, return type. ~/topic_type (type: rosapi_msgs/srv/TopicType) topic, return type topic. ~/service_type (type: rosapi_msgs/srv/ServiceType) service, return type service. ~/publishers (type: rosapi_msgs/srv/Publishers) topic, return list node names publishing topic. ~/subscribers (type: rosapi_msgs/srv/Subscribers) topic, return list node names subscribing topic. ~/service_providers (type: rosapi_msgs/srv/ServiceProviders) service, returns list node names advertising service type. ~/service_node (type: rosapi_msgs/srv/ServiceNode) service, returns node providing service. ~/message_details (type: rosapi_msgs/srv/MessageDetails) message type, return TypeDef type. ~/service_request_details (type: rosapi_msgs/srv/ServiceRequestDetails) service type, return TypeDef request message service type. ~/service_response_details (type: rosapi_msgs/srv/ServiceResponseDetails) service type, return TypeDef response message service type. ~/action_goal_details (type: rosapi_msgs/srv/ActionGoalDetails) action type, return TypeDef goal message action type. ~/action_result_details (type: rosapi_msgs/srv/ActionResultDetails) action type, return TypeDef result message action type. ~/action_feedback_details (type: rosapi_msgs/srv/ActionFeedbackDetails) action type, return TypeDef feedback message action type. ~/set_param (type: rosapi_msgs/srv/SetParam) File truncated lines full file"},
{"url": "https://index.ros.org/p/rplidar_ros", "package": "rplidar_ros", "package_summary": "The rplidar ros package, support rplidar A1/A2/A3/S1/S2/S3/T1", "package_details": "SLAMTEC LIDAR ROS2 Package ROS2 node SLAMTEC LIDAR Visit Website details SLAMTEC LIDAR: SLAMTEC LIDAR roswiki: http://wiki.ros.org/rplidar SLAMTEC LIDAR HomePage: http://www.slamtec.com/en/Lidar SLAMTEC LIDAR SDK: https://github.com/Slamtec/rplidar_sdk SLAMTEC LIDAR Tutorial: https://github.com/robopeak/rplidar_ros/wiki Supported SLAMTEC LIDAR Lidar Model RPLIDAR RPLIDAR RPLIDAR RPLIDAR RPLIDAR RPLIDAR RPLIDAR RPLIDAR RPLIDAR install ROS2 rolling, humble, galactic, foxy configuring ROS environment Configuring ROS environment Create ROS2 workspace ROS2 Tutorials Creating workspace choose directory ros2_ws, \u201cdevelopment workspace\u201d mkdir ~/ros2_ws/src ~/ros2_ws/src Compile Install rplidar_ros package Clone rplidar_ros package github Ensure you\u2019re ros2_ws/src directory clone: git clone ros2 https://github.com/Slamtec/rplidar_ros.git Build rpidar_ros package root workspace (ros2_ws), build rplidar_ros package command: ~/ros2_ws/ source /opt/ros/<rosdistro>/setup.bash colcon build --symlink-install find output \u201ccolcon:command found\u201d,you separate install colcon build tools. Package environment setup source ./install/setup.bash Note: Add permanent workspace environment variables. convenientif ROS2 environment variables automatically added bash session time shell launched: $echo \"source <your_own_ros2_ws>/install/setup.bash\" ~/.bashrc $source ~/.bashrc Create udev rules rplidar rplidar_ros running requires read write permissions serial device. manually modify command: sudo chmod /dev/ttyUSB0 create udev rule: ```bash src/rpldiar_ros/ source scripts/create_udev_rules.sh File truncated lines full file"},
{"url": "https://index.ros.org/p/rqt_robot_dashboard", "package": "rqt_robot_dashboard", "package_summary": "rqt_robot_dashboard provides an infrastructure for building robot dashboard plugins in rqt.", "package_details": "robot_dashboard Framework creating ROS dashboards RQT"},
{"url": "https://index.ros.org/p/rt_usb_9axisimu_driver", "package": "rt_usb_9axisimu_driver", "package_summary": "The rt_usb_9axisimu_driver package", "package_details": "English rt_usb_9axisimu_driver \u682a\u5f0f\u4f1a\u793e\u30a2\u30fc\u30eb\u30c6\u30a3\u304c\u8ca9\u58f2\u3057\u3066\u3044\u308bUSB\u51fa\u529b9\u8ef8IMU\u30bb\u30f3\u30b5\u30e2\u30b8\u30e5\u30fc\u30eb\u7528\u306eROS \u73fe\u5728\u3001\u4ee5\u4e0b\u306eROS\u306e\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\u307e\u3059\u3002 Melodic (melodic-devel) Noetic (noetic-devel) Foxy (foxy-devel) Humble (humble-devel) industrial_ci source build amd64 binary arm64 binary main develop(master) ROS develop(ros2-devel) Bionic Melodic(melodic-devel) Focal Noetic(noetic-devel) Focal Foxy(foxy-devel) TODO: Add Jammy Humble rt_usb_9axisimu_driver\u306f\u682a\u5f0f\u4f1a\u793e\u30a2\u30fc\u30eb\u30c6\u30a3\u304c\u8ca9\u58f2\u3057\u3066\u3044\u308b USB\u51fa\u529b9\u8ef8IMU\u30bb\u30f3\u30b5\u30e2\u30b8\u30e5\u30fc\u30eb \u306eROS License: 3-Clause BSD License USB\u51fa\u529b9\u8ef8IMU\u30bb\u30f3\u30b5\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30bb\u30f3\u30b5\u3068\u3057\u3066InvenSense\u793e\u306eMPU9250\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u307e\u3059\u3002 \u3053\u306e\u30bb\u30f3\u30b5\u306e\u78c1\u6c17\u30bb\u30f3\u30b5\u306e\u5ea7\u6a19\u7cfb\u306fNED\u5ea7\u6a19\u7cfb(x-north, y-east, z-down)\u3067\u3059\u304c\u3001 \u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e\u30de\u30a4\u30b3\u30f3(LPC1343)\u306b\u304a\u3044\u3066ENU\u5ea7\u6a19\u7cfb(x-east, y-north, z-up)\u306b\u5909\u63db\u3055\u308c\u3001 \u3053\u308c\u306fROS\u3067\u4f7f\u308f\u308c\u308b\u5ea7\u6a19\u7cfb\u306e\u30eb\u30fc\u30eb\u306b\u3082\u9069\u5408\u3057\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u3001REP-0103\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 USB\u51fa\u529b9\u8ef8IMU\u30bb\u30f3\u30b5\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u30aa\u30fc\u30d7\u30f3\u30cf\u30fc\u30c9\u30fb\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u305f\u3081\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e\u30de\u30a4\u30b3\u30f3\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u5909\u66f4\u304c\u53ef\u80fd\u3067\u3059\u3002 \u3053\u306eROS\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306b\u306e\u307f\u5bfe\u5fdc\u3057\u3066\u304a\u308a\u307e\u3059\u3002\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\u3001\u6b63\u5e38\u306a\u52d5\u4f5c\u304c\u3067\u304d\u306a\u304f\u306a\u308b\u6050\u308c\u304c\u3054\u3056\u3044\u307e\u3059\u306e\u3067\u3001\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002 ver2.0\u3067\u306e\u3054\u5229\u7528\u306b\u3064\u3044\u3066 2020\u5e748\u6708\u73fe\u5728\u3001\u8ca9\u58f2\u3055\u308c\u3066\u3044\u308bUSB\u51fa\u529b9\u8ef8IMU\u30bb\u30f3\u30b5\u30e2\u30b8\u30e5\u30fc\u30eb\u306fver2.0\u3068\u306a\u308a\u307e\u3059\u3002 \u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306b\u306f\u3001ASCII\u51fa\u529b\u3068Binary\u51fa\u529b\u306e\uff12\u3064\u306e\u30c7\u30fc\u30bf\u51fa\u529b\u5f62\u5f0f\u304c\u3042\u308a\u307e\u3059\u3002 \u30bb\u30f3\u30b5\u51fa\u8377\u6642\u70b9\u3067\u306fASCII\u51fa\u529b\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u51fa\u529b\u5f62\u5f0f\u306e\u5207\u308a\u66ff\u3048\u65b9\u6cd5\u306f\u3001\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308b\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 https://github.com/rt-net/RT-USB-9AXIS-00 [ERROR] Error opening sensor device, re-check devices. sudo chmod /dev/ttyACM0 ROS Melodic\u7b49ROS 1\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u3064\u3044\u3066\u306fmaster\u30d6\u30e9\u30f3\u30c1\u306eREADME\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 ROS Foxy sudo apt install ros-foxy-rt-usb-9axisimu-driver ROS Humble sudo apt install ros-humble-rt-usb-9axisimu-driver ~/ros2_ws/src Clone package checkout ROS branch git clone $ROS_DISTRO-devel https://github.com/rt-net/rt_usb_9axisimu_driver Install dependencies rosdep install --from-paths Build Install ~/ros2_ws colcon build --symlink-install source ~/ros2_ws/install/setup.bash Terminal source ~/ros2_ws/install/setup.bash ros2 run rt_usb_9axisimu_driver rt_usb_9axisimu_driver File truncated lines full file"},
{"url": "https://index.ros.org/p/rtabmap", "package": "rtabmap", "package_summary": "RTAB-Map's standalone library. RTAB-Map is a RGB-D SLAM approach with real-time constraints.", "package_details": "rtabmap RTAB-Map library standalone application. information papers, major updates), visit RTAB-Map\u2019s home page. installation instructions examples, visit RTAB-Map\u2019s wiki. RTAB-Map ROS, visit rtabmap page ROS wiki. Acknowledgements project supported IntRoLab Intelligent Interactive Integrated Interdisciplinary Robot Lab, Sherbrooke, Qu\u00e9bec, Canada. Latest Linux Windows </tbody> </table> ROS Binaries `ros-$ROS_DISTRO-rtabmap` ROS Noetic ROS Humble Jazzy Rolling Docker rtabmap </tbody> </table>"},
{"url": "https://index.ros.org/p/rtabmap_demos", "package": "rtabmap_demos", "package_summary": "RTAB-Map's demo launch files.", "package_details": "rtabmap_demos Outdoor Stereo VSLAM Indoor LiDAR RGB-D SLAM Multi-Session Indoor LiDAR RGB-D SLAM Find-Object SLAM Turtlebot4 Nav2, LiDAR RGB-D SLAM Turtlebot3 Nav2 LiDAR SLAM Turtlebot3 Nav2 RGB-D SLAM Turtlebot3 Nav2, LiDAR RGB-D SLAM Turtlebot3 Nav2, Fake LiDAR RGB-D SLAM Champ Quadruped Nav2, Elevation Map VSLAM Clearpath Husky Nav2, LiDAR RGB-D SLAM Clearpath Husky Nav2, LiDAR RGB-D SLAM Clearpath Husky Nav2, LiDAR Assembling RGB-D SLAM Isaac Sim Nav2 Stereo SLAM Isaac Sim Nav2 RGB-D VSLAM Outdoor Stereo VSLAM stereo_outdoor_demo.launch.py (Video) Indoor LiDAR RGB-D SLAM robot_mapping_demo.launch.py (Videos: rtabmap_viz, rviz) Multi-Session Indoor LiDAR RGB-D SLAM multisession_mapping_demo.launch.py (Video) Find-Object SLAM find_object_demo.launch.py (Video) Turtlebot4 Nav2, LiDAR RGB-D SLAM turtlebot4_sim_demo.launch.py Turtlebot3 Nav2 LiDAR SLAM turtlebot3_sim_scan_demo.launch.py Turtlebot3 Nav2 RGB-D SLAM turtlebot3_sim_rgbd_demo.launch.py Turtlebot3 Nav2, LiDAR RGB-D SLAM turtlebot3_sim_rgbd_scan_demo.launch.py Turtlebot3 Nav2, Fake LiDAR RGB-D SLAM turtlebot3_sim_rgbd_fake_scan_demo.launch.py Red: Scan generated camera\u2019s depth. Orange: Locally assembled scans proximity detection. Yellow: map. Champ Quadruped Nav2, Elevation Map VSLAM champ_sim_vslam.launch.py Clearpath Husky Nav2, LiDAR RGB-D SLAM husky_sim_scan2d_demo.launch.py Clearpath Husky Nav2, LiDAR RGB-D SLAM husky_sim_scan3d_demo.launch.py Clearpath Husky Nav2, LiDAR Assembling RGB-D SLAM husky_sim_scan3d_assemble_demo.launch.py Isaac Sim Nav2 Stereo SLAM isaac_sim_vslam_demo.launch.py Isaac Sim Nav2 RGB-D VSLAM isaac_sim_vslam_demo.launch.py stereo:=false vo:=rtabmap"},
{"url": "https://index.ros.org/p/rtabmap_launch", "package": "rtabmap_launch", "package_summary": "RTAB-Map's main launch files.", "package_details": "Usage rtabmap.launch ros1 ported ROS2 rtabmap.launch.py arguments. ROS1 examples roslaunch zed_wrapper zed_no_tf.launch roslaunch rtabmap_ros rtabmap.launch rtabmap_args:=\"--delete_db_on_start\" rgb_topic:=/zed/zed_node/rgb/image_rect_color depth_topic:=/zed/zed_node/depth/depth_registered camera_info_topic:=/zed/zed_node/rgb/camera_info frame_id:=base_link approx_sync:=false wait_imu_to_init:=true imu_topic:=/zed_node/imu/data ROS2 equivalent latest zed_wrapper launch file): ros2 launch zed_wrapper zed_camera.launch.py camera_model:=zed2i publish_tf:=false publish_map_tf:=false ros2 launch rtabmap_launch rtabmap.launch.py rtabmap_args:=\"--delete_db_on_start\" rgb_topic:=/zed/zed_node/rgb/image_rect_color depth_topic:=/zed/zed_node/depth/depth_registered camera_info_topic:=/zed/zed_node/rgb/camera_info frame_id:=zed_camera_link approx_sync:=false wait_imu_to_init:=true imu_topic:=/zed/zed_node/imu/data rviz:=true"},
{"url": "https://index.ros.org/p/ruckig", "package": "ruckig", "package_summary": "Instantaneous Motion Generation for Robots and Machines.", "package_details": "Ruckig Instantaneous Motion Generation Robots Machines. Ruckig generates trajectories on-the-fly, allowing robots machines react instantaneously sensor input. Ruckig calculates trajectory target waypoint position, velocity, acceleration) starting initial state limited velocity, acceleration, jerk constraints. target state, Ruckig define intermediate positions waypoint state-to-state motions, Ruckig guarantees time-optimal solution. intermediate waypoints, Ruckig calculates path time parametrization jointly, resulting significantly faster trajectories compared traditional methods. information ruckig.com paper Jerk-limited Real-time Trajectory Generation Arbitrary Target States, accepted Robotics: Science Systems (RSS), conference. Installation Ruckig dependencies testing). build Ruckig CMake, run mkdir build build cmake -DCMAKE_BUILD_TYPE=Release install Ruckig system-wide directory, (sudo) install install debian package cpack running cpack sudo dpkg ruckig*.deb Ruckig CMake project examples/CMakeLists.txt. include Ruckig directory project call add_subdirectory(ruckig) parent CMakeLists.txt. Ruckig Python module, development debugging purposes. Ruckig Community Version installed PyPI pip install ruckig CMake, Python module built BUILD_PYTHON_MODULE flag. you\u2019re interested Python module library), build install Ruckig pip install Tutorial explain basics started online generated trajectories application. collection examples guide important features Ruckig. time-optimal trajectory single degree freedom shown figure added plots resulting trajectories examples. Let\u2019s started! Waypoint-based Trajectory Generation Ruckig main interface classes: Ruckig, InputParameter, OutputParameter class. you\u2019ll create Ruckig instance number DoFs template parameter, control cycle seconds) constructor. Ruckig<6> ruckig Number DoFs; control cycle input type blocks data: current state, target state kinematic limits. InputParameter<6> input; Number DoFs input.current_position input.current_velocity input.current_acceleration input.target_position input.target_velocity input.target_acceleration input.max_velocity input.max_acceleration input.max_jerk OutputParameter<6> output; Number DoFs acceleration-constrained trajectory, omit max_jerk current target_acceleration input output resources, iterate trajectory discrete time step. applications, loop run real-time thread controls actual hardware. (ruckig.update(input, output) Result::Working) state robot->setJointPositions(output.new_position); output.pass_to_input(input); forget control loop, update current state input parameter calculated trajectory. pass_to_input method copies kinematic state output current kinematic state input parameter. step) current state expected, pre-calculated trajectory, Ruckig calculate trajectory based input. trajectory reached target state, update function return Result::Finished. File truncated lines full file"},
{"url": "https://index.ros.org/p/rviz_satellite", "package": "rviz_satellite", "package_summary": "Display satellite map tiles in RViz", "package_details": "rviz_satellite Rviz plugin displaying satellite maps position sensor_msgs/msg/NavSatFix message. NOTE: ROS1 version? Checkout ros1 branch! Usage Add instance AerialMap Rviz config point sensor_msgs/msg/NavSatFix topic. Map tiles cached $HOME/.cache/rviz_satellite. present cache expire automatically delete files folder images reloaded. OpenStreetMap convention tile URLs supported. implies raster tiles vector tiles) supported. demo, run commands Rviz circle geo point define. ros2 launch rviz_satellite demo.launch.xml view coordinates (Vienna), OpenStreetMap tiles. Tile servers provide tile URL (Object URI) satellite images loaded. URL form http://server.tld/{z}/{x}/{y}.jpg. tokens represent zoom level, coordinate, coordinate automatically substituted rviz_satellite making HTTP requests. Tiles optionally loaded local filesystem downloaded cases robots internet access. file URI file:///tmp/tile/{z}/{y}/{x}.jpg load files /tmp/tile directory. rviz_satellite doesn\u2019t preconfigured tile URL. tile servers: OpenStreetMap: https://tile.openstreetmap.org/{z}/{x}/{y}.png TomTom: https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?tileSize=512&key=[TOKEN] Mapbox: https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/256/{z}/{x}/{y}?access_token=[TOKEN] request access token refer respective terms service copyrights. Options Topic topic GPS measurements. Alpha simply display transparency. Draw map displayed geometry. Zoom zoom level map. Recommended values smaller resolution. current max. Blocks number adjacent tiles addition center tile load, maximum. Timeout specifies timeout received message timestamp, map faded disable setting Local Maps tile server supports specific region world enable Local Map option. means zoom levels tile coverage deviate defined manually. local origin top-left corner local map region. options set unfolding top-level Local Map option: Meter Pixel (Zoom defines length pixel edge image meter zoom level Default Origin CRS epsg code coordinate reference system (CRS) local origin cartesian coordinate system). Default set. Origin position local origin CRS system. Default Origin position local origin CRS system. Default Usage Public orthographic photos povided Geobasis NRW publicly scheme tiles cover smaller part western Germany high resolution. options derived scheme. Object URI: https://www.wmts.nrw.de/geobasis/wmts_nw_dop/tiles/nw_dop/EPSG_25832_16/{z}/{x}/{y} Meter Pixel (Zoom Origin CRS: EPSG:25832 Origin Origin Support Contributions case questions problems, hesitate open issue. Contributions welcomed. add summary changelog section Forthcoming. Icon copyright icon downloaded edited svgrepo, originally licensed"},
{"url": "https://index.ros.org/p/rviz_visual_tools", "package": "rviz_visual_tools", "package_summary": "Utility functions for displaying and debugging data in Rviz via published markers", "package_details": "Rviz Visual Tools API wrapper displaying shapes meshes Rviz helper functions publish markers. displaying debugging data. advanced robot visualization features, moveit_visual_tools builds class. package includes: Rviz Panel GUI step code debugging testing Rviz-based keyboard control stepping application Easy helper functions visualizing Rviz fast Basic geometric markers Rviz complex geometric shapes coordinate frames, framed boxes, planes, paths, graphs Ability quickly choose standard colors sizes Tools ensure proper connection Rviz publishing visualizations Shortcuts convert types points poses ROS msgs, Eigen, Batch publishing capabilities reduce throttling ROS messages publishing helper class interactive marker helper class Developed Dave Coleman Correll Robotics Lab, University Colorado Boulder Andy McEvoy ROS Kinetic Buildfarm AMD64 Xenial Debian Build Ubuntu ROS Kinetic Buildfarm AMD64 Xenial Devel Build Ubuntu ROS Melodic Buildfarm AMD64 Bionic Debian Build Ubuntu ROS Melodic Buildfarm AMD64 Bionic Devel Build Ubuntu Install Ubuntu Debian sudo apt-get install ros-${ROS_DISTRO}-rviz-visual-tools Build Source Clone repository catkin workspace, rosdep install tool automatically download dependencies. Depending current version ROS, rosdep install --from-paths src --ignore-src --rosdistro ${ROS_DISTRO} Quick Start Demo random shapes generated Rviz, launch Rviz: ros2 launch rviz_visual_tools demo_rviz.launch.py start RViz Visual Tools demo: ros2 run rviz_visual_tools rviz_visual_tools_demo Code API Doxygen documentation Usage assume helper functions class. functions assume publishing transforms world frame call /odom). Initialize Add includes: #include <rviz_visual_tools/rviz_visual_tools.hpp> Add class\u2019s member variables: visualizing rviz rviz_visual_tools::RvizVisualToolsPtr visual_tools_; class\u2019 constructor add: visual_tools_.reset(new rviz_visual_tools::RvizVisualTools(\"base_frame\",\"/rviz_visual_markers\", node)); Change parameter robot\u2019s base frame, parameter you\u2019d Rviz marker ROS topic. Tools code easily debug code visual markers Rviz Start rviz create marker \u2018Add\u2019 button bottom Choose marker topic topic constructor. Code snippet create pose xyz rotate pose degrees axis. publish pose arrow visualziation Rviz. Rviz fixed frame chosen code. Create pose Eigen::Isometry3d pose; pose Eigen::AngleAxisd(M_PI/4, Eigen::Vector3d::UnitY()); rotate axis degrees pose.translation() Eigen::Vector3d( translate x,y,z File truncated lines full file"},
{"url": "https://index.ros.org/p/schunk_svh_library", "package": "schunk_svh_library", "package_summary": "Standalone C++ library for accessing the Schunk five finger hand.", "package_details": "Schunk SVH Library standalone library control Schunk SVH 5-finger hand. hardware abstraction driver development. Users develop custom wrappers top preferred robotics framework. Installation Note: Switch instructions working ROS1/ROS2 context. Start source build parent folder package mkdir build build cmake ../driver_svh/ -DCMAKE_INSTALL_PREFIX=../install cmake --build install provide install folder -DCMAKE_INSTALL_PREFIX=. Connection SVH driver library serial interface communicate SVH. assume suitable usb-serial dongle dongle\u2019s driver /dev/ttyUSB0 file communication hardware. Ubuntu operating systems support out-of-the-box. add user dialout group speak device file sudo privileges. Call usermod dialout $USER restart system. good Running tests manually Boost test framework. run tests manually command line CTEST_OUTPUT_ON_FAILURE=1 test"},
{"url": "https://index.ros.org/p/septentrio_gnss_driver", "package": "septentrio_gnss_driver", "package_summary": "ROSaic: C++ driver for Septentrio's GNSS and INS receivers", "package_details": "ROSaic ROS mosaic Overview repository hosts drivers ROS (Melodic Noetic) ROS (Foxy, Galactic, Humble, Iron, Rolling, written work mosaic AsteRx Septentrio\u2019s cutting-edge GNSS GNSS/INS receiver families ROS ROS supported repository. Main Features: Supports Septentrio\u2019s single antenna GNSS, dual antenna GNSS INS receivers Supports serial, TCP/IP USB connections, compatible serial (RNDIS) TCP/IP protocols Supports ASCII (including key NMEA messages SBF (Septentrio Binary Format) blocks Reports status AIM+ (Advanced Interference Mitigation including OSNMA) anti-jamming anti-spoofing. publish nav_msgs/Odometry message INS receivers blend SBF blocks PVTGeodetic, PosCovGeodetic, ChannelStatus, MeasEpoch, AttEuler, AttCovEuler, VelCovGeodetic DOP order publish gps_common/GPSFix sensor_msgs/NavSatFix messages Supports optional axis convention conversion Septentrio NED convention, ROS ENU. Easy configuration multiple RTK corrections simultaneously NTRIP, TCP/IP stream, serial) play PCAP capture logs testing purposes Tested mosaic-X5, mosaic-H, AsteRx-m3 Pro+, AsteRx-SB Pro+ AsteRx-SBi3 Pro receiver Easy add support log types maintainers success failure driver devices update page appropriately. Usage Important notes Notes Usage driver assumes anonymous access grants full control rights. case default, changed `setDefaultAccessLevel` command. user control place user credentials parameters `login.user` `login.password`. Note serial connection: user part `dialout` group full access serial ports. add `sudo adduser [username] dialout`. Note setting hw_flow_control: string parameter, setting quotes leads fact read correctly. Note setting ant_(aux1)_serial_nr: string parameter, numeric serial numbers put quotes. warning issued driver parse integer. Note usage NTRIP USB virtual ethernet (RNDIS): RNDIS virtual network connection receiver outgoing network access USB activated, explained [here](https://www.youtube.com/watch?v=bUt8cL9Ue1Y). setup internet sharing Linux setting connection virtual network interface enx1a3202991545) \"Shared computers\". build binary installation finished, adapt `config/rover.yaml` file assemble examples GNSS specific parameters `config/gnss.yaml` INS `config/ins.yaml` communication parameters, ROS messages published, frequency happen ROS Launch `launch/rover.launch` `rover.yaml` add `param_file_name:=xxx` custom config. ROS Launch composition `ros2 launch septentrio_gnss_driver rover.launch.py` `rover.yaml` add `file_name:=xxx.yaml` custom config. Alternatively launch node `ros2 launch septentrio_gnss_driver rover_node.launch.py` `rover_node.yaml` add `file_name:=xxx.yaml` custom config. communication parameters, ROS messages published, frequency happen aforementioned config file `rover.yaml` parameters, specialized launch files GNSS `config/gnss.yaml` INS `config/ins.yaml` relevant parameters case. NOTE: `configure_rx` set `false`, driver overwrite previous values parameters, left \"yaml\" file. driver developed tested firmware versions GNSS INS. Receivers older firmware versions supported features limitations GNSS firmware support USB. GNSS firmware support OSNMA. GNSS firmware support PTP server clock. INS firmware support velocity aiding. INS firmware support setting initial heading. INS firmware support NTP. INS firmware support OSNMA. INS firmware support improved VSM handling allowing unknown variances. INS support PTP server clock issues: UDP USB: Blocks GNSS firmware INS firmware GNSS fixed version (released June INS fixed (released November `use_ros_axis_orientation` `true` axis orientations converted driver NED (Septentrio: yaw north, positive clockwise) ENU (ROS: yaw east, positive counterclockwise). conversion setting parameter `false` angles consistent web GUI case. configuration Settings Rover device: tcp://192.168.3.1:28784 serial: baudrate: hw_flow_control: stream_device: tcp: ip_server: port: udp: ip_server: port: unicast_ip: configure_rx: true custom_commands_file: login: user: password: osnma: mode: ntp_server: keep_open: true frame_id: gnss imu_frame_id: imu poi_frame_id: base_link vsm_frame_id: vsm aux1_frame_id: aux1 vehicle_frame_id: base_link insert_local_frame: false local_frame_id: odom File truncated lines full file](https://github.com/septentrio-gnss/septentrio_gnss_driver/tree/master/./README.md)"},
{"url": "https://index.ros.org/p/sick_safevisionary_base", "package": "sick_safevisionary_base", "package_summary": "The package provides the basic hardware interface to the SICK Safevisionary sensor", "package_details": "Sick Safevisionary Base driver library SICK safeVisionary cameras. implements core functionality sensor communication usage frameworks. Sensor configuration camera initial configuration started. Here\u2019s explanation ROS1/2 usage lean drivers cover supported ROS versions. You\u2019ll find sick_safevisionary_ros1 sick_safevisionary_ros2 Standalone build usage library non-ROS application. suitable directory, package git clone https://github.com/SICKAG/sick_safevisionary_base.git Navigate freshly cloned package call mkdir build cmake build library plain CMake. include library CMakeLists.txt application usual functionality: cmake_minimum_required(VERSION project(your_application) Find base library dependency find_package(sick_safevisionary_base REQUIRED) Link application library target_link_libraries(your_application sick_safevisionary_base::sick_safevisionary_base"},
{"url": "https://index.ros.org/p/sick_scan_xd", "package": "sick_scan_xd", "package_summary": "ROS 1 and 2 driver for SICK scanner", "package_details": "sick_scan_xd Driver tools SICK LiDAR RADAR devices project driver SICK LiDARs Radar sensors mentioned driver supports Linux (native, ROS ROS Windows (native ROS CHANGELOG.md latest updates. Main features characteristics: Support ROS (Linux), ROS (Linux Windows) Generic Python API usage ROS (Linux Windows) SLAM support Compatible ARM64 architecture (incl. Raspberry dependencies party libraries boost Table contents Expand full table contents [Repository organization](#repository-organization) [Supported SICK devices](#supported-sick-devices) started](#getting-started) [Starting SICK device](#starting-with-a-new-sick-device) [Detecting SICK devices network](#detecting-sick-devices-in-the-network) [Change address](#change-ip-address) [Test connection (Linux)](#test-connection-linux) [Building driver](#building-the-driver) [ROS Linux](#ros-1-on-linux) [ROS Install prebuilt binaries](#ros-1-install-prebuilt-binaries) [ROS Build sources](#ros-1-build-from-sources) [ROS Linux](#ros-2-on-linux) [ROS Install prebuilt binaries](#ros-2-install-prebuilt-binaries) [ROS Build sources](#ros-2-build-from-sources) [ROS Windows](#ros-2-on-windows) ROS Linux](#without-ros-on-linux) ROS Windows](#without-ros-on-windows) [Running driver](#running-the-driver) [Starting device specific address](#starting-device-with-specific-ip-address) [Start multiple devices nodes](#start-multiple-devices--nodes) [Parameters](#parameters) [ROS services](#ros-services) [ROS messages services](#ros-2-example-for-messages-and-services) [SOPAS mode](#sopas-mode) startup sequence](#example-startup-sequence) [Driver features additional information](#driver-features-and-additional-information) [Software overview structure](#software-overview-and-structure) [Message handling](#message-handling) [Driver states timeouts](#driver-states-and-timeouts) [sick\\_scansegment\\_xd](#sick_scansegment_xd) [Files folders](#files-and-folders) [Generic driver API](#generic-driver-api) [Build test shared library](#build-and-test-shared-library) [Build shared library Linux](#build-the-shared-library-on-linux) [Build shared library Windows](#build-the-shared-library-on-windows) [Test shared library](#test-the-shared-library) [Usage examples](#usage-examples) [Minimalistic usage C](#minimalistic-usage-example-in-c) [Minimalistic usage C++](#minimalistic-usage-example-in-c-1) [Minimalistic usage Python](#minimalistic-usage-example-in-python) [Complete usage C++](#complete-usage-example-in-c) [Complete usage Python](#complete-usage-example-in-python) [Diagnostic](#diagnostic) [Simulation unit test](#simulation-and-unit-test) [Timestamps synchronization (Software PLL)](#timestamps-and-synchronization-software-pll) [Coordinate transforms](#coordinate-transforms) [IMU support (LRS4000, MRS1000)](#imu-support-lrs4000-mrs6000-and-mrs1000) [Encoder support](#encoder-support) [Field evaluation information](#field-evaluation-information) [Visualization rviz](#visualization-with-rviz) [Cola commands](#cola-commands) [Emulation](#emulation) [Unit tests](#unit-tests) [Pcapng converter tool](#pcapng-converter-tool) [Raspberry support](#raspberry-pi-support) [Performance limitations](#performance-limitations) [Build internet GitHub access](#build-without-internet-or-github-access) [Docker support](#docker-support) [Build run Linux ROS (short cut)](#build-and-run-on-linux-ros-1-short-cut) [Build run local sources](#build-and-run-from-local-sources) [Build run git repository](#build-and-run-from-a-git-repository) [Build run prebuilt binaries](#build-and-run-from-prebuilt-binaries) [Hector SLAM support](#hector-slam-support) [NAV350 ROS SLAM example](#nav350-ros-1-slam-example) [NAV350 ROS SLAM example](#nav350-ros-2-slam-example) [picoScan100 ROS SLAM example](#picoscan100-ros-1-slam-example) SLAM support](#mrs1000-slam-support) [Google cartographer support](#google-cartographer-support) [OctoMap support](#octomap-support) [RTAB-Map support](#rtab-map-support) [Install RTAB-Map ROS 1](#install-rtab-map-on-ros-1) [Run RTAB-MAP multiScan100 ROS 1](#run-rtab-map-and-multiscan100-on-ros-1) [Install RTAB-Map ROS 2](#install-rtab-map-on-ros-2) [Run RTAB-MAP multiScan100 ROS 2](#run-rtab-map-and-multiscan100-on-ros-2) tools](#more-tools) [Device specific information](#device-specific-information) [picoScan100/multiScan100](#picoscan100multiscan100) [Configuration](#configuration) [SOPAS support sick\\_scan\\_segment\\_xd](#sopas-support-for-sick_scan_segment_xd) [Start stop sequence](#start-and-stop-sequence) [IMU support](#imu-support) File truncated lines full file](https://github.com/SICKAG/sick_scan_xd/tree/master/./README.md)"},
{"url": "https://index.ros.org/p/simple_grasping", "package": "simple_grasping", "package_summary": "Basic grasping applications and demos.", "package_details": "simple_grasping ROS2 components simple perception grasping. Basic Grasping Perception Node common package run basic_grasping_perception_node. node connects RGBD camera offers find_objects action server. node run visualization ros2 run simple_grasping basic_grasping_perception_node --ros-args debug_topics:=true Parameters addition parameters, node supports parameters debug_topics true, debug topics published. Default: false. continuous_detection true, continuously segment objects support surfaces. debug topics downstream. Default: false. frame_id frame RGBD point cloud transformed \u201cworld frame\u201d. Default: \u201cbase_link\u201d. Subscribed Topics /head_camera/depth_registered/points RGBD camera input. Published Topics object_cloud Colorized point cloud objects detected. published debug_topics set true. surface_cloud Colorized point cloud surfaces detected. published debug_topics set true. Actions find_objects primary action interface, type grasping_msgs::action::FindGraspableObjectsAction. Returns array grasping_msgs::msg::GraspableObjects array support surfaces grasping_msgs::msg::Object node, ubr1_demo ubr_reloaded package. Standalone Grasp Planner grasp planner run standalone grasp_planner_node. Parameters grasp planner works parallel jaw gripper. gripper/left_joint left gripper joint. Default: \u201cl_gripper_finger_joint\u201d. gripper/right_joint gripper joint. Default: \u201cr_gripper_finger_joint\u201d. gripper/max_opening maximum opening gripper, meters. Default: gripper/max_effort maximum effort gripper, Newtons. Default: gripper/finger_depth length gripper fingers, meters. grasp centered region. Default: gripper/grasp_duration maximum amount time wait gripper close, seconds. Default: gripper/gripper_tolerance gripper open larger object. Size meters. Default: gripper/approach/frame robot link approach portion grasp referenced Default: \u201cwrist_roll_link\u201d. gripper/approach/min minimum distance gripper approach, meters. Default: gripper/approach/max maximum distance gripper approach, meters. Default: gripper/retreat/frame robot link retreat portion grasp referenced Default: \u201cwrist_roll_link\u201d. gripper/retreat/min minimum distance gripper retreat, meters. Default: gripper/retreat/max maximum distance gripper retreat, meters. Default: gripper/tool_to_planning_frame distance planning frame tool frame, meters. planning frame wrist frame distance offsets \u201ctool\u201d location, center gripper fingers, wrist frame. Default: Actions plan primary action interface, type grasping_msgs::action::GraspPlanningAction. Returns array moveit_msgs::msg::Grasp object."},
{"url": "https://index.ros.org/p/slam_toolbox", "package": "slam_toolbox", "package_summary": "This package provides a sped up improved slam karto with updated SDK and visualization and modification toolsets", "package_details": "Slam Toolbox DockerHub Build Farm We\u2019ve received feedback users robots operating environments SLAM Toolbox: Retail Warehouses Libraries Research supported ROS2-SLAM library. tutorials working ROS2 Navigation Cite Work find work clicking image Macenski, Jambrecic \u201cSLAM Toolbox: SLAM dynamic world\u201d, Journal Open Source Software, Macenski, SLAM Toolbox, fresh(er) mapping localization dynamic world\u201d, ROSCon Introduction Slam Toolbox set tools capabilities SLAM built Steve Macenski Simbe Robotics, maintained Samsung Research, largely free time. project ability SLAM library, free paid, includes: Ordinary point-and-shoot SLAM mobile robotics folks expect (start, map, save pgm file) nice built utilities saving maps Continuing refine, remap, continue mapping saved (serialized) pose-graph time life-long mapping: load saved pose-graph continue mapping space removing extraneous information newly added scans optimization-based localization mode built pose-graph. Optionally run localization mode prior map \u201clidar odometry\u201d mode local loop closures synchronous asynchronous modes mapping kinematic map merging elastic graph manipulation merging technique works) plugin-based optimization solvers optimized Google Ceres based plugin RVIZ plugin interacting tools graph manipulation tools RVIZ manipulate nodes connections mapping Map serialization lossless data storage highlights running live production robots, recommend snap: slam-toolbox, optimizations faster. deb/source install developer level tools don\u2019t robot (rviz plugins, package benchmarked mapping building real-time real-time largest area aware building synchronous mode processing scans, lag), larger spaces asynchronous mode. video collected Circuit Launch Oakland, California. Silicon Valley Robotics Circuit Launch testbed work. Support Contribution questions configuration, post questions ROS Answers community work hardest Tangible issues codebase feature requests GitHub issues. you\u2019re interested contributing project substantial file public GitHub issue feature patch. reason development feature sensitive, email maintainers email addresses listed package.xml file. contributions, properly fill GitHub issue templates context. PRs passing maintaining ABI compatibility released ROS distributions. maintainer follow shortly Note Serialized Files contents serialized files changed. users date, regard section impact previously existing serialized files pgm maps, .posegraph serialized slam sessions), date, action maintain current features. ABI breaking change required order fix large bug affecting non-axially-mounted LIDAR system. Discourse post highlights issues. frame storing scan data optimizer incorrect leading explosions flipping maps non-axially-aligned robots conservative loss functions. change permanently fixes issue, frame reference data stored serialized system lidar mounted frame aligned robot base frame, you\u2019re notice problem disregard statement. noticing issues, options: <distro>-devel-unfixed branch <distro>-devel, unfixed version distribution\u2019s release maintained parallel main branches option continue working solution Convert serialized files reference frame offline utility raw data rerun SLAM sessions serialized file content conversation tickets apologize inconvenience, solves large bug impacting large number users. I\u2019ve worked hard viable path LifeLong Mapping LifeLong mapping concept able map space, completely partially, time, refine update map continue interact space. approach implements takes care application operating cloud, mapping robots shared space (cloud distributed mapping). Slam Toolbox point-and-shoot mapping space saving map .pgm file maps traditionally stored save pose-graph metadata losslessly reload robot continue map space. lifelong mapping consists key steps Serialization Deserialization store reload map information KD-Tree search matching locate robot position reinitialization pose-graph optimization based SLAM scan matching abstraction user create update existing maps, serialize data mapping sessions, sorely lacking SLAM implementations planar SLAM implementations. good libraries include RTab-Map Cartoprapher, quirks opinion) unusable production robotics applications. library mechanics save data, pose graph, metadata work create maps merging techniques serialized objects creating globally consistent continuous mapping techniques (updating serialized map object time refining major benefit RTab-Map Cartoprapher maturity underlying heavily modified) open_karto library project based scan matcher Karto extremely good matcher laser scans modified versions Karto companies world. Slam Toolbox supports major modes: Starting predefined dock (assuming start region) Starting node select node start Starting area current pose map frame start AMCL RVIZ interface section you\u2019ll able re-localize map continue mapping graphically programmatically ROS services. time writing: highly experimental implementation call \u201ctrue lifelong\u201d mapping support method removing nodes time adding nodes, results true ability map life computation bounded removing extraneous outdated information. recommended run non-full LifeLong mapping mode cloud increased computational burdens you\u2019d continuously refining map. real desperately needed application multi-session mapping update section map map area time create full static) map AMCL Slam Toolbox localization mode, handle spades. plan create mode LifeLong mapping decay nodes bound computation run edge refining experimental node. Continuing mapping (lifelong) build complete map switch pose-graph deformation localization mode node decay implemented, substantial performance impacts. Localization Localization mode consists Loads existing serialized map node Maintains rolling buffer scans pose-graph File truncated lines full file"},
{"url": "https://index.ros.org/p/slider_publisher", "package": "slider_publisher", "package_summary": "This packages proposes a slider-based publisher node similar to the joint_state_publisher, but that can publish any type of message or call services.", "package_details": "slider_publisher packages proposes slider-based publisher node similar joint_state_publisher, publish message service. examples ros2 launch slider_publisher example.launch file:=BasicTypes.yaml basic types ros2 launch slider_publisher example.launch file:=Twist.yaml timestamped Twist (cmd_vel) ros2 launch slider_publisher example.launch file:=tf.yaml message ros2 launch slider_publisher example.launch file:=VelPose.yaml topics (Twist Pose) ros2 launch slider_publisher example.launch file:=MultiArray.yaml topic floats ros2 launch slider_publisher add_two_ints.launch service call demo_nodes_cpp server) Array-based messages (nested arrays packages reduces single node called argument leading YAML file structure (examples VelPose.yaml file): topic_to_be_published: type: full message service type (geometry_msgs/Twist geometry_msgs/msg/Twist) key_as_in_gui: message field) corresponding_message_field (linear.x key unique field) min: slider minimum max: slider maximum default: slider default (min+max)/2) other_key: other_topic_to_be_published: type... Hard-coded numeric values (bounds constant values messages) defined fractions rotations quaternions) parameterized roll pitch yaw RPY.yaml). fields part Quaternion message, rotation built published. type service interface slider call service, waiting server. Input controls Input rely checkbox (Bool type) text input. Numeric types: min/max values slider types: default list, combobox input, element list defalut tf.yaml Parameters config (string): parameter effect raw file argument, path YAML configuration file rate (double): publication rate"},
{"url": "https://index.ros.org/p/snowbot_operating_system", "package": "snowbot_operating_system", "package_summary": "The weather outside is frightful", "package_details": "Snowbot Operating System useless RViz plugin. Snowflake icon Danielle Garbouchian Noun Project"},
{"url": "https://index.ros.org/p/srdfdom", "package": "srdfdom", "package_summary": "Parser for Semantic Robot Description Format (SRDF).", "package_details": "srdfdom Parser Semantic Robot Description Format (SRDF). Includes Python parser, writer. GitHub Actions Continuous Integration Authors Original reflection implementation SDF URDF. Thomas Moulard urdfpy implementation, integration David urdf_python implementation, integration Kelsey Hawkins urdf_parser_python implementation, integration Antonio Khoury bugfixes Eric Cousineau reflection (serialization?) Reused srdf python parser Guillaume Walck srdfpy conversion, integration Dave Coleman srdf_writer.cpp implementation test/test_parser.cpp examples access SRDF elements parser. Python test/test.py examples access SRDF elements Python parser. scripts/display_srdf reads SRDF file command line argument displays YAML format. output option <filename>) dumps XML (re-generated parsed input XML) file. ros2 run srdfdom display_srdf test/resources/pr2_desc.3.srdf Test colcon test --packages-select srdfdom"},
{"url": "https://index.ros.org/p/swri_console", "package": "swri_console", "package_summary": "A rosout GUI viewer developed at Southwest Research Institute as an\n     alternative to rqt_console.", "package_details": "swri_console swri_console alternative rqt_console viewing ROS console output. swri_console written scale large systems heavy console output. stays responsive fire users quickly find information track problems. Features High performance; swri_console handles receiving thousands logs storing millions memory staying responsive Ctrl shift-click quickly select nodes monitor Hide show log messages based substring matches, power, regular expressions Hide, show, colorize log messages based severity Save load log messages text files Save load log messages /rosout topic bag file Right-click nodes dynamically set logger levels supported ROS Build Status Humble Jazzy"},
{"url": "https://index.ros.org/p/system_fingerprint", "package": "system_fingerprint", "package_summary": "The system_fingerprint package", "package_details": "system_fingerprint simple tool information system share Let\u2019s you\u2019re helping debug system. bunch questions, send output commands, sounds tedious. install package (sudo apt-get install ros-$ROS_DISTRO-system-fingerprint) run single command: ros2 run system_fingerprint imprint generate file fingerprint.yaml send debugging. sort information file? System Information (system) Information tidbits machine command run Environmental Variables (environmental_variables) environmental variables prefixes ROS_, AMENT_, COLCON_ RCUTILS_ ROS_DISTRO, ROS_VERSION, Parameters (parameters) full dump ROS parameters. Nodes (nodes) full rosgraph, node publications, subscriptions services. Topics (topics) type topic Services (services) type service Actions (actions) type action Tree (tf_tree) frames time imprint, geometry, frequency static. ROS Workspace (workspace) build tool you\u2019re workspace location, repos checked version example_fingerprint.yaml"},
{"url": "https://index.ros.org/p/joy_teleop", "package": "joy_teleop", "package_summary": "A (to be) generic joystick interface to control a robot", "package_details": "joy_teleop configurable node map joystick controls robot teleoperation commands"},
{"url": "https://index.ros.org/p/key_teleop", "package": "key_teleop", "package_summary": "A text-based interface to send a robot movement commands.", "package_details": "key_teleop text-based interface send ROS-powered robot movement commands"},
{"url": "https://index.ros.org/p/mouse_teleop", "package": "mouse_teleop", "package_summary": "A mouse teleop tool for holonomic mobile robots.", "package_details": "mouse_teleop pointing device mouse, touchpad) teleop tool mobile robots, supporting holonomic differential drive platforms."},
{"url": "https://index.ros.org/p/tsid", "package": "tsid", "package_summary": "Efficient Task Space Inverse Dynamics (TSID) based on Pinocchio", "package_details": "TSID Task Space Inverse Dynamics TSID library optimization-based inverse-dynamics control based rigid multi-body dynamics library Pinocchio. Documentation project wiki overview design library. exercises folder find examples TSID Python robot manipulators, humanoids, quadrupeds. website Andrea Del Prete find slides video lessons TSID. Memmo summer school Installation Conda dive TSID Python, single line sufficient (assuming Conda installed): conda install tsid conda-forge Installation Debian/Ubuntu packages, robotpkg added robotpkg\u2019s software repository commands: sudo tee /etc/apt/sources.list.d/robotpkg.list <<EOF deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release robotpkg EOF curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key sudo apt-key add sudo apt update install TSID python bindings (replace Python version) sudo apt install robotpkg-py3*-tsid Installation sources install dependencies: boost (unit_test_framework) eigen3 pinocchio eiquadprog example-robot-data running examples) install eigen3 Ubuntu apt-get: sudo apt-get install libeigen3-dev install pinocchio follow instruction website. compile TSID: $DEVEL/openrobots/src/ git clone --recursive git@github.com:stack-of-tasks/tsid.git tsid mkdir _build-RELEASE _build-RELEASE cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$DEVEL/openrobots install Python Bindings library python, offer python bindings based Boost.Python EigenPy. install EigenPy compile source code: git clone https://github.com/stack-of-tasks/eigenpy Ubuntu, apt-get: sudo apt-get install robotpkg-py3*-eigenpy testing python bindings, run unit test scripts script folder, instance: ipython script/test_formulation.py run demo gepetto-viewer: ipython demo/demo_romeo.py Credits package authored Andrea Del Prete (University Trento) Justin Carpentier (INRIA) includes key contributions Julian Viereck (Max Planck Institute, York University) Sanghyun Kim (Seoul National University) Eloise Dalin (LORIA, INRIA Lorraine) Noelie Ramuzat (LAAS, CNRS) Pierre Fernbach (LAAS, CNRS) Aurelie Bonnefoy (LAAS, CNRS) File truncated lines full file"},
{"url": "https://index.ros.org/p/turtlebot3_msgs", "package": "turtlebot3_msgs", "package_summary": "Message and service types: custom messages and services for TurtleBot3 packages for ROS 2", "package_details": "TurtleBot3 Active Branches: noetic, humble, jazzy, main Legacy Branches: *-devel Open Source Projects Related TurtleBot3 turtlebot3 turtlebot3_msgs turtlebot3_simulations turtlebot3_manipulation turtlebot3_manipulation_simulations turtlebot3_applications turtlebot3_applications_msgs turtlebot3_machine_learning turtlebot3_autorace turtlebot3_home_service_challenge hls_lfcd_lds_driver ld08_driver open_manipulator dynamixel_sdk OpenCR-Hardware OpenCR Documentation, Videos, Community Official Documentation ROBOTIS DYNAMIXEL ROBOTIS e-Manual Dynamixel SDK ROBOTIS e-Manual TurtleBot3 ROBOTIS e-Manual OpenMANIPULATOR-X Learning Resources ROBOTIS YouTube Channel ROBOTIS Open Source YouTube Channel ROBOTIS TurtleBot3 YouTube Playlist ROBOTIS OpenMANIPULATOR YouTube Playlist Community Support ROBOTIS Community Forum TurtleBot category ROS Community"},
{"url": "https://index.ros.org/p/tuw_geometry", "package": "tuw_geometry", "package_summary": "The tuw_geometry package", "package_details": "tuw_geometry Classes handle visualize objects points, poses, lines plot windows debugging. geo_handler geo_handler.hpp link GeographicLib. Ubuntu installing libgeographic-dev sudo apt install libgeographic-dev, adding statement CMakeLists.txt <depend>geographiclib</depend> package.xml. set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"/usr/share/cmake/geographiclib/\") find_package(GeographicLib QUIET) if(GeographicLib_FOUND) message(STATUS \"GeographicLib building geo_map!\") message(ERROR \"GeographicLib building geo_map!\") endif() doxygen tuw_geometry doxygen Doxyfile Build GeographicLib geo_map.cpp depends GeographicLib. install GeographicLib remove geographiclib entries package.xml lines pointing geo_map.cpp GeographicLib CMakeFile.txt. Test Unittests run colcon build --packages-select tuw_geometry --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Debug --cmake-args -DBUILD_TESTING=true run tuw_geometry test_geometry"},
{"url": "https://index.ros.org/p/twist_mux", "package": "twist_mux", "package_summary": "Twist multiplexer, which multiplex several velocity commands (topics) and\n      allows to priorize or disable them (locks).", "package_details": "twist_mux Twist multiplexer support geometry_msgs/Twist topics std_msgs/Bool locks priorities. documentation."},
{"url": "https://index.ros.org/p/twist_mux_msgs", "package": "twist_mux_msgs", "package_summary": "The twist_mux msgs and actions package", "package_details": "twist_mux_msgs Twist multiplexer twist_mux messages. documentation."},
{"url": "https://index.ros.org/p/udp_msgs", "package": "udp_msgs", "package_summary": "ROS / ROS2 udp_msgs package", "package_details": "udp_msgs simple interface library quick easy udp integration ROS ROS2 ecosystem."},
{"url": "https://index.ros.org/p/ur_client_library", "package": "ur_client_library", "package_summary": "Standalone C++ library for accessing Universal Robots interfaces. This has been forked off the ur_robot_driver.", "package_details": "Universal Robots Client Library library accessing Universal Robots interfaces. library C++-based drivers implemented order create external applications leveraging versatility Universal Robots robotic manipulators. library external dependencies standard libraries ROS, boost easy integrate maintain. serves foundation ROS ROS drivers. Requirements Polyscope software running robot controller) version CB3-Series), e-Series) higher. older Polyscope version suggested update robot. reason issues upgrade robot, version compatibility table compatible tag. library requires implementation POSIX threads pthread library Socket communication based Linux sockets. library require Linux building master branch repository requires C++17-compatible compiler. building library C++17-requirement, boost branch requires boost library. Build instructions Build installation License majority library licensed Apache-2.0 licensed. parts licensed licenses: queue communication structures originally written Cameron Desrochers released BSD-2-Clause license. semaphore implementation queue implementation written Jeff Preshing licensed zlib license main LICENSE file repository Apache-2.0 license majority work, respective libraries third-party components reside code imported parties. Library contents library components: Basic primary interface: primary interface isn\u2019t fully implemented current state basic functionality. word primary secondary interface information primary interface. RTDE interface: RTDE interface fully supported library. RTDEClient information library RTDE client. Dashboard interface: Dashboard server accessed helper functions library. Custom motion streaming: library initially developed part Universal Robots ROS driver. mechanism data streaming custom socket, perform motion command streaming. driver examples subfolder find minimal running driver. starts instance UrDriver class prints RTDE values read controller. run instance robot controller URSim running configured address adapt address run package\u2019s main folder README.md file stored), simplicity reasons doesn\u2019t sophisticated method locate required files. Architecture Architecture documentation word primary secondary interface library doesn\u2019t support primary interface Universal Robots ROS driver built RTDE interface. PrimaryClient accessing primary interface doesn\u2019t support features primary interface. comm::URStream class open connection primary secondary interface send data producer/consumer pipeline structure primary secondary interface. package parsing isn\u2019t implemented packages primary_pipeline details set Note running packages printed raw byte streams hex notation, File truncated lines full file"},
{"url": "https://index.ros.org/p/ur_msgs", "package": "ur_msgs", "package_summary": "Message and service definitions for interacting with Universal Robots robot controllers.", "package_details": "ur_msgs Message service definitions packages supporting interacting Universal Robots\u2019 robot controllers. ROS index information: index.ros.org/p/ur_msgs."},
{"url": "https://index.ros.org/p/urdf_sim_tutorial", "package": "urdf_sim_tutorial", "package_summary": "The urdf_sim_tutorial package", "package_details": "urdf_sim_tutorial tutorials http://wiki.ros.org/urdf_tutorial download URDF simulation tutorial github package manager sudo apt install ros-$ROS_DISTRO-urdf-sim-tutorial Nonfunctional Gazebo Interface spawn model created Gazebo gazebo.launch.py ros2 launch urdf_sim_tutorial gazebo.launch.py launch file Loads urdf macro tutorial publishes topic (/robot_description) Launches empty Gazebo world Runs script read urdf topic spawn Gazebo. default, Gazebo GUI displayed, doesn\u2019t missing lots key information ROS robot. Previously joint_state_publisher pose joint. robot provide information real world Gazebo. Gazebo doesn\u2019t publish information. robot interactive ROS), Plugins Transmissions. Side note: Configuring Meshes home robot, amiss, meshes missing model Gazebo GUI gripper meshes Gazebo seconds start splash screen appears checking internet missing models. URDF package explicitly Gazebo load meshes modifying package.xml package URDF meshes live include export. <export> <build_type>ament_cmake</build_type> <gazebo_ros gazebo_model_path=\"${prefix}/..\"/> </export> reasoning exact gazebo_model_path attribute separate issue, suffice setting work assuming mesh filenames URDF package://package_name/possible_folder/filename.ext syntax. meshes installed CMake) proper share folder. Gazebo Plugin ROS interact Gazebo, dynamically link ROS library Gazebo Theoretically, Robot Operating Systems interact Gazebo generic practice, ROS. Specifically, Gazebo ROS interaction linking ROS Control library, URDF tags. URDF, closing </robot> tag: <ros2_control name=\"GazeboSystem\" type=\"system\"> <hardware> <plugin>gazebo_ros2_control/GazeboSystem</plugin> </hardware> <joint name=\"head_swivel\" </ros2_control> <gazebo> <plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"> <parameters>$(find urdf_sim_tutorial)/config/09a-minimal.yaml</parameters> </plugin> </gazebo> Notes: <gazebo> <plugin> tags work ROS joint minimal work, add minimal configuration file controller_manager: ros__parameters: update_rate: 09a-minimal.urdf.xacro running ros2 launch urdf_sim_tutorial 09a-minimal.launch.py starts /controller_manager node load_controller service, doesn\u2019t add immediately interaction robot. information controller yaml. Spawning Controllers we\u2019ve linked ROS Gazebo, bits ROS code run Gazebo, generically call controllers. larger based yaml file specifies controller. controller_manager: ros__parameters: update_rate: use_sim_time: true joint_state_broadcaster: type: joint_state_broadcaster/JointStateBroadcaster controller joint_state_broadcaster package publishes state robot\u2019s joints ROS Gazebo. 09-joints.launch.py add ros2_control command ExecuteProcess start specific controller. File truncated lines full file"},
{"url": "https://index.ros.org/p/urdf_tutorial", "package": "urdf_tutorial", "package_summary": "This package contains a number of URDF tutorials.", "package_details": "urdf_tutorial: Learning URDF Step Step Building Visual Robot Model URDF Scratch Learn build visual model robot view Rviz Building Movable Robot Model URDF Learn define movable joints URDF Adding Physical Collision Properties URDF Model Learn add collision inertial properties links, add joint dynamics joints. Xacro Clean URDF File Learn tricks reduce amount code URDF file Xacro urdf_sim_tutorial final tutorial: URDF Gazebo Preliminary tutorial spawn control robot Gazebo."},
{"url": "https://index.ros.org/p/urdfdom_py", "package": "urdfdom_py", "package_summary": "Python implementation of the URDF parser.", "package_details": "urdf_parser_py Development Setup manually run setup.py. catkin development, install $ws/../build/lib/pythonX.Y/dist-packages devel_prefix=$(cd $(catkin_find --first-only)/.. pwd) ../urdf_parser_py python setup.py install --install-layout deb --prefix $devel_prefix Authors Thomas Moulard urdfpy implementation, integration David urdf_python implementation, integration Kelsey Hawkins urdf_parser_python implementation, integration Antonio Khoury bugfixes Eric Cousineau reflection update Reflection attempt generalize structure URDF reflection easier extend. concept Gazebo\u2019s SDF structure, SDF mind SDF parser simple converter URDF SDF. Features: Transmission basic Gazebo nodes. General aggregate types, preserving order Dumping YAML, printing string (dictionaries preserve attribute ordering) XML Parsing: minidom swapped lxml.etree, hard change Sax event-driven parsing. API: Loading methods rely primarily instance methods static methods, mirroring Gazebo\u2019s SDF construct-then-load method Renamed static parse_xml() from_xml(), renamed load_* methods static Todo Support additional formats (SDF, drakeURDF, Parse Gazebo\u2019s SDF definition files point? speed\u2019s sake, parse generate code auto-generating modules schemas urdf.xsd. extend SDF, drakeURDF. direct, two-way URDF SDF converter. Gazebo ability load URDFs save SDFs, lumps cleaner implementation reflection. names clearer, fact from_xml to_xml write node, create Abstraction layer clear. explicitly abstract classes, clarify dispatch order (xmlr.Element, xmlr.Param, xmlr.Object, Figure good policy handling default methods. saving XML, write default values, leave brevity leave open change)? add option. Find lightweight package handle reflection aspect elegantly. Enthought traits? IPython\u2019s spinoff traits?"},
{"url": "https://index.ros.org/p/urg_c", "package": "urg_c", "package_summary": "The urg_c package", "package_details": "Packaging URG Helper URG Widget URG Library urg_c Original Source http://sourceforge.net/projects/urgwidget project introduces sample programs URG library. Applications URG URG library introduced URG Scanning Laser Range Finder Hokuyo Automatic robots, autonomous systems security systems."},
{"url": "https://index.ros.org/p/urg_node", "package": "urg_node", "package_summary": "urg_node", "package_details": "urg_node Branches ROS1: Melodic Noetic: melodic-devel Kinetic: kinetic-devel ROS2: Galactic, Humble, Rolling: ros2-devel LaserScan Visualization launch API sorted ways view laserscan RViz: static_transform_publisher tool tf2_ros publish static transform fixed frame simultaneously rviz urg_node. ros2 run tf2_ros static_transform_publisher --frame-id world --child-frame-id laser \u201claser\u201d frame set urg_node yaml file Run robot_state_publisher urdf file fixed frame loaded rviz ros2 run robot_state_publisher robot_state_publisher <path urdf file> urdf file included succesfully ran colcon build, path urdf file <path ros2_ws>/install/share/urg_node/launch/hokuyo_laser.urdf run RViz: ros2 run rviz2 rviz2 simply rviz2 Add LaserScan topic change global fixed frame \u2018map\u2019 \u2018world\u2019 display laser scan. Parameters YAML file included launch folder, parameters listed (note serial_port commented set param empty string): urg_node: ros__parameters: ip_address: ip_port: #serial_port: serial_baud: laser_frame_id: laser angle_max: angle_min: publish_intensity: false publish_multiecho: false calibrate_time: false default_user_latency: diagnostics_tolerance: diagnostics_window_time: error_limit: get_detailed_status: false cluster: skip: give parameters urg_node ros2 run urg_node urg_node_driver --ros-args --params-file path/to/my/file.yaml reconfigure parameters node launched. reconfigure parameters: laser_frame_id error_limit default_user_latency angle_max angle_min cluster skip reconfigure cluster parameter command line ros2 param set /urg_node cluster ust-20lx Ethernet-based laser) ust-20lx subnet laser. ust-20lx default address change subnet. File truncated lines full file"},
{"url": "https://index.ros.org/p/usb_cam", "package": "usb_cam", "package_summary": "A ROS Driver for V4L USB Cameras", "package_details": "usb_cam ROS Driver USB Cameras package based devices specifically UVC. ros1 documentation, ROS wiki. Supported ROS Distros Platforms Officially supported Linux Distros ROS releases supported. create issue experience problems platforms. Windows: TBD/Untested/Unproven MacOS: TBD/Untested/Unproven MacOS Windows working create issue document effort. works add instructions Quickstart Assuming supported ROS distro installed, run command install binary release: sudo apt-get install ros-<ros2-distro>-usb-cam today package binary installation active ROS distros. reason install binaries, follow directions compile source. Building Source Clone/Download source code workspace: /path/to/colcon_ws/src git clone https://github.com/ros-drivers/usb_cam.git click green \u201cDownload zip\u201d button repo\u2019s github webpage. downloaded ensuring sourced ROS underlay, install dependencies: /path/to/colcon_ws rosdep install --from-paths src --ignore-src dependencies installed compile usb_cam package: /path/to/colcon_ws colcon build source /path/to/colcon_ws/install/setup.bash source newly built packages successful build. sourced, able run package ways, shown section. Running usb_cam_node ran default settings, setting specific parameters command line loading parameters file. provide \u201cdefault\u201d params file usb_cam/config/params.yaml directory started. Feel free modify file launch file launch usb_cam_node_exe executable additional node displays image topic. commands run ways starting node shown NOTE: run commands run node run executable default settings params file) ros2 run usb_cam usb_cam_node_exe run executable passing parameters yaml file ros2 run usb_cam usb_cam_node_exe --ros-args --params-file /path/to/colcon_ws/src/usb_cam/config/params.yaml launch usb_cam executable loads parameters `usb_cam/config/params.yaml` file additional image viewer node ros2 launch usb_cam camera.launch.py Launching Multiple usb_cam\u2019s launch multiple nodes simply remap namespace ros2 run usb_cam usb_cam_node_exe --ros-args --remap __ns:=/usb_cam_0 --params-file /path/to/usb_cam/config/params_0.yaml ros2 run usb_cam usb_cam_node_exe --ros-args --remap __ns:=/usb_cam_1 --params-file /path/to/usb_cam/config/params_1.yaml Supported formats Device supported formats connected devices supported formats, run usb_cam_node observe console output. output ```log devices supproted formats: File truncated lines full file"},
{"url": "https://index.ros.org/p/velodyne_driver", "package": "velodyne_driver", "package_summary": "ROS device driver for Velodyne 3D LIDARs.", "package_details": "Velodyne ROS driver ROS driver Velodyne devices. supports VLP-16. driver responsible data Velodyne combining message revolution. turn raw data pointcloud laserscan, velodyne_pointcloud velodyne_laserscan packages. Published Topics /velodyne_packets (velodyne_msgs/VelodyneScan) raw data full revolution sensor. Parameters device_ip (string) address Velodyne factory, gps_time (bool) data capture time GPS, local time. set True GPS attached Velodyne. False default. time_offset (double) arbitrary \u201cskew\u201d, seconds, add acquisition timestamp. Defaults enabled (bool) device start-up enabled Defaults True. read_once (bool) playback data (True) continuously (False). PCAP playback mode. Defaults False. read_fast (bool) output data fast (True), sleep delay packets (False). PCAP playback mode. Defaults False. repeat_delay (double) time wait repeats continuous playback mode. PCAP playback mode. Defaults frame_id (string) frame_id constructing header packet published. Defaults \u201cvelodyne\u201d. model (string) model number Velodyne attached. VLP16. Defaults rpm (double) RPM Velodyne configured Note descriptive, prescriptive, set match configured Velodyne web interface. pcap (string) PCAP playback file playback data PCAP playback mode. Defaults empty string. cut_angle (double) azimuth angle declare single rotation complete. fixed number packets (device-dependent) rotation. works, vary variations hardware. positive number rotation declared \u201ccomplete\u201d azimuth reported device reaches Defaults port (int) port receive data Velodyne. factory, Velodyne configured publish data Defaults"},
{"url": "https://index.ros.org/p/velodyne_laserscan", "package": "velodyne_laserscan", "package_summary": "Extract a single ring of a Velodyne PointCloud2 and publish it as a LaserScan message", "package_details": "Velodyne ROS pointcloud laserscan converter ROS package takes pointcloud data output velodyne_pointcloud nodes converts single laserscan. Published Topics scan (sensor_msgs/LaserScan) laserscan results line pointcloud. Subscribed Topics velodyne_points (sensor_msgs/PointCloud2) pointcloud results raw velodyne data. Parameters ring (int) \u201cring\u201d Velodyne single line. default ring device Defaults resolution (double) resolution meters point Defaults"},
{"url": "https://index.ros.org/p/velodyne_pointcloud", "package": "velodyne_pointcloud", "package_summary": "Point cloud conversions for Velodyne 3D LIDARs.", "package_details": "Velodyne ROS raw pointcloud converters ROS package takes raw velodyne data output velodyne_driver node, converts sensor_msgs/PointCloud2 message. nodes velodyne_convert_node node takes raw data converts pointcloud immediately. velodyne_transform_node node takes raw data converts message compatible timestamp arrived. topics parameters nodes identical, they\u2019ll Published Topics velodyne_points (sensor_msgs/PointCloud2) pointcloud results raw velodyne data. Subscribed Topics velodyne_packets (velodyne_msgs/VelodyneScan) raw velodyne packets coming velodyne_driver. Parameters calibration (string) path calibration file device. set default calibration files start \u201cparams\u201d subdirectory package. Defaults empty string. min_range (double) minimum range meters point added resulting point cloud. Points closer discarded. Defaults max_range (double) maximum range meters point added resulting point cloud. Points discarded. Defaults view_direction (double) point circumference device, radians, \u201ccenter\u201d view. Combined view_width, node generate pointcloud width, centered point. vastly reduce CPU requirements node. straight device. Defaults view_width (double) width, radians, view generate resulting pointcloud. Combined view_direction, node generate pointcloud width, centered view_direction point. vastly reduce CPU requirements node. Defaults organize_cloud (bool) organize cloud ring (True), order driver (False). Defaults True. target_frame (string) coordinate frame apply generated point cloud header publishing. empty string default), frame passed driver packet. frame fixed_frame, transformation coordinate frame performed creating pointcloud. fixed_frame (string) fixed coordinate frame transform data"},
{"url": "https://index.ros.org/p/cv_bridge", "package": "cv_bridge", "package_summary": "This contains CvBridge, which converts between ROS2\n    Image messages and OpenCV images.", "package_details": "cv_bridge Introduction cv_bridge converts ROS image messages OpenCV image representation perception applications. ros2 branch initially derives porting basis ros kinetic branch Installation Firstly, assumes ROS core installed, refer ROS installation started. Install dependencies OpenCV3+ install, refer official installation guide OpenCV Tutorials ROS Python python3-numpy installed, install sudo apt install python3-numpy cv_bridge python backend dependency python boost (equal higher install Ubuntu: sudo apt install libboost-python-dev Build Test Fetch latest code build <YOUR_ROS2_WORKSPACE>/src git clone https://github.com/ros-perception/vision_opencv.git ros2 colcon build --symlink-install Run tests Python tests dependency OpenCV Python support. install sudo apt install python3-opencv prepare runtime environment run tests: source <YOUR_ROS2_WORKSPACE>/install/local_setup.bash colcon test issues boost endian: remove boost endian APIs standard higher tested Windows macOS environments issues building running"},
{"url": "https://index.ros.org/p/warehouse_ros", "package": "warehouse_ros", "package_summary": "Persistent storage of ROS messages", "package_details": "Abstract interface persisting ROS message data. Implementations loaded pluginlib. implementation, MongoDB, warehouse_ros_mongo. http://www.ros.org/wiki/warehousewg Branch Status ros2 kinetic-devel"},
{"url": "https://index.ros.org/p/warehouse_ros_mongo", "package": "warehouse_ros_mongo", "package_summary": "Implementation of warehouse_ros for MongoDB", "package_details": "Warehouse ROS Mongo Interface Code persisting ROS message data MongoDB. Python libraries serialize ROS data MongoDB, handy scripts record data command line. Based code split warehouse_ros. GitHub Actions Continuous Integration Building source ROS Jade Kinetic order build source you\u2019ll install mongo drivers driver: git clone 26compat https://github.com/mongodb/mongo-cxx-driver.git compile scons: sudo apt-get install scons mongo-cxx-driver sudo scons --prefix=/usr/local/ --full --use-system-boost --disable-warnings-as-errors able compile packages catkin."},
{"url": "https://index.ros.org/p/warehouse_ros_sqlite", "package": "warehouse_ros_sqlite", "package_summary": "Implementation of warehouse_ros for sqlite", "package_details": "SQLite backend warehouse_ros storage backend warehouse_ros SQLite. sqlite file ROS parameter warehouse_host. warehouse_port Note sums messages changed ROS1 ROS2, ROS1 sqlite database won\u2019t work ROS2. Installation installed ROS2 activated source /opt/ros/foxy/setup.bash). Create folder workspace. Create file named warehouse.repos content: repositories: warehouse_ros_sqlite: type: git url: https://github.com/ros-planning/warehouse_ros_sqlite version: ros2 open terminal navigate folder. Initialize workspace fetch source files vcs rosdep: vcs import src warehouse.repos rosdep update rosdep install --from-paths src --ignore-src Build workspace colcon: colcon build activate workspace: source install/local_setup.bash plugin installed, refer warehouse_ros documentation usage interface test files test/. Adapt .launch files plugin MoveIt stack, adapt .launch files. plugin loaded warehouse_ros_mongo. you\u2019re RViz, you\u2019ll enter path database file Host field click connect. run_move_group.launch.py demo launch file bit attention, ```diff install/run_move_group/share/run_move_group/launch/run_move_group.launch.py install/run_move_group/share/run_move_group/launch/run_move_group_sqlite.launch.py \u201cpublish_transforms_updates\u201d: True, warehouse_ros_config \u201cwarehouse_plugin\u201d: \u201cwarehouse_ros_sqlite::DatabaseConnection\u201d, \u201cwarehouse_host\u201d: \u201c/path/to/my/warehouse_db.sqlite\u201d, Start actual move_group node/action server run_move_group_node Node( package=\u201dmoveit_ros_move_group\u201d, trajectory_execution, moveit_controllers, planning_scene_monitor_parameters, warehouse_ros_config, robot_description_semantic, ompl_planning_pipeline_config, kinematics_yaml, warehouse_ros_config, Warehouse mongodb server mongodb_server_node Node( package=\u201dwarehouse_ros_mongo\u201d, executable=\u201dmongo_wrapper_ros.py\u201d, parameters=[ {\u201cwarehouse_port\u201d: {\u201cwarehouse_host\u201d: \u201clocalhost\u201d}, {\u201cwarehouse_plugin\u201d: \u201cwarehouse_ros_mongo::MongoDatabaseConnection\u201d}, output=\u201dscreen\u201d, File truncated lines full file"},
{"url": "https://index.ros.org/p/web_video_server", "package": "web_video_server", "package_summary": "HTTP Streaming of ROS Image Topics in Multiple Formats", "package_details": "web_video_server HTTP Streaming ROS Image Topics Multiple Formats node HTTP streaming ROS image topics formats, making easy view robot camera feeds image topics web browser requiring special plugins extensions. Features Stream ROS image topics HTTP multiple formats: MJPEG (Motion JPEG) (WebM) (WebM) PNG streams ROS compressed image topics Adjustable quality, size, streaming parameters Web interface browse image topics Single image snapshot capability Support QoS profiles ROS Installation Dependencies ROS (Noetic) ROS (Humble+) OpenCV FFmpeg/libav Boost async_web_server_cpp Installing packages newer ROS2 distributions (humble, jazzy, rolling) install web_video_server package: sudo apt install ros-${ROS_DISTRO}-web-video-server Building Source Create ROS workspace don\u2019t mkdir ~/ros_ws/src ~/ros_ws/src Clone repository: ROS git clone https://github.com/RobotWebTools/web_video_server.git ROS git clone https://github.com/RobotWebTools/web_video_server.git ros1 Install dependencies rosdep: ~/ros_ws rosdep update rosdep install --from-paths src Build package source workspace: colcon build --packages-select web_video_server source install/setup.bash Usage Starting Server ROS rosrun web_video_server web_video_server ROS ros2 run web_video_server web_video_server Configuration Server Configuration Parameters Parameter Type Default Values Description port int valid port number HTTP server port address string valid address HTTP server address external connections) server_threads int Number server threads handling HTTP requests ros_threads int Number threads ROS message handling verbose bool false true, false Enable verbose logging default_stream_type string \u201cmjpeg\u201d \u201cmjpeg\u201d, \u201cpng\u201d, \u201cros_compressed\u201d Default format video streams publish_rate double positive Rate republishing images means republishing) Running Custom Parameters configure server passing parameters command line: ```bash ROS rosrun web_video_server web_video_server _port:=8081 _address:=localhost _server_threads:=4 File truncated lines full file"},
{"url": "https://index.ros.org/p/xacro", "package": "xacro", "package_summary": "Xacro (XML Macros)\n    Xacro is an XML macro language. With xacro, you can construct shorter and more readable XML files by using macros that expand to larger XML expressions.", "package_details": "Xacro (XML Macros) Xacro XML macro language xacro, construct shorter readable XML files macros expand larger XML expressions. documentation wiki. older releases, ROS wiki."},
{"url": "https://index.ros.org/p/zbar_ros", "package": "zbar_ros", "package_summary": "Lightweight ROS wrapper for Zbar barcode/qrcode reader library (http://zbar.sourceforge\n    .net/)", "package_details": "Zbar ROS Basic ROS2 wrapper zbar (http://zbar.sourceforge.net/) barcode reader library. Reads image stream image topic, outputs detected barcodes barcode topic. Works barcodes. Installation Binary Installation perform binary installation, source ROS installation, simply run: sudo apt install ros-${ROS_DISTRO}-zbar-ros Source Installation (Alternative) Alternatively, build source. ROS workspace. Clone repository workspace\u2019s src directory running: git clone git@github.com:ros-drivers/zbar_ros.git src/zbar_ros Install dependencies rosdep: rosdep install --from-paths src --ignore-src Build package: colcon build Usage source workspace, run node. workspace, run: source install/local_setup.bash ros2 run zbar_ros barcode_reader Topics Subscriptions: image (sensor_msgs/msg/Image) Publisher: barcode (std_msgs/msg/String) Debugging barcode_reader node debug node receiving msgs image detecting code publishing result barcode run debug logging enabled ros2 run zbar_ros barcode_reader --ros-args --log-level DEBUG"},
{"url": "https://index.ros.org/p/gscam", "package": "gscam", "package_summary": "A ROS camera driver that uses gstreamer to connect to\n    devices such as webcams.", "package_details": "GSCam ROS2 package originally developed Brown Robotics Lab broadcasting GStreamer video stream image transport. GStreamer Library Support GSCam supports versions ROS2 GStreamer: ROS2 version Ubuntu version GStreamer version Foxy Galactic Humble Rolling Dependencies dependencies picked rosdep required compile: libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev additional packages gstreamer1.0-tools libgstreamer-plugins-good1.0-dev Ubuntu install: sudo apt-get install gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev License GSCam ROS2 licensed Apache license. Note GStreamer licensed LGPL, GStreamer plugins license requirements. API Nodes gscam Topics camera/image_raw camera/camera_info Services camera/set_camera_info Parameters camera_name: camera (corrsponding camera info) camera_info_url: url (file://path/to/file, package://pkg_name/path/to/file) camera calibration file gscam_config: GStreamer configuration string frame_id: frame reopen_on_eof: Re-open stream ends (EOF) sync_sink: Synchronize app sink setting false resolve problems sub-par framerates) use_gst_timestamps: GStreamer buffer timestamps image message header timestamps (setting false results header timestamps time image buffer transfer completed) image_encoding: image encoding (\u201crgb8\u201d, \u201cmono8\u201d, \u201cyuv422\u201d, \u201cjpeg\u201d) use_sensor_data_qos: flag sensor data qos camera topic(image, camera_info) Examples launch files configs examples directory. examples tested work v4l.launch.xml: Standard video4linux cameras USB webcams v4ljpeg.launch.xml: publishes compressed images videofile.launch.xml: Opens videofile readable GStreamer component_pipeline_launch.py: Launch image pipeline ROS2 composition"},
{"url": "https://index.ros.org/p/mvsim", "package": "mvsim", "package_summary": "A lightweight multivehicle simulation framework.", "package_details": "MultiVehicle simulator (MVSim) Lightweight, realistic dynamical simulator vehicles robots. tailored analysis vehicle dynamics, wheel-ground contact forces accurate simulation typical robot sensors lidars). package includes libraries, standalone applications, ROS ROS nodes. License: 3-clause BSD License Copyright Jose Luis Blanco jlblanco@ual.es (University Almeria) collaborators refer MVSim SoftwareX paper ArXiV preprint) gentle introduction project architecture. cite MVSim work, @article{blanco2023mvsim, title {MultiVehicle Simulator (MVSim): Lightweight dynamics simulator multiagents mobile robotics research}, journal {SoftwareX}, volume pages year issn doi {https://doi.org/10.1016/j.softx.2023.101443}, url {https://www.sciencedirect.com/science/article/pii/S2352711023001395}, author {Jos\u00e9-Luis Blanco-Claraco Borys Tymchenko Francisco Jos\u00e9 Ma\u00f1as-Alvarez Fernando Ca\u00f1adas-Ar\u00e1nega \u00c1ngel L\u00f3pez-G\u00e1zquez Jos\u00e9 Carlos Moreno} ROSCon talk Spanish talk English slides subtitles (slides Installation installation documentation details options. easiest install ROS ROS sudo apt install ros-$ROS_DISTRO-mvsim jump steps launch demo worlds. Demo videos https://github.com/user-attachments/assets/766db164-2d16-44f4-acbf-2f15b73c1ab3 Build matrix status Distro Build dev Build releases Stable version ROS Humble amd64 arm64 ROS Jazzy amd64 arm64 ROS Kilted amd64 arm64 ROS Rolling amd64 arm64 EOL distro Stable version ROS Melodic ROS Noetic ROS Foxy ROS Iron Docs Main documentation site clone repository, remember checkout git submodules git clone https://github.com/MRPT/mvsim.git --recursive Launch demos steps Standalone: mvsim launch mvsim_tutorial/demo_warehouse.world.xml mvsim launch mvsim_tutorial/demo_2robots.world.xml mvsim launch mvsim_tutorial/test_mesh.world.xml ROS File truncated lines full file"},
{"url": "https://index.ros.org/p/quaternion_operation", "package": "quaternion_operation", "package_summary": "The quaternion_operation package", "package_details": "quaternion_operation Quartenion Operation Library ROS2. include headers Eigen functions Documentation sudo apt install ros-$ROS_DISTRO-rosdoc-lite sudo apt install doxygen roscd quaternion_operation rosdoc_lite gnome-www-browser doc/html/index.html"},
{"url": "https://index.ros.org/p/talos_controller_configuration", "package": "talos_controller_configuration", "package_summary": "The talos_controller_configuration package", "package_details": "Initialization joint configurations package low-level utilities initialization joint configurations. `utils` subdirectory preformed messages `<subtree>.msg` controller subtree. messages edited manually needed specific cases. messages ways: `rostopic` command line. Makefile `utils` subfolder: type <subtree>` send commands subtree, arms`, legs`, `send_joint_commands.launch` launch script, requires `subtree` argument set <subtree>, 'arms', 'legs', 'all'."},
{"url": "https://index.ros.org/p/turtlebot3_applications_msgs", "package": "turtlebot3_applications_msgs", "package_summary": "Message and service types: custom messages and services for TurtleBot3 Applications packages", "package_details": "TurtleBot3 Active Branches: noetic, humble, jazzy, main Legacy Branches: *-devel Open Source Projects Related TurtleBot3 turtlebot3 turtlebot3_msgs turtlebot3_simulations turtlebot3_manipulation turtlebot3_autorace turtlebot3_applications turtlebot3_applications_msgs turtlebot3_machine_learning turtlebot3_home_service_challenge hls_lfcd_lds_driver ld08_driver open_manipulator dynamixel_sdk OpenCR-Hardware OpenCR Documentation, Videos, Community Official Documentation ROBOTIS DYNAMIXEL Official website DYNAMIXEL ROBOTIS e-Manual Dynamixel SDK Official guide Dynamixel SDK ROBOTIS e-Manual TurtleBot3 Official guide TurtleBot3 ROBOTIS e-Manual OpenMANIPULATOR-X Official guide OpenMANIPULATOR-X Learning Resources ROBOTIS YouTube Channel ROBOTIS Open Source YouTube Channel ROBOTIS TurtleBot3 YouTube Playlist Video tutorials TurtleBot3 ROBOTIS OpenMANIPULATOR YouTube Playlist Video tutorials OpenMANIPULATOR Community Support ROBOTIS Community Forum discuss users TurtleBot category ROS Community"},
{"url": "https://index.ros.org/p/tvm_vendor", "package": "tvm_vendor", "package_summary": "Wrapper around Apache TVM to make it available to the ROS ecosystem.", "package_details": "TVM Vendor ROS Package ROS package wrapper Apache TVM project."},
{"url": "https://index.ros.org/p/urdf_test", "package": "urdf_test", "package_summary": "The urdf_test package", "package_details": "urdf_test utility test robot_description loaded published correctly launch file. include launch_test package\u2019s CMakeLists.txt add_launch_test( test/test_description.launch.py TARGET \"pmb2_description_${laser_model}_${courier_rgbd_sensors}\" TARGET set test ARGS \"laser_model:=${laser_model}\" \"courier_rgbd_sensors:=${courier_rgbd_sensors}\" variables test configurations launch.py file include description generator Test classes: urdf_test.description_test import (generate_urdf_test_description, TestDescriptionPublished, TestSuccessfulExit) launch_pal.include_utils import include_launch_py_description Ignore unused import warnings Test Classes ('TestDescriptionPublished', 'TestSuccessfulExit') def generate_test_description(): return generate_urdf_test_description( include_launch_py_description( 'pmb2_description', ['launch', 'robot_state_publisher.launch.py']), xacro_test faster alternative, xacro checked define_xacro_test takes xacro file path number DeclareLaunchArgument arguments, form test matrix (cartesian product). pathlib import Path ament_index_python.packages import get_package_share_directory pmb2_description.launch_arguments import PMB2Args urdf_test.xacro_test import define_xacro_test xacro_file_path Path( get_package_share_directory('pmb2_description'), 'robots', 'pmb2.urdf.xacro', test_xacro define_xacro_test(xacro_file_path, PMB2Args.laser_model, PMB2Args.add_on_module)"},
{"url": "https://index.ros.org/p/lms1xx", "package": "lms1xx", "package_summary": "The lms1xx package contains a basic ROS 2 driver for the SICK LMS1xx line of LIDARs.", "package_details": "LMS1xx ROS driver SICK LMS1xx family laser scanners. Originally RCPRG."},
{"url": "https://index.ros.org/p/urdfdom", "package": "urdfdom", "package_summary": "A library to access URDFs using the DOM model.", "package_details": "urdfdom URDF (U-Robot Description Format) library core data structures simple XML parsers populating class data structures URDF file. details URDF specifications reside http://ros.org/wiki/urdf Build Status ROS choose check repository ROS, aware package.xml included repo added ROS release process. emulate pull file repository format. replace ALLCAPS words apropriate terms: wget https://raw.github.com/ros-gbp/urdfdom-release/debian/ROS_DISTRO/UBUNTU_DISTRO/urdfdom/package.xml wget https://raw.github.com/ros-gbp/urdfdom-release/debian/hydro/precise/urdfdom/package.xml Installing Source ROS Debians Warning: break ABI compatibility future /opt/ros updates debian package manager. hack, risk. install urdfdom source, install ROS source, follow loose guidelines. practice installing, works. version ROS Hydro easily customized future version ROS: sudo /opt/ros/hydro/include/urdf_parser/ /opt/ros/hydro/include/_urdf_parser/ sudo /opt/ros/hydro/lib/liburdfdom_model.so /opt/ros/hydro/lib/_liburdfdom_model.so sudo /opt/ros/hydro/lib/liburdfdom_model_state.so /opt/ros/hydro/lib/_liburdfdom_model_state.so sudo /opt/ros/hydro/lib/liburdfdom_sensor.so /opt/ros/hydro/lib/_liburdfdom_sensor.so sudo /opt/ros/hydro/lib/liburdfdom_world.so /opt/ros/hydro/lib/_liburdfdom_world.so sudo /opt/ros/hydro/lib/pkgconfig/urdfdom.pc /opt/ros/hydro/lib/pkgconfig/_urdfdom.pc sudo /opt/ros/hydro/share/urdfdom/cmake/urdfdom-config.cmake /opt/ros/hydro/share/urdfdom/cmake/_urdfdom-config.cmake ~/ros/urdfdom git repo checked mkdir build build cmake -DCMAKE_INSTALL_PREFIX=/opt/ros/hydro sudo install rebuild catkin workspace ~/ros/ws_catkin catkin_make"},
{"url": "https://index.ros.org/p/sm_atomic_performance_trace_1", "package": "sm_atomic_performance_trace_1", "package_summary": "The sm_atomic_performance_trace_1 package", "package_details": "State Machine Diagram Description Description required.</br> Doxygen Namespace Class Reference Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper workspace\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_atomic_performance_trace_1 sm_atomic_performance_trace_1.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_atomic_subscribers_performance_test", "package": "sm_atomic_subscribers_performance_test", "package_summary": "The sm_atomic_subscribers_performance_test package", "package_details": "State Machine Diagram Image required Description Description required.</br> Doxygen Namespace Class Reference Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper workspace\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_atomic_subscribers_performance_test sm_atomic_subscribers_performance_test.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_coretest_transition_speed_1", "package": "sm_coretest_transition_speed_1", "package_summary": "The sm_coretest_transition_speed_1 package", "package_details": "Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper workspace\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_coretest_transition_speed_1 sm_coretest_transition_speed_1.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_advanced_recovery_1", "package": "sm_advanced_recovery_1", "package_summary": "The sm_advanced_recovery_1 package", "package_details": "State Machine Diagram Description state machine demonstrating SMACC\u2019s advanced recovery capabilities deep history.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_advanced_recovery_1 sm_advanced_recovery_1.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_atomic", "package": "sm_atomic", "package_summary": "The sm_atomic package", "package_details": "State Machine Diagram Description completely minimal state machine example.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_atomic sm_atomic.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_atomic_24hr", "package": "sm_atomic_24hr", "package_summary": "The sm_atomic_24hr package", "package_details": "State Machine Diagram Description completely minimal state machine designed run hours.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_atomic_24hr sm_atomic_24hr.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_atomic_http", "package": "sm_atomic_http", "package_summary": "The sm_atomic_http package", "package_details": "State Machine Diagram Description completely minimal state machine example.</br> Build Instructions source chosen ros2 distro. source /opt/ros/rolling/setup.bash source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.bash run launch file\u2026 ros2 launch sm_atomic_http sm_atomic_http.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_atomic_lifecycle", "package": "sm_atomic_lifecycle", "package_summary": "The sm_atomic_lifecycle package", "package_details": "State Machine Diagram Description completely minimal state machine demonstartes capabilities SMACC Lifecycle Client Behavior Library</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_atomic_lifecycle sm_atomic_lifecycle.py Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_atomic_mode_states", "package": "sm_atomic_mode_states", "package_summary": "The sm_atomic_mode_states package", "package_details": "State Machine Diagram Description completely minimal state machine example.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_atomic_mode_states sm_atomic_mode_states.py Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_atomic_services", "package": "sm_atomic_services", "package_summary": "The sm_atomic services package", "package_details": "State Machine Diagram Description completely minimal state machine example.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_atomic_services sm_atomic_services.py Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_branching", "package": "sm_branching", "package_summary": "The sm_branching package", "package_details": "State Machine Diagram Description state machine highlights advanced layout features SMACC2 RTA.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 refactor state machine ros2 launch sm_branching sm_branching.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_cl_keyboard_unit_test_1", "package": "sm_cl_keyboard_unit_test_1", "package_summary": "The sm_cl_keyboard_unit_test_1 package", "package_details": "State Machine Diagram Description completely minimal state machine example.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_cl_keyboard_unit_test_1 sm_cl_keyboard_unit_test_1.py Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_cl_ros2_timer_unit_test_1", "package": "sm_cl_ros2_timer_unit_test_1", "package_summary": "The sm_cl_ros2_timer_unit_test_1 package", "package_details": "State Machine Diagram Description completely minimal state machine example.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_cl_ros2_timer_unit_test_1 sm_cl_ros2_timer_unit_test_1.py Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_multi_stage_1", "package": "sm_multi_stage_1", "package_summary": "The sm_multi_stage_1 package", "package_details": "State Machine Diagram Description large multi stage state machine demonstrates NxN problem formidable believe.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_multi_stage_1 sm_multi_stage_1.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_pack_ml", "package": "sm_pack_ml", "package_summary": "The sm_pack_ml package", "package_details": "State Machine Diagram Description large multi stage state machine implements PackML mode design.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_pack_ml sm_pack_ml.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_panda_cl_moveit2z_cb_inventory", "package": "sm_panda_cl_moveit2z_cb_inventory", "package_summary": "The sm_panda_cl_moveit2z_cb_inventory package", "package_details": "Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions source proper workspace\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_panda_cl_moveit2z_cb_inventory sm_panda_cl_moveit2z_cb_inventory.launch.py Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_panda_moveit2z_cb_inventory", "package": "sm_panda_moveit2z_cb_inventory", "package_summary": "The sm_panda_moveit2z_cb_inventory package", "package_details": "Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions built project don\u2019t forget setup environment: source gazebo setup source /opt/ros/humble/share/gazebo_ros/local_setup.bash source proper workspace\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch sm_panda_moveit2z_cb_inventory sm_panda_moveit2z_cb_inventory.launch.py simulation starting properly check GAZEBO_RESOURCE_PATH set correctly (echo $GAZEBO_RESOURCE_PATH). simply set export GAZEBO_RESOURCE_PATH=/usr/share/gazebo-<your_gazebo_version>/ Note: Gazebo server shutdown correctly. restart simulation instance server (gzserver) running. manually. run: killall gzserver Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_simple_action_client", "package": "sm_simple_action_client", "package_summary": "The sm_simple_action_client package", "package_details": "Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper workspace\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 ros2 launch simple_action_client_example simple_action_client_example.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/sm_three_some", "package": "sm_three_some", "package_summary": "The sm_three_some package", "package_details": "State Machine Diagram Description simple, complete state machine highly recommend starting point users\u2019 state machine projects.</br> Build Instructions source ros2 installation. source /opt/ros/humble/setup.bash build, you\u2019ve installed dependencies\u2026 rosdep install --ignore-src --from-paths src build colcon build\u2026 colcon build Operating Instructions build, remember source proper install folder\u2026 source ~/workspace/humble_ws/install/setup.sh run launch file\u2026 refactor state machine ros2 launch sm_three_some sm_three_some.launch Viewer Instructions SMACC2 Runtime Analyzer installed type\u2026 ros2 run smacc2_rta smacc2_rta don\u2019t SMACC2 Runtime Analyzer click"},
{"url": "https://index.ros.org/p/actuator_msgs", "package": "actuator_msgs", "package_summary": "ROS 2 message interface for Actuators.", "package_details": "actuator_msgs ROS message interface Actuators."},
{"url": "https://index.ros.org/p/adaptive_component", "package": "adaptive_component", "package_summary": "A composable container for Adaptive ROS 2 Node computations.\n    Allows building Nodes that can select between FPGA, CPU or\n    GPU, at run-time. Stateless by default, can be made stateful\n    to meet use-case specific needs. Refer to examples in README.\n\n    Technically, provides A ROS 2 Node subclass programmed as a\n    \"Component\" and including its own single threaded executor\n    to build adaptive computations. Adaptive ROS 2 Nodes are able to\n    perform computations in the CPU, the FPGA or the GPU, adaptively.\n    Adaptive behavior is controlled through the \"adaptive\" ROS 2\n    parameter.", "package_details": "adaptive_component composable stateless container Adaptive ROS Node computations. Select FPGA, CPU GPU run-time. Nodes hardware acceleration able perform computations faster relying FPGAs GPUs, improving performance. Adaptive ROS Nodes leverage hardware acceleration run-time, allowing robotics engineers select computational resource Node on-the-go, giving roboticists finer-grained control resources computional graphs underlying hardware. ROS package composable stateless container Adaptive ROS Node computations: adaptive_component. building Nodes select FPGA, CPU GPU, run-time. Technically, ROS Node1 subclass programmed Component2 including single threaded executor build adaptive computations. Adaptive ROS Nodes built easily able perform computations CPU, FPGA GPU. Adaptive behavior controlled adaptive ROS parameter, values allowed: Hardware::CPU Hardware::FPGA Hardware::GPU adaptive_component stateless default, Adaptive Nodes stateful, feel free inherit composition::AdaptiveComponent create stateful subclasses3. work? NodeCPU composition::DoubleVaddComponent; NodeFPGA composition::DoubleVaddComponentFPGA; rclcpp::NodeOptions options; Create executor rclcpp::executors::MultiThreadedExecutor exec; Create adaptive ROS Node \"components\", resulting Node programed \"component\", retaining composability auto adaptive_node std::make_shared<composition::AdaptiveComponent>( \"doublevadd_publisher_adaptive\", options, CPU std::make_shared<NodeCPU>(\"_doublevadd_publisher_adaptive_cpu\", options), FPGA std::make_shared<NodeFPGA>(\"_doublevadd_publisher_adaptive_fpga\", options), GPU nullptr); exec.add_node(adaptive_node); fill executor exec.spin(); spin executor dynamically, switch CPU FPGA setting adaptive parameter /doublevadd_publisher_adaptive Node: run CPU: ros2 param set /doublevadd_publisher_adaptive adaptive run FPGA: ros2 param set /doublevadd_publisher_adaptive adaptive care ROS package maintainer? integration hardware acceleration ROS requires rewriting parts Node computations exploit parallelism. conflict CPU-centric architectures maintainer, you\u2019re care breaking\u201d CPU-centric implementations. consistently integrate hardware acceleration, avoid unnecessary forks discourage package fragmentation, composition::AdaptiveComponent extend ROS CPU-centric Nodes4 computational counterparts separating concerns build-time. package-maintenance perspective, Node computation options) written separated file separated Component. live package, totally (disconnected) adaptive_component takes care putting launch time dependency package required build-time5. execution perspective, developers easily create Adaptive ROS Nodes compose desired launch-time, capabilities adaptively switch compute alternatives run-time. examples Examples adaptive_component: Adaptive ROS Node Adaptive stateless ROS Component (Node Adaptive stateful ROS Component (Node Conventions recommendations conventions recommendations meant facilitate integration hardware acceleration existing ROS packages Component-oriented: AdaptiveComponent built component maintain composability Nodes. Naming: Adaptive Node suffix _adaptive identify computational graph Nodes adaptive capabilities Hidden sub-Nodes: Adaptive Node components (compute-specific CPU\u2019s FPGA\u2019s) named hyphen prefix, hidden Nodes default. File names: source code file names adhere guidelines: CPU-based computational Nodes optionally add _cpu suffix FPGA-based computational Nodes add _fpga suffix GPU-based computational Nodes add _gpu suffix Quality Declaration package claims Quality Level category, Quality Declaration details. Node process performs computations. ROS designed modular fine-grained scale; robot control system comprises nodes. Nodes execute arbitrary logic contribute robotics behavior.\u00a0\u21a9 ROS Component Node compiled shared library loaded runtime container process. offers roboticists additional flexibility building computational graphs, making layout process deploy-time decision. Component commonly subclass rclcpp::Node. maintain flexibility modularity, Components shouldn\u2019t perform long running blocking tasks constructors. timers periodic notifications callbacks publishers, subscribers, servers, clients.\u00a0\u21a9 (ROS component).\u00a0\u21a9 Assumes Nodes written components, great chance adaptive_component disconnect nodes packages, facilitate source code maintenance CPU-centric implementations counterparts, encouraged source code ROS package suffixes indicating compute substrate _fpga.cpp, facilitate maintaining implementations compute substrates, avoid versioning issues fragmentation issues.\u00a0\u21a9"},
{"url": "https://index.ros.org/p/ament_acceleration", "package": "ament_acceleration", "package_summary": "CMake macros and utilities to include hardware acceleration into the ROS 2 build system (ament) and its development flows.", "package_details": "ament_acceleration CMake macros utilities include hardware acceleration ROS build system (ament) development flows. NOTE: REP-2008: ROS Hardware Acceleration Architecture Conventions (pending details ament_acceleration fits rest hardware acceleration packages. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/ament_cmake_google_benchmark", "package": "ament_cmake_google_benchmark", "package_summary": "The ability to add Google Benchmark tests in the ament buildsystem in CMake.", "package_details": "ament_cmake_google_benchmark package logic invoking Google Benchmark tests comprised main parts: ament_add_google_benchmark* CMake macros. macros ament packages compile Google Benchmark executables, run Google Benchmark tests CTest, run_and_convert.py test wrapper. script convert Google Benchmark JSON results custom format consumed Jenkins Benchmark plugin. script combines generated results elements overlay file, additional context benchmarks, descriptions thresholds. benchmark_schema.json output schema. schema describes output format run_and_convert.py test wrapper, Jenkins parsing results aggregation threshold checks. schema overlay file. Examples source file format well-described Google Benchmark README. simple #include <benchmark/benchmark.h> static void increment_perf(benchmark::State state) size_t (auto state) BENCHMARK(increment_perf); compile run benchmark, added CMakeLists.txt: if(BUILD_TESTING) find_package(ament_cmake_google_benchmark REQUIRED) ament_add_google_benchmark(simple_benchmark test/simple_benchmark.cpp) endif() Jenkins trigger build warning metrics exceed predefined thresholds. overlay file sets threshold deviation average metric previous Jenkins job builds include metric: \"package_name.simple_benchmark\": \"increment_perf\": \"real_time\": \"thresholds\": \"method\": \"percentageaverage\", \"percentage\": overlay file generated build time checked static file. location file communicated package AMENT_CMAKE_GOOGLE_BENCHMARK_OVERLAY CMake variable. if(BUILD_TESTING) set(AMENT_CMAKE_GOOGLE_BENCHMARK_OVERLAY test/benchmark_thresholds.json) endif()"},
{"url": "https://index.ros.org/p/ament_cmake_python", "package": "ament_cmake_python", "package_summary": "The ability to use Python in the ament buildsystem in CMake.", "package_details": "ament_cmake_python package adds functions installing Python packages modules CMake. API Calling find_package(ament_cmake_python) API ament_get_python_install_dir CMake function ament_get_python_install_dir path Python packages installed path relative CMAKE_INSTALL_PREFIX. path customized setting PYTHON_INSTALL_DIR command line. relative path. cmake command bellow Python code installed ${CMAKE_INSTALL_PREFIX}/foobar/site-packages. cmake ../path/to/package/using/ament_cmake_python -DPYTHON_INSTALL_DIR=foobar/site-packages ament_python_install_module CMake macro ament_python_install_module install single Python module Python install directory. ament_python_install_package CMake macro ament_python_install_package install Python package subpackages Python install directory."},
{"url": "https://index.ros.org/p/ament_cmake_catch2", "package": "ament_cmake_catch2", "package_summary": "Allows integrating catch2 tests in the ament buildsystem with CMake", "package_details": "ament_cmake_catch2 ament_cmake_catch2 CMake macros adding tests written Catch2. Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/ament_download", "package": "ament_download", "package_summary": "CMake macros for downloading files with ament", "package_details": "ament_download Ament download package ROS2-based CMakeLists Largely catkin_download BSD-3.0. temporary holding potentially merged ament/ament_cmake. ament_download(http://download.ros.org/data/pcl/table_scene_lms400.pcd DESTINATION /home/s.macenski 546b5b4822fb1de21b0cf83d41ad6683 FILENAME table_scene_lms400.pcd"},
{"url": "https://index.ros.org/p/ament_index_cpp", "package": "ament_index_cpp", "package_summary": "C++ API to access the ament resource index.", "package_details": "ament_index_cpp ament_index_cpp API access ament resource index. https://github.com/ament/ament_cmake/blob/master/ament_cmake_core/doc/resource_index.md documentation ament resource index. Features detail http://docs.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/ament_index_python", "package": "ament_index_python", "package_summary": "Python API to access the ament resource index.", "package_details": "ament_index_python ament_index_python python API access ament resource index. https://github.com/ament/ament_cmake/blob/master/ament_cmake_core/doc/resource_index.md documentation ament resource index. Quality Declaration Quality Declaration details declared Quality Level."},
{"url": "https://index.ros.org/p/ament_nodl", "package": "ament_nodl", "package_summary": "Ament extension for exporting NoDL .xml files", "package_details": "ament_nodl Ament extension exporting NoDL .xml files Usage file named package.nodl.xml folder project\u2019s CMakeLists.txt, add line CMakeLists.txt calling ament_package() nodl_export_node_description_file(package.nodl.xml)"},
{"url": "https://index.ros.org/p/ament_vitis", "package": "ament_vitis", "package_summary": "CMake macros and utilities to include Vitis platform into the ROS 2 build system (ament) and its development flows.", "package_details": "ament_vitis CMake macros utilities include Vitis platform ROS build system (ament) development flows. NOTE: ament_vitis direct runtime Non-ROS dependency Vitis unified software platform. Download install Vitis Usage examples Synthesize Vitis HLS acceleration kernel ```cmake resize_accel kernel vitis_acceleration_kernel( resize_accel FILE src/image_proc/xf_resize_accel.cpp CONFIG cfg/kv260.cfg INCLUDE include/image_proc ${CMAKE_INSTALL_PREFIX}/include TYPE rectify_accel kernel vitis_acceleration_kernel( rectify_accel FILE src/image_proc/xf_rectify_accel.cpp CONFIG cfg/kv260.cfg INCLUDE include/image_proc ${CMAKE_INSTALL_PREFIX}/include TYPE Link implement (place route) previously synthesized acceleration kernel Vitis ```cmake image_proc kernel vitis_link_kernel( OUTPUT image_proc KERNELS resize_accel rectify_accel CONFIG cfg/kv260_image_proc.cfg Synthesize, place route acceleration kernel Vitis ```cmake vadd kernel vitis_acceleration_kernel( vadd_faster FILE src/vadd.cpp CONFIG src/kv260.cfg CLOCK 100000000:vadd_faster DTSI src/vadd_faster.dtsi INCLUDE include TYPE LINK PACKAGE Advanced: generate TCL scripts simulation synthesis customizing Vitis Vivado flows ```cmake simulation synthesis vitis_hls_generate_tcl( PROJECT project_faster_doublevadd_publisher SRC src/vadd.cpp HEADERS include TESTBENCH src/testbench.cpp TOPFUNCTION vadd CLOCK SYNTHESIS Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/apriltag", "package": "apriltag", "package_summary": "AprilTag detector library", "package_details": "AprilTag AprilTag visual fiducial system popular robotics research. repository version AprilTag, AprilTag includes faster detector, improved detection rate small tags, flexible tag layouts, pose estimation. AprilTag consists small library minimal dependencies. find tag images pre-generated layouts recommend tagStandard41h12 layout. Table Contents Papers Install Usage Choosing Tag Family Started Detector Python Matlab Julia Upgrading AprilTag OpenCV Integration Tuning Detector Parameters Increasing speed. Increasing detection distance. Pose Estimation. Debugging Flexible Layouts Support Papers AprilTag subject papers. AprilTag: robust flexible visual fiducial system AprilTag Efficient robust fiducial detection Flexible Layouts Fiducial Tags Install Officially Linux operating systems supported, users success installing Windows default installation place headers /usr/local/include shared library /usr/local/lib. installs pkg-config script /usr/local/lib/pkgconfig install python wrapper python3 installed. cmake build -DCMAKE_BUILD_TYPE=Release cmake --build build --target install build shared libraries default. static libraries set BUILD_SHARED_LIBS cmake build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF cmake --build build --target install Ninja (sudo apt install ninja-build) installed, cmake build -GNinja -DCMAKE_BUILD_TYPE=Release cmake --build build --target install generate compile ninja build script. faster cmake\u2019s default Makefile generator. omit --target install locally installing. Usage Choosing Tag Family vast majority applications, tagStandard41h12 family correct choice. find images tags apriltag-imgs repo. Scale images favorite editor print heuristics choose tag families: tags, tagStandard52h13 maximize space small circular object, tagCircle49h12 tagCircle21h7). recursive tag tagCustom48h12. compatibility ArUcO detector tag36h11 fit generate custom tag family Started Detector Python import import numpy apriltag import apriltag imagepath 'test.jpg' image cv2.imread(imagepath, cv2.IMREAD_GRAYSCALE) detector apriltag(\"tagStandard41h12\") detections detector.detect(image) Alternately AprilTag python bindings created duckietown. image_u8_t* image_u8_create_from_pnm(\"test.pnm\"); NULL) fprintf(stderr, \"Failed load pnm image.\\n\"); exit(1); File truncated lines full file"},
{"url": "https://index.ros.org/p/apriltag_detector", "package": "apriltag_detector", "package_summary": "ROS2 package for apriltag detection", "package_details": "ROS Apriltag detector package package implements generic apriltag detector node composable component. package base class header files apriltag detector plugins implemented UMich MIT detector. package run apriltag detector implements plugin interface, long required plugin installed. Note UMich detector sensitive faster, work tags encroached black markers double-wide black borders (Kalibr boards!). MIT detector situation. documentation install package refer documentation apriltag_detector repository. NOTE: running apriltag detector heavy weight operation, detector frugal subscribing image topics. bring image viewer connect debug images, detector sit Components DetectorComponent Parameters: black_border_width: MIT). Width bits) outer black border apriltags. Note Kalibr board tags border width bits. Default: blur: UMich). Gaussian blur sigma pixels). Default: blur). decimate_factor: ratio decimation, default: decimation). image_transport: transport compressed, ffmpeg Default: raw. max_allowed_hamming_distance: UMich) number bits proper code, disregard tag. Default: (perfect match required). num_threads: UMich). Number threads run parallel. Default: tag_family: Apriltag family. Supported families depend detector type. Default: \u201ctf36h11\u201d. type: type detector Valid mit, umich. Default: umich. Topics: image (subscribed remap camera topic run detector. tags(published): remap topic tag detections published. Launch files detect.launch.py convenience launch file launches detector draw node easy viewing tags. Arguments: black_border_width: MIT). Width bits) outer black border apriltags. Note Kalibr board tags border width bits. Default: blur: UMich). Gaussian blur sigma pixels). Default: blur). camera: camera, /camera_0. Default: camera. image: image camera node, image_raw. node subscribe images /camera_name/image_raw. Default: image_raw. image_transport: transport compressed, ffmpeg Default: raw. max_allowed_hamming_distance: UMich) number bits proper code, disregard tag. Default: (perfect match required). Default: raw. tags: topic publish tags. Default: tags. type: type detector Valid mit, umich. Default: umich. usage Start detector drawing node: ros2 launch apriltag_detector detect.launch.py camera:=/camera start camera server publishes images /camera/image_raw, play data bag. detector subscribe output topics, instance rqt_image_view: ros2 run rqt_image_view rqt_image_view /camera/image_tags Alternatively decoded tag rate: ros2 topic /camera/tags License software issued Apache License Version"},
{"url": "https://index.ros.org/p/apriltag_detector_mit", "package": "apriltag_detector_mit", "package_summary": "ROS package for apriltag detection with MIT detector", "package_details": "ROS MIT Apriltag detector package repository ROS2 components detecting Apriltags MIT apriltag library implementation. Note package plugin works pluginlib, meaning load detector code ROS2 component. documentation install component, refer documentation apriltag_detector package. Components apriltag_detector_mit::Component Topics (subscribed, subscriber tags): image: image topic tags: detected tags apriltag library. Topics (published): tags: tag detections. Parameters: black_border_width. Integer thickness black border bits). Default: image_qos_profile: QoS profile image subscription. Allowed values: default, sensor_data. parameter achieve QoS compatibility subscribing image data. Defaults default. image_transport: type image transport compressed. Default: raw`. tag_family: Apriltag family. Allowed values: tf16h5, tf25h9, tf36h11. Default: tf36h11 License software issued Apache License Version Note package links MIT apriltag detector licensed LGPLv2.1."},
{"url": "https://index.ros.org/p/apriltag_detector_umich", "package": "apriltag_detector_umich", "package_summary": "ROS package for apriltag detection with the UMich detector", "package_details": "ROS UMich Apriltag detector package repository ROS2 components detecting Apriltags UMich Apriltag library. Note package plugin works pluginlib, meaning load detector code ROS2 component. documentation install component, refer documentation apriltag_detector package. Components apriltag_detector_umich::Component Topics (subscribed, subscriber tags): image: image topic tags: detected tags apriltag library. Topics (published): tags: tag detections. Parameters: blur: Sigma pixels) gaussian blur. Default: blur). decimate_factor: Decimate image amount. Factor decimate directions. Default: decimation). image_qos_profile: QoS profile image subscription. Allowed values: default, sensor_data. parameter achieve QoS compatibility subscribing image data. Defaults default. image_transport: type image transport compressed. Default: raw. max_allowed_hamming_distance: discard tags hamming error larger Default: error allowed). num_threads: number threads processing. Default: tag_family: Apriltag family. Allowed values: tf16h5, tf25h9, tf36h11, tfCircle21h7, tfCircle49h12, tfStandard41h12, tfStandard52h13, tfCustom48h12. Default: tf36h11 License software issued Apache License Version"},
{"url": "https://index.ros.org/p/apriltag_draw", "package": "apriltag_draw", "package_summary": "ROS package for drawing apriltags on image", "package_details": "ROS Apriltag drawing package repository ROS2 component drawing apriltags image. find package handy trouble shooting apriltag detection problems. node package launched launch file apriltag_detector package. Refer information. Components apriltag_draw::ApriltagDraw Topics (subscribed): tags: detected tags apriltag library. image: image tags detected. synced tags, identical header time stamps streams. Topics (published): image_tags: image tags drawn Parameters: image_transport: image transport (default raw) qos_profile: profile subscribing images. Allowed sensor_data default. Default default. max_queue_size: images tag detections Default: Launch files draw.launch.py Arguments: camera: camera, /camera_0. Default: camera. image: image camera node, image_raw. node subscribe images /camera_name/image_raw. Default: image_raw. image_transport: transport compressed, ffmpeg Default: raw. composable.launch.py launch script identical arguments draw.launch.py, implemented composable node illustration purposes. usage ros2 launch apriltag_draw draw.launch.py image_transport:=ffmpeg camera:=/cam_sync/cam3 create node compressed ffmpeg image transport, topics, publishing image /cam_sync/cam3/tags. Subscribers: /cam_sync/cam3/image_raw/ffmpeg: ffmpeg_image_transport_msgs/msg/FFMPEGPacket /cam_sync/cam3/tags: apriltag_msgs/msg/AprilTagDetectionArray Publishers: /cam_sync/cam3/image_tags: sensor_msgs/msg/Image /cam_sync/cam3/image_tags/ffmpeg: ffmpeg_image_transport_msgs/msg/FFMPEGPacket License software issued Apache License Version"},
{"url": "https://index.ros.org/p/apriltag_tools", "package": "apriltag_tools", "package_summary": "misc tools for working with apriltags under ROS2", "package_details": "ROS2 Apriltag tools package repository ROS2 tools image processing related AprilTags. AprilTag detection ROS2, apriltag_detector package. Nodes detect_from_bag node runs apriltag detector bag images produces output bag original bag content apriltag detections debug images. Parameters: in_bag: path input bag image_topic: image topic run AprilTag detector image_tag_topic: output topic images detected AprilTags shown tag_topic: output topic detected tags out_bag: path output bag ros2 run apriltag_tools detect_from_bag --ros-args \"in_bag:=./input_bag\" \"image_topic:=/camera/image_raw\" \"out_bag:=./output_bag\" License software issued Apache License Version"},
{"url": "https://index.ros.org/p/apriltag_mit", "package": "apriltag_mit", "package_summary": "ROS2 package wrapper for the MIT apriltag detector", "package_details": "AprilTags library Detect April tags bar codes) images; reports unique detection, optionally position orientation relative calibrated camera. examples/apriltags_demo.cpp simple detects April tags tags/pdf/tag36h11.pdf) laptop webcam images marks tags live image. Ubuntu dependencies: sudo apt-get install subversion cmake libopencv-dev libeigen3-dev libv4l-dev Mac dependencies: sudo port install pkgconfig opencv eigen3 pods build system connection cmake, http://sourceforge.net/p/pods/ Michael Kaess October AprilTags developed Professor Edwin Olson University Michigan. Java implementation web site: http://april.eecs.umich.edu. Olson's Java code ported integrated Tekkotsu framework Jeffrey Boyland David Touretzky. Tekkotsu wiki article additional links references: http://wiki.tekkotsu.org/index.php/AprilTags code modified Michael Kaess (kaess@mit.edu) Hordur Johannson (hordurj@mit.edu) code released LGPL license. converted standalone library added stable homography recovery OpenCV robust tag code table require terminating (omission results false positives illegal codes accepted) changed tags agree Olson's Java version added tag families added principal point parameter original code essential homography added debugging code (visualization OpenCV show intermediate detection steps) added fast approximation arctan2 Ed's original Java code interpolation homography Quad: requires homography computations small improvement correct detections todo: significant speedup achieved performing image operations OpenCV (Gaussian filter, operations TagDetector.cc) replacing arctan2 precomputed lookup table converting matrix operations Eigen simplifying code, speedup)"},
{"url": "https://index.ros.org/p/apriltag_ros", "package": "apriltag_ros", "package_summary": "AprilTag detection node", "package_details": "AprilTag ROS Node ROS node AprilTag library detect AprilTags images publish pose, additional metadata. information AprilTag, paper reference implementation: https://april.eecs.umich.edu/software/apriltag.html Topics Subscriptions: node subscribes image_transport::CameraSubscriber rectified images topic image_rect. set topic names depends type image transport (parameter image_transport) selected (raw compressed): image_rect (raw, type: sensor_msgs/msg/Image) image_rect/compressed (compressed, type: sensor_msgs/msg/CompressedImage) camera_info (type: sensor_msgs/msg/CameraInfo) Publisher: (type: tf2_msgs/msg/TFMessage) detections (type: apriltag_msgs/msg/AprilTagDetectionArray) camera intrinsics CameraInfo compute marker tag pose homography image camera intrinsics timestamp. tag poses published standard topic header set image header child_frame_id set tag<family>:<id> \u201ctag36h11:0\u201d) frame selected configuration file. Additional information detected tags published AprilTagDetectionArray message, original homography matrix, hamming distance decision_margin detection. Configuration node configured yaml configurations file. complete ROS yaml parameter file syntax, https://github.com/ros2/rcl/tree/master/rcl_yaml_param_parser. configuration file format: apriltag: node ros__parameters: setup (defaults) image_transport: raw image format: \"raw\" \"compressed\" family: tag family size: default tag edge size meter profile: false print profiling information stdout tuning detection (defaults) max_hamming: maximum allowed hamming distance (corrected bits) detector: threads: number threads decimate: decimate resolution quad detection blur: sigma Gaussian blur quad detection refine: snap strong gradients sharpening: sharpening decoded images debug: write additional debugging images current working directory pose_estimation_method: \"pnp\" method estimating tag pose (optional) list tags defined, 'frames' 'sizes' length 'ids'. tag: ids: tag IDs publish transform frames: [<frame1>, <frame2>, frame names sizes: [<size1>, <size1>, tag-specific edge size, overrides default 'size' family (string) defines tag family detector Circle21h7, Circle49h12, Custom48h12, Standard41h12, Standard52h13. size (float) tag edge size meters, assuming square markers. publishing tag poses, list tag.ids publish selected tag IDs. tag child frame tag.frames tag specific size tag.sizes. lists length tag.ids empty. case, default frame form tag<family>:<id> default tag edge size size remaining parameters set default values library. apriltag.h detailed description function. tags_36h11.yaml configuration publishes specific tag poses family. Nodes Standalone Executable apriltag_node executable launched topic remappings configuration file: ros2 run apriltag_ros apriltag_node --ros-args image_rect:=/camera/image camera_info:=/camera/camera_info --params-file `ros2 pkg prefix apriltag_ros`/share/apriltag_ros/cfg/tags_36h11.yaml Composable Node efficient intraprocess communication, composable node ros2 component types apriltag_ros AprilTagNode AprilTagNode component loaded nodes \u201ccontainer node\u201d process shared-memory communication prevent unnecessary data copies. launch file camera_36h11.launch.yml loads AprilTagNode component camera::CameraNode component camera_ros package (sudo apt install ros-$ROS_DISTRO-camera-ros) container enables use_intra_process_comms ros2 launch apriltag_ros camera_36h11.launch.yml"},
{"url": "https://index.ros.org/p/aruco_opencv", "package": "aruco_opencv", "package_summary": "ArUco marker detection using aruco module from OpenCV libraries.", "package_details": "aruco_opencv ROS package detecting ArUco markers. difference package aruco_ros aruco module OpenCV libraries original ArUco library."},
{"url": "https://index.ros.org/p/aws_robomaker_small_warehouse_world", "package": "aws_robomaker_small_warehouse_world", "package_summary": "AWS RoboMaker package for a warehouse world to use in manufacturing and logistics robot applications.", "package_details": "AWS RoboMaker Small Warehouse World Gazebo world suited organizations building testing robot applications warehouse logistics cases. Models included Gazebo World Model (/models) Picture aws_robomaker_warehouse_Bucket_01 aws_robomaker_warehouse_ClutteringA_01, aws_robomaker_warehouse_ClutteringC_01, aws_robomaker_warehouse_ClutteringD_01 aws_robomaker_warehouse_DeskC_01 aws_robomaker_warehouse_GroundB_01 aws_robomaker_warehouse_TrashCanC_01 aws_robomaker_warehouse_Lamp_01 aws_robomaker_warehouse_PalletJackB_01 aws_robomaker_warehouse_ShelfD_01, aws_robomaker_warehouse_ShelfE_01, aws_robomaker_warehouse_ShelfF_01 Building Launching Gazebo World ROS Applications Create update .rosinstall file root directory ROS workspace. Add line .rosintall: git: {local-name: src/aws-robomaker-small-warehouse-world, uri: 'https://github.com/aws-robotics/aws-robomaker-small-warehouse-world.git', version: ros2} Change directory ROS workspace run rosws update Add include ROS2 launch file import ament_index_python.packages import get_package_share_directory launch import LaunchDescription launch.actions import IncludeLaunchDescription launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description(): warehouse_pkg_dir get_package_share_directory('aws_robomaker_small_warehouse_world') warehouse_launch_path os.path.join(warehouse_pkg_dir, 'launch') warehouse_world_cmd IncludeLaunchDescription( PythonLaunchDescriptionSource([warehouse_launch_path, '/small_warehouse.launch.py']) LaunchDescription() ld.add_action(warehouse_world_cmd) return Build application colcon rosws update rosdep install --from-paths --ignore-src colcon build Running world Gazebo ROS application open world Gazebo, change directory ROS workspace root folder run: export GAZEBO_MODEL_PATH=`pwd`/models gazebo worlds/small_warehouse/small_warehouse.world Running world ROS simulated robot launch base Gazebo world robot, clone repository run commands. Note: ROS gazebo installed host. build ROS2 rosdep install --from-paths --ignore-src colcon build run ROS2 source install/setup.sh ros2 launch aws_robomaker_small_warehouse_world small_warehouse.launch.py Visit AWS RoboMaker website learn building intelligent robotic applications Amazon Web Services. Notes Lighting vary system(s) brighter system CPU darker system GPU) Adjust lighting parameters .world file"},
{"url": "https://index.ros.org/p/aws_sdk_cpp_vendor", "package": "aws_sdk_cpp_vendor", "package_summary": "A vendor package for aws-sdk-cpp", "package_details": "aws_sdk_cpp_vendor vendor package AWS SDK Usage package.xml <depend>aws_sdk_cpp_vendor<depend> CMakeLists.txt find_package(aws_sdk_cpp_vendor REQUIRED) find_package(AWSSDK REQUIRED COMPONENTS core) target_link_libraries(your_target aws-cpp-sdk-core"},
{"url": "https://index.ros.org/p/bag2_to_image", "package": "bag2_to_image", "package_summary": "The bag2_to_image package", "package_details": "bag2_to_image convert sensor_msgs::msg::Image sensor_msgs::msg::CompressedImage rosbag2 .jpeg files. Usage mkdir workspace>/src workspace>/src git clone https://github.com/wep21/bag2_to_image.git rosdep install --from-paths src --ignore-src colcon build source install/setup.bash ros2 run bag2_to_image bag2_to_image_exe --ros-args uri:=<your rosbag2 file> image_topic:=<image_topic_name> image_save_directory:=<your directory save images>"},
{"url": "https://index.ros.org/p/bno055", "package": "bno055", "package_summary": "Bosch BNO055 IMU driver for ROS2", "package_details": "BNO05 ROS2 Package Description ROS2 driver sensor IMU Bosch BNO055. repo based Michael Drwiega\u2019s work Bosch IMU Driver ROS Wiring Guide Selecting Connection Type default mode select UART mode connect pin pin. USB-to-UART Bridge USB-to-UART Bridge: BNO055 Friend Vin GND GND SDA RXD SCL TXD **NOTE: pins refer FTDI pins USB connector ROS Node Parameters configure settings adjust node parameter file pass argument starting node: ros2 run bno055 bno055 --ros-args --params-file ./src/bno055/bno055/params/bno055_params.yaml UART Connection connection_type=uart: Defines UART sensor connection type; default=\u2019uart\u2019 uart_port: UART port default=\u2019/dev/ttyUSB0\u2019 uart_baudrate: baud rate default=115200 uart_timeout: timeout UART transmissions seconds default=0.1 Connection connection_type=i2c: Defines sensor connection type; default=\u2019uart\u2019 i2c_bus: integer bus number default=0 i2c_address: hexadecimal address default=0x28 Sensor Configuration frame_id: coordinate frame sensor default=\u2019bno055\u2019 baudrate: baudrate sensor default=115200 data_query_frequency: frequency read publish data sensor; default=100 calib_status_frequency: frequency read publish calibration status data sensor; default=0.1 placement_axis_remap: sensor placement configuration (Axis remapping) defines position orientation sensor mount. Bosch BNO055 datasheet section \u201cAxis Remap\u201d valid positions: (default), ROS Topic Prefix ros_topic_prefix: ROS topic prefix prepended default topic names Default=\u201dbno055/\u201d Calibration current calibration values requested calibration_request service puts imu CONFIGMODE short time): ros2 service call /bno055/calibration_request example_interfaces/srv/Trigger ROS Topics ROS topics published ROS2 Node: bno055/imu (sensor_msgs/Imu) bno055/imu_raw (sensor_msgs/Imu) bno055/temp (sensor_msgs/Temperature); sensor\u2019s ambient temperature bno055/mag (sensor_msgs/MagneticField) bno055/grav (geometry_msgs/Vector3) bno055/calib_status (std_msgs/String) Sensor Calibration Status JSON string {\"sys\": \"gyro\": \"accel\": \"mag\": bno055 default ROS topic prefix, configured directions Development Workspace Setup Remote Device Setup ROS2 workspace IDE remote device Raspberry Clone Build Create ROS2 workspace remote device instance ~/ros2_ws sourced ROS2 installation (underlay). File truncated lines full file"},
{"url": "https://index.ros.org/p/boost_geometry_util", "package": "boost_geometry_util", "package_summary": "Utility library for boost geometry", "package_details": "boost_geometry_util boost geometry friendly library ROS2. boost geometry ROS2 easily. bg::model::box<geometry_msgs::msg::Point> box( boost_geometry_util::point_3d::construct<geometry_msgs::msg::Point>(x_min, y_min, z_min), boost_geometry_util::point_3d::construct<geometry_msgs::msg::Point>(x_max, y_max, z_max)); const auto ros_point boost_geometry_util::point_3d::construct<geometry_msgs::msg::Point>(x_max, y_max, z_max); boost::geometry::disjoint(box, ros_point);"},
{"url": "https://index.ros.org/p/cartographer", "package": "cartographer", "package_summary": "Cartographer is a system that provides real-time simultaneous localization\n    and mapping (SLAM) in 2D and 3D across multiple platforms and sensor\n    configurations.", "package_details": "Cartographer Purpose Cartographer system real-time simultaneous localization mapping (SLAM) multiple platforms sensor configurations. started Learn Cartographer Read Docs site. question creating issue. Contributing find information contributing Cartographer Contribution page. Open house slide archive regular open-for-all meetings discuss progress plans Cartographer. Slides Cartographer Open House meetings listed March Slides February Slides January Slides November Slides October Slides September Slides August Slides August Slides July Slides June Slides June Slides Slides Slides March Slides February Slides February Slides January Slides January Slides December Slides November Slides November Slides October Slides October Slides September Slides August Slides July Slides July Slides June Slides June Slides"},
{"url": "https://index.ros.org/p/catch_ros2", "package": "catch_ros2", "package_summary": "Catch2 testing framework for ROS 2 unit and integration tests.", "package_details": "catch_ros2 lightweight wrapper Catch2 testing framework ROS unit testing ROS related functionality integration tests test functionality nodes Installation install Debian packages catch_ros2 simply run command (assuming environment properly set installing Debian packages): apt install ros-${ROS_DISTRO}-catch-ros2 Debian packages Humble, Iron, Jazzy, Kilted, Rolling ROS distributions. build package source, clone src directory workspace root directory colcon build, ROS package. Usage examples section guides usage. README overview, details links source code. basic ways framework: Integration testing Unit testing customize control. Integration Testing Integration testing important ensure elements system work desired. ROS, generally test nodes behave correctly, difficult typical unit testing. ROS framework writing integration tests Python sufficient users. GTest test code integration test. knowledge, easy create integration tests Catch2 simple powerful testing framework. primary motivation package provide framework Components launch integration test framework components: Node(s) test Testing node Launch file CMake setup Node(s) test nodes package functionality you\u2019d test. special nodes test framework. integration_aux_node node test. Testing node node specifically written Catch2 test cases assertions test functionality nodes. integration_test_node testing node. linked catch_ros2::catch_ros2_with_node_main CMake setup) require main function run ROS node (ros2 run ${package_name} ${executable_name}). Tests executed manually running node nodes). precise functionality default node main package desired, selecting main function. Launch file automate integration test, Python launch file launch nodes test, including test node. integration test run manually simply launching launch file. launch file ROS Python launch file, launch_catch_ros2 Python module classes: Catch2LaunchDescription wrapper typical launch.LaunchDescription includes \u201cresult_file\u201d argument results test output. Catch2IntegrationTestNode wrapper typical launch_ros.actions.Node passes \u201cresult_file\u201d argument Catch2 default catch_ros2 node main function) shuts nodes exit. launch testing node. integration test. XML YAML launch files links examples launch file implemented formats. Integration CMake setup CMake required integration test pretty standard ROS package ROS boilerplate CMake shown Nodes built/installed launch file installed package\u2019s share directory. items note: target_link_libraries(integration_test_node catch_ros2::catch_ros2_with_node_main links integration test node version catch_ros2 includes default main running test nodes. version catch_ros2 library linked target, depending default main. selecting main function. catch_ros2_add_integration_test(ExampleIntegration_Test LAUNCH_FILE example_integration_test.launch.py custom CMake function test run automatically colcon test run. documentation function. Unit Testing Unit testing good ensure specific elements package work important ensure functionality preserved ever-evolving codebase. package unit testing Catch2. Catch2 unit testing ROS components straightforward, catch_ros2. package utilities newer version Catch2 Ubuntu Components components needed create unit test framework: Test source file CMake setup Test source file source file unit tests written Catch2 unit test. Unit CMake setup CMake setup unit testing pretty standard adding Catch2 test. note linking source file catch_ros2::catch_ros2_with_main, access catch_ros2 utilities Catch2\u2019s default main function. selecting main function. target_link_libraries(example_unit_test catch_ros2::catch_ros2_with_main Utilities catch_ros2 utility functions unit testing ROS Arguments utilities handling command line arguments. SimulateArgs pass string vector strings representing command line arguments create simulated argc argv values pass functions rclcpp::init(). examples. SplitROSArgs removes ROS arguments input argc argv, arguments won\u2019t problems functions Catch2 sessions). File truncated lines full file"},
{"url": "https://index.ros.org/p/classic_bags", "package": "classic_bags", "package_summary": "A ROS 2 interface in the style of ROS 1 for reading and writing bag files", "package_details": "classic_bags Simplified ROS interface style ROS reading writing bag files Reading Python ROS Code import rosbag bag rosbag.Bag('test.bag') topic, msg, bag.read_messages(topics=['chatter', 'numbers']): print(msg) bag.close() ROS Code import classic_bags bag classic_bags.Bag('test.bag') topic, msg, bag.read_messages(topics=['chatter', 'numbers']): print(msg) bag.close() Closing bag Writing Python ROS Code import rosbag std_msgs.msg import Int32, String bag rosbag.Bag('test.bag', 'w') String() s.data 'foo' Int32() i.data bag.write('chatter', bag.write('numbers', finally: bag.close() ROS Code import classic_bags std_msgs.msg import Int32, String bag classic_bags.Bag('test.bag', 'w') String() s.data 'foo' Int32() i.data bag.write('chatter', bag.write('numbers', finally: bag.close() Closing strictly Alternate ROS Code import classic_bags std_msgs.msg import String import rclpy.time import builtin_interfaces.msg classic_bags.Bag('test.bag', 'w') bag: String() s.data 'foo' argument write method timestamp Floats interpreted seconds epoch bag.write('chatter', Ints interpreted nanoseconds epoch bag.write('chatter', rclpy.time.Time pytime rclpy.time.Time(seconds=456606000, nanoseconds=700000000) bag.write('chatter', pytime) timestamp message msgtime builtin_interfaces.msg.Time() msgtime.sec msgtime.nanosec bag.write('chatter', msgtime) system time bag.write('chatter', File truncated lines full file"},
{"url": "https://index.ros.org/p/actionlib_msgs", "package": "actionlib_msgs", "package_summary": "A package containing some message definitions used in the implementation of ROS 1 actions.", "package_details": "package deprecated exists support bridging ROS action topics. ROS actions, action_msgs."},
{"url": "https://index.ros.org/p/diagnostic_msgs", "package": "diagnostic_msgs", "package_summary": "A package containing some diagnostics related message and service definitions.", "package_details": "diagnostic_msgs package messages services ROS node diagnostics. information ROS interfaces, docs.ros.org. Messages (.msg) DiagnosticArray: send diagnostic information state robot. DiagnosticStatus: Holds status individual component robot. KeyValue: Associates diagnostic values labels. Services (.srv) AddDiagnostics: part process loading analyzers runtime, standalone service. SelfTest: Call service perform diagnostic check. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/geometry_msgs", "package": "geometry_msgs", "package_summary": "A package containing some geometry related message definitions.", "package_details": "geometry_msgs package messages common geometric primitives points, vectors, poses. primitives designed provide common data type facilitate interoperability system. information ROS interfaces, docs.ros.org. Messages (.msg) Accel: Expresses acceleration free space broken linear angular parts. AccelStamped: accel reference coordinate frame timestamp. AccelWithCovariance: Acceleration free space uncertainty. AccelWithCovarianceStamped: estimated accel reference coordinate frame timestamp. Inertia: Expresses inertial properties link. InertiaStamped: Inertia reference coordinate frame timestamp. Point32: position 3-dimensional point free space, 32-bit fields. Point: position 3-dimensional point free space. PointStamped: Point reference coordinate frame timestamp. Polygon: specification polygon points assumed connected. PolygonInstance: specification polygon points assumed connected. identification field disambiguation multiple instances. PolygonInstanceStamped: Polygon reference coordinate frame timestamp. identification field disambiguation multiple instances. PolygonStamped: Polygon reference coordinate frame timestamp. Pose2D: Deprecated Foxy potentially removed release. PoseArray: array poses header global reference. Pose: representation pose free space, composed position orientation. PoseStamped: Pose reference coordinate frame timestamp. PoseWithCovariance: pose free space uncertainty. PoseWithCovarianceStamped: estimated pose reference coordinate frame timestamp. Quaternion: orientation free space quaternion form. QuaternionStamped: orientation reference coordinate frame timestamp. Transform: transform coordinate frames free space. TransformStamped: transform coordinate frame header.frame_id coordinate frame child_frame_id. Twist: Velocity 3-dimensional free space broken linear angular parts. TwistStamped: twist reference coordinate frame timestamp. TwistWithCovariance: Velocity 3-dimensional free space uncertainty. TwistWithCovarianceStamped: estimated twist reference coordinate frame timestamp. Vector3: Represents vector 3-dimensional free space. Vector3Stamped: Represents Vector3 reference coordinate frame timestamp. Wrench: Represents force free space, separated linear angular parts. WrenchStamped: wrench reference coordinate frame timestamp. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/nav_msgs", "package": "nav_msgs", "package_summary": "A package containing some navigation related message and service definitions.", "package_details": "nav_msgs package messages services robotic navigation. information navigation2 stack ROS https://ros-planning.github.io/navigation2/. information ROS interfaces, docs.ros.org. Messages (.msg) GridCells: array cells grid. MapMetaData: Basic information characteristics OccupancyGrid. OccupancyGrid: Represents grid map, cell represents probability occupancy. Odometry: represents estimate position velocity free space. Path: array poses represents Path robot follow. Services (.srv) GetMap: map nav_msgs/OccupancyGrid. GetPlan: plan current position goal Pose. SetMap: Set map initial pose. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/sensor_msgs", "package": "sensor_msgs", "package_summary": "A package containing some sensor data related message and service definitions.", "package_details": "sensor_msgs package messages services relating sensor devices. messages ported ROS lot still-relevant documentation ROS sensor_msgs wiki. information ROS interfaces, docs.ros.org. sensor_msgs API package common functionality relating manipulating couple sensor_msgs messages. fill_image.hpp: Fill Image message type-erased data pointer. image_encodings.hpp: Definitions functionality relating image encodings. point_cloud_conversion.hpp: Functionality converting deprecated PointCloud PointCloud2 messages. point_cloud2_iterator.hpp: Tools modifying parsing PointCloud2 messages. point_field_conversion.hpp: type enum mapping PointField types, methods read write PointCloud2 buffer PointField types. Messages (.msg) BatteryState: Describes power state battery. CameraInfo: Meta information camera. ChannelFloat32: Holds optional data point PointCloud message. CompressedImage: compressed image. FluidPressure: Single pressure reading fluids (air, water, atmospheric barometric pressures. Illuminance: Single photometric illuminance measurement. Image: uncompressed image. Imu: Holds data IMU (Inertial Measurement Unit). JointState: Holds data describe state set torque controlled joints. JoyFeedbackArray: array JoyFeedback messages. JoyFeedback: Describes user feedback joystick, LED, rumble pad, buzzer. Joy: Reports state joystick\u2019s axes buttons. LaserEcho: submessage MultiEchoLaserScan intended separately. LaserScan: Single scan planar laser range-finder. MagneticField: Measurement Magnetic Field vector specific location. MultiDOFJointState: Representation state joints multiple degrees freedom, structure JointState. MultiEchoLaserScan: Single scan multi-echo planar laser range-finder. NavSatFix: Navigation Satellite fix Global Navigation Satellite System. NavSatStatus: Navigation Satellite fix status Global Navigation Satellite System. PointCloud2: Holds collection N-dimensional points, additional information normals, intensity, PointCloud: MESSAGE DEPRECATED FOXY, PointCloud2 PointField: Holds description point entry PointCloud2 message format. Range: Single range reading active ranger emits energy reports range reading valid arc distance measured. RegionOfInterest: region interest image. RelativeHumidity: single reading relative humidity sensor. Temperature: single temperature reading. TimeReference: Measurement external time source actively synchronized system clock. Services (.srv) SetCameraInfo: Request camera stores CameraInfo camera\u2019s calibration information. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/shape_msgs", "package": "shape_msgs", "package_summary": "A package containing some message definitions which describe geometric shapes.", "package_details": "shape_msgs package messages services describing 3-dimensional shapes. information ROS interfaces, docs.ros.org. Messages (.msg) Mesh: Holds information describing mesh visualization collision detections. MeshTriangle: single triangle mesh. Plane: Representation plane, plane equation SolidPrimitive: Describe simple shape primitive box, sphere, cylinder, cone. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/std_msgs", "package": "std_msgs", "package_summary": "A package containing some standard message definitions.", "package_details": "std_msgs std_msgs basic message types. messages intended incorporation higher-level messages. primitive primitive array types generally relied long-term information ROS interfaces, docs.ros.org. Messages (.msg) ColorRGBA: single RGBA representing colors. Empty: hold information, sending message provide sufficient information. Header: Standard metadata higher-level stamped data types communicate timestamped data coordinate frame. Primitive Types std_msgs wrappers ROS primitive types, documented msg specification. Empty type, sending empty signal. types convey semantic meaning contents: message simply field called \u201cdata\u201d. messages package quick prototyping, intended \u201clong-term\u201d usage. ease documentation collaboration, recommend existing messages messages created, provide meaningful field name(s). Bool Byte Char Float32 Float64 Int8 Int16 Int32 Int64 String UInt8 UInt16 UInt32 UInt64 Array Types std_msgs \u201cMultiArray\u201d types, storing sensor data. caveat applies: sense making code easier understand, developers create non-generic message types discussion thread detail). ByteMultiArray Float32MultiArray Float64MultiArray Int8MultiArray Int16MultiArray Int32MultiArray Int64MultiArray MultiArrayDimension MultiArrayLayout UInt16MultiArray UInt32MultiArray UInt64MultiArray UInt8MultiArray Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/std_srvs", "package": "std_srvs", "package_summary": "A package containing some standard service definitions.", "package_details": "std_srvs package service definitions standard simple ROS services. information ROS interfaces, docs.ros.org. Services (.srv) Empty.srv: service empty request response. SetBool.srv: Service set boolean state true false, enabling disabling hardware Trigger.srv: Service empty request header triggering activation start service. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/stereo_msgs", "package": "stereo_msgs", "package_summary": "A package containing some stereo camera related message definitions.", "package_details": "stereo_msgs package message describing disparity image. information ROS interfaces, docs.ros.org. Messages (.msg) DisparityImage: floating point disparity image metadata. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/trajectory_msgs", "package": "trajectory_msgs", "package_summary": "A package containing some robot trajectory message definitions.", "package_details": "trajectory_msgs package messages defining robotic joint trajectories. information ROS interfaces, docs.ros.org. Messages (.msg) JointTrajectory: coordinated sequence joint configurations reached prescribed time points. JointTrajectoryPoint: single configuration multiple joints JointTrajectory. MultiDOFJointTrajectory: representation multi-dof joint trajectory point transformation). MultiDOFJointTrajectoryPoint: single configuration multiple joints MultiDOFJointTrajectory. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/visualization_msgs", "package": "visualization_msgs", "package_summary": "A package containing some visualization and interaction related message definitions.", "package_details": "visualization_msgs package messages visualizing information ROS GUI programs, RViz. messages ported ROS visualization_msgs wiki good place information messages information ROS interfaces, docs.ros.org. Messages (.msg) ImageMarker: marker overlay displayed images. InteractiveMarker: user interaction marker manipulating objects 3-dimensional space GUI programs, RViz. InteractiveMarkerControl: Represents control displayed interactive marker. InteractiveMarkerFeedback: Feedback message GUI, status interactive marker modified user. InteractiveMarkerInit: sending initial interactive marker descriptions. InteractiveMarkerPose: pose interactive marker. InteractiveMarkerUpdate: top-level message sending data interactive marker server client rviz). Marker: non-interactive marker displaying annotations 3-dimensional space. MarkerArray: array markers. MenuEntry: describe menu/submenu/subsubmenu/etc tree. Services (.srv) GetInteractiveMarkers.srv: interactive markers. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/console_bridge_vendor", "package": "console_bridge_vendor", "package_summary": "Wrapper around console_bridge, providing nothing but a dependency on console_bridge, on some systems.\n    On others, it provides an ExternalProject build of console_bridge.", "package_details": "console_bridge_vendor CMake shim console_bridge library: https://github.com/ros/console_bridge.git Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/cudnn_cmake_module", "package": "cudnn_cmake_module", "package_summary": "Exports a CMake module to find cuDNN.", "package_details": "cudnn_cmake_module CMake module find cuDNN."},
{"url": "https://index.ros.org/p/cyclonedds", "package": "cyclonedds", "package_summary": "Eclipse Cyclone DDS is a very performant and robust open-source DDS implementation. Cyclone DDS is developed completely in the open as an Eclipse IoT project.", "package_details": "Eclipse Cyclone DDS Eclipse Cyclone DDS performant robust open-source implementation OMG DDS specification. Cyclone DDS developed completely open Eclipse IoT project eclipse-cyclone-dds) growing list adopters you\u2019re add logo). tier-1 middleware Robot Operating System ROS DDS? Started Performance Configuration DDS? DDS best-kept secret distributed systems, longer publish-subscribe messaging systems outclasses DDS wide variety systems, including air-traffic control, jet engine testing, railway control, medical systems, naval command-and-control, smart greenhouses short, well-established aerospace defense longer limited easy Types defined IDL preprocessed IDL compiler included Cyclone, Python binding define data types fly: dataclasses import dataclass cyclonedds.domain import DomainParticipant cyclonedds.core import Qos, Policy cyclonedds.pub import DataWriter cyclonedds.sub import DataReader cyclonedds.topic import Topic cyclonedds.idl import IdlStruct cyclonedds.idl.annotations import key time import sleep import numpy names import get_full_name get_full_name() import f\"{os.getpid()}\" require IDL, Python @dataclass class Chatter(IdlStruct, typename=\"Chatter\"): str key(\"name\") message: str count: int rng np.random.default_rng() DomainParticipant() Topic(dp, Chatter, qos=Qos(Policy.Reliability.Reliable(0))) DataWriter(dp, DataReader(dp, count True: sample Chatter(name=name, message=\"Hello, World!\", count=count) count count print(\"Writing sample) dw.write(sample) sample dr.take(10): print(\"Read sample) sleep(rng.exponential()) Today DDS popular robotics autonomous vehicles depend high-throughput, low-latency control systems introducing single point failure message broker middle. default middleware choice ROS transfer commands, sensor data video point clouds components. OMG DDS specifications cover build systems publish-subscribe messaging. define structural type system automatic endianness conversion type checking readers writers. type system supports type evolution. interoperable networking protocol standard API easy build systems integrate multiple DDS implementations. Zero-configuration discovery included standard supported implementations. DDS brings publish-subscribe messaging nice abstraction \u201cordinary\u201d networking, plain publish-subscribe doesn\u2019t affect thinks systems. powerful architecture perspective distributed systems \u201cshared data space\u201d, idea, distributed database. shared data space designs failed miserably real-time control systems strong consistency guarantees sacrificed performance flexibility. eventually consistent shared data space DDS successful helping building systems satisfy \u201cilities\u201d: dependability, maintainability, extensibility, upgradeability, Truth told, invented, publish-subscribe messaging simply implementation technique. Cyclone DDS aims full coverage specs today covers references individual OMG specifications, DCPS base specification configuration discovery multicast works) publish/subscribe messaging configurable storage data subscribers QoS settings liveliness monitoring, deadlines, historical data, coverage includes Minimum, Ownership (partially) Content profiles DDS Security providing authentication, access control encryption DDS API DDS XTypes structural type system caveats DDSI-RTPS interoperable network protocol File truncated lines full file"},
{"url": "https://index.ros.org/p/composition", "package": "composition", "package_summary": "Examples for composing multiple nodes in a single process.", "package_details": "demo examples ways rclcpp_components API compose multiple nodes single process. ROS package consists demo applications: dlopen_composition linktime_composition manual_composition Build Run commands build ROS package: colcon build --packages-up-to composition Run Manual Composition Running manual_composition compiles executable runs components: Talker: ROS component publishes string Listener: ROS component prints received string Talker Server: ROS component adds integers outputs result Client Client: ROS component sends integers Server prints received result Server ros2 run composition manual_composition DlOpen Composition runs dlopen_composition alternative run-time composition creating generic container process explicitly passing libraries load ROS interfaces. process open library create instance \u201crclcpp::Node\u201d class library. ros2 run composition dlopen_composition `ros2 pkg prefix composition`/lib/libtalker_component.so `ros2 pkg prefix composition`/lib/liblistener_component.so Linktime Composition supported Windows) Similar previous, runs linktime_composition links classes libraries registered library_path linker. ros2 run composition linktime_composition Composition Launch Actions command line tool run composition, automate action ros2 launch functionality: ros2 launch composition composition_demo.launch.py Verify Manual Composition executed correctly, strings printed terminal similar shown [INFO] [talker]: Publishing: 'Hello World: [INFO] [listener]: heard: World: [INFO] [talker]: Publishing: 'Hello World: [INFO] [listener]: heard: World: [INFO] [Server]: Incoming request: [INFO] [Client]: result: [INFO] [talker]: Publishing: 'Hello World: [INFO] [listener]: heard: World: [INFO] [talker]: Publishing: 'Hello World: [INFO] [listener]: heard: World: [INFO] [Server]: Incoming request: [INFO] [Client]: result: [INFO] [talker]: Publishing: 'Hello World: [INFO] [listener]: heard: World: [INFO] [talker]: Publishing: 'Hello World: [INFO] [listener]: heard: World: [INFO] [Server]: Incoming request: [INFO] [Client]: result: :warning: Note manually-composed components reflected ros2 component list command line tool output. DlOpen Composition executed correctly, strings printed terminal similar shown ```bash INFO] [dlopen_composition]: Load library /opt/ros/humble/lib/libtalker_component.so [INFO] [dlopen_composition]: Instantiate class rclcpp_components::NodeFactoryTemplate<composition::Talker> [INFO] [dlopen_composition]: Load library /opt/ros/humble/lib/liblistener_component.so [INFO] [dlopen_composition]: Instantiate class rclcpp_components::NodeFactoryTemplate<composition::Listener> [INFO] [talker]: Publishing: World: File truncated lines full file"},
{"url": "https://index.ros.org/p/lifecycle", "package": "lifecycle", "package_summary": "Package containing demos for lifecycle implementation", "package_details": "Introduction ROS introduces concept managed nodes, called LifecycleNodes. tutorial, explain purpose nodes, regular nodes comply lifecycle management. Managed nodes state machine set predefined states. states changed invoking transition succeeding consecutive state. state machine implemented ROS design page. implementation differentiates Primary States Transition States. Primary States supposed steady states node respected task. hand, Transition States meant temporary intermediate states attached transition. result intermediate states transition primary states considered successful managed node states: Primary States (steady states): unconfigured inactive active shutdown Transition States (intermediate states): configuring activating deactivating cleaningup shuttingdown transitions invoke configure activate deactivate cleanup shutdown verbose explanation applied state machine, refer design page in-detail explanation state transition. demo happening demo split separate applications: lifecycle_talker lifecycle_listener lifecycle_service_client lifecycle_talker represents managed node publishes state node split tasks talker node separate pieces execute configuring: initialize publisher timer activate: activate publisher timer order enable publishing deactivate: stop publisher timer cleanup: destroy publisher timer demo shows typical talker/listener pair nodes. imagine real scenario attached hardware long booting phase, laser camera. imagine bringing device driver configuring state, start stop publishing device's data active/deactive state, cleanup/shutdown state shutdown device. lifecycle_listener simple listener shows characteristics lifecycle talker. talker enables message publishing active state listener receives messages talker active state. lifecycle_service_client script calling transitions lifecycle_talker. meant external user controlling lifecycle nodes. Run demo order run demo, open terminals source ROS environment variables binary distributions workspace compiled source. lifecycle_talker lifecycle_listener lifecycle_service_client ros2 run lifecycle lifecycle_talker ros2 run lifecycle lifecycle_listener ros2 run lifecycle lifecycle_service_client Alternatively, programs run terminal launch file: ros2 launch lifecycle lifecycle_demo.launch.py File truncated lines full file"},
{"url": "https://index.ros.org/p/lifecycle_py", "package": "lifecycle_py", "package_summary": "Package containing demos for rclpy lifecycle implementation", "package_details": "lifecycle/README.rst. follow instructions replace: ros2 run lifecycle lifecycle_talker ros2 run lifecycle_py lifecycle_talker lifecycle_listener lifecycle_service_client executables lifecycle package, demos ported python."},
{"url": "https://index.ros.org/p/pendulum_control", "package": "pendulum_control", "package_summary": "Demonstrates ROS 2's realtime capabilities with a simulated inverted pendulum.", "package_details": "Build instructions pendulum control demo default ROS install. Follow instructions build ROS source: https://docs.ros.org/en/rolling/Installation/Linux-Development-Setup.html Running demo install/setup.bash install/pendulum_control/bin/pendulum_demo command line arguments related real-time performance profiling rttest. https://github.com/ros2/rttest/blob/master/README.md information. Running real-time performance demo print performance statistics continuously program. final output: rttest statistics: Minor pagefaults: Major pagefaults: Latency (time deadline missed): Min: Max: Standard deviation: Ideally minor major pagefaults average latency nanosceonds millisecond update period). pagefaults, permission lock memory mlockall. adjust system limits memory locking. Add /etc/security/limits.conf: <user> memlock <limit limit unlimited. choose accompany ulimit unlimited editing file. saving file, log log high latency results, adjust maximum priority processes. Add /etc/security/limits.conf: <user> rtprio <maximum priority> range priority set limit processes interfere important system processes run top priority watchdog). demo attempt run control loop priority settings decent average performance don\u2019t RT_PREEMPT kernel installed, unacceptably large maximum latency periodic latency spikes. Dynamic allocation demo print console malloc called, debug symbols backtrace stack. search output demo, malloc called initialization phase program. consistent requirements real-time programming prevent non-determinstic blocking allocator). memory locking, pagefaults due reading memory allocated read cache."},
{"url": "https://index.ros.org/p/topic_monitor", "package": "topic_monitor", "package_summary": "Package containing tools for monitoring ROS 2 topics.", "package_details": "Visualizing effect QoS policies demo \u201ctopic monitor\u201d visualize statistics ROS topics publishing sequential data. Background read Quality Service Settings page background information Quality Service settings ROS Running demo visualize reception rate, \u201ctopic monitor\u201d periodically calculates reception rate topics publishers periodic, sequential data. Python3 matplotlib tkinter packages installed, --display option plot reception rate topics: ros2 run topic_monitor topic_monitor --display invocations follow ROS_DOMAIN_ID set respective machines. Comparing reliability QoS settings machines ROS mobile stationary. Run ros2 launch topic_monitor reliability_demo.launch.py executable stationary machine. start nodes: publishing \u201creliable\u201d mode, effort\u201d. Start monitor mobile machine laptop. ros2 run topic_monitor topic_monitor --display --allowed-latency account latency occur re-sending reliable messages. mobile machine range monitor, observe reception rates differ topics. \u201creliable\u201d topic reception rate effort\u201d topic reception rate fluctuates based strength connection. Here\u2019s plot: Comparison ROS behavior shown comparable difference TCPROS UDPROS. difference \u201creliable\u201d reliability ROS UDP range behavior TCP UDP. key difference UDPROS implemented ROS client library, option ROS nodes written Python. contrast, QoS settings ROS implemented core library language-specific client libraries meaning features implemented exposed language interfaces. ROS Client Libraries information. Comparing latency reliability QoS settings Repeat previous demo allowed latency topic monitor. step run ros2 run topic_monitor topic_monitor --display --allowed-latency effort\u201d reception rate unaffected, \u201creliable\u201d reception rate drops sooner machines range \u201creliable\u201d message re-sent multiple times order delivered. Comparing effect queue depth previous demo, \u201creliable\u201d data successfully network connection robust. calls publish faster data acknowledged subscriber, queue depth play. queue depth default) means messages publisher\u2019s buffer overwritten. latest message successfully acknowledged time message published, overwritten subscriber receive causing reception rate decline. machines ROS mobile stationary. Run ros2 launch topic_monitor depth_demo.launch.py executable stationary machine. start nodes publishing small (payload 1-character string) large data (payload 100,000-character string) depths: pair publishing depth pair larger depth Start monitor mobile machine laptop ros2 run topic_monitor topic_monitor --display. mobile machine range monitor, observe reception rates differ topics. reception rate publishers higher depth depth messages overwritten data longer acknowledged. Comparing effect data size maximum message size UDP underlying transport ROS messages fragmented smaller parts individually. Larger message requires multiple fragments fragments received, reception rate data declines. connections \u201creliable\u201d reliability policy, lost fragments re-sent. connections effort\u201d reliability, loss fragment message discarded subscriber. machines running ROS stationary mobile. Run ros2 launch topic_monitor fragmentation_demo.launch.py executable stationary machine. Run ros2 run topic_monitor topic_monitor --display --expected-period mobile machine. launch publishers publishing messages strings lengths: small medium large xlarge mobile machine range monitor, observe reception rates differ topics. difference reception rate small medium message sizes medium large message sizes. large message requires fragments send xlarge message fragments received, reception rate"},
{"url": "https://index.ros.org/p/topic_statistics_demo", "package": "topic_statistics_demo", "package_summary": "C++ demo application for topic statistics feature.", "package_details": "Topic Statistics Demo demo application package demonstrates Topic Statistics feature ROS application creates ROS nodes publish messages topics, subscribes statistics topic displays statistics data received. demo application package display_topic_statistics creates ROS nodes: Talker Listener nodes generate message traffic Statistics listener node display generated statistics application requires argument message_type type message chatter generate. values string imu. application accepts optional arguments configure Listener node\u2019s subscription: --publish-topic: Topic topic statistics published. Default topic /statistics. --publish-period: Publish period publication statistics. Default application starts, talker node publish messages topic listener node subscribed listener\u2019s subscription generate topic statistics receiving messages. Statistics published statistics topic pre-determined frequency. statistics listener node listens statistics prints user"},
{"url": "https://index.ros.org/p/domain_bridge", "package": "domain_bridge", "package_summary": "ROS 2 Domain Bridge", "package_details": "domain_bridge ROS domain bridge. Bridges ROS communication ROS domain IDs. design document details bridge works. Prerequisites ROS (Galactic newer) Installation Ubuntu Replace $ROS_DISTRO ROS codename galactic): sudo apt install ros-$ROS_DISTRO-domain-bridge source Prerequisites: Git colcon (colcon_cmake) mkdir domain_bridge_ws/src domain_bridge_ws git clone https://github.com/ros2/domain_bridge.git src/ colcon build Usage CLI standalone executable configured YAML file. provide path YAML configuration file argument executable. ros2 run domain_bridge domain_bridge examples/example_bridge_config.yaml options override domain IDs set entities YAML config, ros2 run domain_bridge domain_bridge examples/example_bridge_config.yaml option usage information: ros2 run domain_bridge domain_bridge load composable nodes domain bridge intra-process communication. extra argument domain_id set domain loaded component: ros2 component load /ComponentManager composition composition::Talker domain_id:=1 ros2 component load /ComponentManager composition composition::Listener domain_id:=2 Launch launch script, takes required launch argument config: ros2 launch domain_bridge domain_bridge.launch.xml config:=examples/example_bridge_config.yaml override domain IDs optional launch arguments from_domain to_domain. reverse domain IDs topic, set reversed argument true. enable bidirectional bridging topic, set bidirectional argument true. including domain bridge launch script <launch> <include file=\"$(find-pkg-share domain_bridge)/launch/domain_bridge.launch.xml\"> <arg name=\"config\" value=\"$(find-pkg-share domain_bridge)/examples/example_bridge_config.yaml\" Optionally override domain IDs <arg name=\"from_domain\" <arg name=\"to_domain\" </include> </launch> library API integrated process, find API docs"},
{"url": "https://index.ros.org/p/ecal", "package": "ecal", "package_summary": "eCAL - enhanced Communication Abstraction Layer. A fast publish-subscribe cross-plattform middleware using Shared Memory and UDP.", "package_details": "eCAL enhanced Communication Abstraction Layer enhanced Communication Abstraction Layer (eCAL) middleware enables scalable, high performance interprocess communication single computer node nodes computer network. eCAL publish subscribe server client pattern connect nodes network configuration required. eCAL automatically chooses data transport mechanism link, supports: Shared memory local communication (incredibly fast!) UDP TCP network communication Visit eCAL Documentation https://ecal.io information. Architecture Facts eCAL eCAL fast GB/s, depends payload size. Check measured performance eCAL publish-subscribe server-client patterns eCAL brokerless eCAL interface easy integration languages python, csharp rust) eCAL conjunction Matlab Simulink eCAL Simulink Toolbox simulation prototyping eCAL powerful tools recording, replay monitoring data flows decentralized eCAL simple zero-conf. complex configuration communication details QOS settings needed eCAL message protocol agnostic. choose message protocol fits Google Protobuf, CapnProto, Flatbuffers\u2026 eCAL standardized recording format HDF5 eCAL integrates gently ROS2 environment eCAL RMW eCAL supports Intel arm platforms eCAL runs wide variety operating systems: Windows (stable) Linux (stable) QNX (experimental) MacOS (experimental) FreeBSD (experimental) Installation provide binary installers Windows Ubuntu. installing configuring eCAL, refer documentation. Windows Download latest eCAL Installer follow Setup Wizard support 64bit Windows Ubuntu Install eCAL PPA: sudo add-apt-repository ppa:ecal/ecal-latest sudo apt-get update sudo apt-get install ecal PPA upgrade latest eCAL Release Rolling Release PPA). intend stay specific release, check PPAs Ubuntu CPU architectures amd64, armhf, arm64 supported time writing. Non-LTS versions Ubuntu supported, eCAL project exchange data simple. downloaded eCAL installed CMake, good Check World eCAL documentation details. cpp #include <ecal/ecal.h> #include <ecal/msg/string/publisher.h> #include int main(int argc, char** argv) Initialize eCAL. process World Publisher\u201d eCAL::Initialize(argc, argv, World Publisher\u201d); Create String Publisher publishes topic \u201chello_world_topic\u201d eCAL::string::CPublisher publisher(\u201chello_world_topic\u201d); Infinite loop (eCAL::Ok()) Publish World\u201d message publisher.Send(\u201cHello World\u201d); std::this_thread::sleep_for(std::chrono::milliseconds(500)); finalize eCAL API eCAL::Finalize(); File truncated lines full file"},
{"url": "https://index.ros.org/p/eigen3_cmake_module", "package": "eigen3_cmake_module", "package_summary": "Exports a custom CMake module to find Eigen3.", "package_details": "eigen3_cmake_module Ubuntu Bionic, Eigen3 CMake package offers exported targets non-standard CMake variables. problem packages ament_cmake. Targets ament_target_dependencies(my_target Eigen3) fail find Eigen3 headers compile time. Downstream packages fail find Eigen3 headers compile time, package ament_export_dependencies(Eigen3). package adds CMake find module Eigen3 sets standard CMake variables. ROS packages Eigen3 package avoid problems. package Edit CMakeLists.txt CMakeLists.txt, call find_package() package REQUIRED. find Eigen3 REQUIRED package. find_package(eigen3_cmake_module REQUIRED) find_package(Eigen3) ament_cmake package ament_cmake, ament_target_dependencies() give library executable targets access Eigen3 headers. add_library(my_thing add_executable(my_thing ament_target_dependencies(my_thing Eigen3) Eigen3 appears headers installed package, downstream packages Eigen3 headers Call ament_export_dependencies() package, Eigen3. ament_export_dependencies(eigen3_cmake_module) ament_export_dependencies(Eigen3) ament_cmake package ament_cmake, target_include_directories() give targets access Eigen3 headers. target_include_directories(my_target PUBLIC \"${Eigen3_INCLUDE_DIRS}\") Eigen3 headers installed package, <project>-config.cmake find package Eigen3. Eigen3 headers added package\u2019s include variable. find_package(eigen3_cmake_module) eigen3_cmake_module_FOUND) set(your_package_name_FOUND return() endif() find_package(Eigen3) Eigen3_FOUND) set(your_package_name_FOUND return() endif() list(APPEND your_package_name_INCLUDE_DIRS ${Eigen3_INCLUDE_DIRS}) Edit package.xml Add buildtool dependency package, build dependency Eigen3 package.xml. <buildtool_depend>eigen3_cmake_module</buildtool_depend> <build_depend>eigen</build_depend> package Eigen3 public headers, add tags downstream packages depend package Eigen3. <buildtool_export_depend>eigen3_cmake_module</buildtool_export_depend> <build_export_depend>eigen</build_export_depend> <exec_depend> Eigen3 header library."},
{"url": "https://index.ros.org/p/event_camera_codecs", "package": "event_camera_codecs", "package_summary": "package to encode and decode event_camera_msgs", "package_details": "event_camera_codecs repository holds code decoding event_camera_msgs. builds ROS1 ROS2. decoder python event_camera_py repository. Supported platforms tested ROS1: Ubuntu Noetic ROS2: Ubuntu Humble, Iron, Rolling build Set shell variables: repo=event_camera_codecs url=https://github.com/ros-event-camera/${repo}.git follow instructions configure build ROS1: catkin config -DCMAKE_BUILD_TYPE=RelWithDebInfo (optionally add -DCMAKE_EXPORT_COMPILE_COMMANDS=1) catkin build configure build ROS2: colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo (optionally add -DCMAKE_EXPORT_COMPILE_COMMANDS=1) build unit tests, add cmake argument -DEVENT_CAMERA_CODECS_BUILD_TESTS=ON. API ```cpp #include <event_camera_codecs/decoder.h> #include <event_camera_codecs/decoder_factory.h> event_camera_codecs::EventPacket; class MyProcessor public event_camera_codecs::EventProcessor public: inline void eventCD(uint64_t, uint16_t uint16_t uint8_t polarity) override stuff void eventExtTrigger(uint64_t, uint8_t, uint8_t) override void finished() override{}; called events decoded packet void rawData(const char size_t) override{}; passthrough raw data MyProcessor processor; decoder factory method templated event processor permit inlining methods eventCD() event_camera_codecs::DecoderFactory<EventPacket, MyProcessor> decoderFactory; callbacks MyProcessor, feed message buffer decoder void eventMsg(const event_camera_codecs::EventPacketConstSharedPtr msg) create decoder call, returns existing auto decoder decoderFactory.getInstance(msg); (!decoder) msg->encoding invalid return; decode() trigger callbacks processor decoder->decode(msg, &processor); synchronize frame based sensors play frame boundary reached. interface decodeUntil() purpose. decode() decodeUntil() decoder! sample code belowframeTimes ordered queue frame times. void eventMsg2(const event_camera_codecs::EventPacketConstSharedPtr msg) auto decoder decoderFactory.getInstance(msg); uint64_t nextTime{0}; loop exit events msg processed frame times decoder->setTimeBase(msg->time_base); (!frameTimes.empty() decoder->decodeUntil(msg, &processor, frameTimes.front(), &nextTime)) loop case multiple frames fit inbetween events (!frameTimes.empty() frameTimes.front() nextTime) processFrameHere() frameTimes.pop(); File truncated lines full file"},
{"url": "https://index.ros.org/p/event_camera_msgs", "package": "event_camera_msgs", "package_summary": "messages for event based cameras", "package_details": "ROS package messages event based cameras package definitions ROS ROS2 messages created event based vision sensors. events compact binary format avoid slow serialization deserialization recording. Event camera messages visualized event_camera_renderer converted message formats event_camera_tools. encoding decoding messages event_camera_codecs. event_camera_py package module fast convenient loading events python. Messages EventPacket EventPacket message packet (array) events binary format. Description encodings: evt3: raw Metavision evt3 data SDK. details encoding scheme refer Prophesee Metavision documents. time_base field content undefined. Recovery sensor time requires decoding data packets. time stamps documentation event_camera_codecs. libcaer_cmp: compressed libcaer format. compression similar evt3 time_base field recover absolute sensor time. decompression understood source code libcaer: uncompressed messages format libcaer presents upper layers. encoding takes 64bits event similar mono encoding message format generally inferior libcaer_cmp. mono: (deprecated) event messages Prophesee cameras. Encodes bit boundaries bits interpretation polarity: event event bits) bits) bits) recover original sensor time, add delta message time_base field. time_base nanoseconds. recover estimate ROS sensor time stamp add ROS header stamp. trigger (deprecated): external trigger messages Prophesee Metavision cameras. bits interpretation polarity: event event unused bits) bits) recover original sensor time add delta message time_base field nanoseconds). recover estimate ROS sensor time stamp add header stamp. License package released Apache-2 license."},
{"url": "https://index.ros.org/p/event_camera_py", "package": "event_camera_py", "package_summary": "Python access for event_camera_msgs.", "package_details": "Processing ROS event camera data python repository holds ROS/ROS2 tools processing event_camera_msgs ROS ROS2 python. messages produced metavision_driver libcaer_driver. decoding, event_camera_codecs package internally. repository quickly load events ROS/ROS2 bag python code. decoder return structured numpy array format Metavision SDK dtype={'names':['x','y','p','t'], 'formats':['<u2','<u2','i1','<i4'], 'offsets':[0,2,4,8], 'itemsize':12})] access timestamps microseconds) foo['t'], foo numpy array returned decoder. sample code Supported platforms Continuous integration tested Ubuntu ROS2 distros: package released ROS1, integration tested Ubuntu ROS Noetic. install packages ROS2 install package sudo apt-get install ros-${ROS_DISTRO}-event-camera-py build source Set shell variables: repo=event_camera_py url=https://github.com/ros-event-camera/${repo}.git follow instructions Decoding event array messages sample decoder ROS2. BagReader helper class find src folder. bag_reader_ros2 import BagReader event_camera_py import Decoder topic '/event_camera/events' bag BagReader('foo', topic) decoder Decoder() bag.has_next(): topic, msg, t_rec bag.read_next() decoder.decode(msg) cd_events decoder.get_cd_events() print(cd_events) trig_events decoder.get_ext_trig_events() print(trig_events) sample code shows decode event array messages ROS1. import rosbag event_camera_py import Decoder topic '/event_camera/events' bag rosbag.Bag('foo.bag') decoder Decoder() topic, msg, bag.read_messages(topics=topic): decoder.decode_bytes(msg.encoding, msg.width, msg.height, msg.time_base, msg.events) cd_events decoder.get_cd_events() print(cd_events) trig_events decoder.get_ext_trig_events() print(trig_events) returned event arrays structured numpy ndarrays compatible Prophesee\u2019s Metavision SDK. timestamps message recorded rosbag sources time information: recording timestamp. message written bag rosbag recorder. precise time stamps message time stamp header (header.stamp). time ROS driver host received event packet SDK ROS message. Remember ROS message multiple SDK packets, header.stamp refers SDK packet received. sensor time encoded packets. time stamp depends encoding. \u2018evt3\u2019 (metavision) encoding raw packet decoded obtain sensor time. encoded sensor time quirks: File truncated lines full file"},
{"url": "https://index.ros.org/p/event_camera_renderer", "package": "event_camera_renderer", "package_summary": "package for rendering event_camera_msgs", "package_details": "event_camera_renderer repository holds tools rendering event_camera_msgs. builds ROS1 ROS2. Supported platforms tested Ubuntu (ROS Noetic ROS2 Galactic) Ubuntu (ROS2 Humble). build Set shell variables: repo=event_camera_renderer url=https://github.com/ros-event-camera/${repo}.git follow instructions Examine launch file adjust topic remapping, frequency start (assuming camera driver running node event_camera): ROS1: create rendered ROS image stream events roslaunch event_camera_renderer renderer.launch camera:=event_camera rqt_image_view ROS2: create rendered ROS image stream events ros2 launch event_camera_renderer renderer.launch.py camera:=event_camera ros2 run rqt_image_view rqt_image_view Parameters: fps Frequency images emitted. Default: display_type Supported types time_slice events frames aggregated) sharp (number events auto-controlled produce sharp features). Default time_slice. image shows difference (left sharp, time_slice): License software issued Apache License Version"},
{"url": "https://index.ros.org/p/example_interfaces", "package": "example_interfaces", "package_summary": "Contains message and service definitions used by the examples.", "package_details": "ROS examples Tutorial examples: Writing simple service client Writing simple service client Python"},
{"url": "https://index.ros.org/p/launch_testing_examples", "package": "launch_testing_examples", "package_summary": "Examples of simple launch tests", "package_details": "Launch testing examples package simple cases launch launch_testing packages. designed beginners started packages understand concepts. Examples check_node_launch_test.py Usage: launch_test launch_testing_examples/check_node_launch_test.py situations nodes, launched, time start wait node start perform action. simulate launch.actions.TimerAction. shows detect node launched. delay launch seconds, wait node start timeout seconds. check_multiple_nodes_launch_test.py launch_test test/examples/check_multiple_nodes_launch_test.py test launches multiple nodes, checks launched successfully WaitForNodes utility. record_rosbag_launch_test.py launch_test test/examples/record_rosbag_launch_test.py test launches talker node, records topics rosbag messages recorded successfully, deletes bag file. check_msgs_launch_test.py Usage: launch_test launch_testing_examples/check_msgs_launch_test.py problem statement launch node check messages published topic. demonstrates talker node. Event object test message received chatter topic, timeout seconds. set_param_launch_test.py Usage: launch_test launch_testing_examples/set_param_launch_test.py demonstrates launch node, set parameter check successful. hello_world_launch_test.py Usage: launch_test launch_testing_examples/hello_world_launch_test.py test simple launch_testing. launches process asserts prints \u201chello_world\u201d stdout proc_output.assertWaitFor(). Finally, checks process exits exit code). @launch_testing.markers.keep_alive decorator ensures launch process stays alive long tests run."},
{"url": "https://index.ros.org/p/examples_rclcpp_minimal_action_client", "package": "examples_rclcpp_minimal_action_client", "package_summary": "Minimal action client examples", "package_details": "Minimal action client cookbook recipes package examples show create action clients."},
{"url": "https://index.ros.org/p/examples_rclcpp_minimal_action_server", "package": "examples_rclcpp_minimal_action_server", "package_summary": "Minimal action server examples", "package_details": "Minimal action server cookbook recipes package examples show create action servers."},
{"url": "https://index.ros.org/p/examples_rclcpp_cbg_executor", "package": "examples_rclcpp_cbg_executor", "package_summary": "Example for multiple Executor instances in one process, using the callback-group-level interface of the Executor class.", "package_details": "examples_rclcpp_cbg_executor examples_rclcpp_cbg_executor package demo test bench Callback-group-level Executor concept. concept developed integrated ROS mainline ROS Galactic add Executor leverages callback groups refining Executor API callback-group-level granularity. single node callbacks real-time requirements assigned Executor instances process. Executor instance dedicated specific callback groups Executor\u2019s thread threads) prioritized real-time requirements groups. critical callbacks handled Executor instance based thread running highest scheduler priority. Introduction demo demo comprises Ping Node Pong Node exchange messages communication paths simultaneously. high priority path formed topics high_ping high_pong priority path formed low_ping low_pong, Ping Node sends ping messages paths simultaneously configurable rate. Pong Node takes ping messages replies sending reply, burns configurable number CPU cycles varying processor load) simulate message processing. callbacks Ping Node timer sending ping messages subscription high_pong low_pong) handled callback group Executor instance. callbacks Pong Node process incoming ping messages answer pong message assigned callback groups. main function, groups distributed Executor instances threads. threads pinned CPU share processing power, scheduler priorities names high Running demo Ping Node Pong Node started process processes. note Linux demo requires sudo privileges able change thread priorities pthread_setschedparam(..). Running nodes process: sudo bash source /opt/ros/[ROS_DISTRO]/setup.bash ros2 run examples_rclcpp_cbg_executor ping_pong typical output note pongs received prio path: [INFO] [pong_node]: Running experiment seconds [INFO] [ping_node]: paths: configured pings, [INFO] [ping_node]: High prio path: Received pongs, pings. [INFO] [ping_node]: High prio path: Average RTT [INFO] [ping_node]: High prio path: Jitter RTT [INFO] [ping_node]: prio path: Received pongs, pings. [INFO] [pong_node]: High priority executor thread ran [INFO] [pong_node]: priority executor thread ran Note: Linux, Executor threads, scheduled SCHED_FIFO, consume CPU time due throttling. Running nodes separate processes: sudo bash source /opt/ros/[ROS_DISTRO]/setup.bash ros2 run examples_rclcpp_cbg_executor ping sudo bash source /opt/ros/[ROS_DISTRO]/setup.bash ros2 run examples_rclcpp_cbg_executor pong processes started simultaneously experiment runtime seconds. Parameters parameters configure experiment: ping_period period (double seconds) sending pings topics high_ping low_ping simultaneously Ping Node. high_busyloop duration (double seconds) burning CPU cycles receiving message high_ping Pong Node. low_busyloop duration (double seconds) burning CPU cycles receiving message low_ping Pong Node. default values seconds parameters. changing values command line: ros2 run examples_rclcpp_cbg_executor ping_pong --ros-args ping_period:=0.033 high_busyloop:=0.025 values, ping messages prio path processed answered pong message: [INFO] [ping_node]: paths: configured pings, [INFO] [ping_node]: High prio path: Received pongs, pings. [INFO] [ping_node]: High prio path: Average RTT [INFO] [ping_node]: High prio path: Jitter RTT [INFO] [ping_node]: prio path: Received pongs, pings. [INFO] [ping_node]: prio path: Average RTT [INFO] [ping_node]: prio path: Jitter RTT Implementation details Ping Node Pong Node implemented classes PingNode ping_node.hpp) PongNode pong_node.hpp), addition mentioned timer subscriptions, PingNode class function print_statistics() print statistics number received messages path average trip times. burn number CPU cycles, PongNode class function burn_cpu_cycles(duration) simulate processing time replying pong. Ping Pong nodes, executors, composed configured main(..) function main.cpp. function starts ends experiment duration seconds prints throughput trip time (RTT) statistics. demo runs Windows, threads prioritized normal normal, require elevated privileges. running demo Linux sudo privileges, warning shown execution stopped. issues macOS core pinning failed silently experiments. function configure_native_thread(..) utilities.hpp details."},
{"url": "https://index.ros.org/p/examples_rclcpp_minimal_service", "package": "examples_rclcpp_minimal_service", "package_summary": "A minimal service server which adds two numbers", "package_details": "Minimal \u201caddition_server\u201d cookbook recipes package examples show create services."},
{"url": "https://index.ros.org/p/examples_rclcpp_minimal_timer", "package": "examples_rclcpp_minimal_timer", "package_summary": "Examples of minimal nodes which have timers", "package_details": "Minimal timer examples package strategies creating short nodes timers. timer_lambda timer_member_function examples create subclasses rclcpp::Node set rclcpp::timer periodically call functions print console. language features."},
{"url": "https://index.ros.org/p/examples_rclcpp_minimal_publisher", "package": "examples_rclcpp_minimal_publisher", "package_summary": "Examples of minimal publisher nodes", "package_details": "Minimal publisher examples package strategies creating short nodes blast messages. talker_timer_lambda talker_timer_member_function recipes create subclasses rclcpp::Node set rclcpp::timer periodically call functions publish messages. talker_without_subclass recipe instantiates rclcpp::Node object subclassing works, compatible composition, longer recommended style ROS coding."},
{"url": "https://index.ros.org/p/examples_rclcpp_minimal_subscriber", "package": "examples_rclcpp_minimal_subscriber", "package_summary": "Examples of minimal subscribers", "package_details": "Minimal subscriber cookbook recipes package strategies creating nodes receive messages: lambda.cpp lambda function member_function.cpp member function callback not_composable.cpp global function callback Node subclass wait_set_subscriber.cpp rclcpp::WaitSet wait poll data static_wait_set_subscriber.cpp rclcpp::StaticWaitSet wait poll data time_triggered_wait_set_subscriber.cpp rclcpp::Waitset timer poll data periodically content_filtering.cpp content filtering feature Subscriptions Note not_composable.cpp instantiates rclcpp::Node subclassing typical usage model ROS style coding compatible composing multiple nodes single process. longer recommended style ROS nodes create node called minimal_subscriber subscribe topic named topic datatype std_msgs/String. message arrives topic, node prints screen. provide multiple examples coding styles achieve behavior order demonstrate ways ROS examples wait_set_subscriber.cpp, static_wait_set_subscriber.cpp time_triggered_wait_set_subscriber.cpp show subscription node rclcpp wait-set. common case ROS recommended strategy by-default. strategy sense specific situations, developer control callback order execution, create custom triggering conditions timeouts wait-sets. content_filtering.cpp shows content filtering feature Subscriptions."},
{"url": "https://index.ros.org/p/examples_rclcpp_wait_set", "package": "examples_rclcpp_wait_set", "package_summary": "Example of how to use the rclcpp::WaitSet directly.", "package_details": "Minimal rclcpp wait-set cookbook recipes package strategies creating nodes rclcpp::waitset wait handle ROS entities, subscribers, timers, clients, services, guard conditions waitables. wait_set.cpp: Simple showing default wait-set dynamic storage policy sequential thread-safe) synchronization policy. static_wait_set.cpp: Simple showing static wait-set static storage policy. thread_safe_wait_set.cpp: Simple showing thread-safe wait-set thread-safe synchronization policy. wait_set_topics_and_timer.cpp: Simple multiple subscriptions, publishers, timer. wait_set_random_order.cpp: showing user-defined data handling random publisher. executor_random_order.cpp run node logic SingleThreadedExecutor compare data handling order. wait_set_and_executor_composition.cpp: showing combine SingleThreadedExecutor wait-set. wait_set_topics_with_different_rate.cpp: showing custom trigger condition handle topics topic rates."},
{"url": "https://index.ros.org/p/examples_rclpy_minimal_client", "package": "examples_rclpy_minimal_client", "package_summary": "Examples of minimal service clients using rclpy.", "package_details": "Minimal service client cookbook recipes package strategies create service clients. client recipe shows request data service blocking call. client_async recipe shows request data service blocking call. user check response received main loop client_async_member_function recipe analog client_async sends request MinimalClient class"},
{"url": "https://index.ros.org/p/examples_rclpy_minimal_service", "package": "examples_rclpy_minimal_service", "package_summary": "Examples of minimal service servers using rclpy.", "package_details": "Minimal service server cookbook recipes package strategies create service servers. service recipe shows define service server analog ROS rospy service_member_function recipe creates MinimalService class processes incoming requests"},
{"url": "https://index.ros.org/p/examples_rclpy_minimal_publisher", "package": "examples_rclpy_minimal_publisher", "package_summary": "Examples of minimal publishers using rclpy.", "package_details": "Minimal \u201cpublisher\u201d cookbook recipes package strategies creating short nodes blast messages. publisher_old_school recipe creates talker node similar ROS rospy. publisher_local_function recipe shows leverage timers ROS trigger message publication. publisher_member_function recipe creates class MinimalPublisher sends messages periodically. publisher_member_function_with_wait_for_all_acked recipe creates class MinimalPublisher sends messages wait messages acknowledged."},
{"url": "https://index.ros.org/p/examples_rclpy_minimal_subscriber", "package": "examples_rclpy_minimal_subscriber", "package_summary": "Examples of minimal subscribers using rclpy.", "package_details": "Minimal \u201csubscriber\u201d cookbook recipes package strategies creating short nodes display received messages. subscriber_old_school recipe creates listener node similar ROS rospy. subscriber_lambda recipe shows embed callback functions main. subscriber_member_function recipe creates class MinimalSubscriber callback, keeping main simple."},
{"url": "https://index.ros.org/p/fast_gicp", "package": "fast_gicp", "package_summary": "A collection of fast point cloud registration implementations", "package_details": "Note: faster library released released small_gicp fast fast_gicp minimum dependencies clean interfaces. fast_gicp package collection GICP-based fast point cloud registration algorithms. constains multi-threaded GICP multi-thread GPU implementations voxelized GICP (VGICP) algorithm. implemented algorithms PCL registration interface inplace replacement GICP PCL. FastGICP: multi-threaded GICP algorithm (~40FPS) FastGICPSingleThread: GICP algorithm optimized single-threading (~15FPS) FastVGICP: multi-threaded voxelized GICP algorithm (~70FPS) FastVGICPCuda: CUDA-accelerated voxelized GICP algorithm (~120FPS) NDTCuda: CUDA-accelerated NDT algorithm (~500FPS) melodic noetic Installation Dependencies PCL Eigen OpenMP CUDA (optional) Sophus nvbio tested package Ubuntu CUDA macOS brew, set depenencies cmake \"-DCMAKE_PREFIX_PATH=$(brew --prefix libomp)[;other-custom-prefixes]\" -DQt5_DIR=$(brew --prefix qt@5)lib/cmake/Qt5 CUDA enable CUDA-powered implementations, set cmake option ROS ```bash ~/catkin_ws/src git clone https://github.com/SMRT-AIST/fast_gicp --recursive catkin_make -DCMAKE_BUILD_TYPE=Release enable cuda-based implementations catkin_make -DCMAKE_BUILD_TYPE=Release -DBUILD_VGICP_CUDA=ON Non-ROS git clone https://github.com/SMRT-AIST/fast_gicp --recursive mkdir fast_gicp/build fast_gicp/build cmake -DCMAKE_BUILD_TYPE=Release enable cuda-based implementations cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_VGICP_CUDA=ON Python bindings fast_gicp python3 setup.py install --user Note: catkin-enabled environment installation doesn\u2019t work comment find_package(catkin) CMakeLists.txt run installation command ```python import pygicp target numpy array source numpy array function interface matrix pygicp.align_points(target, source) optional arguments initial_guess Initial guess relative pose matrix) method GICP, VGICP, VGICP_CUDA, NDT_CUDA downsample_resolution Downsampling resolution positive) k_correspondences Number points covariance estimation max_correspondence_distance Maximum distance point search voxel_resolution Resolution voxel-based algorithms neighbor_search_method DIRECT1, DIRECT7, DIRECT27, DIRECT_RADIUS neighbor_search_radius Neighbor voxel search radius GPU-based methods) num_threads Number threads class interface downsample input clouds registration target pygicp.downsample(target, source pygicp.downsample(source, pygicp.FastGICP interfaces version gicp pygicp.FastGICP() gicp.set_input_target(target) gicp.set_input_source(source) matrix gicp.align() optional File truncated lines full file"},
{"url": "https://index.ros.org/p/fastrtps", "package": "fastrtps", "package_summary": "*eprosima Fast DDS* (formerly Fast RTPS) is a C++ implementation of the DDS (Data Distribution Service) standard of the OMG (Object Management Group). eProsima Fast DDS implements the RTPS (Real Time Publish Subscribe) protocol, which provides publisher-subscriber communications over unreliable transports such as UDP, as defined and maintained by the Object Management Group (OMG) consortium. RTPS is also the wire interoperability protocol defined for the Data Distribution Service (DDS) standard. *eProsima Fast DDS* expose an API to access directly the RTPS protocol, giving the user full access to the protocol internals.", "package_details": "eProsima Fast DDS Download Docs News Twitter Contact eprosima Fast DDS implementation DDS (Data Distribution Service) standard OMG (Object Management Group). eProsima Fast DDS implements RTPS (Real Time Publish Subscribe) protocol, publisher-subscriber communications unreliable transports UDP, defined maintained Object Management Group (OMG) consortium. RTPS wire interoperability protocol defined Data Distribution Service (DDS) standard. eProsima Fast DDS expose API access RTPS protocol, giving user full access protocol internals. main features library Configurable best-effort reliable publish-subscribe communication policies real-time applications. Plug play connectivity applications automatically discovered members network. Modularity scalability continuous growth complex simple devices network. Configurable network behavior interchangeable transport layer: Choose protocol system input/output channel combination deployment. API Layers: high-level Publisher-Subscriber focused usability (DDS) lower-level Writer-Reader finer access workings RTPS protocol. eProsima Fast DDS adopted multiple organizations sectors including important cases: Robotics: ROS (Robotic Operating System) default middleware ROS long term (LTS) releases non-LTS releases. FIWARE Incubated project part FIWARE. information check FIWARE Catalogue entry Robotics. Commercial support commercial support? Write info@eprosima.com Find eProsima\u2019s webpage. share project community? Write evaluation.support@eprosima.com mention @EProsima Twitter. curious case! Supported platforms information official support Linux Linux-aarch64 Windows Mac Installation Guide binary distribution eprosima Fast DDS compile library source. refer Fast DDS documentation complete installation guide. Installation binaries latest, date binary release eprosima Fast DDS obtained company website. Documentation access documentation online, hosted Read Docs. Start Page Installation manual User manual Fast DDS-Gen manual Fast DDS CLI manual File truncated lines full file"},
{"url": "https://index.ros.org/p/ffmpeg_encoder_decoder", "package": "ffmpeg_encoder_decoder", "package_summary": "ROS2 convenience wrapper around ffmpeg for encoding/decoding", "package_details": "ROS2 FFMPeg encoder/decoder ROS2 package supports encoding/decoding FFMpeg library, encoding HEVC, Nvidia hardware acceleration package meant image transport plugins ffmpeg image transport foxglove compressed video transport. Supported systems Continuous integration tested Ubuntu ROS2 distros: Installation packages sudo apt-get install ros-${ROS_DISTRO}-ffmpeg-encoder-decoder source Set shell variables: repo=ffmpeg_encoder_decoder url=https://github.com/ros-misc-utilities/${repo}.git follow instructions source workspace\u2019s install/setup.bash API overview Preliminaries libav important understand difference encoder codec. codec standardized format images encoded, instance hevc. encoder libav software module encode images codec. instance libx264, libx264rgb, h264_nvenc, h264_vaapi` encoders encode codec encoders hardware accelerated, handle image formats encode video specific codec. options libav encoders, qmax, bit_rate similar settings refer ffmpeg documentation. workings diagram shows stations ROS Image message passes traverses encoder decoder. ROS image ROS sensor_msgs/Image encoding) converted ROS cv_bridge cv_bridge_target_format. conversion ROS encodings bayer images) supported libswscale. cv_bridge_target_format set setCVBridgeTargetFormat(const std::string fmt). format set explicitly image converted default format bgr8. mono8 (gray) Bayer images. Ideally thecv_bridge_target_format libav decoder step no-op. cv_bridge_target_format acceptable libswscale input format exception special hacks encoding single-channel images, image converted av_source_pixel_format libswscale. av_source_pixel_format set setAVSourcePixelFormat(), defaulting acceptable libav encoder. ffmpeg (ffmpeg encoder=libx264 grep formats) list formats encoder supports. Note ffmpeg/libav format string notation ROS encoding strings, av_source_pixel_format libav convention, cv_bridge_target_format ROS convention! choose bypass cv_bridge conversion step feeding images encoder encodeImage(const cv::Mat img method, set cv_bridge_target_format encoder format img argument aiming lossless compression, beware av_source_pixel_format reduces color resolution, yuv420p, Bayer images, special hack single-channel images. libav encoder encodes packet supported codec, libx264 produce packets. encoding field FFMPEGPacket message document image format conversions codec, reverse order, separated semicolon. decoder attempt reproduce original ros_encoding. libav decoder decodes packet original av_source_pixel_format. Finally image converted output_message_format libswscale. format set ROS encoding syntax!) setOutputMessageEncoding(). format supported ROS libswscale special hack single-channel images). Note combinations libav encoders, cv_bridge_target_format av_source_pixel_format tested. provide feedback observe crashes find obvious bugs. PRs appreciated! special single-channel hack libav encoders support single-channel formats mono8 bayer). reason special hack implemented encoder adds empty (zero-value) color channel single-channel image. decoder removes utilitze hack, cv_bridge_target_format bayer_rggb8. special hack, trigger error Bayer formats acceptable libswscale. image converted yuv420p adding empty color channel. formats acceptable encoders. decoder turn recognizes cv_bridge_target_format single-channel format, yuv420p/nv12 drops color channel. hack greatly improves efficiency lossless encoding Bayer images avoids conversion full RGB API usage Encoder encoder involves steps: instantiating Encoder object. setting properties libav encoder encoding formats, options. initializing encoder object. requires knowledge image size File truncated lines full file"},
{"url": "https://index.ros.org/p/ffmpeg_image_transport", "package": "ffmpeg_image_transport", "package_summary": "ffmpeg_image_transport provides a plugin to image_transport for\n    transparently sending an image stream encoded with ffmpeg.", "package_details": "ROS2 image transport ffmpeg/libav ROS2 image transport plugin supports encoding/decoding FFMpeg library, encoding h265/hevc, Nvidia hardware acceleration publisher plugin transport produces ffmpeg image transport messages. raw, encoded packets transmitted decoded subscriber plugin transport. transport library publisher(encoder) subscriber(decoder) plugin installed sides extract frames file recorded bag, ffmpeg_image_transport_tools repository. Supported systems Continuous integration tested Ubuntu ROS2 distros: Installation packages sudo apt-get install ros-${ROS_DISTRO}-ffmpeg-image-transport source Set shell variables: repo=ffmpeg_image_transport url=https://github.com/ros-misc-utilities/${repo}.git follow instructions source workspace\u2019s install/setup.bash transport show ros2 run image_transport list_transports give output transport plugins): \"image_transport/ffmpeg\" package: ffmpeg_image_transport Publisher: plugin encodes frames ffmpeg compressed packets Subscriber: plugin decodes frames ffmpeg compressed packets Remember install plugin hosts, publishing subscribing (viewing). Parameters short description ROS parameters exposed Publisher Subscriber plugins. parameters refer encoder decoder variables detail ffmpeg_encoder_decoder repository. Publisher (camera driver) list encoding parameters: encoder: libav (ffmpeg) encoder default libx264, on-CPU unaccelerated encoding. Depending hardware, encoding options include hardware accelerated h264_nvenc h264_vaapi. list encoders ffmpeg --codecs. row, (encoders). encoder_av_options: default empty Comma-separeted list valid libav options form (key:value), e.g.:'preset:ll,profile:main,crf:0'. ffmpeg documentation gop_size: number frames keyframes. Default: larger number latency efficient compression bit_rate: max bit rate bits/s] encoding target. Default pixel_format: Forces pixel encoding. pixel format corresponds av_source_pixel_format ffmpeg_encoder_decoder documentation. qmax: Max quantization rate. Defaults ffmpeg documentation. larger number, worse image efficient encoding. encoder_measure_performance: performance debugging (developers Defaults false. parameters ffmpeg variable block. launch publisher node (camera driver), give parameter list parameters=[{'image_raw.ffmpeg.encoder': 'hevc_nvenc', 'image_raw.ffmpeg.encoder_av_options': 'preset:ll,profile:main,crf:0'}] launch file USB camera (usb_camera.launch.py). parameter settings don\u2019t work, ros2 param dump <your_node_name> command find proper parameter path File truncated lines full file"},
{"url": "https://index.ros.org/p/ffmpeg_image_transport_msgs", "package": "ffmpeg_image_transport_msgs", "package_summary": "messages for ffmpeg image transport plugin", "package_details": "ROS2 package messages ffmpeg_image_transport package definitions ROS2 messages ffmpeg image transport. License package released Apache-2 license."},
{"url": "https://index.ros.org/p/ffmpeg_image_transport_tools", "package": "ffmpeg_image_transport_tools", "package_summary": "tools for processing ffmpeg_image_transport_msgs", "package_details": "Tools ffmpeg_image_transport repository hosts code handling data streams produced ffmpeg_image_transport. Supported systems Continuous integration tested Ubuntu ROS2 distros: install packages sudo apt-get install ros-${ROS_DISTRO}-ffmpeg-image-transport-tools source Set shell variables: repo=ffmpeg_image_transport_tools url=https://github.com/ros-misc-utilities/${repo}.git follow instructions encoders, decoders, pixel formats tools package parameters related encoders, decoders, pixel formats. important understand terminology, single-channel images mono8 Bayer images) handled. consult ffmpeg_encoder_decoder repo information. Programs processing rosbags bag_to_file bag_to_file tool concatenates FFMPEGPacket message content rosbag file, runs ffmpeg tool embed stream container. bag_to_file input_bag topic rate out_file] timestamp_file] start_time (sec epoch)] end_time (sec epoch)] rate determines fps ffmpeg producing output. video transcoded, original stream, container. correct playing speed rate match rate stream originally recorded. line produces file video.mp4 timestamps.txt rosbag: ros2 run ffmpeg_image_transport_tools bag_to_file /cam1/image_raw/ffmpeg ./my_rosbag/ timestamp.txt file facilitates correlating ROS time stamps frame numbers. entries: packet pts, header_stamp recording_stamp packet typically corresponds frame packet number conincide frame number. bag_to_frames bag_to_frames program decodes ffmpeg-generated packets rosbag frames: bag_to_frames input_bag topic [options] options: out_dir output directory (defaults \"frames\") decoder libav decoder (hevc_cuvid, libx264 output_format ros encoding ('bgr8', 'mono', convert writing image. file_type frame file type ('png', 'jpeg'). Defaults jpeg. timestamp_file time stamp file. start_time time sec epoch. end_time time sec epoch. decoder automatically necessarily correctly) picked. decoders codec handle encoded image formats. codec hevc bayer image (bayer_rggb8) encoded image format throw error: [INFO] [bag_to_frames]: decoder: hevc [WARN] [Decoder]: hardware frame transfer failed pixel format yuv420p image written final conversion output_format performed. default bgr8. format string follow ROS convention libav convention, bgr8 bgr24. compress_bag ros2 run ffmpeg_image_transport_tools compress_bag encode video stored Image messages FFMPEGPacket format. Usage compress_bag in_bag out_bag topic topic [options] options: enable quality check write debug images max_num_frames_to_keep matching encoded/decoded packets. defaults start_time sec epoch] end_time sec epoch] encoder options encoding options: encoder: (defaults libx264) cv_bridge_target_format: (defaults rgb8) File truncated lines full file"},
{"url": "https://index.ros.org/p/flex_sync", "package": "flex_sync", "package_summary": "ros2 package for syncing variable number of topics", "package_details": "flex_sync ROS2 package headers-only library implements message synchronization filter. similar well-known message_filters package, flexible number topics synchronized compile time, message types. don\u2019t sensors type robot. message_filters, flex_sync offers exact approximate synchronization policies. package part rosdistro. Build status: Installation packages apt install ros-${ROS_DISTRO}-flex-sync source build instructions follow standard procedure ROS2. Set shell variables: repo=flex_sync url=https://github.com/ros-misc-utilities/${repo}.git follow ROS2 build instructions source workspace\u2019s install/setup.bash code snippet shows perform exact synchronization Image messages Imu message: sensor_msg::msg::Image; sensor_msg::msg::Imu; CallbackType std::function<void(const std::vector<Image::ConstSharedPtr> const std::vector<Imu::ConstSharedPtr> class MyTest define class handle callbacks public: void callback(const std::vector<Image::ConstSharedPtr> msgvec1, const std::vector<Imu::ConstSharedPtr> msgvec2) print msgs: std::cout msgs: msgvec1.size() msgvec2.size() std::endl; MyTest my_test; instantiate object handle synchronized callbacks synchronize Image topics Imu topic const std::vector<std::vector<std::string>> topics {{\"image_topic_1\", \"image_topic_2\"}, {\"imu_topic_1\"}}; const size_t q_size depth sync queue flex_sync::ExactSync<Image, Imu> sync(topics, std::bind(&MyTest::callback, &my_test, std::placeholders::_1, std::placeholders::_2), q_size); feed images IMU messages sync. sync successful callbacks MyTest::callback() sync->process(\"image_topic_1\", std::make_shared<Image>()); replace valid message sync->process(\"image_topic_2\", std::make_shared<Image>()); sync->process(\"imu_topic_1\", std::make_shared<Imu>()); Note number topics compile time, change life time sync object. Special note author code repo absolutely hideous. template syntax cryptic don\u2019t templates good Don\u2019t questions code works, longer understand cleaning templates discovered obvious bugs projects. understand sync code works, ROS1 documentation adaptive algorithm approximate time sync. License software future contributions licensed Apache License"},
{"url": "https://index.ros.org/p/fluent_rviz", "package": "fluent_rviz", "package_summary": "A library which makes Rviz fluent. Powered by C++17", "package_details": "FluentRviz \u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fRviz\u3092\u4f7f\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\uff0e class Node public rclcpp::Node public: Node(rclcpp::NodeOptions options) rclcpp::Node(\"node\",options) publisher_ node.create_publisher<visualization_msgs::msg::Marker>(\"visualization_marker\", visualization_msgs::msg::Marker marker; marker.header.frame_id \"map\"; marker.header.stamp get_clock()->now(); marker.id marker.action visualization_msgs::msg::Marker::ADD; marker.type visualization_msgs::msg::Marker::CUBE; marker.pose.orientation.w marker.scale.x marker.scale.y marker.scale.z marker.color.a marker.color.r publisher.publish(marker); private: rclcpp::Publisher<visualization_msgs::msg::Marker>::SharedPtr publisher_; class Node public rclcpp::Node public: Node(rclcpp::NodeOptions options) rclcpp::Node(\"node\",options) rviz_.init(*this, \"visualization_marker\", \"map\"); rviz_ flrv::marker::Cube(0) .color(1, private: flrv::Rviz rviz_;"},
{"url": "https://index.ros.org/p/fmilibrary_vendor", "package": "fmilibrary_vendor", "package_summary": "Wrapper (aka vendor package) around the FMILibrary by Modelon AB (JModelica.org)", "package_details": "fmilibrary_vendor CMake wrapper downloading building FMILibrary https://jmodelica.org/."},
{"url": "https://index.ros.org/p/foonathan_memory_vendor", "package": "foonathan_memory_vendor", "package_summary": "Foonathan/memory vendor package for Fast-RTPS.", "package_details": "Foonathan Memory Vendor Vendor package foonathan/memory. package download, patch, build install foonathan/memory Fast DDS. Commercial support commercial support? Write info@eprosima.com Find eProsima\u2019s webpage. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/foxglove_compressed_video_transport", "package": "foxglove_compressed_video_transport", "package_summary": "foxglove_compressed_video_transport provides a plugin to image_transport for\n    transparently sending an image stream encoded in foxglove compressed video packets.", "package_details": "ROS2 image transport Foxglove CompressedVideo messages plugin ROS2 image transport encoding messages Foxglove\u2019s CompressedVideo message format, FFMpeg library. messages recorded rosbag processing Foxglove Studio. Encoding based ffmpeg_encoder_decoder repo, explains compression process detail. ffmpeg_image_transport documentation helpful. unsupported decoder testing purposes. peril. Supported systems Continuous integration tested Ubuntu ROS2 distros: Installation packages sudo apt-get install ros-${ROS_DISTRO}-foxglove-compressed-video-transport source Set shell variables: repo=foxglove_compressed_video_transport url=https://github.com/ros-misc-utilities/${repo}.git follow instructions source workspace\u2019s install/setup.bash transport show ros2 run image_transport list_transports give output transport plugins): \"image_transport/foxglove\" package: foxglove_compressed_video_transport Publisher: plugin encodes frames foxglove compressed video packets Subscriber: plugin decodes frames foxglove compressed video packets Remember install plugin hosts, encoding decoding (viewing). Parameters Publisher (camera driver) list encoding parameters: encoder: libav (ffmpeg) encoder default libx264, on-CPU unaccelerated encoding. Depending hardware, encoding options include hardware accelerated h264_nvenc h264_vaapi. list encoders ffmpeg --codecs. row, (encoders). preset: default empty Valid values instance slow, latency) find presets run ffmpeg -hide_banner lavfi nullsrc libx264 -preset Note: deprecated, set parameter encoder_av_options profile: instance baseline, main. ffmpeg website. Note: deprecated, set parameter encoder_av_options tune: ffmpeg website. default empty(\u201c\u201d). Note: deprecated, set parameter encoder_av_options gop_size: number frames keyframes. foxglove, set larger number latency efficient transmission bit_rate: max bit rate bits/s] encoding target. Default encoder_av_options: Set comma-separated list libav encoder options assignment operator, tune:<foo>,delay:<bar>. delay: doesn\u2019t delay. Default empty Note: deprecated, set parameter encoder_av_options pixel_format: Forces pixel format internal conversions. ffmpeg encoder/decoder repo ffmpeg_image_transport repo qmax: Max quantization rate. Defaults ffmpeg documentation. larger number, worse image efficient encoding. measure_performance: performance debugging (developers Defaults false. parameters foxglove variable block. launch publisher node (camera driver), give parameter list parameters=[ params_path, \u2018image_raw.foxglove.encoder\u2019: \u2018h264_vaapi\u2019, \u2018libx264\u2019 \u2018image_raw.foxglove.profile\u2019: \u2018main\u2019, \u2018image_raw.foxglove.preset\u2019: File truncated lines full file"},
{"url": "https://index.ros.org/p/gazebo_ros2_control", "package": "gazebo_ros2_control", "package_summary": "gazebo_ros2_control", "package_details": "Gazebo ros_control Interfaces ROS package integrating ros2_control controller architecture Gazebo Classic simulator. package Gazebo plugin instantiates ros_control controller manager connects Gazebo model."},
{"url": "https://index.ros.org/p/generate_parameter_library_example", "package": "generate_parameter_library_example", "package_summary": "Example usage of generate_parameter_library.", "package_details": "Build node mkdir colcon_ws mkdir colcon_ws/src colcon_ws/src git clone https://github.com/picknikrobotics/generate_parameter_library.git colcon build Run node source install/setup.bash ros2 run generate_parameter_library_example test_node --ros-args --params-file src/generate_parameter_library/example/config/implementation.yaml output [INFO] [admittance_controller]: Control frame 'ee_link' ROS CLI Run ros2 param list /admittance_controller: admittance.damping_ratio admittance.mass admittance.selected_axes admittance.stiffness chainable_command_interfaces command_interfaces control.frame.external control.frame.id enable_parameter_update_without_reactivation fixed_array fixed_string fixed_string_no_default fixed_world_frame.frame.external fixed_world_frame.frame.id ft_sensor.filter_coefficient ft_sensor.frame.external ft_sensor.frame.id ft_sensor.name gravity_compensation.CoG.force gravity_compensation.CoG.pos gravity_compensation.frame.external gravity_compensation.frame.id interpolation_mode joints kinematics.alpha kinematics.base kinematics.group_name kinematics.plugin_name kinematics.plugin_package kinematics.tip one_number pid.elbow_joint.d pid.elbow_joint.i pid.elbow_joint.p pid.rate pid.shoulder_lift_joint.d pid.shoulder_lift_joint.i pid.shoulder_lift_joint.p pid.shoulder_pan_joint.d pid.shoulder_pan_joint.i pid.shoulder_pan_joint.p pid.wrist_1_joint.d pid.wrist_1_joint.i pid.wrist_1_joint.p pid.wrist_2_joint.d pid.wrist_2_joint.i pid.wrist_2_joint.p pid.wrist_3_joint.d pid.wrist_3_joint.i pid.wrist_3_joint.p qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability scientific_notation_num state_interfaces three_numbers three_numbers_of_five use_feedforward_commanded_input use_sim_time parameter automatically declared callbacks setup default. set parameter typing: ros2 param set /admittance_controller control.frame.id new_frame File truncated lines full file"},
{"url": "https://index.ros.org/p/cmake_generate_parameter_module_example", "package": "cmake_generate_parameter_module_example", "package_summary": "Example usage of generate_parameter_library for a python module with cmake.", "package_details": "Build node mkdir colcon_ws/src colcon_ws/src git clone https://github.com/picknikrobotics/generate_parameter_library.git colcon build Run Python node source install/setup.bash python3 src/generate_parameter_library/example_cmake_python/cmake_generate_parameter_module_example/minimal_publisher.py --ros-args --params-file src/generate_parameter_library/example_python/config/implementation.yaml output [INFO] [admittance_controller]: Initial control frame parameter 'ee_link' ROS CLI Run ros2 param list /admittance_controller: admittance.damping_ratio admittance.mass admittance.selected_axes admittance.stiffness chainable_command_interfaces command_interfaces control.frame.external control.frame.id enable_parameter_update_without_reactivation fixed_array fixed_string fixed_string_no_default fixed_world_frame.frame.external fixed_world_frame.frame.id ft_sensor.filter_coefficient ft_sensor.frame.external ft_sensor.frame.id ft_sensor.name gravity_compensation.CoG.force gravity_compensation.CoG.pos gravity_compensation.frame.external gravity_compensation.frame.id interpolation_mode joints kinematics.alpha kinematics.base kinematics.group_name kinematics.plugin_name kinematics.plugin_package kinematics.tip one_number pid.elbow_joint.d pid.elbow_joint.i pid.elbow_joint.p pid.rate pid.shoulder_lift_joint.d pid.shoulder_lift_joint.i pid.shoulder_lift_joint.p pid.shoulder_pan_joint.d pid.shoulder_pan_joint.i pid.shoulder_pan_joint.p pid.wrist_1_joint.d pid.wrist_1_joint.i pid.wrist_1_joint.p pid.wrist_2_joint.d pid.wrist_2_joint.i pid.wrist_2_joint.p pid.wrist_3_joint.d pid.wrist_3_joint.i pid.wrist_3_joint.p qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability scientific_notation_num state_interfaces three_numbers three_numbers_of_five use_feedforward_commanded_input use_sim_time parameter automatically declared callbacks setup default. set parameter typing: ros2 param set /admittance_controller control.frame.id new_frame File truncated lines full file"},
{"url": "https://index.ros.org/p/generate_parameter_library_example_external", "package": "generate_parameter_library_example_external", "package_summary": "Example usage of a parameter header generated in another package.", "package_details": "parameters defined package package minimal demonstrating parameters defined generate_parameter_library/example package current generate_parameter_library/example_external). check CMakeLists.txt file #include instructions source files. Build node mkdir colcon_ws mkdir colcon_ws/src colcon_ws/src git clone https://github.com/picknikrobotics/generate_parameter_library.git colcon build Run node source install/setup.bash ros2 run generate_parameter_library_example_external test_node --ros-args --params-file src/generate_parameter_library/example_external/config/implementation.yaml output [INFO] [admittance_controller]: Control frame 'ee_link' ROS CLI Run ros2 param list /admittance_controller: admittance.damping_ratio admittance.mass admittance.selected_axes admittance.stiffness chainable_command_interfaces command_interfaces control.frame.external control.frame.id enable_parameter_update_without_reactivation fixed_array fixed_string fixed_string_no_default fixed_world_frame.frame.external fixed_world_frame.frame.id ft_sensor.filter_coefficient ft_sensor.frame.external ft_sensor.frame.id ft_sensor.name gravity_compensation.CoG.force gravity_compensation.CoG.pos gravity_compensation.frame.external gravity_compensation.frame.id interpolation_mode joints kinematics.alpha kinematics.base kinematics.group_name kinematics.plugin_name kinematics.plugin_package kinematics.tip one_number pid.elbow_joint.d pid.elbow_joint.i pid.elbow_joint.p pid.rate pid.shoulder_lift_joint.d pid.shoulder_lift_joint.i pid.shoulder_lift_joint.p pid.shoulder_pan_joint.d pid.shoulder_pan_joint.i pid.shoulder_pan_joint.p pid.wrist_1_joint.d pid.wrist_1_joint.i pid.wrist_1_joint.p pid.wrist_2_joint.d pid.wrist_2_joint.i pid.wrist_2_joint.p pid.wrist_3_joint.d pid.wrist_3_joint.i pid.wrist_3_joint.p qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability scientific_notation_num state_interfaces three_numbers three_numbers_of_five use_feedforward_commanded_input use_sim_time File truncated lines full file"},
{"url": "https://index.ros.org/p/generate_parameter_module_example", "package": "generate_parameter_module_example", "package_summary": "Example usage of generate_parameter_library for a python module", "package_details": "Build node mkdir colcon_ws mkdir colcon_ws/src colcon_ws/src git clone https://github.com/picknikrobotics/generate_parameter_library.git colcon build Run Python node source install/setup.bash ros2 run generate_parameter_module_example test_node --ros-args --params-file src/generate_parameter_library/example_python/config/implementation.yaml output [INFO] [admittance_controller]: Initial control frame parameter 'ee_link' ROS CLI Run ros2 param list /admittance_controller: admittance.damping_ratio admittance.mass admittance.selected_axes admittance.stiffness chainable_command_interfaces command_interfaces control.frame.external control.frame.id enable_parameter_update_without_reactivation fixed_array fixed_string fixed_string_no_default fixed_world_frame.frame.external fixed_world_frame.frame.id ft_sensor.filter_coefficient ft_sensor.frame.external ft_sensor.frame.id ft_sensor.name gravity_compensation.CoG.force gravity_compensation.CoG.pos gravity_compensation.frame.external gravity_compensation.frame.id interpolation_mode joints kinematics.alpha kinematics.base kinematics.group_name kinematics.plugin_name kinematics.plugin_package kinematics.tip one_number pid.elbow_joint.d pid.elbow_joint.i pid.elbow_joint.p pid.rate pid.shoulder_lift_joint.d pid.shoulder_lift_joint.i pid.shoulder_lift_joint.p pid.shoulder_pan_joint.d pid.shoulder_pan_joint.i pid.shoulder_pan_joint.p pid.wrist_1_joint.d pid.wrist_1_joint.i pid.wrist_1_joint.p pid.wrist_2_joint.d pid.wrist_2_joint.i pid.wrist_2_joint.p pid.wrist_3_joint.d pid.wrist_3_joint.i pid.wrist_3_joint.p qos_overrides./parameter_events.publisher.depth qos_overrides./parameter_events.publisher.durability qos_overrides./parameter_events.publisher.history qos_overrides./parameter_events.publisher.reliability scientific_notation_num state_interfaces three_numbers three_numbers_of_five use_feedforward_commanded_input use_sim_time parameter automatically declared callbacks setup default. set parameter typing: ros2 param set /admittance_controller control.frame.id new_frame File truncated lines full file"},
{"url": "https://index.ros.org/p/examples_tf2_py", "package": "examples_tf2_py", "package_summary": "Has examples of using the tf2 Python API.", "package_details": "Python examples package examples tf2_ros API python. shows broadcast receive transforms frames. transforms small wheel robot. Broadcasting Transforms publishes types transforms: static dynamic. Static transforms constant, change published. Dynamic transforms frequently changing, re-published time broadcasters run ros2 launch examples_tf2_py broadcasters.launch.xml dynamic_broadcaster.py ros2 run examples_tf2_py dynamic_broadcaster dynamic transform publisher. Transforms showing rotation wheels published frequently. static_broadcaster.py ros2 run examples_tf2_py static_broadcaster static transform publisher. transforms sensors robot published startup, changed. Receiving Transforms Transforms broadcast listeners, data. transform immediately users data choose wait waits_for_transform.py ros2 run examples_tf2_py waits_for_transform blocks transform received. run MultiThreadedExecutor TransformListener execute callbacks subscriptions. async_waits_for_transforms.py ros2 run examples_tf2_py async_waits_for_transform coroutines wait transform. coroutine suspended blocking executor, works SingleThreadedExecutor. Frame Dumper ros2 run examples_tf2_py frame_dumper periodically outputs information frames aware"},
{"url": "https://index.ros.org/p/gmock_vendor", "package": "gmock_vendor", "package_summary": "The package provides GoogleMock.", "package_details": "Googletest Mocking (gMock) Framework Overview Google\u2019s framework writing mock classes. derive designs system write tests. inspired jMock, EasyMock, Hamcrest, designed specifics mind. gMock: declarative syntax defining mocks, define partial (hybrid) mocks, cross real mock objects, handles functions arbitrary types overloaded functions, rich set matchers validating function arguments, intuitive syntax controlling behavior mock, automatic verification expectations record-and-replay needed), arbitrary (partial) ordering constraints function calls expressed, lets user extend defining matchers actions. exceptions, easy learn Details examples gMock Dummies Legacy gMock FAQ gMock Cookbook gMock Cheat Sheet note code scripts/generator/ cppclean project Apache License, Google Mock\u2019s license. Google Mock part Google Test testing framework subject requirements."},
{"url": "https://index.ros.org/p/gtest_vendor", "package": "gtest_vendor", "package_summary": "The package provides GoogleTest.", "package_details": "Generic Build Instructions Setup build Google Test tests build system find headers source files. exact depends build system straightforward. Build CMake Google Test CMake build script CMakeLists.txt) wide range platforms stands cross-platform.). don\u2019t CMake installed download free http://www.cmake.org/. CMake works generating native makefiles build projects compiler environment choice. build Google Test standalone project incorporated existing CMake build project. Standalone CMake Project building Google Test standalone project, typical workflow starts mkdir mybuild Create directory hold build output. mybuild cmake ${GTEST_DIR} Generate native build scripts. build Google Test\u2019s samples, replace command cmake -Dgtest_build_samples=ON ${GTEST_DIR} *nix system, Makefile current directory. type build gtest. Windows Visual Studio installed, gtest.sln file .vcproj files created. build Visual Studio. Mac Xcode installed, .xcodeproj file generated. Incorporating Existing CMake Project gtest project CMake, robust flexible approach build gtest part project making GoogleTest source code main build adding CMake\u2019s add_subdirectory() command. significant advantage compiler linker settings gtest rest project, issues incompatible libraries debug/release), avoided. Windows. Making GoogleTest\u2019s source code main build ways: Download GoogleTest source code manually place location. flexible approach difficult continuous integration systems, Embed GoogleTest source code direct copy main project\u2019s source tree. simplest approach, hardest date. organizations permit method. Add GoogleTest git submodule equivalent. Git submodules, set advantages drawbacks. CMake download GoogleTest part build\u2019s configure step. complex, doesn\u2019t limitations methods. methods implemented small piece CMake code separate file CMakeLists.txt.in) copied build area invoked sub-build CMake stage. directory pulled main build add_subdirectory(). file CMakeLists.txt.in: cmake_minimum_required(VERSION project(googletest-download include(ExternalProject) ExternalProject_Add(googletest GIT_REPOSITORY https://github.com/google/googletest.git GIT_TAG master SOURCE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/googletest-src\" BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}/googletest-build\" CONFIGURE_COMMAND BUILD_COMMAND INSTALL_COMMAND TEST_COMMAND Existing build\u2019s CMakeLists.txt: ```cmake Download unpack googletest configure time configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt) execute_process(COMMAND ${CMAKE_COMMAND} \u201c${CMAKE_GENERATOR}\u201d File truncated lines full file"},
{"url": "https://index.ros.org/p/grbl_msgs", "package": "grbl_msgs", "package_summary": "ROS2 Messages package for GRBL devices", "package_details": "grbl_msgs Messages, Services Actions interacting GRBL device"},
{"url": "https://index.ros.org/p/grbl_ros", "package": "grbl_ros", "package_summary": "ROS2 package to interface with a GRBL serial device", "package_details": "grbl_ros simple ROS2 package interfacing grbl device. supports: polling status grbl device sending plain GCODE commands ROS2 service Supported Platforms Tier platforms Windows Mac Ubuntu Ubuntu ROS Version Tier platforms Dashing Diademata Tier platforms Eloquent Elusor Tier platforms Foxy Fitzroy Tier platforms Rolling Ridley Dashing Eloquent target Ubuntu Foxy Rolling target Ubuntu grbl_ros package exposes major functionalities ROS: pose tracking GRBL device sending commands GRBL device. package publishes transform (aka machine coordinates received GRBL device. ROS nodes machine enable functions. package runs ROS2 actions: send_gcode_cmd send_gcode_file. actions enable user monitor status actions happen. started Quick start: Ubuntu sudo apt install ros-<your-distro>-grbl-ros Fork clone repository you\u2019d compile cloned, build workspace running workspace\u2019s root directory: colcon build built, you\u2019ve sourced overlay (source /path/to/workspace/install/setup.bash) able start grbl_ros node: ros2 run grbl_ros grbl_node --ros-args --params-file /path/to/workspace/src/grbl_ros/config/cnc001.yaml command GRBL device move, you\u2019ll unlock command: ros2 action send_goal /cnc_001/send_gcode_cmd grbl_msgs/action/SendGcodeCmd '{command: Goal finished status: SUCCEEDED print-out grbl_ros terminal GRBL device unlocked. send device GCODE commands common started: ros2 action send_goal /cnc_001/send_gcode_cmd grbl_msgs/action/SendGcodeCmd '{command: TBD, recommend listed Testing Unit tests run release supported platform ROS2 release. Refer \u201cactions\u201d tab repository tests Contributing grbl_ros? functionality reach hear issue, smoke signal attention love hear"},
{"url": "https://index.ros.org/p/grid_map_pcl", "package": "grid_map_pcl", "package_summary": "Conversions between grid maps and Point Cloud Library (PCL) types.", "package_details": "Grid Map Pcl Overview package integrated ROS computing elevation maps pcl types. supported types point clouds meshes. Converting mesh grid map elevation computed raytracing lines coming grid map cells computing intersection mesh. Converting raw pointcloud grid map elevation computed slicing point cloud plane columns. Column location size correspond location size grid map cells point cloud coordinate frame. Subsequently, clustering points column performed elevation lowest cluster (min coordinate) assumed terrain elevation. elevation cluster computed positions points belong cluster. calculations performed pointcloud frame. Authors: Edo Jelavic, Dominic Jud Affiliation: ETH Zurich, Robotics Systems Lab Examples Examples elevation maps computed point clouds package: Outdoor dataset Forest dataset Indoor dataset Usage algorithm open .pcd file, convert point cloud grid map save grid map rosbag folder user. Place .pcd files package folder system grid_map_pcl/data/example.pcd). Modify folder_path launch file folder file points folder .pcd files /\u201cpath grid_map_pcl folder\u201d/data). Change pcd_filename point cloud file process run algorithm roslaunch grid_map_pcl grid_map_pcl_loader_node.launch algorithm output console, run rviz separate terminal sourced workspace, CLOSE terminal grid_map_pcl_loader_node running visualize resulting grid map. Instructions visualize grid map grid map README. resulting grid map saved folder folder_path variable launch file named string contained output_grid_map variable. large point clouds points) algorithm takes min finish threads). sizes range points, runtime varies min, depending number points. Point cloud points processed minute Parameters Algorithm Parameters (conversion raw point clouds) General parameters pcl_grid_map_extraction/num_processing_threads Number threads processing grid map cells. Filtering raw input point cloud parallelized. Grid map parameters Resulting grid map parameters. pcl_grid_map_extraction/grid_map/min_num_points_per_cell Minimum number points point cloud fall grid map cells. cell elevation set NaN. pcl_grid_map_extraction/grid_map/resolution Resolution grid map. Width lengts computed automatically. pcl_grid_map_extraction/grid_map/height_type calculate elevation Smallest average values cluster cluster points pcl_grid_map_extraction/grid_map/height_thresh Height range smallest cluster.(Only height_type Point Cloud Pre-processing Parameters Rigid body transform parameters Rigid body transorm applied point cloud computing elevation. pcl_grid_map_extraction/cloud_transform/translation Translation (xyz) applied input point cloud computing elevation. pcl_grid_map_extraction/cloud_transform/rotation Rotation (intrinsic rotation, convention X-Y\u2019-Z\u2019\u2019) applied input point cloud computing elevation. Cluster extraction parameters Cluster extraction based pcl algorithms. http://pointclouds.org/documentation/tutorials/cluster_extraction.php details. pcl_grid_map_extraction/cluster_extraction/cluster_tolerance Distance points considered part cluster. pcl_grid_map_extraction/cluster_extraction/min_num_points Min number points cluster discarded). pcl_grid_map_extraction/cluster_extraction/max_num_points Max number points cluster discarded). Outlier removal parameters http://pointclouds.org/documentation/tutorials/statistical_outlier.php explanation outlier removal. pcl_grid_map_extraction/outlier_removal/is_remove_outliers* perform statisctical outlier removal. pcl_grid_map_extraction/outlier_removal/mean_K* Number neighbours analyze estimating statistics point. pcl_grid_map_extraction/outlier_removal/stddev_threshold* Number standard deviations points considered inliers. Subsampling parameters http://pointclouds.org/documentation/tutorials/voxel_grid.php explanation point cloud downsampling pcl_grid_map_extraction/downsampling/is_downsample_cloud perform downsampling pcl_grid_map_extraction/downsampling/voxel_size Voxel sizes (xyz) meters."},
{"url": "https://index.ros.org/p/hash_library_vendor", "package": "hash_library_vendor", "package_summary": "ROS2 vendor package for stbrumme/hash-library", "package_details": "hash_library_vendor ROS2 vendor package stbrumme/hash-library."},
{"url": "https://index.ros.org/p/heaphook", "package": "heaphook", "package_summary": "Replace all the dynamic heap allocation functions by LD_PRELOAD", "package_details": "heaphook Replace dynamic heap allocation functions LD_PRELOAD. Build Install library heaphook prepared ament_cmake package. mkdir /path/to/heaphook_ws /path/to/heaphook_ws mkdir src git clone git@github.com:tier4/heaphook.git src colcon build shared libraries LD_PRELOAD generated install/heaphook/lib. path added LD_LIBRARY_PATH setup script. source install/setup.bash provide kinds heaphook libraries. libpreloaded_heaptrack.so: Records heap allocation/deallocation function calls generate log file visualizing history heap consumption. libpreloaded_tlsf.so: Replaces heap allocation/deallocation TLSF (Tow-Level Segregated Fit) memory allocator. libpreloaded_backtrace.so: Records malloc/new function calls backtraces memory allocations place. typical case utilize libpreloaded_heaptrack grasp transition maximum heap consumtion target process determine initial allocated memory pool size libpreloaded_tlsf. cource, utilize libpreloaded_heaptrack heap consumption target process. libpreloaded_heaptrack track heap consumption process. LD_PRELOAD=libpreloaded_heaptrack.so executable log file generated current working directory format heaplog.{%pid}.log. visualize heap consumption transitions PDF format based generated log file. parser depends progressbar python library, install pip install progressbar python3 heaplog_parser.py heaplog.{%pid}.log Generates heaplog.{%pid}.pdf libpreloaded_tlsf initial allocaton size memory pool size additional memory allocated initial memory pool size sufficient. initial size memory pool set margin greater peak heap usage target process. Extending memory pool size runtime avoided, leads overhead allocation functions. LD_PRELOAD=libpreloaded_tlsf.so INITIAL_MEMPOOL_SIZE=1000000 ADDITIONAL_MEMPOOL_SIZE=1000000 executable initial size memory pool insufficient, allocates additional size ADDITIONAL_MEMPOOL_SIZE, insufficient, allocates double previous allocation sufficient. malloc(1000) called existing memory pool exhausted ADDITIONAL_MEMPOOL_SIZE=100. bytes added memory pool sufficient) bytes added memory pool sufficient) bytes added memory pool sufficient) bytes added memory pool sufficient) bytes added memory pool (finally sufficient) added memory pool areas contiguous virual address space, necessarily total size added memory pools exceeds size memory allocation request. libpreloaded_backtrace.so command trace callers: LD_PRELOAD=libpreloaded_backtrace.so executable log files genearted working directory format top_alloc_bytes_bt.{%pid}.{%tid}.log top_num_calls_bt.{%pid}.{%tid}.log. default, top callers logged. environment variable NUM_TOPS control number callers. addition, callers malloc/new logged major source page faults. disable set environment variable SHOW_NON_RECURRENT_CALLERS=1. show source code file line numbers, run command: python3 backtrace_analyzer.py top_alloc_bytes_bt.{%pid}.{%tid}.log python3 backtrace_analyzer.py top_alloc_bytes_bt.{%pid}.{%tid}.log c++filt demangle function names result user-friendly executables linked -rdynamic -no-pie -fno-pie options. aggressive, build code CMAKE_BUILD_TYPE=RelWithDebInfo. Integrate ROS2 launch easily integrate heaphook ROS2 launch systems. launch file, replace heap allocations process targeted Node ComposableNodeContainer. <node pkg=\"...\" exec=\"...\" <env name=\"LD_PRELOAD\" value=\"libpreloaded_heaptrack.so\" </node> <node pkg=\"...\" exec=\"...\" <env name=\"LD_PRELOAD\" value=\"libpreloaded_tlsf.so\" <env name=\"INITIAL_MEMPOOL_SIZE\" <env name=\"ADDITIONAL_MEMPOOL_SIZE\" </node> ```python container ComposableNodeContainer( additional_env={\u201cLD_PRELOAD\u201d: \u201clibpreloaded_heaptrack.so\u201d}, File truncated lines full file"},
{"url": "https://index.ros.org/p/iceoryx_binding_c", "package": "iceoryx_binding_c", "package_summary": "Eclipse iceoryx inter-process-communication (IPC) middleware C-Language Binding", "package_details": "Iceoryx Language binding icedelivery API structure API supposed close API means, developers familiar API learn iceoryx scratch order API. differences due language coding conventions exclusively API. functions abbreviation class instance Subscriber methods named iox_sub_method_name camelCase converted snake_case. typedef handle created abbreviation iox prefix suffix, iox_sub_t constructor allocates element suffix _create called instance iox_node_create. Analog constructor destructor suffix _destroy named iox_node_destroy. Pre iceoryx constructor requiring preallocated memory suffix _init required pointer storage stack. Due non-trivial issues sizes platforms architectures storage object allocated heap. reverted future release depending proper solution problem. API remains _storage_t object iox_sub_storage_t created pointer object passed _init, iox_sub_init. function returns handle point storage. address storage _deinit undefined result segmentation fault. usage iox_sub_storage_t subStorage; iox_sub_t subscriber iox_sub_init(&subStorage, \"foo\", \"bar\", \"baz\", nullptr); subscriber iox_sub_deinit(subscriber); parameter handle object. arguments stay API. Enum values named EnumName_EnumValue Enum names follow rule namespace_EnumName namespace iox enum class Color RED, GREEN, BLUE class Channel public: Channel(const std::string cxx::optional<void*> receive(); bool send(void data); void allHailHypnotoad(); class MyOtherClass public: MyOtherClass(const int void youSpinMeRoundLikeARecord(); binding enum iox_Color Color_RED, Color_GREEN, Color_BLUE, typedef struct Channel sub_t; sub_t iox_chan_create(const char void iox_chan_destroy(sub_t const bool iox_chan_receive(sub_t const void const data); bool iox_chan_send(sub_t const void const data); void iox_chan_all_hail_hypnotoad(sub_t const struct iox_other_class_storage_t_ uint64_t do_not_touch_me[8]; lets assume size MyOtherClass typedef iox_other_class_storage_t_ iox_other_class_storage_t; typedef struct MyOtherClass iox_other_class_t; iox_other_class_t iox_other_class_init(iox_other_class_storage_t self,const int void iox_other_class_deinit(iox_other_class_t void iox_other_class_you_spin_me_round_like_a_record(iox_other_class_t"},
{"url": "https://index.ros.org/p/iceoryx_hoofs", "package": "iceoryx_hoofs", "package_summary": "Eclipse iceoryx inter-process-communication (IPC) middleware basic building blocks", "package_details": "Eclipse iceoryx hoofs overview iceoryx hoofs (Handy Objects Optimised Safety) basic building blocks foundation iceoryx. wide variety building blocks grouped categories namespace, depending Categories Namespace Short Description cxx allowed heap exceptions implemented constructs optional, expected variant modern find constructs mentioned Core Guidelines STL re-implementations container vector relocatable shared memory. concurrent concurrent constructs mutex, semaphores, atomic, codebase. moment exceptions guideline idea classes stored concurrent undergo tests usual concurrent class. instance provide stress tests module classes fifo, smart_lock, sofi, trigger_queue design_pattern code patterns repeating code abstracted stored moment creation pattern removed future release. error-handling central error handler iceoryx cases sane execution nullptr access. log logger iceoryx. posix_wrapper Posix constructs shared memory, threads semaphores code base. abstracted RAII (Resource Acquisition Initialization) idiom good practices community. units Time units duration string literals. namespaces iceoryx hoofs obsolete future, integrated existing names established namespace documented unsure future. Structure sections column labeled internal API stable change anytime. rely support breaks code update. column obsolete marks classes removed anytime CXX STL constructs part standard convenience constructs NewType. module re-implements STL constructs, STL coding guidelines files module, user painless transition official STL types API identical STL types exceptions instance, throw exceptions, avoid undefined behavior dynamic memory. cases adjusted API case. headers providing code class class/file internal obsolete description algorithm Implements min max arbitrary number values type. instance min(1,2,3,4,5); attributes attributes compiler extensions. attribute macros defined IOX_FALLTHROUGH, IOX_MAYBE_UNUSED able compiler supports convert Converting number string easy, converting hard. functions strtoll handle errors overflow, converting invalid strings number. abstract error handling convert strings numbers safely. DeadlineTimer Polling based timer check elapsed deadline. expected base class error handling. function fail return expected. user function fail kind error handling. inspired expected proposal rust error handling concept. filesystem Implementation filesystem features instance cxx::perms abstract file permissions forward_list Heap exception free, relocatable implementation std::forward_list function stack-based std::function replacement based storable_function function_ref implementation next-gen feature std::function_ref function_ref proposal. behaves std::function callable. functional_interface Constructs easily add functional interfaces and_then object container. GenericRAII abstraction RAII idiom. constructs perform task creation scope, GenericRAII std::lock_guard std::shared_ptr generic. helplets Implementations Core Guideline concepts not_null contained Additionally, providing types verify preconditions compile time. int greater provide types greater_or_equal<int, list Heap exception free, relocatable implementation std::list MethodCallback Constructs callback pointer specific object pointer method object, ConstMethodCallback NewType<T, Policies> implementation Haskells NewType-pattern. optional implementation feature std::optional pair Simplistic re-implementation std::pair. poor_mans_heap Acquires memory stack placement instantiations. classes inherit base class compile time class size. ReferenceCounter Basic building block classes needing kind reference counting std::shared_ptr requires Base Expects/Ensures Core Guideline scoped_static Helper function limit lifetime static global variables scope serialization Implements simple serialization concept classes based idea presented ISOCPP serialization. set Templated helper functions create fake std::set vector. stack Stack implementation simple push/pop interface. static_storage Untyped aligned static storage. storable_function std::function alternative configurable backend memory storage. string Heap exception free implementation std::string. Attention, string stack based, std::string char array assigned string truncated zero-terminated exceed string capacity. type_traits Extended support evaluating types compile-time. types Declares essential building block types byte_t. UniqueId Monotonic increasing IDs process. unique_ptr heap-less unique ptr implementation, STL variant implementation feature std::variant variant_queue queue wraps multiple variants Queues (FiFo, SoFi, ResizeableLockFreeQueue) vector Heap exception free implementation std::vector Concurrent write concurrent code, concurrency constructs mutex, atomic, thread, semaphore, cases solved ActiveObject building block FiFo queue thread-safe combined smart_lock. learn active objects Prefer Active Objects Naked Threads. class internal obsolete description ActiveObject Active object base skeleton implementation inspired Prefer Active Objects Naked Threads FiFo Single producer, single consumer lock-free FiFo LockfreeQueue Multi producer, multi consumer lock-free FiFo ringbuffer overflow handling LoFFLi Lock-free LIFO based index manager (lock-free free list). building block memory manager. construction indices acquire release. PeriodicTask Periodically executes callable template parameter configurable time interval. ResizeableLockFreeQueue Resizeable variant LockfreeQueue smart_lock Creates arbitrary thread safe constructs smart pointers. STL type thread safe smart_lock create thread safe version line. Based ideas presented Wrapping Member Function Calls SoFi Single producer, single consumer lock-free safely overflowing FiFo (SoFi). TACO Thread Aware exChange Ownership (TACO). Solution std::atomic data types larger bit. Wait free data synchronization mechanism threads. TriggerQueue Queue push pop interface pop blocking long queue empty. building block active objects. attribute overview Queues: Data Structure Shared Memory usable Thread-Safe Lock-Free Concurrent Producers Consumers Bounded Capacity Data Type Restriction Case File truncated lines full file"},
{"url": "https://index.ros.org/p/ign_rviz", "package": "ign_rviz", "package_summary": "RViz developed using Ignition libraries", "package_details": "Ignition RViz ROS package RViz developed Ignition Rendering Library."},
{"url": "https://index.ros.org/p/ign_rviz_plugins", "package": "ign_rviz_plugins", "package_summary": "This package contains visualization plugins for ign-rviz", "package_details": "Ignition RViz Plugins package visualization plugins ign-rviz"},
{"url": "https://index.ros.org/p/irobot_create_msgs", "package": "irobot_create_msgs", "package_summary": "Package containing action, message, and service definitions used by the iRobot(R) Create(R) platform", "package_details": "iRobot\u00ae Create\u00ae Platform interfaces ROS action, message, service definitions iRobot\u00ae Create\u00ae Platform. information ROS interfaces, index.ros2.org Actions (.action) AudioNoteSequence: Play set notes speaker number iterations. Dock: Command robot dock charging station. DriveArc: Command robot drive arc defined radius. DriveDistance: Command robot drive defined distance straight line. LedAnimation: Command lights perform animation. NavigateToPosition: Command robot drive goal odometry position simple approach rotates face goal position translates goal position optionally rotates goal heading. RotateAngle: Command robot rotate place amount. Undock: Command robot undock charging station. WallFollow: Command robot wall follow left side bump sensors. Messages (.msg) AudioNote: Command robot play note. AudioNoteVector: Command robot play sequence notes. Button: Status button. DockStatus: Information robot sensing dock charging station. HazardDetection: hazard obstacle detected robot. HazardDetectionVector: hazards obstacles detected robot. InterfaceButtons: Status interface buttons Create\u00ae robot faceplate. IrIntensity: Reading intensity sensor. IrIntensityVector: Vector current intensity readings sensors. IrOpcode: Opcode detected robot receivers. KidnapStatus: robot kidnapped LedColor: RGB values LED. LightringLeds: Command RGB values lightring lights. Mouse: Reading mouse sensor. SlipStatus: robot slipping StopStatus: robot stopped WheelStatus: Current/PWM readings robot\u2019s wheels addition wheels enabled. WheelTicks: Reading robot wheels encoders. WheelVels: Indication robot wheels current speed. Services (.srv) EStop: Set system EStop cutting motor power enabling motor power ResetPose: Reset robot pose estimate RobotPower: Power robot."},
{"url": "https://index.ros.org/p/joy_tester", "package": "joy_tester", "package_summary": "Simple GUI tool for testing joysticks/gamepads", "package_details": "joy_tester simple GUI program testing joysticks ROS. specifically, displays messages sensor_msgs/Joy topic user-friendly format. Usage ros2 run joy_tester test_joy default subscribes /joy topic, remapped ROS node --ros-args joy:=other_joy). helpful (compared topic echo) displays axis/button numbers saves time errors counting manually. Clean code, GUI element placement rough Add functionality sending sensor_msgs/JoyFeedback LED, rumble) controllers assist calibration?"},
{"url": "https://index.ros.org/p/kobuki_core", "package": "kobuki_core", "package_summary": "Pure C++ driver library for Kobuki.", "package_details": "Kobuki Core Kobuki Core stack consists libraries utilities working Kobuki Robot. Documentation Kobuki ecosystem repositories packages bundled Refer documentation release relevant branch/version kobuki_core Kobuki Core Branch Kobuki Documentation Release devel https://kobuki.readthedocs.io/en/devel/ release/1.2.x https://kobuki.readthedocs.io/en/release-1.0.x/"},
{"url": "https://index.ros.org/p/kobuki_ros_interfaces", "package": "kobuki_ros_interfaces", "package_summary": "", "package_details": "Kobuki ROS Interfaces ROS2 message, service action interfaces Kobuki. ROS1 interfaces, visit http://github.com/yujinrobot/kobuki_msgs repository."},
{"url": "https://index.ros.org/p/kobuki_velocity_smoother", "package": "kobuki_velocity_smoother", "package_summary": "Bound incoming velocity messages according to robot velocity and acceleration limits.", "package_details": "Kobuki Velocity Smoother [About][Parameters][Topics][Usage][Feedback] ROS package smoothing commanded velocities represented stream geometry_msg/msg/Twist messages. applies limits linear angular components speed acceleration. Feedback odometry actual commanded velocity provide result situations (read Parameters ~accel_lim_v (double, default: linear acceleration limit ~accel_lim_w (double, default: angular acceleration limit ~speed_lim_v (double, default: linear velocity limit ~speed_lim_w (double, default: angular velocity limit ~decel_factor (double, default: multiplier acceleration limit decelerating ~frequency (double, default: computed published rate, adhered incoming message rate (interpolates ~feedback (int, default: type feedback odometry, actual commanded velocities) Topics Subscriptions ~/input (geometry_msgs/msg/Twist): input velocity commands ~/feedback/odometry (nav_msgs/msg/Odometry): topic odometry feedback, required requested feedback set odometry ~/feedback/cmd_vel (geometry_msgs/msg/Twist): topic actual commanded velocity feedback, required requested feedback set actual commanded velocities Publications ~smoothed (geometry_msgs/msg/Twist): smoothed output velocity commands respecting velocity acceleration limits Usage parameters frequency feedback dynamically reconfigurable. Linear angular velocities smoothed proportionally restricted, guarantee constant rotation radius. input topic inactive, command zero-velocity controller crashed, forgot good manners\u2026), introduce fake zero-velocity command short timeout. Simply wire channels topics. tests starting point. Feedback reasons robot feedback. frequently faced: Multiple controllers compete controlling robot multiplexer. controller excluded higher priority suddenly issue commands significantly commanded velocity multiplexer switched commanded velocity profile experiences large, discrete jump. cases, option robot fails generate commanded velocity due unmodelled inclines, carpets cases, option"},
{"url": "https://index.ros.org/p/launch_pytest", "package": "launch_pytest", "package_summary": "A package to create tests which involve launch files and multiple processes.", "package_details": "launch_pytest framework launch integration testing. exit codes processes tests. Tests check processes shut specific exit codes. Tests fail process dies unexpectedly. stdout stderr processes tests. command-line launch processes tests. tests run concurrently launch interact running processes. Differences launch_testing launch_testing standalone testing tool, lacks features: impossible filter test cases run impossible mark test skipped xfail. error reporting tool custom, output wasn\u2019t nice output generated testing frameworks unittest pytest. launch_pytest simple pytest plugin leveraging pytest fixtures manage launch service lifetime easily. Quick start Start pytest_hello_world.py Run python3 pytest test/launch_pytest/examples/pytest_hello_world.py launch_pytest plugin launch nodes launch_description fixture, run tests test_read_stdout() class, shut launched nodes, run statements yield statement test_read_stdout(). launch_pytest fixtures @launch_pytest.fixture def launch_description(hello_world_proc): \"\"\"Launch simple process print 'hello_world'.\"\"\" return launch.LaunchDescription([ hello_world_proc, launch start test ReadyToTest action added, appended automatically. launch_pytest.actions.ReadyToTest() @launch_pytest.fixture function return launch.LaunchDescription object, sequence objects item launch.LaunchDescription. launch description tests mark @pytest.mark.launch(fixture=<your_fixture_name>), case <your_fixture_name>=launch_description. launch description include ReadyToTest action signal test framework safe start active tests. isn\u2019t included, ReadyToTest action appended launch_pytest fixtures module, class function scope. default function. @launch_pytest.fixture(scope=my_scope) def my_fixture(): return LaunchDescription(...) @pytest.mark.launch(fixture=my_fixture) def test_case_1(): pass @pytest.mark.launch(fixture=my_fixture) def test_case_2(): pass my_scope=function, launch service LaunchDescription returned my_fixture() started. test_case_1() run. launch service shutdown. launch service LaunchDescription returned my_fixture() started, my_fixture() called test_case_2() run. launch service shutdown. my_scope=module, test case_2() run immediately test case_1(), concurrently launch service. recommended mix fixtures module scope fixtures class/function scope file. recommended fixtures scope larger module. test shouldn\u2019t depend launch_pytest fixture. automatically generates error current launch_pytest implementation, future versions Active Tests shutdwon tests Test cases marked @pytest.mark.launch run concurrently launch service launch shutdown, depending object marked mark arguements. functions: Functions marked @pytest.mark.launch run concurrently launch service, shutdown=True passed argument decorator. ```python @pytest.mark.launch(fixture=my_ld_fixture) def normal_test_case(): pass @pytest.mark.launch(fixture=my_ld_fixture, shutdown=True) def shutdown_test_case(): File truncated lines full file"},
{"url": "https://index.ros.org/p/launch_testing", "package": "launch_testing", "package_summary": "A package to create tests which involve launch files and multiple processes.", "package_details": "launch_testing tool framework launch integration testing. exit codes processes tests. Tests check processes shut specific exit codes. Tests fail process dies unexpectedly. stdout stderr processes tests. command-line launch processes avilalbe tests. tests run concurrently launch interact running processes. Quick start Start launch_testing good_proc_launch_test.py. Run launch_test test/launch_testing/examples/good_proc_launch_test.py launch_test launch nodes generate_test_description function, run tests TestGoodProcess class, shut launched nodes, run tests TestProcessOutput class. Launch Description def generate_test_description(): return launch.LaunchDescription([ launch.actions.ExecuteProcess( cmd=[path_to_process], Start tests wait complicated launch description, action happen process starts event launch_testing.actions.ReadyToTest() generate_test_description function return launch.LaunchDescription object launches system tested. launch description include ReadyToTest action signal test framework safe start active tests. delay start tests ReadyToTest action peer process test signal framework safe start time ExecuteProcess action run. Active Tests classes inherit unittest.TestCase decorated post_shutdown_test descriptor run concurrently proccess test. tests expected interact running processes Post-Shutdown Tests classes inherit unittest.TestCase decorated post_shutdown_test descriptor run launched processes shut tests access exit codes stdout launched processes, data created side-effect running processes. Exit Codes Standard launch_testing framework automatically adds member fields test case tests access process output exit codes. self.proc_info ProcInfoHandler object self.proc_output IoHandler object objects provide dictionary access information running processes. methods active tests wait process exit wait specific output. Assertions launch_testing framework automatically records stdout launched processes exit codes processes launched. information tests proc_info proc_output object. objects assert methods check output exit codes process: launch_testing.asserts.assertInStdout(proc_output, msg, process, cmd_args=None, strict_proc_matching=True) Asserts message stdout process. msg: text process standard process: process string, launch.actions.ExecuteProcess object start process. Pass empty string search processes. cmd_args: processes process cmd_args disambiguate multiple processes strict_proc_matching: process strict_proc_matching=True error match multiple processes. prevents assert accidentally passing output process user expecting. launch_testing.asserts.assertExitCodes(proc_info, allowable_exit_codes=[EXIT_OK], process, cmd_args=None, strict_proc_matching=True) Asserts processes exited exit code. allowable_exit_codes: File truncated lines full file"},
{"url": "https://index.ros.org/p/launch_xml", "package": "launch_xml", "package_summary": "XML frontend for the launch package.", "package_details": "launch_xml package abstraction XML tree. XML front-end mapping rules Accessing xml attributes xml tag <tag entity wrapping statements true: e.get_attr('value') e.get_attr('value', data_type=int) e.get_attr('value', data_type=float) default, attribute returned string. Allowed types scalar types: str, int, float, bool uniform list, List[int]. list entities type: List[Entity] List usual object typing package. data_type set case yaml rules handling lists, *-sep attribute <tag value-sep=\",\"/> <tag2 value-sep=\" <tag3 value-sep=\", tag.get_attr('value', data_type=List[int]) tag2.get_attr('value', data_type=List[float]) tag3.get_attr('value', data_type=List[str]) case instance type substitution, can_be_str argument get_attr call parser.parse_if_substitutions: e.get_attr('value2', data_type=int, can_be_str=True) normalized_value parser.parse_if_substitutions(value) checking attribute exists, optional argument: e.get_attr('value', optional=True) do_something(value) optional=False (default), AttributeError raised attribute Accessing XML children attributes: xml: <executable cmd=\"ls\"> <env name=\"a\" <env name=\"b\" value=\"stuff\"/> </node> env children accessed env e.get_attr('env', data_type=List[Entity]) len(env) env[0].get_attr('name') 'a' env[0].get_attr('value') env[1].get_attr('name') 'b' env[1].get_attr('value') 'stuff' cases, e.env list entities, accessed abstract Accessing XML children: children accessed: e.children returns list launch_xml.Entity wrapping XML children. Built-in substitutions document."},
{"url": "https://index.ros.org/p/launch_yaml", "package": "launch_yaml", "package_summary": "YAML frontend for the launch package.", "package_details": "launch_yaml package abstraction YAML tree. YAML front-end mapping rules Accessing yaml attributes YAML file tag: entity wrapping tag, statement true: e.get_attr('value1') e.get_attr('value2', data_type=int) e.get_attr('value3', data_type=float) default, get_attr returns string type checking. code raise TypeError: e.get_attr('value1', data_type=int) e.get_attr('value2', data_type=float) e.get_attr('value3') Allowed types scalar types: str, int, float, bool uniform list, List[int]. list entities type: List[Entity] List usual object typing package. data_type set case scalar types uniform lists allowed: int, float, bool, str case instance type substitution, can_be_str argument get_attr call parser.parse_if_substitutions: e.get_attr('value2', data_type=int, can_be_str=True) normalized_value parser.parse_if_substitutions(value) checking attribute exists, optional argument: e.get_attr('value', optional=True) do_something(value) optional=False (default), AttributeError raised Accessing attributes Entity: yaml: executable: cmd: env: 'stuff' env children accessed env e.get_attr('env', data_type=List[Entity]) len(env) env[0].get_attr('name') 'a' env[0].get_attr('value') env[1].get_attr('name') 'b' env[1].get_attr('value') 'stuff' cases, e.env list entities, accessed abstract Accessing children: children accessed. group: executable: cmd: executable: cmd: File truncated lines full file"},
{"url": "https://index.ros.org/p/launch_param_builder", "package": "launch_param_builder", "package_summary": "Python library for loading parameters in launch files", "package_details": "launch_param_builder Python library loading parameters launch files Testing Linting test packages, command colcon. export TEST_PACKAGES=\"PROJECT_PACKAGE_NAMES\" colcon build --packages-select launch_param_builder colcon test --packages-select launch_param_builder --event-handlers console_direct+ colcon test-result add copyright file ament_copyright --add-missing PickNik bsd_3clause"},
{"url": "https://index.ros.org/p/launch_testing_ros", "package": "launch_testing_ros", "package_summary": "A package providing utilities for writing ROS2 enabled launch tests.", "package_details": "launch_testing_ros Examples talker_listener_launch_test.py Usage: launch_test test/examples/talker_listener_launch_test.py test launches talker listener nodes demo_nodes_py interacts ROS interfaces. Remapping rules tests sit talker listener change data fly. check_node_launch_test.py Usage: launch_test test/examples/check_node_launch_test.py situations nodes, launched, time start wait node start perform action. simulate launch.actions.TimerAction. shows detect node launched. delay launch seconds, wait node start timeout seconds. check_msgs_launch_test.py Usage: launch_test test/examples/check_msgs_launch_test.py problem statement launch node check messages published topic. demonstrates talker node. Event object test message received chatter topic, timeout seconds. set_param_launch_test.py Usage: launch_test test/examples/set_param_launch_test.py demonstrates launch node, set parameter check successful. test_fuzzy_data test test fuzzes data ROS subscriber publisher pair encapsulated DataRepublisher object string World\u201d \u201cAloha World\u201d travels talker listener. test_listener_receives test publishes unique messages /chatter topic asserts messages stdout listener node test_talker_transmits test subscribes remapped /talker_chatter topic talker node writes data transmitting stdout"},
{"url": "https://index.ros.org/p/leo_gz_worlds", "package": "leo_gz_worlds", "package_summary": "Gazebo worlds for Leo Rover simulation in ROS 2", "package_details": "leo_gz_worlds package worlds Gazebo: leo_empty.sdf empty world default world leo_gz_bringup. marsyard2020.sdf Marsyard terrain European Rover Challenge unoptimized marsyard2021.sdf Marsyard terrain European Rover Challenge Requires Gazebo Garden newer marsyard2022.sdf Marsyard terrain European Rover Challenge Requires Gazebo Garden newer"},
{"url": "https://index.ros.org/p/libcaer_driver", "package": "libcaer_driver", "package_summary": "ROS2 driver for event base sensors using libcaer", "package_details": "libcaer_driver ROS2 driver event based cameras Inilab\u2019s Libcaer (Davis, DvXplorer). driver written supported Inilabs. driver intended successor University Zuerich ROS1 driver. ROS2 port addresses deficiencies ROS1 driver, performance problems due message format. Usage event_camera_msgs format higher bandwidth efficient storage. events decoded displayed ROS/ROS2 packages: event_camera_codecs routines decode event_camera_msgs. event_camera_py module fast event decoding python. event_camera_renderer node nodelet renders publishes ROS image messages. event_camera_tools set tools echo, monitor performance convert event_camera_msgs legacy formats. Supported platforms Tested platforms: ROS2 Humble Ubuntu LTS ROS2 Jazzy Ubuntu LTS Tested hardware: Davis Davis DvXplorer Continuous integration testing covers ROS2 versions Humble Note: lead developer longer access hardware testing developing. Installation packages sudo apt install ros-${ROS_DISTRO}-libcaer-driver source build instructions follow standard procedure ROS2. Set shell variables: repo=libcaer_driver url=https://github.com/ros-event-camera/${repo}.git follow ROS2 build instructions source workspace\u2019s install/setup.bash driver version libcaer libcaer_vendor package), copy udev file place modify group permissions: sudo src/libcaer/lib/udev/rules.d/65-inivation.rules /etc/udev/rules.d/ sudo usermod video ${USER} sudo usermod plugdev ${USER} sudo udevadm trigger sudo service udev restart log host order updated group permissions hold. Driver Features Driver parameters biases device-specific parameters): auto_exposure_enabled: (defaults False) enables/disables driver-provided auto exposure APS frames. auto_exposure_illumination: defaults target brightness APS frame exposure auto_exposure_hysteresis: defaults relative tolerance brightness error adjusting exposure time. camera_frame_id: ROS frame header event image messages camerainfo_url: location ROS camera calibration file. device_type: \u201cdavis\u201d, \u201cdvxplorer\u201d, device_id: libcaer device (defaults event_message_time_threshold: seconds) minimum time span events aggregated ROS event message message Defaults event_message_size_threshold: bytes) minimum size events bytes) aggregated ROS event message message Defaults event_send_queue_size: outgoing ROS message send queue size (defaults messages). encoding: libcaer_cmp(compressed, default) libcaer (uncompressed). CPU usage encoding small, reduce CPU load driver reduction memory access sending message. uncompressed libcaer strongly discouraged. libcaer encoding event rates expected, decompression latency issue. imu_frame_id: ROS frame header imu messages imu_send_queue_size: (defaults max number ROS messages buffered send queue. master: (defaults True) device acting synchronization master. serial: specifies serial number camera open multiple cameras connected). learn serial number lsusb grep iSerial, start driver serial number left blank, console log. statistics_print_interval: time seconds statistics printouts.o time_reset_delay: integer time seconds wait hardware resetting sensor time. Defaults File truncated lines full file"},
{"url": "https://index.ros.org/p/libcaer_vendor", "package": "libcaer_vendor", "package_summary": "Wrapper around libcaer library", "package_details": "libcaer_vendor Wrapper package build Inivation libcaer library ROS2 build farm. License software issued Apache License Version Libcaer licensing information"},
{"url": "https://index.ros.org/p/libstatistics_collector", "package": "libstatistics_collector", "package_summary": "Lightweight aggregation utilities to collect statistics and measure message metrics.", "package_details": "libstatistics_collector Description library Collector interface implementing classes collect observed data generate statistics TopicStatisticsCollector interface implementing classes collect perform measurements ROS2 topic statistics. Classes calculating ROS message age message period statistics implemented. MovingAverageStatistics class calculating moving average statistics Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/libyaml_vendor", "package": "libyaml_vendor", "package_summary": "Vendored version of libyaml.", "package_details": "libyaml_vendor CMake wrapper downloading building libyaml Quality Declaration files Quality declaration package: libyaml_vendor Quality declaration external dependency libyaml."},
{"url": "https://index.ros.org/p/menge_vendor", "package": "menge_vendor", "package_summary": "Menge is a powerful, cross-platform, modular framework for crowd simulation developed at the University of North Carolina - Chapel Hill. This package includes the core simulation part of origin menge package, with a bit modification for crowd simulation in gazebo and ignition gazebo.", "package_details": "Customized Menge library large scale crowd simulation customized menge library perform large scale crowd simulation rmf projects https://github.com/osrf/rmf_demos. find original Menge repo https://github.com/MengeCrowdSim/Menge. Original research paper http://gamma-web.iacs.umd.edu/Menge/files/MengeTechReport.pdf introduction documentation http://gamma.cs.unc.edu/Menge/ original repo repo core part original menge lib. repo defines idea \u201cexternal agent\u201d. original agent, menge_core computes control agent position path plan collision avoidance simulation result, \u201cexternal agent\u201d updates position externally iteration. purpose introduing \u201cexternal agent\u201d separate walking human (controlled menge) moving robot (controlled external simulation), achieves collision avoidance human robot. repo removes throw(optional_type_list) declaration functions, declaration deprecated compile error removed repo repo crowd simulation plugin rmf projects. include master branch repo project repo list. Related documents performing crowd simulation rmf projects https://github.com/FloodShao/crowd_simulation/tree/master/crowd_simulation_doc"},
{"url": "https://index.ros.org/p/metavision_driver", "package": "metavision_driver", "package_summary": "ROS1 and ROS2 drivers for metavision based event cameras", "package_details": "metavision_driver combined ROS/ROS2 driver event based cameras Prophesee\u2019s Metavision SDK. driver written supported Prophesee. speed features official Prophesee ROS driver repository. driver cope large amount data produced Prophesee\u2019s Gen3 sensors RAW EVT3 format) events camera publishing ROS event_camera_msgs format. events decoded displayed ROS/ROS2 packages: event_camera_codecs routines decode event_camera_msgs. event_camera_py module fast event decoding python. event_camera_renderer node nodelet renders publishes ROS image messages. event_camera_tools set tools echo, monitor performance convert event_camera_msgs legacy formats \u201cRAW\u201d format. Supported platforms Tested platforms: ROS Noetic (legacy, transition ROS2) ROS2 Humble Rolling compiles versions, Ubuntu LTS Metavision SDK (OpenEB) Tested hardware: SilkyEVCam VGA (Gen sensor) SilkyEVCam (Gen sensor) Prophesee EVK4 (Gen sensor) Explicitly supported: data EVT2 format. sensor produce data EVT3 format. EVT4 format supported. Installation binaries ROS2 install sudo apt install ros-${ROS_DISTRO}-metavision-driver install version OpenEB /opt/ros/${ROS_DISTRO}. separately install OpenEB install required udev rules source tree directory udev/rules.d/, restart udev, OpenEB. SilkyEV cameras plugin version matches version ROS OpenEB vendor package installed (check CMakeLists.txt file), camera recognized! driver find camera, building source build source Prerequisites: install OpenEB install vcs (ubuntu package python3-vcstool). ROS1 ROS2 environment sourced ROS_VERSION set. ROS1 noetic: source /opt/ros/noetic/setup.bash Create workspace (metavision_driver_ws), clone repo, vcs pull remaining dependencies: pkg=metavision_driver mkdir ~/${pkg}_ws/src ~/${pkg}_ws git clone https://github.com/ros-event-camera/metavision_driver.git src/${pkg} src vcs import ${pkg}/${pkg}.repos Optional (ROS1): efficient recording nodelet clone nodelet_rosbag repository src tree: git clone open_bag_later git@github.com:berndpfrommer/nodelet_rosbag.git src/nodelet_rosbag configure build: File truncated lines full file"},
{"url": "https://index.ros.org/p/micro_ros_common_diagnostics", "package": "micro_ros_common_diagnostics", "package_summary": "Common microcontroller-specific diagnostics and monitors.", "package_details": "General information repository, including legal information, build instructions issues/limitations, README repository root. micro-ROS common diagnostics package micro-ROS diagnostic updater ROS package common microcontroller-specific diagnostic functions monitors micro-ROS. Purpose Project software ready production developed tested specific case. license conditions applicable Open Source licenses adapt software safety relevant setting, software fulfills requirements adjust applicable safety standards, ISO Build, Test, Install, cloned repository ROS workspace folder, build install colcon: colcon build --packages-select micro_ros_common_diagnostics License micro-ROS diagnostics framework packages open-sourced Apache-2.0 license. ../LICENSE file details. list open-source components included ROS micro_ros_diagnostics, file ../3rd-party-licenses.txt. Acknowledgments activity received funding European Research Council (ERC) European Union\u2019s Horizon research innovation programme (grant agreement"},
{"url": "https://index.ros.org/p/micro_ros_diagnostic_bridge", "package": "micro_ros_diagnostic_bridge", "package_summary": "Translates micro-ROS diagnostic messages to vanilla ROS 2 diagnostic messages.", "package_details": "General information repository, including legal information, build instructions issues/limitations, README repository root. micro-ROS diagnostic bridge package micro-ROS diagnostic bridge ROS package bridge translate micro-ROS diagnostic messages vanilla ROS diagnostic messages based lookup table. exemplary lookup table example_table.yaml, launch file Purpose Project software ready production developed tested specific case. license conditions applicable Open Source licenses adapt software safety relevant setting, software fulfills requirements adjust applicable safety standards, ISO Build, Test, Install, cloned repository ROS workspace folder, build install colcon: colcon build --packages-select micro_ros_diagnostic_bridge Change default input topics output topic Input default, micro_ros_diagnostic_bridge listen updates <namespace>/diagnostics_uros. happen user, namespaces bridge updater node run simplicity user, default launch file bridge launch configuration pass remapping needed. read README micro_ros_diagnostic_updater information modify default topic Note updater form <prefix>/diagnostics_uros Output default, micro_ros_diagnostic_bridge publish <namespace>/diagnostics. order user able adjust convenience, default launch file bridge launch configuration modify topic. Launching launch remappings ros2 launch micro_ros_diagnostic_bridge diagnostic_bridge.launch.py input_topic:=[/]your/new/input/topicname output_topic:=[/]your/topic/diagnostics Note: word diagnostics output. recommended. convenience. input topic diagnostics_uros. user prepend namespaces remap begins providing FQDN respect node namespace. input_topic:= match updater output_topic Build examples mentioned, package build examples default, build colcon build --packages-select micro_ros_diagnostic_bridge --cmake-args -DMICRO_ROS_DIAGNOSTIC_BRIDGE_EXAMPLES=ON License micro-ROS diagnostics framework packages open-sourced Apache-2.0 license. ../LICENSE file details. list open-source components included ROS system_modes, file ../3rd-party-licenses.txt. Acknowledgments activity received funding European Research Council (ERC) European Union\u2019s Horizon research innovation programme (grant agreement"},
{"url": "https://index.ros.org/p/micro_ros_diagnostic_msgs", "package": "micro_ros_diagnostic_msgs", "package_summary": "Ccontains messages and service definitions for micro-ROS diagnostics.", "package_details": "General information repository, including legal information, build instructions issues/limitations, README repository root. Micro-ROS Diagnostic Messages Micro-ROS Diagnostic Messages ROS package micro-ROS-specific message types service types diagnostics. Message service types copies respective types ROS common_interfaces/diagnostic_msgswith minor adaptions micro-ROS. General information repository, including legal information, project context, build instructions issues/limitations, README.md repository root. Purpose Project software ready production developed tested specific case. license conditions applicable Open Source licenses adapt software safety relevant setting, software fulfills requirements adjust applicable safety standards, ISO Build, Test, Install, cloned repository ROS workspace folder, build install colcon: colcon build --packages-select micro_ros_diagnostic_msgs License micro-ROS diagnostics framework packages open-sourced Apache-2.0 license. ../LICENSE file details. list open-source components included ROS micro_ros_diagnostics, file ../3rd-party-licenses.txt. Issues/Limitations notice issues/limitations: Due limitations Micro-ROS agent, micro-ROS diagnostics framework publish default ROS diagnostic messages diagnostic_msgs, simplified versions diagnostic messages services arrays, MicroROSDiagnosticStatus MicroROSSelfTest. simplified messages services translated agent party. Acknowledgments activity received funding European Research Council (ERC) European Union\u2019s Horizon research innovation programme (grant agreement"},
{"url": "https://index.ros.org/p/micro_ros_diagnostic_updater", "package": "micro_ros_diagnostic_updater", "package_summary": "Diagnostic updaters for micro-ROS.", "package_details": "General information repository, including legal information, build instructions issues/limitations, README repository root. micro-ROS diagnostic updater package micro-ROS diagnostic updater ROS package convenience functions implement diagnostic tasks amd updaters based ROS Client C-Library (RCLC) micro-ROS. exemplary implementation example/example_updater.c. examples disabled default, build examples, build MICRO_ROS_DIAGNOSTIC_UPDATER_EXAMPLES=ON Purpose Project software ready production developed tested specific case. license conditions applicable Open Source licenses adapt software safety relevant setting, software fulfills requirements adjust applicable safety standards, ISO Build, Test, Install, cloned repository ROS workspace folder, build install colcon: colcon build --packages-select micro_ros_diagnostic_updater Modify namespace output topic default, micro_ros_diagnostic_updater output <namespace>/diagnostics_uros. inconvenience implementation. provide CMake build option MICRO_ROS_DIAGNOSTIC_UPDATER_DIAGNOSTICS_TOPIC_PREFIX modify topic building. Note topic diagnostics_uros important prefix ends `/my/topicdiagnostics_uros` prefix begins topic follow FQDN rules. build option allowing final FQDN namespace node. colcon build --packages-select micro_ros_diagnostic_updater --cmake-args -DMICRO_ROS_DIAGNOSTIC_UPDATER_DIAGNOSTICS_TOPIC_PREFIX=my/other/namespaces/ build option providing FQDN colcon build --packages-select micro_ros_diagnostic_updater --cmake-args -DMICRO_ROS_DIAGNOSTIC_UPDATER_DIAGNOSTICS_TOPIC_PREFIX=/this/is/final/ Modify max tasks updater default, max amount tasks updater set number big small cases. Therefor, provide CMake build option MICRO_ROS_DIAGNOSTIC_UPDATER_MAX_TASKS_PER_UPDATER modify build flag, max tasks updater. colcon build --packages-select micro_ros_diagnostic_updater --cmake-args -DMICRO_ROS_DIAGNOSTIC_UPDATER_MAX_TASKS_PER_UPDATER=8 Build examples mentioned, package build examples default, build colcon build --packages-select micro_ros_diagnostic_updater --cmake-args -DMICRO_ROS_DIAGNOSTIC_UPDATER_EXAMPLES=ON Publish update Force update updater won\u2019t publish statuses task who\u2019s data unchanged, reduce traffic processing needed updater iteration. due reasons, force updater publish subscription added executor passed initialization updater. subscriber listening message type std_msgs/msg/Empty, topic <namespace>/diagnostics_uros/force_update. mind, <namespace> modified License micro-ROS diagnostics framework packages open-sourced Apache-2.0 license. ../LICENSE file details. list open-source components included ROS micro_ros_diagnostics, file ../3rd-party-licenses.txt. Acknowledgments activity received funding European Research Council (ERC) European Union\u2019s Horizon research innovation programme (grant agreement"},
{"url": "https://index.ros.org/p/micro_ros_msgs", "package": "micro_ros_msgs", "package_summary": "Definitions for the ROS 2 msgs entities information used by micro-ROS to leverage its functionality to the same level as ROS 2, by means of a dedicated graph manager", "package_details": "micro_ros_msgs Summary Collection ROS message definitions implementation micro-ROS, server (micro-ROS Agent) client (micro-ROS RMW) endpoints. Purpose Project software ready production developed tested specific case. license conditions applicable Open Source licenses adapt software safety relevant setting, software fulfills requirements adjust applicable safety standards, ISO License repository open-sourced Apache-2.0 license. LICENSE file details. Issues/Limitations limitations."},
{"url": "https://index.ros.org/p/mimick_vendor", "package": "mimick_vendor", "package_summary": "Wrapper around mimick, it provides an ExternalProject build of mimick.", "package_details": "mimick_vendor CMake shim mimick library: https://github.com/Snaipe/Mimick"},
{"url": "https://index.ros.org/p/kitti_metrics_eval", "package": "kitti_metrics_eval", "package_summary": "CLI tool to evaluate the KITTI odometry bechmark metrics to trajectory files", "package_details": "mola_input_kitti_dataset CLI tool evaluate KITTI odometry benchmark metrics arbitrary trajectory files, kitti tum formats. evo. Build install Documentation Examples usage Evaluate KITTI metrics solution SLAM method Evaluate KITTI metrics dataset Transform KITTI solution file TUM format KITTI License Build install Refer root MOLA repository compilation instructions. install ROS repositories: sudo apt install ros-${ROS_DISTRO}-mola-metrics-eval program largely based public Kitti dataset evaluation code. Rewritten Eigen GNU GPL\u2019d code, add additional features. Original source code notice: KITTI VISION BENCHMARK SUITE: VISUAL ODOMETRY SLAM BENCHMARK Andreas Geiger Philip Lenz Raquel Urtasun Karlsruhe Institute Technology Toyota Technological Institute Chicago www.cvlibs.net Documentation Basically, CLI program evaluating KITTI metrics ways: estimated trajectories KITTI odometry sequences, stored TUM format original KITTI dev kit, kitti format). case, program reads ground truth sequences calibration files user\u2019s local copy KITTI dataset. Calibration data transform user\u2019s input trajectory cam0 frame, KITTI ground truth paths pair trajectory files datasets, ground truth estimated trajectory file. USAGE: kitti-metrics-eval [--no-figures] [--gt-tum-path <trajectory_gt.txt>] [--save-as-kitti <result.kitti>] <result.txt> [--version] --no-figures Skip generating error figures --gt-tum-path <trajectory_gt.txt> --sequence flag file TUM format read ground truth compare resulting odometry path. --sequence (accepted multiple times) sequence number path(s) file(s) evaluate, find calibration files Kitti dataset. --save-as-kitti <result.kitti> transform input path LIDAR frame cam0 frame save path TXT file format expected KITTI dev kit. <result.txt>, --result-tum-path <result.txt> (required) File evaluate, TUM format --kitti-basedir Path kitti datasets. Overrides default, reading env var `KITTI_BASE_DIR`. --ignore_rest Ignores rest labeled arguments flag. --version Displays version information exits. Displays usage information exits. Examples usage Evaluate KITTI metrics solution SLAM method Evaluate KITTI test sequences kitti-metrics-eval results/estim_%02i.txt --kitti-basedir /path/to/your/local/kitti_dataset Expected tree layout kitti_dataset directory: File truncated lines full file"},
{"url": "https://index.ros.org/p/mola", "package": "mola", "package_summary": "Metapackage with all core open-sourced MOLA packages.", "package_details": "MRPT ROS wrappers Mobile Robot Programming Toolkit (MRPT) classes apps. Refer http://wiki.ros.org/mrpt_navigation documentation."},
{"url": "https://index.ros.org/p/mola_bridge_ros2", "package": "mola_bridge_ros2", "package_summary": "Bidirectional bridge ROS2-MOLA", "package_details": "mola_bridge_ros2 RawDataSource acting bidirectional bridge ROS2 MOLA modules. ROS2->MOLA: Interface real sensor ROS driver node run SLAM mola_lidar_odometry demos. MOLA->ROS2: Expose dataset ROS2 topics, datasets supported MOLA. kitti ROS2<->MOLA: Run SLAM live sensor stream, send reconstructed map trajectory ROS processing visualization RViz. mola_lidar_odometry demos. run SLAM rosbag, module mola_input_rosbag2 convenient interface, fast-forwarding skipping parts bag. Building module requires ROS installed, setup.bash activation script sourced invoking CMake configure build MOLA. package docs instructions options install ROS prerequisites. MOLA modules: BridgeROS2, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released BSD 3-clause license."},
{"url": "https://index.ros.org/p/mola_demos", "package": "mola_demos", "package_summary": "Demo and example launch files for MOLA", "package_details": "mola_demos Demo launch files MOLA Note launch files ROS standalone builds MOLA. Examples demos Read external Ouster lidar MOLA terminal mola-cli $(ros2 pkg prefix --share mola_demos)/launch/ros2_ouster_just_view.yaml terminal: ros2 bag play my_lidar_dataset.mcap Build install Refer root MOLA repository. License package released BSD-3 license."},
{"url": "https://index.ros.org/p/mola_input_euroc_dataset", "package": "mola_input_euroc_dataset", "package_summary": "Offline RawDataSource from EUROC SLAM datasets", "package_details": "mola_input_euroc_dataset Offline RawDataSource EUROC SLAM datasets. MOLA modules: EurocDataset, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_input_kitti360_dataset", "package": "mola_input_kitti360_dataset", "package_summary": "Offline RawDataSource from Kitti-360 datasets", "package_details": "mola_input_kitti360_dataset Offline RawDataSource Kitti-360 SLAM datasets MOLA modules: Kitti360Dataset, type RawDataSourceBase. Build install Refer root MOLA repository. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_input_kitti_dataset", "package": "mola_input_kitti_dataset", "package_summary": "Offline RawDataSource from Kitti odometry/SLAM datasets", "package_details": "mola_input_kitti_dataset Offline RawDataSource Kitti odometry/SLAM datasets MOLA modules: KittiOdometryDataset, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_input_lidar_bin_dataset", "package": "mola_input_lidar_bin_dataset", "package_summary": "Offline RawDataSource from LiDAR datasets stored as `.bin` files in the Kitti binary format", "package_details": "Changelog package mola_input_lidar_bin_dataset Offline RawDataSource LiDAR datasets stored .bin files Kitti binary format MOLA modules: BinFileDataset, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_input_mulran_dataset", "package": "mola_input_mulran_dataset", "package_summary": "Offline RawDataSource from MulRan datasets", "package_details": "mola_input_mulran_dataset Offline RawDataSource Mulran datasets MOLA modules: MulranDataset, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_input_paris_luco_dataset", "package": "mola_input_paris_luco_dataset", "package_summary": "Offline RawDataSource from Paris LUCO (CT-ICP) odometry/SLAM datasets", "package_details": "mola_input_paris_luco_dataset Offline RawDataSource Paris LUCO (CT-ICP) odometry/SLAM datasets MOLA modules: ParisLucoDataset, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_input_rawlog", "package": "mola_input_rawlog", "package_summary": "Offline RawDataSource from MRPT rawlog datasets", "package_details": "mola_input_rawlog Offline RawDataSource MRPT rawlog datasets MOLA modules: RawlogDataset, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_input_rosbag2", "package": "mola_input_rosbag2", "package_summary": "Offline RawDataSource from rosbag2 datasets", "package_details": "mola_input_rawlog Offline RawDataSource MRPT rawlog datasets MOLA modules: RawlogDataset, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_input_video", "package": "mola_input_video", "package_summary": "RawDataSource from live or offline video sources", "package_details": "mola_input_video RawDataSource live offline video sources. MOLA modules: VideoDataset, type RawDataSourceBase. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_kernel", "package": "mola_kernel", "package_summary": "Fundamental C++ virtual interfaces and data types for the rest of MOLA modules", "package_details": "mola_kernel MOLA kernel library, providing definition essential virtual interfaces data types. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_launcher", "package": "mola_launcher", "package_summary": "Launcher app for MOLA systems", "package_details": "mola_launcher Launcher app MOLA systems Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_metric_maps", "package": "mola_metric_maps", "package_summary": "Advanced metric map classes, using the generic `mrpt::maps::CMetricMap` interface, for use in other MOLA odometry and SLAM modules.", "package_details": "mola_metric_maps Advanced metric map classes, generic mrpt::maps::CMetricMap interface, MOLA odometry SLAM modules. Contents repository pure library mola_metric_maps extends mrpt-maps additional metric map classes: mola::OccGrid: Extends MRPT\u2019s occupancy grid super-resolution likelihood field. mola::SparseVoxelPointCloud: pointcloud stored dual hash\u2019ed voxel maps, decimation purposes nearest-neighbor search. Build install Refer root MOLA repository. License Copyright Jose Luis Blanco jlblanco@ual.es, University Almeria package released GNU GPL license open source research evaluation purposes Commercial licenses request, package combination complete SLAM system."},
{"url": "https://index.ros.org/p/mola_pose_list", "package": "mola_pose_list", "package_summary": "C++ library for searchable pose lists", "package_details": "mola_pose_list Data structures algorithms related poses. repository classes: SearchablePoseList HashedSetSE3 Build install Refer root MOLA repository. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_relocalization", "package": "mola_relocalization", "package_summary": "C++ library with algorithms for relocalization, global localization, or pose estimation given a large initial uncertainty", "package_details": "mola_relocalization library algorithms relocalization, global localization, pose estimation large initial uncertainty. Note particle filtering implemented repository mrpt_navigation. Method mola::RelocalizationICP_SE2 Takes global local metric map, ROI, match local map global map running ICP initial guesses defined regular lattice, returning result hashed lattice. method based mp2p_icp ICP pipelines. Method mola::RelocalizationLikelihood_SE2 Takes global metric map, observation, ROI, evaluates likelihood observation regular lattice. based mrpt maps observationLikelihood() evaluation, main parameters determine likelihood computed defined hand metric map layers input reference map. present algorithm sensor/map types: observations: pointclouds/2d_scan, reference_map: gridmap observations: pointclouds, reference_map: pointclouds result mola::RelocalizationLikelihood_SE2 method unit test, code details): Figure: (top-left) Reference map. (bottom-left) Query map decimated version internally). (top-right) Visualization slice returned likelihood field ROI. \u201cslice\u201d orientation (phi) equal (close actual pose transformation maps). (bottom-right) likelihood slice, real coordinates (meters). clear peak reveals, approximately, location sought transformation maps. refining ICP initial guess. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_traj_tools", "package": "mola_traj_tools", "package_summary": "CLI tools to manipulate trajectory files as a complement to the evo package", "package_details": "mola_traj_tools CLI tools manipulate trajectory files complement evo. Build install Documentation License Build install Refer root MOLA repository compilation instructions. install ROS repositories: sudo apt install ros-${ROS_DISTRO}-mola-traj-tools Documentation traj_ypr2tum tool convert TXT file trajectory format (X,Y,Z, Yaw, Pitch, Roll): [unix timestamp, double] [meters] yaw pitch roll [radians] yaw pitch roll TUM format orientation quaternion. Usage: traj_ypr2tum INPUT.ypr OUTPUT.tum traj_tum2ypr tool converts trajectory TUM format, orientation quaternion, TXT file orientation Yaw, Pitch, Roll angles: [unix timestamp, double] [meters] yaw pitch roll [radians] yaw pitch roll Usage: traj_tum2ypr INPUT.tum OUTPUT.ypr traj_tf_left tool takes input trajectory file TUM format, transformation, applies input trajectory multiplying trajectory left transformation, writing modified trajectory output file. Usage: traj_tf_left INPUT.tum OUTPUT.tum yaw_deg pitch_deg roll_deg]\" traj_tf_right tool takes input trajectory file TUM format, transformation, applies input trajectory multiplying trajectory transformation, writing modified trajectory output file. Usage: traj_tf_right INPUT.tum OUTPUT.tum yaw_deg pitch_deg roll_deg]\" ncd-csv2tum Convert NewerCollegeDataset \u201ctum\u201d ground truth files format compatible evo, merging time columns \u201cseconds\u201d \u201cnanoseconds\u201d ensuring extra spaces. Usage: ncd-csv2tum /path/to/traj.csv Generates: traj.tum License package released BSD-3-clause license."},
{"url": "https://index.ros.org/p/mola_viz", "package": "mola_viz", "package_summary": "GUI for MOLA", "package_details": "mola_viz GUI MOLA library libmola-viz flexible API module display windows, controls, Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_yaml", "package": "mola_yaml", "package_summary": "YAML helper library common to MOLA modules", "package_details": "mola_yaml YAML helper library common MOLA modules. library parse YAML files extended syntax allowing variable replacing, recursive includes YAML files, Build install Refer root MOLA repository. Docs examples package page documentation. License package released BSD-3 license."},
{"url": "https://index.ros.org/p/mola_lidar_odometry", "package": "mola_lidar_odometry", "package_summary": "LIDAR odometry system based on MOLA and MRPT components", "package_details": "mola_lidar_odometry LIDAR odometry component based MOLA MRPT frameworks, compatible ROS Contents repository library mola_lidar_odometry implementing LIDAR odometry. Sensor input MOLA components, ROS launch files ros2-launchs. CLI interface mola-lidar-odometry-cli running offline datasets. Build install Refer https://docs.mola-slam.org/latest/#installing Lidar Inertial Odometry (LIO) demo Oxford Spires: Lidar Odometry demo KITTI: Documentation tutorials https://docs.mola-slam.org/ ROS build farm status Distro Develop branch Releases Stable release ROS2 Humble amd64 arm64 ROS Jazzy amd64 arm64 ROS Kilted amd64 arm64 ROS Rolling amd64 arm64 EOL Distro release ROS2 Iron Citation latest publication MOLA (ArXiV). @article{blanco2025mola_lo, author {Blanco-Claraco, Jose Luis}, title flexible framework accurate LiDAR odometry, map manipulation, localization}}, journal International Journal Robotics Research}, volume number pages year doi URL https://doi.org/10.1177/02783649251316881}, eprint License Copyright Jose Luis Blanco jlblanco@ual.es, University Almeria package released GNU GPL license open source, main intention research evaluation purposes. Commercial licenses request."},
{"url": "https://index.ros.org/p/mola_test_datasets", "package": "mola_test_datasets", "package_summary": "Small SLAM dataset extracts used for demos or unit tests in the rest of MOLA packages", "package_details": "Distro Build dev Build releases Stable version ROS Humble ROS Jazzy ROS Kilted ROS Rolling EOL Distro published version ROS Iron mola_test_datasets Small SLAM dataset extracts demos unit tests main MOLA repository. License dataset holds license original authors, subdirectory\u2019s README. rest files root directory explicit LICENSE file covered BSD 3-Clause license."},
{"url": "https://index.ros.org/p/moveit_core", "package": "moveit_core", "package_summary": "Core libraries used by MoveIt", "package_details": "MoveIt Core repository includes core libraries MoveIt: representation kinematic models collision detection interfaces implementations interfaces kinematic solver plugins interfaces motion planning plugins interfaces controllers sensors libraries depend ROS ROS messages) independently."},
{"url": "https://index.ros.org/p/pilz_industrial_motion_planner", "package": "pilz_industrial_motion_planner", "package_summary": "MoveIt plugin to generate industrial trajectories PTP, LIN, CIRC and sequences thereof.", "package_details": "consult tutorials official documentation. details blend algorithm refer"},
{"url": "https://index.ros.org/p/moveit_resources_prbt_support", "package": "moveit_resources_prbt_support", "package_summary": "Mechanical, kinematic and visual description\n  of the Pilz light weight arm PRBT.", "package_details": "Overview prbt_support package files start PRBT manipulator. start robot run roslaunch prbt_support robot.launch. ROS API SystemInfoNode Logs important system information. Services /prbt/driver/get_object (canopen_chain_node/GetObject) Read CANOpen object holding firmware information."},
{"url": "https://index.ros.org/p/moveit_ros_control_interface", "package": "moveit_ros_control_interface", "package_summary": "ros_control controller manager interface for MoveIt", "package_details": "MoveIt ROS Control Plugin package plugins base class moveit_controller_manager::MoveItControllerManager plugin base class moveit_controller_manager::MoveItControllerHandle allocators. allocator class moveit_controller_manager::MoveItControllerHandle passed constructor. variants moveit_ros_control_interface::Ros2ControlManager interfacing single ros_control node moveit_ros_control_interface::Ros2ControlMultiManager seamless integration number ros_control nodes. moveit_ros_control_interface::Ros2ControlManager plugin interfaces single ros_control-driven node namespace ~ros_control_namespace ROS parameter. polls controllers list_controllers service passes properties MoveIt. polling throttled Hertz. Handle plugins actual handle creation delegated allocator plugins base class moveit_ros_control_interface::ControllerHandleAllocator. plugins registered lookup names match controller types. plugins position_controllers/JointTrajectoryController, velocity_controllers/JointTrajectoryController effort_controllers/JointTrajectoryController simply wrap moveit_simple_controller_manager::FollowJointTrajectoryControllerHandle instances. Setup MoveIt launch file ROBOT_moveit_config/launch/ROBOT_moveit_controller_manager.launch.xml), set moveit_controller_manager parameter: <param name=\"moveit_controller_manager\" value=\"moveit_ros_control_interface::Ros2ControlManager\" set ros_control_namespace parameter namespace /controller_manager/ part) ros_control-based node interface. timeout seconds service call controller changed default setting controller_service_call_timeout parameter. moveit_setup_assistant, add ROBOT_moveit_config/config/moveit_controllers.yaml, ros_control_namespace: /ROS_CONTROL_NODE controller_service_call_timeout: controller_list: /ROS_CONTROL_NODE/position_trajectory_controller action_ns: follow_joint_trajectory type: FollowJointTrajectory default: true joints: joint_a1 joint_a2 joint_a3 joint_a4 joint_a5 joint_a6 joint_a7 Controller switching MoveIt decide controllers started stopped. controller names registered allocator plugins handed MoveIt, implementation takes care stopping conflicting controllers based claimed resources resources to-be-started controllers. Namespaces controller names prefixed namespace ros_control node. work controller names slashes. strict requirement ros_control namespace moveit_ros_control_interface::Ros2ControlMultiManager plugin configuration. polls ROS main services identifies ros_control nodes automatically. spawns moveit_ros_control_interface::Ros2ControlManager instances namespace takes cares proper delegation. Setup set moveit_controller_manager parameter MoveIt launch file ROBOT_moveit_config/launch/ROBOT_moveit_controller_manager.launch.xml) <param name=\"moveit_controller_manager\" value=\"moveit_ros_control_interface::Ros2ControlMultiManager\""},
{"url": "https://index.ros.org/p/moveit_py", "package": "moveit_py", "package_summary": "Python binding for MoveIt 2", "package_details": "MoveIt Python Library moveit_py Python library interfacing core functionalities MoveIt goal library provide simplified interface MoveIt Python users. Python library depends pybind11 generating Python bindings. project split folders: docs Sphinx documentation files moveit Python library stubs; Python functionalities built top bindings src/moveit pybind11 binding code test Unit integration testing Tutorials continuing add tutorials MoveIt Python library. note fact interact MoveIt interactively Python interpreted language, tutorials demonstrate leveraging Jupyter notebooks. details consult MoveIt tutorials site. Contribution Guidelines Community contributions detailed contribution guidelines consult official MoveIt contribution guidelines. Citing Library library work citation: @software{fagan2023moveitpy, author {Fagan, Peter David}, title {{MoveIt Python Library: Software Library Robotics Education Research}}, url {https://github.com/moveit/moveit2/tree/main/moveit_py}, year Acknowledgements Google Summer Code program sponsoring development Python library. MoveIt maintainers Henning Kayser (@henningkayser) Michael Goerner (@v4hn) guidance supervisors GSoC project. Finally Collective providing compute support project."},
{"url": "https://index.ros.org/p/moveit_ros_benchmarks", "package": "moveit_ros_benchmarks", "package_summary": "Enhanced tools for benchmarks in MoveIt", "package_details": "MoveIt ROS Benchmarks package methods benchmark motion planning algorithms aggregate/plot statistics. Results viewed Planner Arena. information usage moveit tutorials."},
{"url": "https://index.ros.org/p/moveit_hybrid_planning", "package": "moveit_hybrid_planning", "package_summary": "Hybrid planning components of MoveIt 2", "package_details": "Hybrid Planning Hybrid Planning architecture. find information project\u2019s issues#300, MoveIt roadmap. extensive tutorial started start demo run: ros2 launch moveit_hybrid_planning hybrid_planning_demo.launch.py exchange planner logic plugin hybrid_planning_manager.yaml. demo plugins planner logic plugins: replan_invalidated_trajectory: Runs global planner starts executing global solution local planner. case local planner detects collision global planner rerun update invalidated global trajectory. single_plan_execution: Run global planner starts executing global solution local planner global_planner plugins: moveit_planning_pipeline: Global planner plugin utilizes MoveIt\u2019s planning pipeline accessed MoveItCpp API. trajectory operator plugins: simple_sampler: Samples global trajectory waypoint local goal constraint based current robot state. waypoint reached index marks current local goal constraint updated global trajectory waypoint. Global trajectory updates simply replace reference trajectory. local solver plugins: forward_trajectory: Forwards waypoint sampled local trajectory. Additionally, enable collision checking, lets robot stop front collision object."},
{"url": "https://index.ros.org/p/moveit_servo", "package": "moveit_servo", "package_summary": "Provides real-time manipulator Cartesian and joint servoing.", "package_details": "MoveIt Servo Realtime Arm Servoing Tutorial installation instructions, quick-start guide, overview moveit_servo, learn set robot."},
{"url": "https://index.ros.org/p/moveit_ros_trajectory_cache", "package": "moveit_ros_trajectory_cache", "package_summary": "A trajectory cache for MoveIt 2 motion plans and cartesian plans.", "package_details": "Fuzzy-Matching Trajectory Cache trajectory cache based warehouse_ros move_group planning interface supports fuzzy lookup MotionPlanRequest GetCartesianPath requests trajectories. cache work manipulators arbitrary number joints, number move groups. cache supports pruning ranking fetched trajectories, extension points injecting feature keying, cache insert, cache prune cache sorting logic. Citations package work, cite @software{ong_2024_11215428, author {Ong, Brandon}, title Fuzzy-Matching Trajectory Cache MoveIt month year publisher {GitHub}, version doi {10.5281/zenodo.11215428}, url {https://doi.org/10.5281/zenodo.11215428} WARNING: unsupported RFE initial release, features unsupported difficult time implement leaving community cache support collision detection, multi-DOF joints, constraint regions! Trajectories put fetched cache IGNORING collision. planning scene expected change significantly cache lookups, fetched plan result collisions. natively handle collisions cache hash planning scene world msg zeroing std_msgs/Header timestamps sequences) lookup, complicated checks scene world \u201cclose strictly obstructed version scene cache entry. fuzzy lookup configured per-joint basis. ways lack native collision support enable cache, Validating fetched plan collisions execution. hybrid planning pipeline, local planners collision avoidance, keeping cache stand-in \u201cglobal planner\u201d, applicable. Usage PRE-REQUISITE: warehouse_plugin ROS parameter set warehouse_ros plugin installed, determines database backend cache. auto cache std::make_shared<TrajectoryCache>(node); cache->init(/*db_host=*/\":memory:\", /*db_port=*/0, /*exact_match_precision=*/1e-6); default feature extractors key cache starting robot state goal constraints plan request. Keyed fuzzily separate fuzziness start goal features. auto default_features TrajectoryCache::getDefaultFeatures(start_tolerance, goal_tolerance); std::string TrajectoryCache::getDefaultSortFeature(); Sorts planned execution time. move_group.setPoseTarget(...); moveit_msgs::msg::MotionPlanRequest motion_plan_req_msg; move_group.constructMotionPlanRequest(motion_plan_request_msg); cache planning! auto fetched_trajectory cache->fetchBestMatchingTrajectory(*move_group_interface, robot_name, motion_plan_req_msg, /*features=*/default_features, /*sort_by=*/TrajectoryCache::getDefaultSortFeature(), /*ascending=*/true); (fetched_trajectory) Great! cache hit, execute move_group.execute(*fetched_trajectory); plan... put posterity! moveit::planning_interface::MoveGroupInterface::Plan plan; (move_group.plan(plan) moveit::core::MoveItErrorCode::SUCCESS) cache->insertTrajectory( *interface, robot_name, std::move(plan_req_msg), std::move(plan), /*cache_insert_policy=*/BestSeenExecutionTimePolicy(), /*prune_worse_trajectories=*/true, /*additional_features=*/{}); Main Features Overview trajectory cache package supports: Inserting fetching trajectories, keyed fuzzily feature plan request plan response. Ranking cache entries keying feature supported sorting execution time). Optional cache pruning fetch times database sizes Generic support manipulators arbitrary number joints, number move_groups. Cache namespacing partitioning Extension points injecting feature keying, cache insert, cache prune, cache sorting logic. cache supports MotionPlanRequest GetCartesianPaths::Request box! Fully Customizable Behavior trajectory cache inject implementations affect: features plan request plan response key cache cache insert cache pruning policy adopt decide write feature extractor key cache, decide insert prune cache entry features File truncated lines full file"},
{"url": "https://index.ros.org/p/nao_button_sim", "package": "nao_button_sim", "package_summary": "Allows simulating button presses through command line interface", "package_details": "Nao Button Sim packages simple simulate button presses NAO command line. physically press button robot, working simulated robots working real robot location package simply converts key presses nao_sensor_msgs/msg/Buttons publishes /sensors/buttons rate frequency parameter (default: Installing ROS2 workspace, git clone git@github.com:ijnek/nao_button_sim.git src/nao_button_sim rosdep install --from-paths src colcon build Running Button Simulator terminal, run: ros2 run nao_button_sim nao_button_sim terminal spammed, increase width terminal window, zoom (Ctrl couple times, ensure terminal window characters wide. spamming stops, kill node (Ctrl rerun simulate button press, click key assigned keys list Assigned Keys Chest button Left Foot Bumper Left Left Foot Bumper Foot Bumper Left Foot Bumper program visual feedback buttons pressed. word \u201cPressed\u201d show column, shown BUTTON PRESS STATUS Chest LFoot BumperL LFoot BumperR RFoot BumperL RFoot BumperR Pressed Pressed Multiple keys pressed time. Published Topics /sensors/buttons (nao_sensor_msgs/msg/Buttons) Parameters frequency (int, default=50)"},
{"url": "https://index.ros.org/p/nao_lola", "package": "nao_lola", "package_summary": "Packages that allow communicating with the NAO\u2019s Lola middle-ware.", "package_details": "nao_lola ROS2 package dealing NAO\u2019s RoboCup-tailored Lola middle-ware. information, Documentation"},
{"url": "https://index.ros.org/p/nao_meshes", "package": "nao_meshes", "package_summary": "ROS2 Meshes for the NAO robot", "package_details": "nao_meshes2 package install Aldebaran NAO meshes ROS2 building binary package, installer user agree Creative Commons Attribution-NonCommercial-NoDerivatives International Public License LICENSE file: requirement Aldebaran. Justification: French law, clicking/entering text recognized virtual signature; LICENSE file sufficient. Aldebaran redistribute meshes long installer asks user click/enter \u201cok/yes\u201d. history repo frequently re-written don\u2019t history meshes result heavy cloning. Status ROS Distro Binary Status Source status GitHub Status Humble Iron"},
{"url": "https://index.ros.org/p/naoqi_bridge_msgs", "package": "naoqi_bridge_msgs", "package_summary": "The naoqi_bridge_msgs package provides custom messages for running Aldebaran's robots in ROS2.", "package_details": "naoqi_bridge_msgs2 Commonly message services ros-naoqi, ROS2 Status ROS Distro Binary Status Source status GitHub Status Iron Humble Jazzy"},
{"url": "https://index.ros.org/p/naoqi_driver", "package": "naoqi_driver", "package_summary": "Driver module between Aldebaran's NAOqiOS and ROS2. It publishes all sensor and actuator data as well as basic diagnostic for battery, temperature. It subscribes also to RVIZ simple goal and cmd_vel for teleop.", "package_details": "naoqi_driver2 repo defines naoqi_driver package ROS2. driver charge providing bridging capabilities ROS2 NAOqiOS. works naoqi_driver ROS node. connects robot running NAOqi libQi. support audio extraction, naoqi_driver opens public endpoint, random port default. set local endpoint setting qi_listen_url argument, qi_listen_url:=tcp://127.0.0.1:12345. turn, audio extraction disabled. Installation Dependencies run, driver requires naoqi_libqi, naoqi_libqicore naoqi_bridge_msgs packages. installed apt-get released ROS distro) source. Additionally, pepper_meshes and/or nao_meshes display robot RViz. Ubuntu, install sudo apt-get install ros-<distro>-naoqi-libqi ros-<distro>-naoqi-libqicore ros-<distro>-naoqi-bridge-msgs ros-<distro>-pepper-meshes ros-<distro>-nao-meshes Installing source ROS2 workspace, clone repo dependencies: <ws>/src git clone https://github.com/ros-naoqi/naoqi_driver2.git vcs import naoqi_driver2/dependencies.repos rosdep install --from-paths src --ignore-src --rosdistro <distro> install vcs: sudo apt-get install python3-vcstool build workspace: colcon build --symlink-install Meshes built platforms. skip building arguments: colcon build --packages-skip nao_meshes pepper_meshes License meshes source repositories include pepper_meshes2 nao_meshes2, require interactive agreement agree license terms BY-NC-ND pepper_meshes2 LICENSE, nao_meshes2 LICENSE). skip interactive prompt setting AGREE_TO_NAO_MESHES_LICENSE I_AGREE_TO_PEPPER_MESHES_LICENSE environment variables: I_AGREE_TO_NAO_MESHES_LICENSE=1 I_AGREE_TO_PEPPER_MESHES_LICENSE=1 colcon build --symlink-install Automated jobs non-interactive environments (DEBIAN_FRONTEND=noninteractive) defaults agreeing licenses, assuming author job agreed license terms. Launch Avoid interference autonomous life full control robot ROS, disable autonomous behaviors ssh nao@<robot_host> qicli call ALAutonomousLife.setState disabled qicli call ALMotion.wakeUp NAOqi File truncated lines full file"},
{"url": "https://index.ros.org/p/nav2_amcl", "package": "nav2_amcl", "package_summary": "", "package_details": "AMCL Adaptive Monte Carlo Localization (AMCL) probabilistic localization module estimates position orientation Pose) robot map laser scanner. largely refactored port ROS algorithmic Configuration Guide Page details configurable settings meanings."},
{"url": "https://index.ros.org/p/nav2_behavior_tree", "package": "nav2_behavior_tree", "package_summary": "TODO", "package_details": "nav2_behavior_tree module nav2_bt_navigator implement ROS2 node executes navigation Behavior Trees navigation autonomy systems. nav2_behavior_tree module Behavior-Tree.CPP library core Behavior Tree processing. nav2_behavior_tree module template class easily integrating ROS2 actions services Behavior Trees, Navigation-specific behavior tree nodes, generic BehaviorTreeEngine class simplifies integration processing ROS2 nodes navigation higher-level autonomy applications. Configuration Guide Page additional parameter descriptions list XML nodes package. review Nav2 Behavior Tree Explanation pages explaining context default behavior trees examples package. tutorial explain create simple plugin. Navigation Plugin list list planner plugins. bt_action_node Template Behavior Tree Engine bt_action_node template easily integrate ROS2 action BehaviorTree. derives BtActionNode template, providing action message type. #include \"nav2_msgs/action/follow_path.hpp\" #include \"nav2_behavior_tree/bt_action_node.hpp\" class FollowPathAction public BtActionNode<nav2_msgs::action::FollowPath> resulting node registered factory Behavior Tree engine order Behavior Trees executed engine. BehaviorTreeEngine::BehaviorTreeEngine() factory_.registerNodeType<nav2_behavior_tree::FollowPathAction>(\"FollowPath\"); node registered factory, BehaviorTreeEngine Behavior Trees. simple XML description shows FollowPath node <root main_tree_to_execute=\"MainTree\"> <BehaviorTree ID=\"MainTree\"> <Sequence name=\"root\"> <ComputePathToPose goal=\"${goal}\"/> <FollowPath path=\"${path}\" controller_property=\"FollowPath\"/> </Sequence> </BehaviorTree> </root> BehaviorTree engine run method accepts XML description execution: BtStatus run( BT::Blackboard::Ptr blackboard, const std::string behavior_tree_xml, std::function<void()> onLoop, std::function<bool()> cancelRequested, std::chrono::milliseconds loopTimeout std::chrono::milliseconds(10)); code Navigator usage BehaviorTreeEngine. information behavior tree nodes default BehaviorTreeCPP library, documentation https://www.behaviortree.dev/docs/3.8/learn-the-basics/BT_basics"},
{"url": "https://index.ros.org/p/nav2_behaviors", "package": "nav2_behaviors", "package_summary": "TODO", "package_details": "Behaviors nav2_behaviors package implements task server executing behaviors. package defines: TimedBehavior template base class implement specific timed behavior action server required. Backup, DriveOnHeading, Spin Wait behaviors. required class behavior derive nav2_core/behavior.hpp class, implements pluginlib interface behavior server dynamically load behavior. nav2_behaviors/timed_behavior.hpp derives class implements generic action server timed behavior behavior calls implmentation function regular time interval compute required helpful. behavior action service interface. motion behavior primitives long-running sense modeled actions, timed_behavior.hpp helps managing complexity simplify behavior development, centralized behavior server share resources behaviors independent nodes. Subscriptions costmaps, heavy add non-trivial compute costs robot system. combining independent behaviors single server, share resources retaining complete independence execution interface. Configuration Guide Page additional parameter descriptions tutorial writing behaviors. Navigation Plugin list list planner plugins."},
{"url": "https://index.ros.org/p/nav2_bringup", "package": "nav2_bringup", "package_summary": "Bringup scripts and configurations for the Nav2 stack", "package_details": "nav2_bringup nav2_bringup package bringup system Nav2 applications. flexible nav2 bringup modified maps/robots/hardware/worlds/etc. expectation application specific robot system you\u2019re mirroring nav2_bringup package modifying specific maps/robots/bringup applied working demonstration default system bringup options easily modified. Usual robot stacks <robot_name>_nav package config/bringup files general case base specific robot system Dynamically composed bringup (based ROS2 Composition) optional users. compose Nav2 nodes single process launching nodes separately, embedded systems users optimizations due harsh resource constraints. Dynamically composed bringup default, disabled launch argument use_composition:=False. discussions performance improvement composed bringup https://discourse.ros.org/t/nav2-composition/22175. Nav2 Started Page documentation website. Additional tutorials initial setup simulation testing hardware robot, SLAM, Note: gazebo started libgazebo_ros_init.so libgazebo_ros_factory.so work correctly. spawn_entity node remap /tf_static tf_static launch file multi-robot situations. remapping argument /tf:=tf /tf_static:=tf_static ros2 tag plugin publishs transforms SDF file. essential differentiate tf\u2019s robot. Launch Multi-robot Simulation launch multi-robot simulation simple command line. Nav2 documentation augments. Cloned bring multiple robots, cloning single robot times positions map. parameter loaded nav2_multirobot_params_all.yaml file default. multiple robots consists initial pose YAML format set command-line. format robot robot_name={x: yaw: roll: pitch: yaw: refer examples. ros2 launch nav2_bringup cloned_multi_tb3_simulation_launch.py robots:=\"robot1={x: yaw: robot2={x: yaw: Unique robots including intitial pose hard-coded launch script. separated unique robots required params file (nav2_multirobot_params_1.yaml, nav2_multirobot_params_2.yaml) robot bring bringup robots, modify unique_multi_tb3_simulation_launch.py script. ros2 launch nav2_bringup unique_multi_tb3_simulation_launch.py"},
{"url": "https://index.ros.org/p/nav2_bt_navigator", "package": "nav2_bt_navigator", "package_summary": "TODO", "package_details": "Navigator Navigator (Behavior Tree Navigator) module implements NavigateToPose NavigateThroughPoses task interfaces. Behavior Tree-based implementation navigation intended flexibility navigation task provide easily complex robot behaviors. Configuration Guide Page additional parameter descriptions, Nav2 Behavior Tree Explanation pages explaining context default behavior trees examples package. Overview Navigator receives goal pose navigates robot destination(s). module reads XML description Behavior Tree file, Node parameter, passes generic BehaviorTreeEngine class Behavior-Tree.CPP library dynamically create execute XML per-task basis robot types navigation autonomy behaviors per-task basis."},
{"url": "https://index.ros.org/p/nav2_collision_monitor", "package": "nav2_collision_monitor", "package_summary": "Collision Monitor", "package_details": "Nav2 Collision Monitor Collision Monitor node providing additional level robot safety. performs collision avoidance related tasks incoming data sensors, bypassing costmap trajectory planners, monitor prevent potential collisions emergency-stop level. analogous safety sensor hardware features; laser scans real-time certified safety scanner, detect imminent collision configurable bounding box, emergency-stop certified robot controller slow robot avoid collision. node CPU level form sensor. provide hard real-time safety certifications, types techniques types data users safety-rated laser sensors, safety-rated controllers, type data input pointclouds depth stereo range sensors). integral part large heavy industrial robots, robots moving high velocities, people dynamic agents robots) safety mechanism high-response emergency stopping. costmaps trajectory planners handle situations, handle obstacles virtually robot\u2019s perspective) approach robot high speed immediately stop prevent collision. Features Collision Monitor polygons relative robot\u2019s base frame origin define \u201czones\u201d. Data fall zones trigger operation depending model instance Collision Monitor zones models time. multiple zones trigger aggressive stop slow slow models safety behaviors employed Collision Monitor: Stop model: Define zone point threshold. obstacle points area, stop robot obstacles disappear. Slowdown model: Define zone robot slow maximum speed percent, points area. Approach model: current robot speed, estimate time collision sensor data. time seconds robot slow seconds collision. effect robot seconds collision. zones robot shapes: Arbitrary user-defined polygon relative robot base frame. Circle: performance cases zone robot approximated shape. Robot footprint polygon, approach behavior model footprint topic dynamically adjusted time. data obtained data sources: Laser scanners (sensor_msgs::msg::LaserScan messages) PointClouds (sensor_msgs::msg::PointCloud2 messages) IR/Sonars (sensor_msgs::msg::Range messages) Design Collision Monitor designed operate Nav2 independent safety node. acts filter cmd_vel topic coming Controller Server. zone triggered, Controller\u2019s cmd_vel scaled set stop diagram showing high-level design Collision Monitor module. shapes (Polygons Circles) derived base Polygon class, loss generality call polygons. Subscribed footprint properties polygons, obtained footprint topic Approach Model. Configuration Detailed configuration parameters, description setup Collision Monitor Configuration Guide Collision Monitor tutorial pages. Metrics Designed wide variety robots (incl. moving fast) high level reliability, Collision Monitor node operate fast rates. Typical frame processing time laser scanner points) PointClouds points). table represents details operating times behavior models shapes: Stop/Slowdown model, Polygon area Stop/Slowdown model, Circle area Approach model, Polygon footprint Approach model, Circle footprint LaserScan points) processing time, PointCloud points) processing time, notes Due sheer speed, circle shapes preferred approach behavior models approximately model robot circular. points performance. Pointclouds culled filtered Collision Monitor improve performance."},
{"url": "https://index.ros.org/p/nav2_constrained_smoother", "package": "nav2_constrained_smoother", "package_summary": "Ceres constrained smoother", "package_details": "Constrained Smoother smoother plugin nav2_smoother based original deprecated smoother nav2_smac_planner Steve Macenski put operational state RoboTech Vision. Suitable applications planned global path pushed obstacles and/or Reeds-Shepp motion models. documentation navigation.ros.org: https://navigation.ros.org/configuration/packages/configuring-constrained-smoother.html configuration indoor_navigation package repo full launch configuration): smoother_server: ros__parameters: use_sim_time: True smoother_plugins: [\"SmoothPath\"] SmoothPath: plugin: \"nav2_constrained_smoother/ConstrainedSmoother\" reversing_enabled: true detect forward/reverse direction cusps. set false paths orientations assigned path_downsampling_factor: n-th node path speed-up path_upsampling_factor: path remains downsampled, path upsampled original granularity cubic bezier, upsampling keep_start_orientation: true prevent start orientation smoothed keep_goal_orientation: true prevent gpal orientation smoothed minimum_turning_radius: minimum turning radius robot perform. set w_curve set effect) diff-drive/holonomic robots w_curve: weight enforce minimum_turning_radius w_dist: weight bind path original optional replacement cost weight w_smooth: weight maximize smoothness path w_cost: weight steer robot collision cost Parameters improve obstacle avoidance cusps (forward/reverse movement [docs page](https://navigation.ros.org/configuration/packages/configuring-constrained-smoother) clarification w_cost_cusp_multiplier: option higher weight forward/reverse direction change accompanied dangerous rotations cusp_zone_length: length section cusp nodes w_cost_cusp_multiplier (w_cost rises gradually zone cusp point, costmap weight equals w_cost*w_cost_cusp_multiplier) Points robot frame grab costmap values Format: weight1, weight2, IMPORTANT: Requires higher number iterations improve path. Uncomment (highly elongated/asymmetric robots) [docs page](https://navigation.ros.org/configuration/packages/configuring-constrained-smoother) clarification cost_check_points: optimizer: max_iterations: max iterations smoother debug_optimizer: false print debug info gradient_tol: fn_tol: param_tol: Note: Smoothing paths multiple subsequent poses point in-place rotations Smac lattice planners) supported Note: Constrained Smoother recommended path bounded length. TruncatePathLocal Node extracting relevant path section robot combination DistanceController achieve periodicity)"},
{"url": "https://index.ros.org/p/nav2_controller", "package": "nav2_controller", "package_summary": "Controller action interface", "package_details": "Nav2 Controller Nav2 Controller Task Server Nav2 implements nav2_msgs::action::FollowPath action server. execution module implementing nav2_msgs::action::FollowPath action server responsible generating command velocities robot, computed path planner module nav2_planner. nav2_controller package designed loaded multiple plugins path execution. plugins implement functions virtual base class defined controller header file nav2_core package. progress checkers goal checker plugins abstract logic specific controller implementations. Navigation Plugin list list controller plugins. Configuration Guide Page additional parameter descriptions tutorial writing controller plugins."},
{"url": "https://index.ros.org/p/nav2_core", "package": "nav2_core", "package_summary": "A set of headers for plugins core to the Nav2 stack", "package_details": "Nav2 Core package hosts abstract interface (virtual base classes) plugins global planner nav2_navfn_planner) controller path execution controller, nav2_dwb_controller) smoother nav2_ceres_costaware_smoother) goal checker simple_goal_checker) behaviors drive_on_heading) progress checker simple_progress_checker) waypoint task executor take_pictures) exceptions planning control purposes plugin interfaces create separation concern system software engineers researcher algorithm designers. plugin type hosted \u201ctask server\u201d planner, recovery, control servers) handles requests multiple algorithm plugin instances. plugins compute server worry ROS actions, topics, software utilities. plugin designer simply tools API work, create internally gain additional information capabilities."},
{"url": "https://index.ros.org/p/nav2_costmap_2d", "package": "nav2_costmap_2d", "package_summary": "This package provides an implementation of a 2D costmap that takes in sensor\n    data from the world, builds a 2D or 3D occupancy grid of the data (depending\n    on whether a voxel based implementation is used), and inflates costs in a\n    2D costmap based on the occupancy grid and a user specified inflation radius.\n    This package also provides support for map_server based initialization of a\n    costmap, rolling window based costmaps, and parameter based subscription to\n    and configuration of sensor topics.", "package_details": "Nav2 Costmap_2d costmap_2d package responsible building costmap environment, consisting \u201clayers\u201d data environment. initialized map server local rolling window updates layers observations sensors. plugin interface layers combined costmap finally inflated inflation radius based robot footprint. nav2 version costmap_2d package direct ROS2 port ROS1 navigation stack version, minimal noteable due support ROS2. Configuration Guide Page additional parameter descriptions costmap included plugins. tutorials first-time setup guides provide helpful context working costmap package layers. tutorial explain create costmap plugins. Navigation Plugin list list planner plugins. visualize voxels RVIZ: publish_voxel_map voxel_layer param\u2019s scope set True. Open terminal run: ros2 run nav2_costmap_2d nav2_costmap_2d_markers voxel_grid:=/local_costmap/voxel_grid visualization_marker:=/my_marker change my_marker topic markers published add my_marker RVIZ GUI. Errata: markers change view RVIZ dimensional view orbit) RVIZ GUI. due bug rviz, set fixed_frame rviz display, odom frame. pointcloud data saved bag file gazebo simulation troublesome due clock time skipping earlier time. Costmap Filters Overview Costmap Filters costmap layer-based instrument ability apply map spatial-dependent raster features named filter-masks. features plugin algorithms filling costmaps order robots change trajectory, behavior speed robot enters/leaves area marked filter masks. Examples costmap filters include keep-out/safety zones robots enter, speed restriction areas, preferred lanes robots moving industries warehouses. information design, architecture feature works Nav2 website: https://navigation.ros.org."},
{"url": "https://index.ros.org/p/nav2_graceful_controller", "package": "nav2_graceful_controller", "package_summary": "Graceful motion controller", "package_details": "Graceful Motion Controller graceful motion controller implements controller based works Jong Jin Park \u201cGraceful Navigation Mobile Robots Dynamic Uncertain Environments\u201d. implementation, motion_target set distance robot exponentially stable generate smooth trajectory robot follow. Configuration Guide Page additional parameter descriptions. Smooth control law smooth control law pose-following kinematic control law generates smooth confortable trajectory robot follow. Lyapunov-based feedback control law components: egocentric polar coordinates motion target phi, delta) respect robot frame. slow subsystem describes position robot. fast subsystem describes steering angle robot. Parameters Parameter Description transform_tolerance transform tolerance. motion_target_dist lookahead distance find motion_target point. distance Greater values robot generate smoother paths necessarily follow path closely. max_robot_pose_search_dist Maximum integrated distance path bound search closest pose robot. set default maximum costmap extent, shouldn\u2019t set manually loops local costmap. k_phi Ratio rate change phi rate change Controls convergence slow subsystem. equal controller behave pure waypoint follower. high offers extreme scenario pose-following theta reduced faster Note: variable called earlier versions paper. k_delta Constant factor applied heading error feedback. Controls convergence fast subsystem. bigger robot converge faster reference heading. Note: variable called earlier versions paper. beta Constant factor applied path curvature. positive. Determines fast velocity drops curvature increases. lambda Constant factor applied path curvature. greater equal Determines sharpness curve: higher lambda implies sharper curves. v_linear_min Minimum linear velocity. Units: meters/sec. v_linear_max Maximum linear velocity. Units: meters/sec. v_angular_max Maximum angular velocity produced control law. Units: radians/sec. slowdown_radius Radius goal pose robot start slow Units: meters. initial_rotation Enable rotation place goal starting path. control law generate large sweeping arcs goal pose, depending initial robot orientation k_phi, k_delta. initial_rotation_min_angle difference path orientation starting robot orientation trigger rotate place, initial_rotation enabled. final_rotation Similar initial_rotation, control law generate large arcs goal orientation aligned path. enabled, final pose robot follow orientation path final rotation place goal orientation. rotation_scaling_factor scaling factor applied rotation place velocity. allow_backward robot move Topics Topic Type Description transformed_global_plan nav_msgs/Path global plan transformed robot frame. local_plan nav_msgs/Path local plan generated appliyng iteratively control law set motion targets global plan. motion_target geometry_msgs/PointStamped current motion target controller compute velocity commands. slowdown visualization_msgs/Marker flat circle marker radius slowdown_radius motion target."},
{"url": "https://index.ros.org/p/nav2_lifecycle_manager", "package": "nav2_lifecycle_manager", "package_summary": "A controller/manager for the lifecycle nodes of the Navigation 2 system", "package_details": "Background lifecycle enabled nodes ROS2\u2019s managed/lifecycle nodes feature system startup ensure required nodes instantiated correctly execution. lifecycle nodes nodes restarted replaced on-line. details managed nodes ROS2 Design website. nodes Nav2, map_server, planner_server, controller_server, lifecycle enabled. nodes provide required overrides lifecycle functions: on_configure() on_activate() on_deactivate() on_cleanup() on_shutdown() on_error() Configuration Guide Page additional parameter descriptions. nav2_lifecycle_manager Nav2\u2019s lifecycle manager change states lifecycle nodes order achieve controlled startup, shutdown, reset, pause, resume navigation stack. lifecycle manager presents lifecycle_manager/manage_nodes service, clients invoke startup, shutdown, reset, pause, resume functions. Based service request, lifecycle manager calls lifecycle services lifecycle managed nodes. RVIZ panel lifecycle_manager/manage_nodes service user presses buttons RVIZ panel (e.g.,startup, reset, shutdown, meant called bringup production system application. order start navigation stack able navigate, nodes configured activated. startup requested lifecycle manager\u2019s manage_nodes service, lifecycle managers calls configure() activate() lifecycle enabled nodes node list. transitioned ordered groups bringup transitions, reverse ordered groups shutdown transitions. lifecycle manager default nodes list nodes manages. list changed lifecycle manager\u2019s \u201cnode_names\u201d parameter. diagram shows list managed nodes, interfaces lifecycle manager. UML diagram shows sequence service calls startup requested lifecycle manager."},
{"url": "https://index.ros.org/p/nav2_map_server", "package": "nav2_map_server", "package_summary": "Refactored map server for ROS2 Navigation", "package_details": "Map Server Map Server maps rest Nav2 system topic service interfaces. Map server expose maps node bringup, change maps load_map service run-time, save maps save_map server. Configuration Guide Page additional parameter descriptions. Architecture contrast ROS1 navigation map server, nav2 map server support variety map types, aspects original code refactored support extensible framework. map server divides tree parts: map_server map_saver map_io library map_server responsible loading map file command-line interface service requests. map_saver saves map file. map_server, ability save map command-line calling service. map_io map input-output library. library designed object-independent order easily save/load map external code calling function. library map_loader map_saver work. OccupancyGrid saving/loading functions moved rest part map server code. designed replaceable library library map encoding method library supporting costmaps, multifloor maps, CLI-usage Map Server Map Server composable ROS2 node. default, map_server executable instances nodes, compose multiple map server nodes single process, desired. command line map server executable slightly ROS1. ROS1, invoked map server passing map YAML filename, map_server map.yaml YAML file contained map metadata, image: testmap.png resolution: origin: negate: occupied_thresh: free_thresh: Nav2 software retains map YAML file format Nav1, ROS2 parameter mechanism YAML file effectively introduces level indirection map yaml filename. node named \u2018map_server\u2019, parameter file map_server_params.yaml map_server: ros__parameters: yaml_filename: \"map.yaml\" invoke map service executable passing params file command line, map_server __params:=map_server_params.yaml possibility multiple map server nodes single process, parameters file separate parameters node combined_params.yaml map_server1: ros__parameters: yaml_filename: \"some_map.yaml\" map_server2: ros__parameters: yaml_filename: \"another_map.yaml\" invoke process params file parameters nodes: process_with_multiple_map_servers __params:=combined_params.yaml parameter initial map (yaml_filename) set, empty string initial map loaded. case, map loaded on_configure published on_activate. load_map-service load publish map. File truncated lines full file"},
{"url": "https://index.ros.org/p/nav2_mppi_controller", "package": "nav2_mppi_controller", "package_summary": "nav2_mppi_controller", "package_details": "Model Predictive Path Integral Controller Overview predictive controller (local trajectory planner) implements Model Predictive Path Integral (MPPI) algorithm track path adaptive collision avoidance. plugin-based critic functions impact behavior algorithm. created Aleksei Budyakov adapted developed Nav2 Steve Macenski. plugin implements nav2_core::Controller interface allowing navigation stack local trajectory planner controller server\u2019s action server (controller_server). controller measured run modest Intel processor gen Configuration Guide Page additional parameter descriptions. works Differential, Omnidirectional, Ackermann robots. MPPI Description MPPI algorithm MPC variant finds control velocity robot iterative approach. previous time step\u2019s control solution robot\u2019s current state, set randomly sampled perturbations Gaussian distribution applied. noised controls simulated generate set trajectories robot\u2019s motion model. trajectories scored set plugin-based critic functions find trajectory batch. output scores set control soft max function. process repeated number times returns converged solution. solution basis time step\u2019s initial control. Features Predictive MPC trajectory planner Utilizes plugin-based critics swapped tuned, replaced easily user Highly optimized CPU-only performance vectorization tensor operations Supports number common motion models, including Ackermann, Differential-Drive, Omni-directional Includes fallback mechanisms handle soft-failures escalating recovery behaviors High-quality code implementation Doxygen, high unit test coverage, documentation, parameter guide Easily extensible support modern research variants MPPI pre-tuned good out-of-the-box behavior Configuration Controller Parameter Type Definition motion_model string Default: DiffDrive. Type model [DiffDrive, Omni, Ackermann]. critics string Default: Critics (plugins) names iteration_count int Default Iteration count MPPI algorithm. Recommend prefer batches. batch_size int Default Count randomly sampled candidate trajectories time_steps int Default Number time steps (points) sampled trajectory model_dt double Default: Time interval sampled points trajectories. vx_std double Default Sampling standard deviation vy_std double Default Sampling standard deviation wz_std double Default Sampling standard deviation vx_max double Default Max vy_max double Default Max direction, holonomic. vx_min double Default Min wz_max double Default Max (rad/s) temperature double Default: Selectiveness trajectories costs closer consideration controls cost), control cost, huge lead trajectories cost consideration gamma double Default: trade-off smoothness (high) energy complex parameter won\u2019t changed default works broad range cases. Section \u201cInformation Theoretic Model Predictive Control: Theory Applications Autonomous Driving\u201d detailed information. visualize bool Default: false. Publish visualization trajectories, slow controller significantly. debugging. retry_attempt_limit int Default Number attempts find feasible trajectory failure soft-resets reporting failure. reset_period double Default required time inactivity reset optimizer Humble due backport ABI policies) regenerate_noises bool Default false. regenerate noises iteration single noise distribution computed initialization reset. Practically, work fine trajectories sampled stochastically normal distribution reduces compute jittering run-time due thread wake-ups resample normal distribution. Trajectory Visualizer Parameter Type Definition trajectory_step int Default: step trajectories visualize downsample candidate trajectory pool. time_step int Default: step points trajectories visualize downsample trajectory density. Path Handler Parameter Type Definition max_robot_pose_search_dist double Default: Costmap half-size. Max integrated distance robot pose search nearest path point case path looping. prune_distance double Default: Distance nearest point path robot prune path transform_tolerance double Default: Time tolerance data transformations enforce_path_inversion double Default: False. true, prune paths cusping points segments changing directions path inversions) controller forced change directions planner\u2019s requested inversion point. targeting Smac Planner users feasible paths robots switch directions specifically requested. inversion_xy_tolerance double Default: Cartesian proximity path inversion point considered \u201cachieved\u201d pass rest path path inversion. inversion_yaw_tolerance double Default: Angular proximity (radians) path inversion point considered \u201cachieved\u201d pass rest path path inversion. rad deg. Ackermann Motion Model Parameter Type Definition min_turning_r double minimum turning radius ackermann motion model Constraint Critic Parameter Type Definition cost_weight double Default Weight apply critic term. cost_power int Default Power order apply term. Goal Angle Critic Parameter Type Definition cost_weight double Default Weight apply critic term. cost_power int Default Power order apply term. threshold_to_consider double Default Minimal distance robot goal angle goal cost considered. Goal Critic Parameter Type Definition cost_weight double Default Weight apply critic term. cost_power int Default Power order apply term. threshold_to_consider double Default Distance robot goal goal cost starts considered File truncated lines full file"},
{"url": "https://index.ros.org/p/nav2_msgs", "package": "nav2_msgs", "package_summary": "Messages and service files for the Nav2 stack", "package_details": "nav2_msgs nav2_msgs package set messages, services, actions Nav2 system. Nav2 standard nav_msgs,"},
{"url": "https://index.ros.org/p/nav2_navfn_planner", "package": "nav2_navfn_planner", "package_summary": "TODO", "package_details": "Navfn Planner NavfnPlanner global planner plugin Nav2 Planner server. implements Navigation Function planner Dij. expansions. largely equivalent counterpart ROS Navigation. Navfn planner assumes circular robot robot approximated circular purposes global path planning) operates weighted costmap. global_planner package ROS refactor NavFn easily understandable, lacks run-time performance introduces suboptimal behaviors. NavFn extremely stable years time porting, maintainers felt compelling reason port largely equivalent poorer functioning) planner. Configuration Guide Page additional parameter descriptions."},
{"url": "https://index.ros.org/p/nav2_planner", "package": "nav2_planner", "package_summary": "TODO", "package_details": "Nav2 Planner Nav2 planner Task Server Nav2 implements nav2_behavior_tree::ComputePathToPose interface. planning module implementing nav2_behavior_tree::ComputePathToPose interface responsible generating feasible path start robot poses. loads map potential planner plugins path generation user-defined situations. Navigation Plugin list list planner plugins. Configuration Guide Page additional parameter descriptions tutorial writing planner plugins."},
{"url": "https://index.ros.org/p/nav2_regulated_pure_pursuit_controller", "package": "nav2_regulated_pure_pursuit_controller", "package_summary": "Regulated Pure Pursuit Controller", "package_details": "Nav2 Regulated Pure Pursuit Controller controller (local trajectory planner) implements variant pure pursuit algorithm track path. variant call Regulated Pure Pursuit Algorithm, due additional regulation terms collision linear speed. implements basics Adaptive Pure Pursuit algorithm vary lookahead distances current speed. developed Shrijit Singh Steve Macenski Samsung Research part Nav2 working group. Code based simplified version controller referenced Writing Nav2 Controller tutorial. plugin implements nav2_core::Controller interface allowing navigation stack local trajectory planner controller server\u2019s action server (controller_server). builds top ordinary pure pursuit algorithm number ways. implements common variants pure pursuit algorithm adaptive pure pursuit. controller suitable types robots, including differential, legged, ackermann steering vehicles. omni-directional platforms, won\u2019t able fully leverage lateral movements base DWB controller measured run kHz modern intel processor. Configuration Guide Page additional parameter descriptions. Pure Pursuit Basics Pure Pursuit algorithm years. read details pure pursuit controller introduction paper. core idea find point path front robot find linear angular velocity drive moves point selected, process repeats path. distance find point drive lookahead distance. order simply book-keeping, global path continuously pruned closest point robot figure process path points. section path local costmap bounds transformed robot frame lookahead point determined predefined distance. Finally, lookahead point pure pursuit algorithm finds curvature path required drive robot lookahead point. curvature applied velocity commands robot drive. Note pure pursuit controller \u201cpurely\u201d pursues path interest concern dynamic obstacles. controller paired path planner generate path robot follow. circular treated circular) robot, planner leverage particle inflation relationship planning. \u201clarge\u201d robot environment general non-circular robots, kinematically feasible, Smac Planner, path followable. Regulated Pure Pursuit Features created variation pure pursuit algorithm dubb Regulated Pure Pursuit algorithm. combine features Adaptive Pure Pursuit algorithm rules linear velocity focus consumer, industrial, service robot\u2019s implement common-sense safety mechanisms collision detection. Regulated Pure Pursuit controller implements active collision detection. parameter set maximum allowable time potential collision current velocity command. current linear angular velocity, project time duration check collisions. Intuitively, collision checking robot lookahead point logical. you\u2019re maneuvering tight spaces, alot sense search amount time give system leeway confined spaces collision checking reasonable amount space current action moving sense meters carrot, seconds future). helps higher speeds angular rotations closer fine, slow motions constrained environments doesn\u2019t report collisions valid motions obstacles. set maximum allowable large number, collision check exceeding, lookahead point. visualize collision checking arc lookahead_arc topic. regulated pure pursuit algorithm common variations pure pursuit algorithm. implement adaptive pure pursuit\u2019s main contribution velocity-scaled lookahead point distances. helps controller stable larger range potential linear velocities. parameters setting lookahead gain lookahead time) thresholded values minimum maximum. final minor improvement slowing approach goal. Knowing optimal lookahead distance difference actual distance lookahead point find lookahead point error. operations, variation error exceptionally small won\u2019t triggered. path, points lookahead distance robot, point path. robot approaches target, error grow robot\u2019s velocity reduced proportional error minimum threshold. tracked kinematic speed limits ensure drivability. major improvements work implements regulations linear velocity based cost functions. selected remove long-standing bad behavior pure pursuit algorithm. Normal Pure Pursuit issue overshoot poor handling high curvature extremely rapidly changing curvature) environments. commonly robot overshoot path potentially collide environment. cost functions Regulated Pure Pursuit algorithm chosen based common requirements mobile robots service, commercial, industrial use-cases; scaling curvature creates intuitive behavior slowing robot making sharp turns slowing potential collision small variations don\u2019t clip obstacles. working partially observable environments turning aisles hallways slow sharp turn unknown dynamic environment conservative case immediately requiring stop. cost functions penalize robot\u2019s speed based proximity obstacles curvature path. helpful slow robot moving close narrow spaces scaling linear velocity curvature helps stabilize controller larger range lookahead point distances. added benefit removing sensitive tuning lookahead point range, robot track paths Tuning required, substantially easier reasonable behavior minor adjustments. unintended tertiary benefit scaling linear velocities curvature robot natively rotate rough path heading holonomic planners don\u2019t start aligned robot pose orientation. curvature high, linear velocity drops angular velocity takes rotate heading. perfect, dramatically reduce rotate close path heading opens broader range planning techniques. Pure Pursuit controllers completely unable recover modestly confined spaces. Mixing proximity curvature regulated linear velocities time-scaled collision checker, near-perfect combination allowing regulated pure pursuit algorithm handle high starting deviations path navigate collision-free tight spaces overshoot. Note: maximum allowed time collision thresholded lookahead point, starting Humble. collision checking isn\u2019t significantly overshooting path, issues constrained environments. straight-line path wall turned left, parameter set high, detect collision point actual robot intended motion. Thusly, robot moving fast, selecting lookahead points matter behavioral stability Pure Pursuit, robot predictive collision detection capabilities. max allowable time parameter place slow commands, detail Configuration Parameter Description desired_linear_vel desired maximum linear velocity lookahead_dist lookahead distance find lookahead point min_lookahead_dist minimum lookahead distance threshold velocity scaled lookahead distances max_lookahead_dist maximum lookahead distance threshold velocity scaled lookahead distances lookahead_time time project velocity find velocity scaled lookahead distance. lookahead gain. rotate_to_heading_angular_vel rotate heading angular velocity transform_tolerance transform tolerance use_velocity_scaled_lookahead_dist velocity scaled lookahead distances constant lookahead_distance min_approach_linear_velocity minimum velocity threshold apply approaching goal approach_velocity_scaling_dist Integrated distance transformed path start applying velocity scaling. defaults extent costmap costmap cell length. use_collision_detection enable collision detection. max_allowed_time_to_collision_up_to_carrot time project velocity command check collisions use_collision_detection true. limited maximum distance lookahead distance selected. use_regulated_linear_velocity_scaling regulated features curvature use_cost_regulated_linear_velocity_scaling regulated features proximity obstacles cost_scaling_dist minimum distance obstacle trigger scaling linear velocity, use_cost_regulated_linear_velocity_scaling enabled. set smaller equal inflation_radius set inflation layer costmap, inflation compute distance obstacles cost_scaling_gain multiplier gain, scale speed obstacle cost_scaling_dist. reduces speed quickly. inflation_cost_scaling_factor cost_scaling_factor set inflation layer local costmap. accurately computing distance obstacles inflated cell values regulated_linear_scaling_min_radius turning radius regulation features triggered. Remember, sharper turns smaller radii regulated_linear_scaling_min_speed minimum speed regulated features send, ensure process achievable high cost spaces high curvature. use_rotate_to_heading enable rotating rough heading goal orientation holonomic planners. Recommended robot types ackermann, rotate place. rotate_to_heading_min_angle difference path orientation starting robot orientation trigger rotate place, use_rotate_to_heading enabled. max_angular_accel Maximum allowable angular acceleration rotating heading, enabled max_robot_pose_search_dist Maximum integrated distance path bound search closest pose robot. set default maximum costmap extent, shouldn\u2019t set manually loops local costmap. use_interpolation Enables interpolation poses path lookahead point selection. Helps sparse paths avoid inducing discontinuous commanded velocities. Set false potential performance boost, expense smooth control. fully-described XML default parameter values: controller_server: ros__parameters: use_sim_time: True controller_frequency: min_x_velocity_threshold: min_y_velocity_threshold: min_theta_velocity_threshold: progress_checker_plugin: \u201cprogress_checker\u201d goal_checker_plugins: \u201cgoal_checker\u201d controller_plugins: [\u201cFollowPath\u201d] progress_checker: plugin: \"nav2_controller::SimpleProgressChecker\" required_movement_radius: movement_time_allowance: goal_checker: plugin: \"nav2_controller::SimpleGoalChecker\" xy_goal_tolerance: File truncated lines full file"},
{"url": "https://index.ros.org/p/nav2_rotation_shim_controller", "package": "nav2_rotation_shim_controller", "package_summary": "Rotation Shim Controller", "package_details": "Nav2 Rotation Shim Controller controller (local trajectory planner) implements \u201cshim\u201d controller plugin. developed Steve Macenski Samsung Research. Rotation Shim Controller stands controller server main controller plugin implement specific behavior troublesome algorithms. shim rotate robot place rough heading newly received path. future commands path main controller. primary_controller parameter, actual controller path tracking aligned path. situations working plugins specialized tuned task fail adequately solve full local planning problem performantly. Examples include: Heavily tuning DWB excellent path tracking difficult handle large deviations TEB behavior \u201cwhip\u201d robot small turns, scary due elastic band approach TEB DWB simply rotate robot place start tracking path. perform small \u2018spiral maneuver clunky odd velocities. prefer clean simple rotation place. controller check rough heading difference respect robot newly received path. threshold, pass request controller execute. threshold, controller rotate robot path heading. tolerance, pass control-execution rotation shim controller primary controller plugin. point, robot rotating, allowing current plugin control smooth hand path tracking. recommended generous strict angular threshold smoother transition, tuned specific application\u2019s desired behaviors. rotate_to_goal_heading parameter set true, controller able control robot reaching goal tolerance goal checker. case, robot rotate goal heading goal checker validate goal ends current navigation task. Rotation Shim Controller suitable Robots rotate place, differential omnidirectional robots. Preference rotate place \u2018spiral starting track path significantly heading robot\u2019s current heading. planners non-kinematically feasible, NavFn, Theta*, Smac (Feasible planners Smac Hybrid-A* State Lattice start search robot\u2019s actual starting heading, requiring rotation). plugin implements nav2_core::Controller interface allowing navigation stack local trajectory planner controller server\u2019s action server (controller_server). host internal plugin actual path tracker MPPI, RPP, DWB, TEB, robot rotated rough starting heading path. Configuration Guide Page additional parameter descriptions. Configuration Parameter Description angular_dist_threshold Maximum angular distance, radians, path heading trigger rotation forward_sampling_distance distance, meters, path select sampling point approximate path heading rotate_to_heading_angular_vel Angular rotational velocity, rad/s, rotate path heading primary_controller Internal controller plugin actual control behavior rotating heading max_angular_accel Maximum angular acceleration rotation heading simulate_ahead_time Time seconds simulate rotation command check collisions. collision forwards control primary controller plugin. rotate_to_goal_heading true, rotationShimController control robot tolerance goal start rotating goal heading fully-described XML default parameter values: controller_server: ros__parameters: use_sim_time: True controller_frequency: min_x_velocity_threshold: min_y_velocity_threshold: min_theta_velocity_threshold: progress_checker_plugin: \"progress_checker\" goal_checker_plugins: \"goal_checker\" controller_plugins: [\"FollowPath\"] progress_checker: plugin: \"nav2_controller::SimpleProgressChecker\" required_movement_radius: movement_time_allowance: goal_checker: plugin: \"nav2_controller::SimpleGoalChecker\" xy_goal_tolerance: yaw_goal_tolerance: stateful: True FollowPath: plugin: \"nav2_rotation_shim_controller::RotationShimController\" primary_controller: \"dwb_core::DWBLocalPlanner\" angular_dist_threshold: forward_sampling_distance: rotate_to_heading_angular_vel: max_angular_accel: simulate_ahead_time: rotate_to_goal_heading: false DWB parameters"},
{"url": "https://index.ros.org/p/nav2_route", "package": "nav2_route", "package_summary": "A Route Graph planner to compliment the Planner Server", "package_details": "Nav2 Route Server Route Server Nav2 Task server compliment Planner Server\u2019s free-space planning capabilities pre-defined Navigation Route Graph planning, created Steve Macenski Open Navigation assistance Josh Wallace Locus Robotics. Fully replace free-space planning route closely required Controller plugins\u2019 tuning deviate track path closely), Augment global planner long-distance routing goal free-space feasible planning localized fashion future. graph rules generated manually automatically geometric, probabilistic techniques. docs.nav2.org includes tutorials generate graph annotations grid map created SLAM, procedurally generated. package takes planning request graph find valid route environment optimal search-based algorithm. plugin-based scoring functions applied edge based arbitrary user-defined semantic information chosen optimization criteria(s). Nav2 Route Server live monitor analyze route\u2019s process execute custom behaviors entering leaving edges achieving graph nodes. behaviors defined type plugin leverage graph\u2019s edges\u2019 nodes\u2019 arbitrary semantic data. plugin interfaces server enable great deal application-specific customization: Custom search-prioritization behavior edge scoring plugins minimize distance time, mark blocked routes, enact static dynamic penalties danger application-specific knowledge, prefer main arteries) Custom operations perform route execution: triggered entering leaving edge, achieving graph node route, performed consistently open door, pause node wait clearance, adjust maximum speed, turn lights, change mode, check future collisions) Parsers navigation graph files type format desirable geoJSON, OpenStreetMap) Additionally, server leverages additional arbitrary metadata navigation graph files store information speed limits, added costs, operations perform. restrict data embedded navigation route graph application metadata communicated edge scoring operations plugins adjust behavior demanded application. Note plugins information topics, services, actions dynamic behavior centralized knowledge sharing desired. rudimentary demo basic features route_example_launch.py nav2_simple_commander. Features Unit Test Coverage Optimized Dikjstra\u2019s planning algorithm modeled Smac Planner implementation Kd-trees finding nearest node(s) arbitrary start goal poses graph pose-based planning requests. Optional Breadth-First Search refine nearest node(s) simply Euclidean distance traversibility length costmap. Highly efficient graph representation maximize caching single data structure edges\u2019 nodes\u2019 objects relationships localized information edges directional allowing single-direction lanes planning Data files respect frame tree transformed centralized frame automatically Action interface response returns sparse route nodes edges client applications navigation graph knowledge nav_msgs/Path dense paths minimicking freespace planning drop-in behavior replacement Planner Server. Action interface request process requests start goal node IDs euclidean poses Service interface change navigation route graphs run-time Edge scoring dynamic plugins return cost traversing edge mark edge invalid current conditions sensor system state information Graph file parsing dynamic plugins custom proprietary formats Operation dynamic plugins perform arbitrary tasks node entering leaving edge route Operation graph-centric graph file identifies operation perform time) plugin-centric plugins self-identify nodes edges act execution) Operations trigger rerouting due information, blockages, multi-robot data, nodes edges metadata modified communicate information plugins including types runs Route Tracking action returns regular feedback important events state updates rerouting requests, passed node, triggered operation, rerouting occurs Route Tracking previous current edge, state retained improved behavior provide interpolated nav_msgs/Path closest point edge edge\u2019s rerouting\u2019s starting node) minimize free-space planning connections edge exists continued. Practical Architectures practical architectures designs Route Serve assembled robotics solution. depends nature application\u2019s behavior. exhaustive list, users started thinking fit system. Architectures implemented tested nav2_bt_navigator/behavior_trees Route Server\u2019s output dense path Controller Server direct route close exact route required, fully replaces Planner Server adding Smoother Server spline fitting Route Server Controller Server Behavior Tree smooth edge transitions ComputingPathToPose first-mile last-mile route leaving graph desirable. Route Server\u2019s output sparse route Planner Server plan node(s) Controller Server track global path follow general route, flexibility leave route obstacles free-space planner conjunction fallback behavior follow route leave blocked time, proactively sees blocked future), track route great situations leave route required track route closely ComputePathToPose plan node route change nodes approach ComputePathThroughPoses plan nodes future smooth interchange Route Server\u2019s output sparse route Waypoint Follower Navigate Poses navigate task Similar nodes edges navigate intended route intelligent navigation architecturally puts route planning higher-level application-autonomy logic main navigation-planning task logic, separation concerns applications. Create behavior tree NavigateToPose node graph, select track route, finally NavigateToPose final goal pose graph start and/or goal poses navigation graph, robot navigate starting node final goal pose \u2018first-mile\u2019 \u2018last-mile\u2019 style task Route Server\u2019s ComputeAndTrackRoute ComputeRoute send dense path sparse route track progress route Route Server route application sees fit. process triggering spatial, graph, contextual behaviors executing task adjusting speeds, turning lights, rerouting due multi-robot coordination resource constraints, opening doors, wide ranging set applications. Teleoping robot script automatically stores nodes and/or operator manually triggers node capture saving file annotating file operation plugin waypoint graph navigate robot perform tasks setup Teach-and-Repeat behavior route server custom behaviors node. Multi-floor navigation graph nodes terminals stairs, elevators, free-space planning on-floor nodes graph connections floor connectors enact specific behaviors call elevators, climb stairs, Design Nav2 Route Server designed composed objects system easy understand easily unit testable. breakdown exists classes capabilities ROS Interfaces actions, services, debugging topics), core search algorithm, scoring factory, route progress tracking, operations factory, file parsing, action request \u2018intent\u2019 extraction. distinction complex system easier grasp, number moving pieces. Luckily, pieces (tracker exception) don\u2019t isolated. diagram context package structured consititutent files you\u2019ll find project. complete unit testing files named similarly test/ directory. diagram suggests, plugin interfaces exist file loader, edge scorer, operations manager enable customizable behavior applications. Plugin Interfaces plugin interfaces enable customizable behavior route search, route operation, route graph file formatting. great deal customization number applications prioritize time, distance, application-specific criteria routing; perform custom operations rerouting mechanics run-time progressing route adjusting speed opening doors; able integrate custom file format format interest. interface definitions include/nav2_route/interfaces directory explanatory method names doxygen documentation. Metrics set experiments run route planner randomly selected start goal poses, sized graphs. metrics provide reasonable benchmarking performance route server perform application sized graphs represent environment: Graph size Ave. Search Time File truncated lines full file"},
{"url": "https://index.ros.org/p/nav2_simple_commander", "package": "nav2_simple_commander", "package_summary": "An importable library for writing mobile robot applications in python3", "package_details": "Nav2 Simple (Python3) Commander Overview goal package provide \u201cnavigation library\u201d capability Python3 users. provide API handles ROS2-y Action Server-y focus building application leveraging capabilities Nav2. provide demos examples API usage build common basic capabilities autonomous mobile robotics. built Steve Macenski Samsung Research, initial prototypes prepared Keynote ROS Developers Day conference (code API API Guide Page additional parameter descriptions. methods basic navigator shown inputs expected returns. server fails, throw exception return object, properly wrap navigation calls try/catch check results type. September simple navigator constructor accept namespace field support multi-robot applications namespaced Nav2 launches. Robot Navigator Method Description setInitialPose(initial_pose) Sets initial pose (PoseStamped) robot localization. goThroughPoses(poses, behavior_tree=\u2019\u2019) Requests robot drive set poses (list PoseStamped). goToPose(pose, behavior_tree=\u2019\u2019) Requests robot drive pose (PoseStamped). followWaypoints(poses) Requests robot follow set waypoints (list PoseStamped). execute specific TaskExecutor pose. followPath(path, controller_id=\u2019\u2019, goal_checker_id=\u2019\u2019) Requests robot follow path starting goal PoseStamped, nav_msgs/Path. spin(spin_dist=1.57, time_allowance=10) Requests robot performs in-place rotation angle. backup(backup_dist=0.15, backup_speed=0.025, time_allowance=10) Requests robot distance. cancelTask() Cancel ongoing task request. isTaskComplete() Checks task complete times Returns True completed False getFeedback() feedback task, returns action server feedback object. getResult() final result task, called isTaskComplete returns True. Returns action server result object. getPath(start, goal, planner_id=\u2019\u2019, use_start=False) path starting goal PoseStamped, nav_msgs/Path. getPathThroughPoses(start, goals, planner_id=\u2019\u2019, use_start=False) path starting set goals, list PoseStamped, nav_msgs/Path. smoothPath(path, smoother_id=\u2019\u2019, max_duration=2.0, check_for_collision=False) Smooths nav_msgs/msg/Path path. changeMap(map_filepath) Requests change current map map_filepath\u2019s yaml. clearAllCostmaps() Clears global local costmaps. clearLocalCostmap() Clears local costmap. clearGlobalCostmap() Clears global costmap. getGlobalCostmap() Returns global costmap, nav2_msgs/Costmap getLocalCostmap() Returns local costmap, nav2_msgs/Costmap waitUntilNav2Active(navigator=\u2019bt_navigator, localizer=\u2019amcl\u2019) Blocks Nav2 completely online lifecycle nodes active state. conjunction autostart external lifecycle bringup. Custom navigator localizer nodes lifecycleStartup() Sends request lifecycle management servers bring active state, autostart false program control Nav2\u2019s lifecycle. lifecycleShutdown() Sends request lifecycle management servers shut destroyNode() Releases resources object. general template building applications nav2_simple_commander.robot_navigator import BasicNavigator import rclpy rclpy.init() nav BasicNavigator() nav.setInitialPose(init_pose) nav.waitUntilNav2Active() autostarted, `lifecycleStartup()` path nav.getPath(init_pose, goal_pose) smoothed_path nav.smoothPath(path) nav.goToPose(goal_pose) nav.isTaskComplete(): feedback nav.getFeedback() feedback.navigation_duration nav.cancelTask() result nav.getResult() result TaskResult.SUCCEEDED: print('Goal succeeded!') elif result TaskResult.CANCELED: print('Goal canceled!') elif result TaskResult.FAILED: print('Goal failed!') Usage Demos Examples install aws_robomaker_small_warehouse_world package build local workspace Nav2. demonstrations, examples, launch files assume you\u2019re working gazebo world hard-programmed shelf locations routes highlighting API meaningful). set model directory turtlebot3 simulation aws warehouse world GAZEBO_MODEL_PATH. main ways run demos nav2_simple_commander API. Automatically main benefit automatically showing demonstrations single command default robot model world. Nav2\u2019s default robot parameters set main simulation launch file nav2_bringup. Launch launch file demo ros2 launch nav2_simple_commander security_demo_launch.py bring robot AWS Warehouse reasonable position, launch autonomy script, complete task demonstrate nav2_simple_commander API. Manually main benefit able launch alternative robot models navigation configurations default specific technology demonstration. long Nav2 simulation physical robot) running, simple python commander examples demos don\u2019t care robot examples demos hard-programmed item locations routes, utilize AWS Warehouse. easy update adapt examples demos environment. bash Terminal launch robot navigation simulation physical robot). File truncated lines full file"},
{"url": "https://index.ros.org/p/nav2_smac_planner", "package": "nav2_smac_planner", "package_summary": "Smac global planning plugin: A*, Hybrid-A*, State Lattice", "package_details": "Smac Planner SmacPlanner plugin Nav2 Planner server. includes distinct plugins: SmacPlannerHybrid: highly optimized fully reconfigurable Hybrid-A* implementation supporting Dubin Reeds-Shepp models (legged, ackermann car models). SmacPlannerLattice: highly optimized fully reconfigurable State Lattice implementation supporting configurable minimum control sets, control sets Ackermann, Legged, Differential Omnidirectional models. SmacPlanner2D: highly optimized fully reconfigurable grid-based implementation supporting 8-connected neighborhood models. introduces basic building blocks: CostmapDownsampler: library costmap object downsample resolution. AStar: generic highly optimized template library planning plugins search. Additional template planning CollisionChecker: Collision check based robot\u2019s radius footprint. Smoother: simple path smoother smooth Hybrid-A*, State Lattice paths. users reporting Delivery robots Industrial robots Vertical farming Solar farms Configuration Guide Page additional parameter descriptions. Introduction nav2_smac_planner package optimized templated search algorithm create multiple A*-based planners multiple types robot platforms. built Steve Macenski Samsung Research. support circular differential-drive omni-directional drive robots SmacPlanner2D planner implements cost-aware planner. support legged, cars, car-like, ackermann vehicles SmacPlannerHybrid plugin implements Hybrid-A* planner. support non-circular, arbitrary shaped, model vehicles SmacPlannerLattice plugin implements State Lattice planner. control sets generators ackermann, legged, differential drive omnidirectional vehicles, provide robot type planning behaviors. plugins curvature constrained kinematically feasible planning, planning robot high speeds don\u2019t flip skid control. applicable non-round robots large rectangular arbitrary shaped robots differential/omnidirectional drivetrains) pose-based collision checking. SmacPlannerHybrid implements Hybrid-A* planner proposed Practical Search Techniques Path Planning Autonomous Driving, modifications heuristic, traversal functions increase path quality needing expensive optimization-based smoothing. SmacPlannerLattice implements State Lattice planner. implement precisely Optimal, Smooth, Nonholonomic MobileRobot Motion Planning State Lattices control sets Generating Minimal Spanning Control Sets Constrained Motion Planning Discrete State Spaces), sufficiently similar good reference. Additional optimizations on-approach analytic expansions improved heuristic functions largely matching Hybrid-A* share optimized implementations drive search goal, faster. summary\u2026 SmacPlannerHybrid designed work Ackermann, car, car-like robots High speed curvature constrained robots flip skid, dump load high speeds) Arbitrary shaped, non-circular differential omnidirectional robots requiring kinematically feasible planning collision checking Legged robots SmacPlannerLattice designed work Arbitrary shaped, non-circular robots requiring kinematically feasible planning collision checking full capabilities drivetrain Flexibility robot model types non-circular differential, ackermann, omni support SmacPlanner2D designed work Circular, differential omnidirectional robots small robots respect environment size car hallway large robot convention center) approximated circular footprint. Features improve Hybrid-A* ways: Remove upsampling searching smaller motion primitives upsampling ratio). Multi-resolution search allowing planning occur coarser resolution wider spaces faster). Cost-aware penalty functions search resulting smoother plans reducing requirement smooth). Gradient-descent, basic fast smoother Faster planning original paper highly optimizing template algorithm. Faster planning custom precomputed heuristic, motion primitive, functions. Automatically adjusted search motion model sizes motion model, costmap resolution, bin sizing. Closest path approach tolerance exact path invalid space. Multi-model hybrid searching including Dubin Reeds-Shepp models. models trivially added. High unit integration test coverage, doxygen documentation. modern language features individual components easily reusable. Speed optimizations: data structure graph lookups main loop, near-zero copy main loop, dynamically generated graph dynamic programming-based obstacle heuristic, optional recomputation heuristics subsequent planning requests goal, Templated Nodes implementation support additional robot extensions. Selective re-evaluation obstacle heuristic goal/map iteration, speed subsequent replanning features (multi-resolution, models, smoother, SmacPlanner2D SmacPlannerLattice plugins. implementation weird artifacts introduced gradient wavefront-based implementation NavFn Planner. planner slightly slower, worth increased quality paths. Note: prior releases, smoother largely implementing original Hybrid-A* paper\u2019s. smoother failed consistently provide results, compute time, deprecated. smoothing path time \u201cgood\u201d solution, reliable practical working mobile robots autonomous cars mph, liberties smoothing knowing local trajectory planners pretty smart. lives Smoothing Server Cost-aware smoother. smoother replaced simpler optimization inspired solution faster, consistent, simpler understand. smoother cost-aware, added cost-aware penalty functions planners push plans high-cost spaces check validity smoothed sections ensure feasibility. terminate paths collision environment. smoother, smoother server, additional compute time. Metrics original Hybrid-A* implementation boasted planning times planning cell maps angular bins. faster results evaluations: planning larger) cell maps angular bins. planning larger) cell map angular bins. planners planning roughly path. computed path (Panel Hybrid-A* computed path (Panel State Lattice computed path (Panel reference: NavFn compute path including nasty path discontinuity artifacts Design basic design centralizes templated implementation handles search graph nodes. implementation templated nodes, NodeT, methods needed compute hueristics, travel costs, search neighborhoods. outcome design standard implementation traverse type graph long node template created provide nodes default node template (Node2D) grid-search 8-connected neighborhoods. provide Hybrid node template (NodeHybrid) theta) search collision checking Dubin Reeds-Shepp motion models. provide Lattice (NodeLattice) node state lattice planning making wider range velocity options differential omnidirectional robots. Additional templates easily included grid search non-grid base searching routing. ROS2 facing plugin, global goals pre-process data feed templated includes processing requests downsample costmap resolution speed search smoothing resulting path State Lattice due lattices generated dependent costmap resolution). SmacPlannerHybrid SmacPlannerLattice plugins, path promised kinematically feasible due kinematically valid models branching search. promised feasible differential omni-directional robots. isolated costmap downsampler, smoother, Node template objects ROS2 easily testable independently ROS planner. place ROS planner plugins Parameters inline description parameters SmacPlanner. includes comments specific parameters apply SmacPlanner2D SmacPlanner place. planner_server: File truncated lines full file"},
{"url": "https://index.ros.org/p/nav2_smoother", "package": "nav2_smoother", "package_summary": "Smoother action interface", "package_details": "Nav2 Smoother Nav2 smoother Task Server Nav2 implements nav2_behavior_tree::SmoothPath interface. smoothing module implementing nav2_behavior_tree::SmoothPath interface responsible improving path smoothness and/or quality, typically unsmoothed path planner module nav2_planner. loads map potential smoother plugins path smoothing user-defined situations. Navigation Plugin list list smoother plugins. Configuration Guide Page additional parameter descriptions. package Simple Smoother Savitzky-Golay Smoother plugins."},
{"url": "https://index.ros.org/p/nav2_system_tests", "package": "nav2_system_tests", "package_summary": "TODO", "package_details": "System Tests package tests Component-Testing, Subsystem-Testing, Full-System integration. main goal provide location smoke integration tests navigation system ensure working properly high level. Unit specific subsystem testing packages specific algorithms. tests package spin Gazebo instances robot environment robot complete task space tracking specific modules results. examples include System tests robot sandbox environment navigate pose, navigate poses, waypoint navigation types Random planning thousands paths generated environment ensure default planners working properly Testing system brought lifecycle transitions successfully multiple times Testing keepout speed restricted zones work practical environment keepout zones slowing speed restricted areas Testing behaviors sandbox environment ensure trigger complete collision checking properly Testing system failures properly recorded recovered primarily Nav2 establish high degree maintainer confidence merging large architectural Nav2 project. test installs Nav2 locally additional information."},
{"url": "https://index.ros.org/p/nav2_theta_star_planner", "package": "nav2_theta_star_planner", "package_summary": "Theta* Global Planning Plugin", "package_details": "Nav2 Theta Star Planner Theta Star Planner global planning plugin meant Nav2 Planner Server. nav2_theta_star_planner implements highly optimized version Theta* Planner (specifically Lazy Theta* variant) meant plan any-angle paths planner supports differential-drive omni-directional robots. Configuration Guide Page additional parameter descriptions. Features planner search line sight (LOS) checks form any-angle paths avoiding zig-zag paths present usual implementation considers costmap traversal cost execution smoothen paths automatically, mitigating smoothen path presence sharp turns depends resolution map, decreases map resolution increases) costs costmap penalise high cost regions control path behavior angle directed middle spaces suited smaller robots omni-directional differential drive kind algorithmic part planner segregated plugin part reusability Metrics planner (averaged compute path parameters set w_euc_cost: w_traversal_cost: global_costmap\u2019s inflation_layer parameters set cost_scaling_factor:5.0, inflation_radius: Cost Function Details Symbols meanings cost function cost node heuristic function cost node total cost node LETHAL_COST costmap traversal cost inscribes obstacle respect function, curr represents node neighbours added list neigh neighboring nodes curr par parent node curr euc_cost(a,b) euclidean distance node type type costmap_cost(a,b) costmap traversal cost (ranges unknown node type type Cost function g(neigh) g(curr) w_euc_cost*euc_cost(curr, neigh) w_traversal_cost*(costmap_cost(curr,neigh)/LETHAL_COST)^2 h(neigh) w_heuristic_cost euc_cost(neigh, goal) f(neigh) g(neigh) h(neigh) program works \u2018neigh\u2019 init_rclcpp expanded, depending result LOS check, LOS check returns true) g(neigh) change g(par) w1*euc_cost(par, neigh) w2*(costmap(par,neigh)/LETHAL_COST)^2 Parameters parameters planner .how_many_corners choose 4-connected 8-connected graph expansions, accepted values .w_euc_cost weight applied length path. .w_traversal_cost tunes harshly nodes high cost penalised. g(neigh) equation cost-aware component cost function forms parabolic curve, parameter increasing curve steeper allowing greater differentiation delta costs increase, graph steep) nodes costs. default values parameters planner_server: ros__parameters: planner_plugin_types: [\"nav2_theta_star_planner/ThetaStarPlanner\"] use_sim_time: True planner_plugin_ids: [\"GridBased\"] GridBased: how_many_corners: w_euc_cost: w_traversal_cost: Usage Notes Tuning Parameters starting note costmap_cost(curr,neigh) component operated multiplied parameter substituted g(init_rclcpp)) varies planner costs cell global_costmap measure point\u2019s proximity obstacles. Providing gentle potential field covers entirety region leading small pocket regions cost recommended order achieve paths pass middle spaces. good starting point set inflation_layer\u2019s parameters cost_scaling_factor: inflation_radius: decrease cost_scaling_factor achieve potential field. Providing gentle potential field region planner exchange increase path lengths decrease accumulated traversal cost, leading increase distance obstacles. corner naturally smoothing turns removes requirement external path smoother. w_heuristic_cost internal setting user changeable. admissible heuristic, restricting minimum w_euc_cost heuristic travel costs admissible consistent. set parameters default values increasing w_traversal_cost achieve middling paths, adversely paths taut. recommended simultaneously tune w_euc_cost. Increasing w_euc_cost increases tautness path, leads straight line paths (any-angled paths). note query time planner increase higher values w_traversal_cost nodes expanded cost path, counteract setting w_euc_cost higher check reduces query time. note w_traversal_cost slow downs, case number node expanisions increase tuning w_euc_cost tuning planner\u2019s parameters change inflation_layer\u2019s parameters global costmap) tune behavior paths. Path Smoothing cost function works, output path natural tendency form smooth curves corners, smoothness path depends wide turn number cells turn. planner recommended local planners DWB TEB local planner controllers form local trajectory traversed) account abrupt turns arise due planner able find smoother turns owing aforementioned reasons. smoother paths achieved increasing costmap resolution costmap resolution recommended increase query times planner. Test planners performance higher cm/px costmaps making switch finer costmaps. planner? planner scenarios planning speed matters extremely smooth path, handled local planner/controller mentioned any-angled nature paths traverse environments diagonally allowed, wide open region). case corridors misaligned map image, case planner able give straight-line paths considers line sight avoid giving jagged paths arises planners finite directions motion"},
{"url": "https://index.ros.org/p/nav2_util", "package": "nav2_util", "package_summary": "TODO", "package_details": "Nav2 Util nav2_util package utilities abstracted individual packages find examples you\u2019ll find Geometry utilities computing distances values paths Nav2 specific lifecycle node wrapper boilerplate code common utilities declare_parameter_if_not_declared() Simplified service clients Simplified action servers Transformation robot pose helpers long-term aim utilities find permanent homes packages Nav2) migrate raw tools ROS"},
{"url": "https://index.ros.org/p/nav2_velocity_smoother", "package": "nav2_velocity_smoother", "package_summary": "Nav2's Output velocity smoother", "package_details": "Velocity Smoother nav2_velocity_smoother package lifecycle-component node smoothing velocities Nav2 robot controllers. aim package implement velocity, acceleration, deadband smoothing Nav2 reduce wear-and-tear robot motors hardware controllers smoothing accelerations/jerky movements present local trajectory planners\u2019 control efforts. supports differential drive omnidirectional robot platforms primarily, applicable ackermann interpretations Twist. built Steve Macenski Samsung Research. Configuration Guide Page additional parameter descriptions. Features package created Limit velocity commands kinematic constraints, including velocity acceleration Limit velocities based deadband regions Stop sending velocities timeout duration commands (due stopped navigation) Send zero-velocity command velocity timeout stop robot, case properly handled Support Omni differential drive robots Theta) Smooth velocities proportionally direction commanded, kinematic limits Provide open loop closed loop options Component nodes single-process systems stand-alone node format Dynamically reconfigurable parameters Design lifecycle-component node, lifecycle manager state management composition process management. designed command Nav2\u2019s controller server smooth robot hardware controllers. Thusly, takes command cmd_vel topic produces smoothed output smoothed_cmd_vel. node designed regular timer running configurable rate. contrast simply computing smoothed velocity command callback cmd_vel input Nav2. interpolate commands higher frequency Nav2\u2019s local trajectory planners provide. local trajectory planner running velocity smoother run provide approximately messages robot controller smoothed kinematic limits timestep. regular stream commands robot base interpolates commands current velocity desired velocity finely smoother acceleration motion profiles. required, nice design feature. simply run smoother cmd_vel rate smooth velocities interpolation. primary operation modes: open closed loop. open-loop, node assumes robot able achieve velocity send command smoothed good assumption acceleration limits set properly). robot odometry accurate significant latency relative smoothing_frequency isn\u2019t delay feedback loop. closed-loop, node read odometry topic apply smoother obtain robot\u2019s current speed. determine robot\u2019s current velocity achievable velocity targets velocity, acceleration, deadband constraints live data. Parameters inline description parameters VelocitySmoother. velocity_smoother: ros__parameters: smoothing_frequency: Rate run smoother scale_velocities: false scale velocities proportionally axis acceleration range follow vector, feedback: \"OPEN_LOOP\" Type feedback current speed. Open loop smoothed output. Closed loop robot odometry max_velocity: Maximum velocities, ordered min_velocity: Minimum velocities, ordered deadband_velocity: deadband velocities zero-ed sending robot base controller, ordered velocity_timeout: Time velocity commands received stop max_accel: Maximum acceleration, ordered max_decel: Maximum deceleration, ordered odom_topic: \"odom\" Topic odometry estimating current velocities odom_duration: Period time sample odometry information velocity estimation Topics Topic Type smoothed_cmd_vel geometry_msgs/Twist Publish smoothed velocities cmd_vel geometry_msgs/Twist Subscribe input velocities Install sudo apt-get install ros-<ros2-distro>-nav2-velocity-smoother (Important Side Notes) Typically: rate odometry, open-loop mode set smoothing frequency similar cmd_vel topic. high rate odometry, closed-loop mode higher smoothing frequency you\u2019ll date information smooth based exceed smoothing frequency odometry frequency closed loop mode. odom_duration relative odometry publication rate noise characteristics. smoothing frequency paces odometry poorly selected odom_durations robot oscillate and/or accelerate slowly due latency closed loop mode. doubt, open-loop reasonable choice users. minimum maximum velocities rotation represent left turns. separately, users wise set values signed) rotation. Additionally, parameters signed, important maximum deceleration negative signs represent deceleration. Minimum velocities negatives moving movement restricted setting Deadband velocities minimum thresholds, set robot\u2019s breaking torque stand non-trivial sending small values pull high amounts current."},
{"url": "https://index.ros.org/p/nav2_voxel_grid", "package": "nav2_voxel_grid", "package_summary": "voxel_grid provides an implementation of an efficient 3D voxel grid. The occupancy grid can support 3 different representations for the state of a cell: marked, free, or unknown. Due to the underlying implementation relying on bitwise and and or integer operations, the voxel grid only supports 16 different levels per voxel column. However, this limitation yields raytracing and cell marking performance in the grid comparable to standard 2D structures making it quite fast compared to most 3D structures.", "package_details": "Nav2 Voxel Grid nav2_voxel_grid package VoxelGrid Voxel Layer nav2_costmap_2d. voxel grid simply char pointer array map size bit locations voxel values (free, unknown, occupied branched separate package applications dense voxel grid representation implementations raycasting. ROS1 Comparison package direct port ROS2 voxel layer."},
{"url": "https://index.ros.org/p/nav2_waypoint_follower", "package": "nav2_waypoint_follower", "package_summary": "A waypoint follower navigation server", "package_details": "Nav2 Waypoint Follower Nav2 waypoint follower application navigation action complete sort orchestrated task. task set waypoints navigate set positions order action request. waypoint waypoint array final position. built Steve Macenski Samsung Research. Configuration Guide Page additional parameter descriptions. package exposes follow_waypoints action server type nav2_msgs/FollowWaypoints. array waypoints visit, feedback current index waypoint processing, returns list waypoints unable complete. hosts waypoint task executor plugin perform custom behavior waypoint waiting user instruction, picture, picking box. parameterization stop_on_failure stop processing waypoint action single waypoint failure. false, continue waypoint current waypoint fails. action exist waypoint navigation tasks terminated stop_on_failure, single waypoint failed. autonomy waypoint nav2_waypoint_follower waypoint program plugin interface specific task executors. location complete specific task picture, pick box, wait user input. nice demo application Nav2 sample application. sample application. schools thoughts fleet managers dispatchers. Dumb robot; smart centralized dispatcher Smart robot; dumb centralized dispatcher nav2_waypoint_follower weakly sufficient create production-grade on-robot solution. autonomy system dispatcher account robot\u2019s pose, battery level, current task, assigning tasks, application robot worry task hand complexities system complete requested task. situation, request waypoint follower unit work pick warehouse, security patrole loop, aisle, task return dispatcher task request recharge. school thought, waypoint application step navigation system autonomy application. nav2_waypoint_follower nice sample application proof concept, waypoint autonomy system robot carry weight making robust solution. case, nav2_behavior_tree package create custom application-level behavior tree navigation complete task. include subtrees checking charge status mid-task returning dock handling unit work complex task. nav2_bt_waypoint_follower subject adjustment) create application easily. school thought, waypoint application closely tied system autonomy, cases, system autonomy. highly depends tasks robot(s) completing, type environment, cloud resources distinction clear business case."},
{"url": "https://index.ros.org/p/ndt_omp", "package": "ndt_omp", "package_summary": "OpenMP boosted NDT and GICP algorithms", "package_details": "ndt_omp package OpenMP-boosted Normal Distributions Transform GICP) algorithm derived pcl. NDT algorithm modified SSE-friendly multi-threaded. run times faster original version pcl. package non-ROS1 projects (ROS2 ROS), forked repositories: dfki-ric/pclomp tier4/ndt_omp. Benchmark Core roscd ndt_omp/data rosrun ndt_omp align 251370668.pcd 251371071.pcd pcl::NDT single 282.222[msec] 10times: 2921.92[msec] fitness: pclomp::NDT (KDTREE, threads) single 207.697[msec] 10times: 2059.19[msec] fitness: pclomp::NDT (DIRECT7, threads) single 139.433[msec] 10times: 1356.79[msec] fitness: pclomp::NDT (DIRECT1, threads) single 34.6418[msec] 10times: 317.03[msec] fitness: pclomp::NDT (KDTREE, threads) single 54.9903[msec] 10times: 500.51[msec] fitness: pclomp::NDT (DIRECT7, threads) single 63.1442[msec] 10times: 343.336[msec] fitness: pclomp::NDT (DIRECT1, threads) single 17.2353[msec] 10times: 100.025[msec] fitness: methods neighbor voxel search implemented. select pclomp::KDTREE, results completely original pcl::NDT. recommend pclomp::DIRECT7 faster stable. extremely fast registration, choose pclomp::DIRECT1, bit unstable. Red: target, Green: source, Blue: aligned Related packages ndt_omp fast_gicp"},
{"url": "https://index.ros.org/p/neo_nav2_bringup", "package": "neo_nav2_bringup", "package_summary": "ROS-2 navigation bringup packages for neobotix robots", "package_details": "neo_nav2_bringup Common nav2 bringup package robots Boiler plate launch files Nav2 find documentation package https://neobotix-docs.de/ros/packages/neo_nav2_bringup.html"},
{"url": "https://index.ros.org/p/nerian_stereo", "package": "nerian_stereo", "package_summary": "Driver node for ROS 2 for Scarlet, SceneScan and SP1 stereo vision sensors by Nerian Vision GmbH", "package_details": "nerian_stereo Driver node Scarlet, SceneScan Ruby stereo vision sensors Nerian Vision Technologies. check correspoding ROS wiki page documentation: http://wiki.ros.org/nerian_stereo"},
{"url": "https://index.ros.org/p/nlohmann_json_schema_validator_vendor", "package": "nlohmann_json_schema_validator_vendor", "package_summary": "A vendor package for JSON schema validator for JSON for Modern C++", "package_details": "vendor package JSON schema validator JSON Modern package helps bring nlohmann_json_schema_validator library workspace underlay."},
{"url": "https://index.ros.org/p/nmea_hardware_interface", "package": "nmea_hardware_interface", "package_summary": "ros2 hardware interface for nmea_gps", "package_details": "nmea_hardware_interface mea_to_geopose ros2_control"},
{"url": "https://index.ros.org/p/nobleo_socketcan_bridge", "package": "nobleo_socketcan_bridge", "package_summary": "Simple wrapper around SocketCAN", "package_details": "nobleo_socketcan_bridge package functionality expose frames SocketCAN ROS2 topics. Overview from-scratch re-implementation socketcan_bridge ROS1. ROS2 package ros2_socketcan similar package. differences package ros2_socketcan loopback, frames send received node lifecycle management, run CPU usage Nodes main node (socketcan_bridge) dynamically loadable component. node socketcan_bridge_ee EventsExecutor runs bit efficient. socketcan_bridge Subscribed Topics (can_msgs/Frame) Messages received SocketCAN device. Published Topics (can_msgs/Frame) Frames received SocketCAN device published topic. Parameters interface (default=can0) SocketCAN device, default devices named read_timeout (default=1.0) Maximum duration seconds wait data file descriptor reconnect_timeout (default=5.0) Sleep duration seconds reconnecting SocketCAN device"},
{"url": "https://index.ros.org/p/nodl_python", "package": "nodl_python", "package_summary": "Implementation of the NoDL API in Python.", "package_details": "nodl_python Implementation NoDL API Python."},
{"url": "https://index.ros.org/p/ros2nodl", "package": "ros2nodl", "package_summary": "CLI tools for NoDL files.", "package_details": "ros2nodl source code NoDL command line tools ROS Usage verbs ros2 nodl: show validate Run ros2 nodl commands Run ros2 nodl <verb> individual verb usage show Pretty-print NoDL information executable(s) usage: ros2 nodl show package_name [executable [executable Show NoDL data positional arguments: package_name package show. executable Specific Executable display. optional arguments: show message exit Show NoDL data publisher_lambda examples_rclcpp_minimal_publisher: ros2 nodl show examples_rclcpp_minimal_publisher publisher_lambda {'actions': 'executable': 'publisher_lambda', 'name': 'minimal_publisher', 'parameters': 'services': 'topics': [{'name': 'topic', 'publisher': True, 'subscription': False, 'type': 'std_msgs/msg/String'}]} validate Validate .nodl.xml file schema attempt parse usage: ros2 nodl validate [file [file Validate NoDL XML documents positional arguments: file Specific .nodl.xml file(s) validate. optional arguments: show message exit --print Print parsed output. Validate file publisher.nodl.xml ros2 nodl validate publisher.nodl.xml Validating publisher.nodl.xml... Success files validated"},
{"url": "https://index.ros.org/p/nodl_to_policy", "package": "nodl_to_policy", "package_summary": "Package to generate a ROS 2 Access Control Policy from the NoDL description of a ROS system", "package_details": "nodl_to_policy repository tooling generate ROS Access Control Policy Node Interface Definition Language (NoDL) description ROS system specific package), primarily conjunction SROS2 utilities. Building Clone repository ROS workspace: git clone git@github.com:osrf/nodl_to_policy.git <ws/src>/nodl_to_policy Install required dependencies: rosdep install -yri --from-paths <ws/src> --rosdistro=galactic Build colcon build --symlink-install Usage CLI nodl_to_policy package extends ROS CLI adding nodl_to_policy command, convert verb. expected ros2 nodl_to_policy convert <path-to-NoDL-file (*.nodl.xml)> Invoking convert verb dumps resulting access control policy console standard output. desired, output redirected <output>.policy.xml. API NoDL policy conversion method simply takes NoDL description (type: List[nodl.Node]). conversion API programmatically nodl_to_python.policy import convert_to_policy obtain NoDL description, `nodl.parse(<nodl_file_path>)` policy convert_to_policy(nodl_description) type(nodl_description) List[nodl.Node] policy, and/or output `nodl.dump_policy(policy, <output_stream>)`"},
{"url": "https://index.ros.org/p/octomap", "package": "octomap", "package_summary": "The OctoMap library implements a 3D occupancy grid mapping approach, providing data structures and mapping algorithms in C++. The map implementation is based on an octree. See\n  http://octomap.github.io for details.", "package_details": "Octomap probabilistic, flexible, compact mapping library robotic systems Authors: Kai Wurm Armin Hornung, University Freiburg, Copyright https://octomap.github.io list contributors authors. License octomap: BSD License REQUIREMENTS octomap library: cmake regular build environment (gcc) HTML documentation: doxygen (optional) viewer octovis: OpenGL, QGLViewer (optional) Skip WINDOWS tips compilation Windows. install dependencies Ubuntu running: sudo apt-get install cmake doxygen libqt4-dev libqt4-opengl-dev libqglviewer-dev-qt4 (Note: older releases Ubuntu exchange package libqglviewer-qt4-dev) INSTALLATION http://www.ros.org/wiki/octomap OctoMap ROS! pre-compiled packages octomap, octovis, ROS integration Build complete project changing \u201cbuild\u201d directory running cmake: mkdir build build cmake Type compile create CMake files cleanly build folder (Out-of-source build). Executables bin, libraries lib. debug configuration created running: cmake -DCMAKE_BUILD_TYPE=Debug build directory build-debug). install library running install, adjust CMAKE_INSTALL_PREFIX target test executes unit tests octomap library, interested verifying functionality machine. DOCUMENTATION documentation latest stable release online: https://octomap.github.io/octomap/doc/index.html build current HTML-Documentation current source Doxygen running docs build directory. documentation doc/html/index.html main directory. STARTED Jump src/octomap/simple_example.cpp start viewer bin/octovis find scan binary tree load directory share. examples downloaded project website. PROJECTS CMake-project config generated OctoMap OctoMap CMake-Projects easily. Point CMake octomap installation finds file octomap/lib/cmake/octomap/octomap-config.cmake, setting environment variable octomap_DIRto directory add CMakeLists.txt: find_package(octomap REQUIRED) include_directories(${OCTOMAP_INCLUDE_DIRS}) link_libraries(${OCTOMAP_LIBRARIES}) addition cmake-module provide pkgconfig-file. convenience, minimal project included file share/example-project.tgz File truncated lines full file"},
{"url": "https://index.ros.org/p/octovis", "package": "octovis", "package_summary": "octovis is visualization tool for the OctoMap library based on Qt and libQGLViewer. See\n  http://octomap.github.io for details.", "package_details": "Octomap probabilistic, flexible, compact mapping library robotic systems Authors: Wurm, Hornung, University Freiburg, Copyright https://octomap.github.io Octovis visualization tool library OctoMap. distributed GPL license \u201cLICENSE.txt\u201d). Octovis based QGLViewer, distributed GPL license [exception author] (octovis/src/extern/QGLViewer/GPL_EXCEPTION). LINUX build octovis independently octomap steps: octovis mkdir build build cmake manually set location octomap library octomap_DIR variable CMake. Note: error CMake Error /usr/share/cmake-2.8/Modules/FindQt4.cmake:1148 (MESSAGE): qmake installed, means installed. Ubuntu resolved executing: sudo update-alternatives --config qmake choosing WINDOWS octomap viewer octovis compiled Windows tested in-depth. Feedback works\u201d nice compile library OpenGL cmake (http://www.cmake.org) development environment MinGW Download MinGW distribution (http://www.mingw.org) Install compiler add MingGW/bin system PATH Download library MinGW support (http://qt.nokia.com/downloads) build GQLViewer library. Open windows shell START-Menu execute: octovis/src/extern/QGLViewer qmake mingw32-make generate QGLViewer2.dll libQGLViewer2.a viewer built rest octomap package. shell execute: octomap/build cmake \"MinGW Makefiles\" mingw32-make Microsoft Visual Studio Download library Visual Studio support (http://qt.nokia.com/downloads) build qglviewer library open windows shell START-Menu octovis/src/extern/QGLViewer qmake vclib QGLViewer.pro -spec win32-msvc2010 (ignore warnings) Load generated file QGLViewer.vcxproj build project. give needed files QGLViewer2.(dll,lib). viewer built rest octomap package. steps create solution file library viewer: Start cmake-gui set code directory octomap main directory. Set build directory /build Press \u201cGenerate\u201d, select generator, \u201cVisual Studio generates solution file octomap-distribution.sln Load file build project. hints compiling Visual Studio depending File truncated lines full file"},
{"url": "https://index.ros.org/p/octomap_msgs", "package": "octomap_msgs", "package_summary": "This package provides messages and serializations / conversion for the", "package_details": "octomap_msgs ROS package provide messages serializations conversion OctoMap library. repository continues groovy branch imported SVN: http://alufr-ros-pkg.googlecode.com/svn/branches/octomap_stacks-groovy-devel/octomap_msgs/ https://code.google.com/p/alufr-ros-pkg/ previous versions."},
{"url": "https://index.ros.org/p/odom_to_tf_ros2", "package": "odom_to_tf_ros2", "package_summary": "A simple ros2 package (node) that reads an odom topic and generates the equivalent tf connection (transformation). It also provides options to override frame names, or just use the ones in the original odom topic.", "package_details": "odom_to_tf_ros2 simple ros2 package (node) reads odom topic generates equivalent connection (transformation). options override frame names, original odom topic. Parameters frame_id: parent frame override. (Leave empty odom topic) child_frame_id: child frame override. (Leave empty odom topic) odom_topic: nav_msgs/Odometry topic subscribe inverse_tf: true, generated base_link odom frame. default, generated odom frame base_link. (default: false) use_original_timestamp: true, generated timestamp odom message. default, generated (default: false)"},
{"url": "https://index.ros.org/p/openeb_vendor", "package": "openeb_vendor", "package_summary": "Wrapper around openeb", "package_details": "openeb_vendor Wrapper package build Prophesee OpenEB library (Metavision SDK) ROS2 build farm. Note: patch build SilkyEVCam plugin suspended disables Prophesee sensors! License software issued Apache License Version"},
{"url": "https://index.ros.org/p/osrf_pycommon", "package": "osrf_pycommon", "package_summary": "Commonly needed Python modules, used by Python software developed at OSRF.", "package_details": "osrf_pycommon Commonly needed Python modules, Python software developed OSRF. Branches releasing stdeb ROS buildfarm) Ubuntu focal, doesn\u2019t key python3-importlib-metadata, branch, latest branch, starting dependency required. Python python2 branch."},
{"url": "https://index.ros.org/p/pepper_meshes", "package": "pepper_meshes", "package_summary": "Meshes for the Pepper robot, for ROS2", "package_details": "pepper_meshes2 package install Aldebaran Pepper meshes ROS2 building binary package, installer user agree Creative Commons Attribution-NonCommercial-NoDerivatives International Public License LICENSE file: requirement Aldebaran. Justification: French law, clicking/entering text recognized virtual signature; LICENSE file sufficient. Aldebaran redistribute meshes long installer asks user click/enter \u201cok/yes\u201d. history repo frequently re-written don\u2019t history meshes result heavy cloning. Status ROS Distro Binary Status Source status GitHub Status Humble Iron"},
{"url": "https://index.ros.org/p/open3d_conversions", "package": "open3d_conversions", "package_summary": "Provides conversion functions to and from Open3D datatypes", "package_details": "open3d_conversions package functions convert pointclouds ROS Open3D vice-versa. Dependencies Eigen3 Open3D System Requirements Ubuntu GCC Installation Open3D Instructions setup Open3D open3d_conversions case building package source, time conversion functions larger built Release mode. Usage functions library: void open3d_conversions::open3dToRos(const open3d::geometry::PointCloud pointcloud, sensor_msgs::msg::PointCloud2 ros_pc2, std::string frame_id \"open3d_pointcloud\"); void open3d_conversions::rosToOpen3d(const sensor_msgs::msg::PointCloud2::SharedPtr ros_pc2, open3d::geometry::PointCloud o3d_pc, bool skip_colors=false); Open3D pointclouds points, colors normals, interface supports XYZ, XYZRGB pointclouds. XYZI pointclouds handled placing intensity colors_. creating ROS pointcloud Open3D pointcloud, user expected set timestamp header pass frame_id conversion function. Documentation Documentation generated Doxygen configuration file executing doxygen Doxyfile package. Contact Feel free contact questions: Pranay Mathur Nikhil Khedekar Kostas Alexis"},
{"url": "https://index.ros.org/p/performance_report", "package": "performance_report", "package_summary": "Apex.AI performance_test runner, plotter, and reporter", "package_details": "performance_report [TOC] package serves purposes: Run multiple performance_test experiments Visualize combined results experiments Quick start Install required dependencies: python3 pip install third_party/python/requirements.txt sudo apt-get install firefox-geckodriver Note: commands run colcon workspace performance_test/performance_report installed: Build performance_test performance_report colcon build Set environment source install/setup.bash Run perf_test experiment yaml file ros2 run performance_report runner --log-dir perf_logs --test-name experiments --configs src/performance_test/performance_report/cfg/runner/run_one_experiment.yaml runner generates log files directory: `./perf_logs/experiements/` Generate plots configured yaml file ros2 run performance_report plotter --log-dir perf_logs --configs src/performance_test/performance_report/cfg/plotter/plot_one_experiment.yaml generated plots saved `./perf_logs` Generate reports configured yaml file ros2 run performance_report reporter --log-dir perf_logs --configs src/performance_test/performance_report/cfg/reporter/report_one_experiment.yaml runner performance_report runner tool wrapper performance_test perf_test. executes perf_test experiments defined yaml file: experiments: com_mean: ApexOSPollingSubscription rclcpp-single-threaded-executor ROS msg: Array1k rate: com_mean: ApexOSPollingSubscription msg: Array4k rate: run experiments config file, single command required: ros2 run performance_report runner --configs input/path/to/config.yaml --log-dir output/path/to/log/files --test-name custom_name_for_this_set_of_tests runner invoke perf_test experiment, sequence. results experiment stored json log file directory output/path/to/log/files/custom_name_for_this_set_of_tests/. list experiment configuration options, default values, yaml configuration files cfg/runner. runner default skip experiments log files generated output directory. overridden adding --force command. Reducing duplication configuration files experiment values single array: ```yaml experiments: com_mean: ApexOSPollingSubscription msg: Array1k Array4k Array16k File truncated lines full file"},
{"url": "https://index.ros.org/p/performance_test", "package": "performance_test", "package_summary": "Tool to test performance of ROS 2 and DDS data layers and communication.", "package_details": "performance_test [TOC] performance_test tool tests latency performance metrics middleware implementations support pub/sub pattern. simulate non-functional performance application. performance_test tool quickly set pub/sub configuration, number publisher/subscribers, message size, QOS settings, middleware. metrics automatically recorded application running: latency: corresponds time message takes travel publisher subscriber. latency measured timestamping sample published subtracting timestamp sample) measured time sample arrives subscriber logged subscriber created) CPU usage: percentage total system wide CPU usage (logged separately instance perf_test) resident memory: heap allocations, shared memory segments, stack system\u2019s internal work) (logged separately instance perf_test) sample statistics: number samples received, lost experiment run. master branch compatible ROS versions rolling jazzy iron humble galactic foxy eloquent dashing Apex.OS document Start quick building running performance_test tool Cyclone DDS plugin. needed, find detailed information building running quick good skip list supported middleware plugins learn test specific middleware implementation. Check tools visualizing results desired, read design architecture tool. shows test non-functional performance configuration: Option Plugin Cyclone DDS Message type Array1k Publishing rate Topic test_topic Duration experiment Number publisher(s) (default) Number subscriber(s) (default) Install ROS Install Cyclone DDS /opt/cyclonedds Build performance_test CMake build flag Cyclone DDS: source /opt/ros/rolling/setup.bash ~/perf_test_ws colcon build --cmake-args -DPERFORMANCE_TEST_PLUGIN=CYCLONEDDS source ./install/setup.bash Run communication plugin option Cyclone DDS: mkdir experiment ./install/performance_test/lib/performance_test/perf_test --communication CycloneDDS --msg Array1k --rate --topic test_topic --max-runtime --logfile experiment/log.csv experiment, CSV log file generated experiment folder starts log. Building performance_test tool simple Dockerfile.rclcpp. performance_test tool structured ROS package, colcon build source ROS installation: source /opt/ros/rolling/setup.bash Select middleware plugin list. build performance_test tool selected middleware: ```bash mkdir ~/perf_test_ws/src File truncated lines full file"},
{"url": "https://index.ros.org/p/performance_test_fixture", "package": "performance_test_fixture", "package_summary": "Test fixture and CMake macro for using osrf_testing_tools_cpp with Google Benchmark", "package_details": "performance_test_fixture repository source code performance_test_fixture package. performance_test_fixture Google Benchmark fixture leverages memory tools osrf_testing_tools_cpp record memory allocation statistics CMake macro compiling, linking, configuring benchmarking runs, automatically skipping tests platforms osrf_testing_tools_cpp memory tools supported Usage test fixture Google Benchmark fixture: #include <performance_test_fixture/performance_test_fixture.hpp> performance_test_fixture::PerformanceTest; BENCHMARK_F(PerformanceTest, example_test)(benchmark::State CMake macro rest ament_cmake_test family macros: find_package(performance_test_fixture REQUIRED) add_performance_test(example_test test/example_test.cpp) large impact performance, trace messages coming memory tools osrf_testing_tools_cpp suppressed default. enable memory operation trace logging, set environment variable PERFORMANCE_TEST_FIXTURE_ENABLE_TRACE=1."},
{"url": "https://index.ros.org/p/pick_ik", "package": "pick_ik", "package_summary": "Inverse Kinematics solver for MoveIt", "package_details": "pick_ik pick_ik inverse kinematics solver compatible MoveIt solver reimplementation bio_ik, combines: local optimizer solves inverse kinematics gradient descent global optimizer based evolutionary algorithms Critically, pick_ik custom cost functions discussed paper, prioritize additional objectives simply solving inverse kinematics specific frame. minimize joint displacement initial guess, enforce joints close pose, pass custom cost functions plugin. familiar bio_ik, functionality package includes: Reimplementation memetic solver (equivalent bio1 bio2_memetic solvers) Reimplementation numeric gradient descent solvers (equivalent gd_r, gd_c solvers) Fully configurable number threads global solver Cost functions joint displacement, joint centering, avoiding joint limits details implementation, paper full thesis. Started started pick_ik, refer README files: Installation Usage MoveIt Tutorial"},
{"url": "https://index.ros.org/p/picknik_ament_copyright", "package": "picknik_ament_copyright", "package_summary": "Check PickNik-specific copyright headers.", "package_details": "picknik_ament_copyright Adds entrypoints ament_copyright utility checking PickNik\u2019s headers copyright info proprietary licenses. Installation Clone build repo ROS package paths. Command Line add missing PickNik-proprietary license headers files current directory, run command (picknik sets PickNik copyright holder, picknik_proprietary closed-source proprietary license template). ament_copyright --add-missing picknik picknik_proprietary insert license header source code files license header ament_copyright recognizes: Copyright PickNik rights reserved. Unauthorized copying code base medium strictly prohibited. Proprietary confidential. pre-commit basic .pre-commit-config.yaml file automatically inserts PickNik proprietary license source code files: repos: repo: local hooks: ament_copyright ament_copyright language: system entry: ament_copyright args: ['--add-missing', 'picknik', 'picknik_proprietary',"},
{"url": "https://index.ros.org/p/draco_point_cloud_transport", "package": "draco_point_cloud_transport", "package_summary": "draco_point_cloud_transport provides a plugin to point_cloud_transport for sending point clouds\n    encoded with KD tree compression.", "package_details": "DRACO POINT CLOUD TRANSPORT Plugin ROS package point_cloud_transport, Google Draco compression library low-bandwidth lossy transportation PointCloud2 messages. Publisher plugin dynamic reconfiguration parameters, change compression runtime. Draco encode invalid values, pointclouds invalid values turned unstructured dense clouds NaNs, height Encode Decode Speed adjusting encode_speed dedode_speed parameters, adjust speed plugin encodes point cloud. higher number, higher speed encoding/decoding, worse compression. detailed information, documentation Draco. Encode Method Auto method decides encoding method based parameter default method. KD-tree method forces encoder KD-tree encoding. attribute point cloud type float32, kd-tree encoding requires attribute quantized. Sequential method forces encoder sequential encoding. Quantization sequential encoding. Sequential encoding worse compression KD-tree, faster arrangement points point cloud intact. sequential encoding encode point clouds Kinect. Deduplicate Deduplicate option tells encoder delete duplicate points point cloud, allowing transport smaller point clouds. Force Quantization Force_quantization option forces quantization KD-tree encoding method. Quantization Attribute Types Quantization_POSITION, Quantization_NORMAL, Quantization_COLOR tells encoder bits quantization attribute type. Attribute type point cloud attribute recognized based list names: POSITION POSITION POSITION \u201cpos\u201d POSITION \u201cposition\u201d POSITION \u201crgb\u201d COLOR \u201crgba\u201d COLOR COLOR COLOR COLOR COLOR NORMAL NORMAL NORMAL encoded GENERIC custom quantization, edit list recognized names expert_quantization expert_attribute_type options. Expert Quantization Expert_quantization option encoder custom quantization values point cloud attributes. Multiple POSITION attribute encoded varying quantization levels. set quantization PointField entry point cloud advertised base topic base_topic, set parameter: /base_topic/draco/attribute_mapping/quantization_bits/x. ros2 param set <node /<base_topic>/draco/attribute_mapping/quantization_bits/x expert_quantization, user quantization bits PointField entries point cloud. Expert Attribute Types Expert_attribute_types option encoder custom attribute types encoding point cloud attributes. set type PointField entry point cloud advertised base topic base_topic, set parameter: /base_topic/draco/attribute_mapping/attribute_type/x. ros2 param set <node /<base_topic>/draco/attribute_mapping/attribute_type/x \"'POSITION'\" expert_attribute_types, user type PointField entries point cloud. Accepted types POSITION NORMAL COLOR TEX_COORD GENERIC encoding rgb/rgba COLOR, user common rgba tweak ROS (encoding rgba instances Byte instance float32). inform encoder, PointField entry \u201crgb\u201d handled tweak, set parameter: ros2 param set <node /<base_topic>/draco/attribute_mapping/rgba_tweak/rgb true Subscriber Set Skip Dequantization Attribute Types SkipDequantizationPOSITION, SkipDequantizationNORMAL, SkipDequantizationCOLOR options decoder skip dequantization attribute types."},
{"url": "https://index.ros.org/p/popf", "package": "popf", "package_summary": "The POPF package", "package_details": "popf POPF planner KCL planning group modifications work \u201cmodern\u201d compilers\u2026 POPF1.1 archive source release POPF, ICAPS paper, bug fixes. directory \u2018src/popf\u2019 sources planner directory \u2018src/VALfiles\u2019 PDDL parsing action instantiation code, VAL PDDL validator). Contact details authors Strathclyde Planning Group Website: http://planning.cis.strath.ac.uk/ instance, bug reports technical discussions, contact Andrew Coles (firstname.lastname@cis.strath.ac.uk). Compiling POPF precompiled, statically linked binary POPF Linux download. wishing compile POPF carry reading, skip \u2018Running POPF\u2019 section. Build prerequisites: cmake http://www.cmake.org/ CBC mixed integer programming solver https://projects.coin-or.org/Cbc/ perl, bison flex build parser packaged linux distributions Ubuntu/Debian, suffice: sudo apt-get install cmake coinor-libcbc-dev coinor-libclp-dev coinor-libcoinutils-dev bison flex installed, open terminal type ./buildscript Assuming file \u2018build/popf/popf-clp\u2019 binary popf. Running POPF run POPF heuristic ICAPS paper), type: popf-clp domain.pddl problem.pddl disable heuristic, add option, type: popf-clp domain.pddl problem.pddl read solution plan lift partial order print resulting plan) run: popf-clp domain.pddl problem.pddl plan.soln POPF paper, print BibTeX reference run: popf-clp -citation full details command-line options, run popf arguments. Issues bugs affecting enhanced heuristic. fixed crashes exhibits strange behaviour, running option, small domain problem file pair passing POPF fixes bug, email Andrew Coles files debugging. doesn\u2019t fix problem, POPF crashes, compile debugging information. Change build/buildscript, follow instructions comments passing RelWithDebInfo cmake, pass Debug). run newly built popf binary, send output produces domain problem file Andrew Coles (firstname.lastname@cis.strath.ac.uk). Licence POPF free software: redistribute and/or modify terms GNU General Public License published Free Software Foundation, version License, option) version. POPF distributed hope WARRANTY; implied warranty MERCHANTABILITY FITNESS PURPOSE. GNU General Public License details. details license, file LICENCE directory."},
{"url": "https://index.ros.org/p/proxsuite", "package": "proxsuite", "package_summary": "The Advanced Proximal Optimization Toolbox", "package_details": "ProxSuite collection open-source, numerically robust, precise, efficient numerical solvers LPs, QPs, rooted revisited primal-dual proximal algorithms. ProxSuite, aim offer community scalable optimizers deal dense, sparse, matrix-free problems. targeted application Robotics, ProxSuite contexts limits. ProxSuite actively developed supported Willow Sierra research groups, joint research teams Inria, \u00c9cole Normale Sup\u00e9rieure Paris Centre National Recherche Scientifique localized France. ProxSuite integrated CVXPY modeling language convex optimization problems, CasADi\u2019s symbolic framework numerical optimization general optimal control. ProxQP CasADi plugin solve quadratic programs, TSID: robotic software efficient robot inverse dynamics contacts based Pinocchio. ready integrate ProxSuite optimization ecosystems. ProxSuite main features Proxsuite fast: template library, cache-friendly. Proxsuite versatile, offering unified API advanced algorithms specialized efficiently exploiting problem structures: dense, sparse, matrix-free matrix factorization backends, advanced warm-starting options equality-constrained initial guess, warm-start cold-start options previous results), dedicated features handling efficiently box constraints, linear programs, diagonal Hessian, constraints primal variables, solving nonconvex QPs, solving batches QPs parallel, solving closest feasible appears primal infeasible, differentiating feasible infeasible QPs. Proxsuite flexible: header compliant, Python Julia bindings easy code prototyping sacrificing performance. Proxsuite extensible. Proxsuite reliable extensively tested, showing performances hardest problems literature. Proxsuite supported tested Windows, Mac Unix, Linux. Documentation online ProxSuite documentation release started ProxSuite distributed well-known package managers. Quick install pip install proxsuite approach Linux, Windows Mac Quick install conda install proxsuite conda-forge approach Linux, Windows Mac Quick install brew install proxsuite approach Linux Mac Alternative approaches Installation source presented Compiling program fastest performance, command enable vectorization compiling simple -march=native -DNDEBUG -std=gnu++17 -DPROXSUITE_VECTORIZE examples/first_example_dense.cpp first_example_dense $(pkg-config --cflags proxsuite) ProxSuite CMake ProxSuite CMake, tiny ```cmake cmake_minimum_required(VERSION project(Example CXX) find_package(proxsuite REQUIRED) set(CMAKE_CXX_STANDARD set(CMAKE_CXX_STANDARD work File truncated lines full file"},
{"url": "https://index.ros.org/p/py_trees_js", "package": "py_trees_js", "package_summary": "Javascript library for visualising behaviour trees.", "package_details": "PyTrees [Features] [Preview] [Exmaple Simple Web App] PyQt App] JSON Specification] Libraries visualisation runtime replayed behaviour trees. self-contained javascript library build apps py_trees_js python package pyqt resource py_trees_js.viewer demo pyqtwebengine app py_trees_ros_viewer fully fledged pyqt integration py_trees_js. Features Visualise runtime state behaviour tree Collapsible subtrees Zoom scale contents fit Timeline rewind resume Blackboard key-value storage view Activity log view designed py_trees, libs interfaces) dependent py_trees behaviour tree applications. Preview VSCode DevContainers NVIDIA GPU: Install VSCode Install NVIDIA Container Toolkit Clone launch demo: git clone https://github.com/splintered-reality/py_trees_js code py_trees_js Reopen project devcontainer CTRL-SHIFT-P VSCode's helper dialog) Setup launch poetry install poetry run py-trees-demo-viewer meets requirements, alternative options: Install Poetry PyQt system venv. Clone launch. you\u2019re interested demo viewer, pip install --user py_trees_js launch viewer Create devcontainer desktop-lite feature. works, send Simple Web App Building complete application render behaviour tree stream effort decomposed tasks: Creating web app rendering trees visualising timeline Wrapping web app framework connecting external stream stage purely exercise html, css javascript. depend case qt-js hybrid application exemplified developers, electron application cross-platform mobile deployment cloud based service. section walk build web application libraries. wrapping web app Qt-Js application follow. started, let\u2019s basic html page divs, tree canvas timeline: <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>PyTrees Viewer</title> <style> html height: canvas intended fill screen, cascading heights achieves body margin: overflow:hidden; scrollbars height: canvas intended fill screen, cascading heights achieves </style> </head> <body> <div id=\"canvas\"></div> <div id=\"timeline\"></div> </body> </html> bring javascript libraries. exemplar purposes, assumed libraries html page integration detail depending mode deployment section Note py_trees-<version>.js library dependency, jointjs, turn dependencies bundled libraries js/jointjs folder repository correspond requirements specific version jointjs File truncated lines full file"},
{"url": "https://index.ros.org/p/py_trees_ros_interfaces", "package": "py_trees_ros_interfaces", "package_summary": "Interfaces used by py_trees_ros and py_trees_ros_tutorials.", "package_details": "PyTrees ROS Interfaces ROS interfaces (messages, services, actions) PyTrees ROS interface. Rolling Jazzy Humble Sources ROS Index Packages PyTrees ROS Ecosystem Refer py_trees_ros/README.md information PyTrees packages ROS ecosystem."},
{"url": "https://index.ros.org/p/pybind11_json_vendor", "package": "pybind11_json_vendor", "package_summary": "A vendor package for pybind11_json for Modern C++", "package_details": "vendor package pybind11_json package helps bring pybind11_json library workspace underlay. pybind11_json easily conversion nlohmann::json py::object."},
{"url": "https://index.ros.org/p/qpoases_vendor", "package": "qpoases_vendor", "package_summary": "Wrapper around qpOASES to make it available to the ROS ecosystem.", "package_details": "qpoases_vendor Vendor package qpOASES"},
{"url": "https://index.ros.org/p/rc_common_msgs", "package": "rc_common_msgs", "package_summary": "Common msg and srv definitions used by Roboception's ROS2 packages", "package_details": "rc_common_msgs Common ROS2 message service definitions Roboception. Acknowledgements FTP (Focused Technical Project) received funding European Union\u2019s Horizon research innovation programme project ROSIN grant agreement ROSIN: ROS-Industrial Quality-Assured Robot Software Components: http://rosin-project.eu"},
{"url": "https://index.ros.org/p/rc_genicam_driver", "package": "rc_genicam_driver", "package_summary": "Driver for rc_visard and rc_cube from Roboception GmbH", "package_details": "rc_genicam_driver ROS2 ROS2 driver configure Roboception rc_visard rc_cube receive images. consult manuals details: https://doc.rc-visard.com https://doc.rc-cube.com GenICam GenTL Transport Layer rc_genicam_driver rc_genicam_api interfacing rc_visard rc_cube GenICam/GigE Vision requires transport layer called GenTL producer (shared library suffix .cti). convenience rc_genicam_api producers Baumer common architectures. path producer set GENICAM_GENTL64_PATH environment variable GENICAM_GENTL32_PATH bit systems). set, rc_genicam_driver fall searching Baumer producer rc_genicam_api installed. producer .cti error message [ERROR] transport layers path /opt/ros/melodic/lib/rc_genicam_api case install rc_genicam_api properly set environment variable running export: GENICAM_GENTL64_PATH=/path/to/rc_genicam_api/baumer/Ubuntu-18.04/x86_64 Configuration Read-only parameters Parameters set ROS param server run-time. device: device, Roboception rc_visard sensor rc_cube. serial number, IMPORTANT: preceed colon passing commandline setting rosparam https://github.com/ros/ros_comm/issues/1339). neccessary string launch file. user defined (factory default rc_visard\u2019s model), unique reachable sensors internal generated GenTL producer. MAC address change implementation transport layer. https://github.com/roboception/rc_genicam_api#device-id details. default parameter set works compatible device network. runtime changeable parameters parameters changed runtime. Parameters declared device. happen device firmware offer parameter. ptp_enabled: Enable PTP slave (PrecisionTimeProtocol, IEEE1588) camera_fps: Frames published node. Publishing frames slowed depending setting. Setting higher real framerate specific device effect. camera_exp_auto: parameter removed. camera_exp_control camera_exp_control: Expose control mode \u201cManual\u201d setting exposure time gain camera_exp_value camera_gain_value, \u201cAuto\u201d auto exposure \u201cHDR\u201d high dynamic range mode. Default: Auto. camera_exp_auto_mode Auto-exposure mode \u201cNormal\u201d, \u201cOut1High\u201d \u201cAdaptiveOut1\u201d. Default: Normal. camera_exp_max: Maximum exposure time seconds exp_auto true. camera_exp_auto_average_max: auto exposure set exposure time gain factor average image intensity upper bound. parameter defines upper bound. reached saturation due reflections). camera_exp_auto_average_min: camera_exp_auto_average_max. parameter defines bound. average image intensity reduced reduce avoid saturation due reflections). File truncated lines full file"},
{"url": "https://index.ros.org/p/rc_reason_clients", "package": "rc_reason_clients", "package_summary": "Clients for interfacing with Roboception reason modules on rc_visard and rc_cube.", "package_details": "rc_reason_clients ROS2 package ROS2 client nodes interface Roboception devices rc_visard sensor rc_cube. consult manuals detailed descriptions parameters services: https://doc.rc-visard.com https://doc.rc-cube.com rc_reason client nodes communicate device REST-API functionality ROS2 native automatically provide parameters ROS2 parameters provide ROS2 services Building Create ROS2 workspace, clone repository build colcon build --symlink-install. Running parameters services client names REST-API documentation). Additionally client host parameter set address hostname device rc_cube rc_visard) pipeline parameter defaults run april tag detection client pipeline ros2 run rc_reason_clients rc_april_tag_detect_client --ros-args --param host:=10.0.2.40 --param pipeline:=1 rc_april_tag_detect_client rc_qr_code_detect_client Clients interface TagDetect (AprilTag QRCode detection) running device. TagDetect documentation details. TagDetect parameters clients additional parameters enable publishing detected tags markers. child_frame_id set <tagId>_<instanceId>. publish_tf: Publish detected tags (default: True) publish_markers: Publish detected tags visualization markers (default: True) TagDetect services AprilTag detection: ros2 run rc_reason_clients rc_april_tag_detect_client --ros-args --param host:=10.0.2.40 QRCode detection: ros2 run rc_reason_clients rc_qr_code_detect_client --ros-args --param host:=10.0.2.40 rc_silhouettematch_client Client interface SilhouetteMatch running device. SilhouetteMatch documentation details. SilhouetteMatch parameters client additional parameters enable publishing detected instances base plane marker. child_frame_id set <templateId>_<instanceId>. publish_tf: Publish detected instances (default: True) publish_markers: Publish base plane visualization marker (default: True) SilhouetteMatch Services run client: ros2 run rc_reason_clients rc_silhouettematch_client --ros-args --param host:=10.0.2.40 rc_itempick_client Client interface ItemPick running device. ItemPick documentation details. ItemPick parameters client additional parameters enable publishing detected load carriers grasps markers: publish_tf: Publish detected instances (default: True) publish_markers: Publish detected instances visualization markers (default: True) ItemPick services run client: ros2 run rc_reason_clients rc_itempick_client --ros-args --param host:=10.0.2.40 rc_boxpick_client Client interface BoxPick running device. BoxPick documentation details. BoxPick parameters File truncated lines full file"},
{"url": "https://index.ros.org/p/rc_reason_msgs", "package": "rc_reason_msgs", "package_summary": "Msg and srv definitions for rc_reason_clients", "package_details": "rc_reason_msgs Msg srv definitions rc_reason_clients."},
{"url": "https://index.ros.org/p/rcl", "package": "rcl", "package_summary": "The ROS client library common implementation.\n    This package contains an API which builds on the ROS middleware API and is optionally built upon by the other ROS client libraries.", "package_details": "rcl Library support implementation language specific ROS Client Libraries. Features detail http://docs.ros2.org package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rcl_action", "package": "rcl_action", "package_summary": "Package containing a C-based ROS action implementation", "package_details": "rcl_action rcl_action functionality ROS actions Features detail http://docs.ros2.org information ROS actions, http://design.ros2.org/articles/actions.html Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rcl_lifecycle", "package": "rcl_lifecycle", "package_summary": "Package containing a C-based lifecycle implementation", "package_details": "rcl_lifecycle rcl_lifecycle functionality ROS lifecycle nodes Features detail http://docs.ros2.org information lifecycle nodes, https://design.ros2.org/articles/node_lifecycle.html Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rcl_yaml_param_parser", "package": "rcl_yaml_param_parser", "package_summary": "Parse a YAML parameter file and populate the C data structure.", "package_details": "ROS2 rcl YAML parameter parser Parse YAML parameter file populate data structure. Features detail http://docs.ros2.org data structure params_st node initialization YAML parameter file follow yaml syntax shown NOTE: supports canonical int float types <node_namespace_string>: optional <node1_name>: ros__parameters: <field_name>: <field_value> <parameter_namespace_string>: optional <field1_name>: <field1_value> <field2_name>: <field2_value> <node2_name>: ros__parameters: <field_name>: <field_value> <parameter_namespace_string>: optional <field1_name>: <field1_value> <field2_name>: <field2_value> package depends libyaml. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/action_msgs", "package": "action_msgs", "package_summary": "Messages and service definitions common among all ROS actions.", "package_details": "action_msgs package messages services ROS actions. information actions design article. information ROS interfaces, docs.ros.org. Messages (.msg) GoalInfo: Goal identifier message, goal time stamp. GoalStatus: Describes goal\u2019s current state machine status. GoalStatusArray: array GoalStatus messages. Services (.srv) CancelGoal: Cancel Goals and/or timestamp. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/builtin_interfaces", "package": "builtin_interfaces", "package_summary": "A package containing message and service definitions for types defined in the OMG IDL Platform Specific Model.", "package_details": "builtin_interfaces package message definitions types defined OMG IDL Platform Specific Model. information ROS time, design.ros2.org. information ROS interfaces, docs.ros.org. Messages (.msg) Duration: Describes time duration composed seconds nanoseconds components. Time: Describes point time, composed seconds nanoseconds components. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/composition_interfaces", "package": "composition_interfaces", "package_summary": "A package containing message and service definitions for managing composable nodes in a container process.", "package_details": "composition_interfaces package message service definitions managing composable nodes container process. Generally services ROS roslaunch system. information ROS interfaces, docs.ros.org. Services (.srv) ListNodes: Retrieve list running composable nodes, including names ids. LoadNodes: Load composable node. UnloadNode: Unload node Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/lifecycle_msgs", "package": "lifecycle_msgs", "package_summary": "A package containing some lifecycle related message and service definitions.", "package_details": "lifecycle_msgs package message service definitions managing lifecycle nodes. messages services form standardized interface transitioning managed nodes state-machine. information life cycle nodes design.ros2.org. information ROS interfaces, docs.ros.org. Messages (.msg) State: lifecycle node\u2019s state-machine state. Transition: state transition specific label. TransitionDescription: description transition state-machine state TransitionEvent: timestamped state transition. Services (.srv) ChangeState: Request node change states specific transition. GetAvailableStates: Request array states node transition GetAvailableTransitions: Request array lifecycle state transitions node. GetState: Request current lifecycle state node. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rcl_interfaces", "package": "rcl_interfaces", "package_summary": "The ROS client library common interfaces.\n    This package contains the messages and services which ROS client libraries will use under the hood to\n    communicate higher level concepts such as parameters.", "package_details": "rcl_interfaces package messages services ROS client libraries hood communicate higher level concepts parameters. information ROS interfaces, docs.ros.org Parameter Groups Parameters contained groups. default group behaves filepath, nest sub-groups groups. information parameters, design.ros2.org Standard topics parameters ROS API node node\u2019s namespace. Topics: parameter_events: ParameterEvent topic subscribe parameter updates occurring node, including addition removal atomic change published separately. parameter_event_descriptors: ParameterEventDescriptors topic subscribe parameter updates occurring node, including addition removal atomic change published separately. large parameter values expected slow system. Services: get_parameters: GetParameters service parameters set node. has_parameters: HasParameters Query node specific parameters set. list_parameters: ListParameters List parameters node matching filters. set_parameters: SetParameters Set parameters node. Messages (.msg) FloatingPointRange: Represents bounds step floating point typed parameter IntegerRange: Represents bounds step integer typed parameter IntraProcessMessage: Demonstration message passing pointer shared memory. ListParameterResult: returned result ListParameters service Log: message communicating log messages levels Parameter: message setting parameter values ParameterDescriptor: informational message parameters values ParameterEvent: information setting, changing removing parameter events ParameterEventDescriptors: Message describing parameter updates occurring node, including addition removal ParameterType: Enum definitions denoting parameter value\u2019s type ParameterValue: type parameter SetParameterResult: Result message indicating set parameters event succeeded Services (.srv) DescribeParameters: Request list descriptions list parameters. GetParameters: values specific list parameters GetParameterTypes: enum type list parameters ListParameters: list parameters list prefixes SetParameters: Add change list parameters individually SetParametersAtomically: Add change parameters list Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rosgraph_msgs", "package": "rosgraph_msgs", "package_summary": "Messages relating to the ROS Computation Graph.\n    These are generally considered to be low-level messages that end users do not interact with.", "package_details": "rosgraph_msgs package message definitions relating ROS Computation Graph. generally considered low-level messages users interact information ROS clock, design.ros2.org. information ROS interfaces, docs.ros.org. Messages (.msg) Clock: Communicates current ROS time. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/statistics_msgs", "package": "statistics_msgs", "package_summary": "Message definitions for reporting statistics for topics and system resources.", "package_details": "metrics_statistics_msgs Package ROS message definitions reporting statistics topics system resources. Messages defined package StatisticDataType message represent types statistics reported. defines data types represent individual metric data points. average minimum maximum stddev sample_count StatisticDataPoint message represents single statistic includes: data_type: Type metric data point, defined StatisticDataType. data: metric data point. MetricsMessage message represents statistic data measured source time window. includes: measurement_source_name: Source measurement statistic originates. metrics_source: metric. unit: Unit representing metric. window_start: Start time metric measurement window. window_stop: time metric measurement window. statistics: list StatisticDataPoint representing values collected metrics. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rcl_logging_spdlog", "package": "rcl_logging_spdlog", "package_summary": "Implementation of rcl_logging API for an spdlog backend.", "package_details": "rcl_logging_spdlog Package supporting implementation logging functionality spdlog. rcl_logging_spdlog logging interface implementation initialize log message set logger level shutdown internal abstractions utilities: Macros controlling symbol visibility library rcl_logging_spdlog/visibility_control.h Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rclc", "package": "rclc", "package_summary": "The ROS client library in C.", "package_details": "rclc package Table contents Introduction Analysis rclcpp standard Executor Architecture Scheduling Semantics Analysis processing patterns Sense-plan-act pipeline robotics Synchronization multiple rates High-priority processing path Real-time embedded applications rclc Executor Features Trigger condition Sequential execution LET-Semantics Multi-threading scheduling configuration Executor API Configuration phase Running phase Examples Sense-plan-act pipeline robotics Synchronization multiple rates High-priority processing path Real-time embedded applications ROS Executor Workshop Reference System Future work Download Callback-group-level Executor API Test Bench Related Work Fawkes Framework References Introduction Predictable execution real-time constraints crucial requirement robotic applications. service-based paradigm ROS fast integration functionalities, provide sufficient control execution management. mechanisms enforce execution order callbacks node. execution order multiple nodes essential control applications mobile robotics. Cause-effect-chains comprising sensor acquisition, evaluation data actuation control mapped ROS nodes executed order, explicit mechanisms enforce data recordings collected field tests ROS-bags re-played, results surprisingly due non-determinism process scheduling. Manually setting execution order subscriptions publishing topics defining use-case specific priorities Linux processes approach error-prone, difficult extend requires in-depth knowledge deployed ROS packages system. goal Executor micro-ROS support roboticists practical easy-to-use real-time mechanisms provide solutions Deterministic execution Real-time guarantees Integration real-time real-time functionalities platform Specific support RTOS microcontrollers ROS network thread responsible receiving messages putting FIFO queue roscpp). callbacks called FIFO manner, execution management. introduction DDS (data distribution service) ROS messages buffered DDS. ROS Executor concept introduced support execution management. rcl-layer, wait-set configured handles received step, handles DDS-queue. handle generic term defined rcl-layer timers, subscriptions, services, clients guard conditions. standard implementation ROS Executor API (rclcpp) unusual features, precedence timers DDS handles, non-preemptive round-robin scheduling non-timer handles input data handle multiple features consequence, situations standard rclcpp Executor deterministic guaranteeing real-time requirements hard looked ROS Executor implementation Python Frontend (rclpy) micro-controllers platform, typically appliations run. goals Real-Time Executor limitations ROS standard rclcpp Executor, challenges develop adequate well-defined scheduling mechanisms ROS framework real-time operating system (RTOS) define easy-to-use interface ROS developers model requirements latencies, determinism subsystems) mapping ROS framework operating system schedulers (semi-automated optimized mapping desired generic, well-understood framework mechanisms) approach provide real-time-capable Executor rcl+rclc layer section Introduction Client Library.) programming language step, propose rclc Executor rcl-layer programming language features support real-time deterministic execution: supports user-defined static sequential execution, conditional execution semantics, multi-threaded execution scheduling configuration, logical execution semantics Sequential execution refers runtime behavior, callbacks executed pre-defined order independent arrival time messages. Conditional execution trigger condition enables typical processing patterns robotics analyzed detail section Analysis processing patterns. Configuration scheduling parameters multi-threaded application accomplishes prioritized execution. logical execution time concept data synchronization fixed periodic task scheduling embedded applications. advanced execution management mechanisms micro-ROS, contributed improving extending Executor concept rclcpp standard ROS callback group-level Executor. Executor refinement ROS Executor API allowing prioritize group callbacks ROS default Executor current Galactic release. Analysis rclcpp standard Executor ROS bundle multiple nodes operating system process. coordinate execution callbacks nodes process, Executor concept introduced rclcpp rclpy). ROS design defines Executor (instance rclcpp::executor::Executor) process, typically created custom main function launch system. Executor coordinates execution callbacks issued nodes checking work (timers, services, messages, subscriptions, DDS queue dispatching threads, implemented SingleThreadedExecutor MultiThreadedExecutor, dispatching mechanism resembles ROS spin thread behavior: Executor wait sets, notifies pending callback DDS queue. multiple pending callbacks, ROS Executor executes order registered Executor. Architecture diagram depicts relevant classes standard ROS Executor implementation: Note Executor instance maintains weak pointers NodeBaseInterfaces nodes nodes destroyed safely, notifying Executor. Executor maintain explicit callback queue, relies queue mechanism underlying DDS implementation illustrated sequence diagram: Executor concept, provide means prioritization categorization incoming callback calls. leverage real-time characteristics underlying operating-system scheduler finer control order executions. implication behavior time-critical callbacks suffer deadline misses degraded performance serviced non-critical callbacks. Additionally, due FIFO mechanism, difficult determine usable bounds worst-case latency callback execution incur. Scheduling Semantics File truncated lines full file"},
{"url": "https://index.ros.org/p/rclc_examples", "package": "rclc_examples", "package_summary": "Example of using rclc_executor", "package_details": "General information repository, including legal information, build instructions issues/limitations, README.md repository root. rclc_examples package rclc_examples package examples RCLC-Exector convenience functions creating RCL objects subscriptions timers. Table contents Minimal publisher-subscriber Minimal publisher-subscriber RCL-API RCLC-Executor trigger function Service client node Action server client Lifecycle node Parameter server Subscription callback class method Subscription context Real-time concurrency slow timer long subscription Minimal publisher-subscriber example_executor.c demonstrates basic features rclc package rclc-Executor setup publisher subscriber. convenience functions configure rcl objects, subscriptions, timers, saves case lines code compared application direct rcl-API, setup Minimal publisher-subscriber RCL-API. Step Setup ROS Workspace Open terminal ROS workspace. Assuming ROS installation resides /opt/ros/ROSDISTRO, setup ROS2 environment source /opt/ros/ROSDISTRO/setup.bash Step Build package Download build rclc repository workspace ros2_ws). source workspace: ~/ros2_ws/$ colcon build --packages-up-to rclc_examples ~/ros2_ws/$ source ./install/local_setup.bash Step Run executor demo. binary example_executor. ~/ros2_ws/$ ros2 run rclc_examples example_executor output: Created timer timeout Created subscriber topic_0: Debug: number DDS handles: Published message World! Callback: heard: World! Published message World! Callback: heard: World! Published message World! Callback: heard: World! Published message World! Callback: heard: World! Published message World! Callback: heard: World! Minimal publisher-subscriber RCL-API Step Setup ROS Workspace Open terminal ROS workspace. Assuming ROS installation resides /opt/ros/ROSDISTRO, setup ROS2 environment source /opt/ros/ROSDISTRO/setup.bash Step Build package Download rclc repository workspace ros2_ws). source workspace: ~/ros2_ws/$ colcon build --packages-up-to rclc_examples ~/ros2_ws/$ source ./install/local_setup.bash build packages: rcl_yaml_param_parser rcl rclc rclc_examples Step Run executor. binary example_executor_only_rcl. ~/ros2_ws/$ ros2 run rclc_examples example_executor_only_rcl publisher publishes message World!in topic_0 rate subscriber prints callback Callback: heard: World!. output: Created timer timeout Created subscriber topic_0: Debug: number DDS handles: Published message World! File truncated lines full file"},
{"url": "https://index.ros.org/p/rclc_lifecycle", "package": "rclc_lifecycle", "package_summary": "rclc lifecycle convenience methods.", "package_details": "rclc_lifecycle package Overview rclc_lifecycle package ROS package convenience functions bundle ROS Client Library (RCL) node ROS Node Lifecycle state machine programming language, similar rclcpp Lifecycle Node quality declaration QUALITY_DECLARATION.md. API API RCLC Lifecycle Node divided phases: Initialization, Running Clean-Up. Initialization Creation lifecycle node bundle rcl node rcl Node Lifecycle state machine: #include \"rclc_lifecycle/rclc_lifecycle.h\" rcl_allocator_t allocator rcl_get_default_allocator(); rclc_support_t support; rcl_ret_t create rcl node rclc_support_init(&support, argc, argv, &allocator); rcl_node_t my_node; rclc_node_init_default(&my_node, \"lifecycle_node\", \"rclc\", &support); rcl state machine rcl_lifecycle_state_machine_t state_machine_ rcl_lifecycle_get_zero_initialized_state_machine(); create lifecycle node rclc_lifecycle_node_t lifecycle_node; rcl_ret_t rclc_make_node_a_lifecycle_node( &lifecycle_node, &my_node, &state_machine_, &allocator); Register lifecycle services optionally create callbacks state Executor needsto equipped handle node service: Executor rclc_executor_t executor rclc_executor_get_zero_initialized_executor(); rclc_executor_init( &executor, &support.context, node lifecycle service &allocator)); Register lifecycle services rclc_lifecycle_add_get_state_service(&lifecycle_node, &executor); rclc_lifecycle_add_get_available_states_service(&lifecycle_node, &executor); rclc_lifecycle_add_change_state_service(&lifecycle_node, &executor); Register lifecycle service callbacks rclc_lifecycle_register_on_configure(&lifecycle_node, &my_on_configure); rclc_lifecycle_register_on_activate(&lifecycle_node, &my_on_activate); Cleaning clean rcl_lifecycle_node_fini(&lifecycle_node, &allocator); RCLC Lifecycle Node file lifecycle_node.c rclc_examples package. Limitations Lifecycle services called ros2 lifecycle CLI, ros2 lifecycle set /node configure. ros2 service CLI, ros2 service call /node/change_state lifecycle_msgs/ChangeState \"{transition: label: configure}}\"."},
{"url": "https://index.ros.org/p/rclc_parameter", "package": "rclc_parameter", "package_summary": "Parameter server implementation for micro-ROS nodes", "package_details": "rclc parameter package ROS parameters user create variables node manipulate/read ROS commands. information ROS parameters package rclc API parameter server instances full ROS parameter client compatibility. parameter client implemented rclc Ready code examples related tutorial rclc/rclc_examples/src/example_parameter_server.c. Table contents Initialization Memory requirements Callback Add parameter Delete parameter Parameter description Cleaning Initialization Default initialization: Parameter server object rclc_parameter_server_t param_server; Initialize parameter server default configuration rcl_ret_t rclc_parameter_server_init_default(&param_server, &node); (RCL_RET_OK Handle error return Custom options: options configured: notify_changed_over_dds: Publish parameter events ROS nodes max_params: Maximum number parameters allowed rclc_parameter_server_t object. allow_undeclared_parameters: creation parameters external parameter clients. parameter created set operation requested non-existing parameter. low_mem_mode: Reduces memory parameter server, functionality constrains applied. Parameter server object rclc_parameter_server_t param_server; Initialize parameter server options const rclc_parameter_options_t options .notify_changed_over_dds true, .max_params .allow_undeclared_parameters true, .low_mem_mode false; Initialize parameter server configured options rcl_ret_t rclc_parameter_server_init_with_option(&param_server, &node, &options); (RCL_RET_OK Handle error return memory mode: mode ports parameter functionality memory constrained devices. constrains applied: Request size limited parameter Set, types Describe services. List parameter request prefixes enabled depth. Parameter description strings allowed, rclc_add_parameter_description disabled. Memory benchmark results STM32F4 parameters RCLC_PARAMETER_MAX_STRING_LENGTH notify_changed_over_dds true: Full mode: memory mode: Memory requirements parameter server services optional publisher. account rmw-microxrcedds package memory configuration: colcon.meta memory requirements parameter server \"names\": \"rmw_microxrcedds\": \"cmake-args\": \"-DRMW_UXRCE_MAX_NODES=1\", \"-DRMW_UXRCE_MAX_PUBLISHERS=1\", \"-DRMW_UXRCE_MAX_SUBSCRIPTIONS=0\", \"-DRMW_UXRCE_MAX_SERVICES=5\", \"-DRMW_UXRCE_MAX_CLIENTS=0\" runtime, variable RCLC_EXECUTOR_PARAMETER_SERVER_HANDLES defines number handles required parameter server rclc Executor: Executor init minimum RCLC executor handles required rclc_executor_t executor rclc_executor_get_zero_initialized_executor(); rclc_executor_init( &executor, &support.context, RCLC_EXECUTOR_PARAMETER_SERVER_HANDLES, &allocator); File truncated lines full file"},
{"url": "https://index.ros.org/p/rclcpp", "package": "rclcpp", "package_summary": "The ROS client library in C++.", "package_details": "rclcpp ROS client library Visit rclcpp API documentation complete list main components features. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rclcpp_action", "package": "rclcpp_action", "package_summary": "Adds action APIs for C++.", "package_details": "rclcpp_action Adds action APIs Visit rclcpp_action API documentation complete list main components features. information Actions ROS design document. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rclcpp_components", "package": "rclcpp_components", "package_summary": "Package containing tools for dynamically loadable components", "package_details": "rclcpp_components Package tools dynamically loadable components. Visit rclcpp_components API documentation complete list main components features. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rclcpp_lifecycle", "package": "rclcpp_lifecycle", "package_summary": "Package containing a prototype for lifecycle implementation", "package_details": "rclcpp_lifecycle Package prototype lifecycle implementation. Visit rclcpp_lifecycle API documentation complete list main components features. information LifeCycle ROS design document. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rcpputils", "package": "rcpputils", "package_summary": "Package containing utility code for C++.", "package_details": "rcpputils: ROS Utilities rcpputils API consisting macros, functions, data structures intended ROS codebase Quality Declaration package claims Quality Level category, Quality Declaration details. API package Assertion functions Clang thread safety annotation macros Library discovery String helpers File system helpers Type traits helpers Class dynamically loads, unloads symbols shared libraries run-time. Features detail docs/FEATURES.md"},
{"url": "https://index.ros.org/p/rcutils", "package": "rcutils", "package_summary": "Package containing various utility types and functions for C", "package_details": "rcutils: ROS Utilities data structures rcutils API consisting macros, functions, data structures ROS code base. Quality Declaration package claims Quality Level category, Quality Declaration details. API API combination parts: Allocator concept, inject allocating deallocating methods function type. rcutils_allocator_t rcutils/allocator.h Command line interface utilities: rcutils/cmdline_parser.h Utilities setting error states (error message, file, line number) strerror errno: rcutils/error_handling.h basic filesystem utilities checking path existence, cwd, rcutils/filesystem.h string find method: rcutils_find() rcutils_find_last() rcutils/find.h convenient string formatting function, takes custom allocator: rcutils_format_string() rcutils/format_string.h Functions interfacing process environment variables: rcutils_get_env() rcutils_get_home_dir() rcutils_set_env() rcutils/env.h rcutils/get_env.h Extensible logging macros: examples exhaustive): RCUTILS_LOG_DEBUG() RCUTILS_LOG_INFO_NAMED() RCUTILS_LOG_WARN_ONCE() RCUTILS_LOG_ERROR_SKIPFIRST_NAMED() rcutils/logging_macros.h rcutils/logging.h basic utilities load, unload symbols shared libraries run-time. rcutils/shared_library.h string replacement function takes allocator, based http://creativeandcritical.net/str-replace-c: rcutils_repl_str() rcutils/repl_str.h String splitting functions custom allocator: rcutils_split() rcutils_split_last() rcutils/split.h version strdup takes allocator: rcutils_strdup() rcutils/strdup.h Portable implementations system time\u201d steady time\u201d: rcutils_system_time_now() rcutils_steady_time_now() rcutils_raw_steady_time_now() rcutils/time.h data structures: \u201cstring array\u201d data structure (analogous std::vector<std::string>): rcutils_string_array_t rcutils/types/string_array.h \u201cstring-string map\u201d data structure (analogous std::map<std::string, std::string>) rcutils_string_map_t rcutils/types/string_map.h Macros controlling symbol visibility linkage library: rcutils/visibility_control.h"},
{"url": "https://index.ros.org/p/rttest", "package": "rttest", "package_summary": "Instrumentation library for real-time performance testing", "package_details": "rttest rttest minimal tool instrumenting running tests synchronous real-time systems. utilities measuring plotting jitter, latency, missed deadlines. library macros instrumenting code. designed real-time Linux-based systems mind, Preempt kernel. Build instructions Build source: mkdir build build cmake sudo install Alternatively local install: cmake -DCMAKE_INSTALL_PREFIX=<build folder> install Build run examples mkdir build build cmake (-DCMAKE_INSTALL_PREFIX=<build folder>) ./example_loop Command line arguments Passing argc argv instrumented main function rttest_read_args enable command line arguments instrumented function. update period. Default units microseconds. suffix seconds, milliseconds, microseconds, nanoseconds. Default update period Set maximum stack prefault size static stack prefaulting. bytes, kilobytes, megabytes, gigabytes caution). Default stack size Set maximum heap prefault size dynamic memory prefaulting. bytes, kilobytes, megabytes, gigabytes caution). Default heap size iterations run real-time loop. iteration equal rttest run interrupted Ctrl-C. running rttest save data buffer writing results file work. Default Set thread priority threads launched test program. Individual thread priority set rttest_set_sched_priority command. file writing collected data. Plot data file rttest_plot.py script scripts."},
{"url": "https://index.ros.org/p/rig_reconfigure", "package": "rig_reconfigure", "package_summary": "Standalone GUI tool for editing node parameters at runtime.", "package_details": "rig-reconfigure Attempt RQT-reconfigure alternative based Dear ImGui. ocornut developing imgui, project development autonomous racing car struggled friends dynamic reconfigure plugin RQT. main features missing ability group parameters prefix. Apparently, request feature opened official rqt-reconfigure repository open. considered implementing required features RQT environment, due lack experience Qt-GUIs switched focus standalone application (hoping easier). features find RQT environment. moment satisfied standalone application won\u2019t push direction. Features: selection single node use-case selecting multiple nodes lead confusion) parameters grouped based prefix (separation parameter tree filtered editor launched ros2 run rig_reconfigure rig_reconfigure. TODO List features implemented nice PRs feedback success modifying parameters (intended: parameters, spinners checkmarks) support array parameters support one-sided bounds parameter description Issues CPU usage high non-hardware-accelerated OpenGL implementation, case VNC connections vsync glfw doesn\u2019t work VNC sessions (leading higher CPU usage), enable manual frame rate limiting reduce Usage"},
{"url": "https://index.ros.org/p/rmf_battery", "package": "rmf_battery", "package_summary": "Package for modelling battery life of robots", "package_details": "rmf_battery rmf_battery package modelling robot battery life. Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_building_map_msgs", "package": "rmf_building_map_msgs", "package_summary": "Messages used to send building maps", "package_details": "rmf_building_map_msgs rmf_building_map_msgs message service types communicating building infrastructure. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_demos", "package": "rmf_demos", "package_summary": "Common launch files for RMF demos", "package_details": "rmf_demos package common launch files shell scripts demonstrating build start systems RMF. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_demos_fleet_adapter", "package": "rmf_demos_fleet_adapter", "package_summary": "Fleet adapters for interfacing with RMF Demos robots with a fleet manager via REST API", "package_details": "rmf_demos_fleet_adapter implementation python based fleet adapter template selected RMF demo worlds: Hotel, Office, Airport Terminal Clinic. fleet adapter integration relies fleet manager fleet adapter: fleet manager comprises specific endpoints relay commands fleet\u2019s robots. communicates robots internal ROS messages, interfacing adapter API chosen user. demo fleet adapter implementation, REST API FastAPI framework. fleet adapter receives commands RMF interfaces fleet manager receive robot state information, send task navigation commands robots Started required dependencies installed: pip3 install fastapi uvicorn **Ensure libs version 'fastapi>=0.79.0', 'uvicorn>=0.18.2'. interact endpoints FastAPI\u2019s automatic documentation. launch demo world, visit base URL /docs appended note port number demo fleet rmf_demos/rmf_demos/config/. Launch Office world: source ~/rmf_ws/install/setup.bash ros2 launch rmf_demos_gz_classic office.launch.xml visit http://127.0.0.1:22011/docs browser interact endpoints. Request/Response Schemas Depending endpoint, content vary items removed), general structure Request Body \"map_name\": \"string\", \"task\": \"string\", \"destination\": \"data\": \"speed_limit\": Response Body \"data\": \"success\": true, \"msg\": API Endpoints Note: base URL section port number dedicated tinyRobot fleet. port number varies fleets. Robot Status status endpoint fleet adapter access robot state information current position battery level. endpoint require Request Body. ways request fleet robot status: status robots fleet Request URL: http://127.0.0.1:22011/open-rmf/rmf_demos_fm/status/ Response Body: \"data\": \"all_robots\": \"robot_name\": \"tinyRobot1\", \"map_name\": \"position\": \"yaw\": \"battery\": \"last_completed_request\": \"destination_arrival\": \"cmd_id\": \"duration\": \"robot_name\": \"tinyRobot2\", \"map_name\": \"position\": \"yaw\": \"battery\": \"last_completed_request\": \"destination_arrival\": null, \"replan\": true \"success\": true, \"msg\": status robot fleet File truncated lines full file"},
{"url": "https://index.ros.org/p/rmf_demos_gz", "package": "rmf_demos_gz", "package_summary": "Launch files for RMF demos using the Gazebo simulator", "package_details": "rmf_demos_gz package top level launch files Gazebo simulator demonstrating build start systems RMF. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_demos_maps", "package": "rmf_demos_maps", "package_summary": "A package containing demo maps for rmf", "package_details": "rmf_demo_maps package maps RMF demos. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_demos_tasks", "package": "rmf_demos_tasks", "package_summary": "A package containing scripts for demos", "package_details": "rmf_demo_tasks package scripts RMF demos demonstrate tasks requested robot. Flexible Tasks task system users construct submit tasks flexible manner, multiple stops loop robot cleaning task. package helpful scripts demonstrate compose tasks: dispatch_patrol task users dispatch robot perform patrol task. top start finish waypoints, provide fleet robot Office world, dispatch task specific robot. ros2 run rmf_demos_tasks dispatch_patrol tinyRobot tinyRobot1 lounge --use_sim_time multiple places robot travel ros2 run rmf_demos_tasks dispatch_patrol supplies pantry coe --use_sim_time dispatch_clean script submits cleaning task. flag takes desired cleaning zone argument. choose robot perform cleaning task providing fleet robot Hotel world: ros2 run rmf_demos_tasks dispatch_clean clean_lobby cleanerBotA cleanerBotA_1 --use_sim_time dispatch_action script demonstrates compose task PerformAction teleop feature. robot starting point execute action, action. Office world. shows action \u201cteleop\u201d. ros2 run rmf_demos_tasks dispatch_action tinyRobot tinyRobot1 teleop coe --use_sim_time completing teleop action, publish message return control RMF: ros2 topic pub /action_execution_notice rmf_fleet_msgs/msg/ModeRequest '{fleet_name: tinyRobot, robot_name: tinyRobot1, mode: {mode: script takes series starting points arguments commands robot perform action points. Office world. Run total \u201cteleop\u201d actions coe, supplies pantry waypoints: ros2 run rmf_demos_tasks dispatch_action teleop coe supplies pantry --use_sim_time robot move places RMF relinquish control. Similar dispatch_action earlier, perform desired action teleop_robot script) action publishing ModeRequest /action_execution_notice. robot move point perform action. dispatch_delivery script users perform deliveries pickup drop-off locations. takes information pickup dropoff activities order submit activity, provide place, handler, payload SKU quantity separated comma. Office world: ros2 run rmf_demos_tasks dispatch_delivery pantry pantry coke_dispenser coke_dispenser_2 hardware_2 coe coke_ingestor coke_ingestor_2 coke,1 coke,1 coke,1 coke,1 --use_sim_time cancel_task Cancel task task Run dispatch patrol task newly launched office_world. ros2 run rmf_demos_tasks dispatch_patrol coe lounge --use_sim_time cancel submitted task ros2 run rmf_demos_tasks cancel_task patrol.dispatch-0 cancel_robot_task Cancel task executed specific robot Run dispatch patrol task newly launched office_world. ros2 run rmf_demos_tasks dispatch_go_to_place pantry tinyRobot tinyRobot2 --use_sim_time cancel submitted task ros2 run rmf_demos_tasks cancel_robot_task tinyRobot tinyRobot2 Additional Scripts office_teleop_robot script demonstrates capability teleop perform action task. Imagine robot executes teleop action, user move robot simulate behaviour, show scenario office world. File truncated lines full file"},
{"url": "https://index.ros.org/p/rmf_charger_msgs", "package": "rmf_charger_msgs", "package_summary": "This package contains messages regarding charging and discharging", "package_details": "rmf_charger_msgs rmf_charger_msgs message types interacting chargers. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_dispenser_msgs", "package": "rmf_dispenser_msgs", "package_summary": "A package containing messages used to interface to dispenser workcells", "package_details": "rmf_dispenser_msgs rmf_dispenser_msgs message types interacting dispensers. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_door_msgs", "package": "rmf_door_msgs", "package_summary": "Messages used to interface to doors", "package_details": "rmf_door_msgs rmf_door_msgs message types interacting doors. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_fleet_msgs", "package": "rmf_fleet_msgs", "package_summary": "A package containing messages used to interface to fleet managers", "package_details": "rmf_fleet_msgs rmf_fleet_msgs message types interacting robot fleet adapters. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_ingestor_msgs", "package": "rmf_ingestor_msgs", "package_summary": "A package containing messages used to interface to ingestor workcells", "package_details": "rmf_ingestor_msgs rmf_ingestor_msgs message types interacting ingestors. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_lift_msgs", "package": "rmf_lift_msgs", "package_summary": "Messages used to interface to lifts.", "package_details": "rmf_lift_msgs rmf_lift_msgs message types interacting lifts. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_scheduler_msgs", "package": "rmf_scheduler_msgs", "package_summary": "Messages used by rmf_scheduler_msgs", "package_details": "rmf_scheduler_msgs rmf_scheduler_msgs message types scheduling RMF events. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_task_msgs", "package": "rmf_task_msgs", "package_summary": "A package containing messages used to specify tasks", "package_details": "rmf_task_msgs rmf_task_msgs message types communicating task information. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_traffic_msgs", "package": "rmf_traffic_msgs", "package_summary": "A package containing messages used by the RMF traffic management system.", "package_details": "rmf_traffic_msgs rmf_traffic_msgs message types managing communicating traffic plans. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_workcell_msgs", "package": "rmf_workcell_msgs", "package_summary": "A package containing messages used by all workcells generically to interfact with rmf_core", "package_details": "rmf_workcell_msgs rmf_workcell_msgs message types interacting workcells. information ROS interfaces, index.ros2.org Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_fleet_adapter", "package": "rmf_fleet_adapter", "package_summary": "Fleet Adapter package for RMF fleets.", "package_details": "rmf_fleet_adapter package package fleet adapter nodes levels control. specific messages rmf_fleet_msgs, communicates proprietary fleet drivers managers ROS Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_fleet_adapter_python", "package": "rmf_fleet_adapter_python", "package_summary": "Python bindings for the rmf_fleet_adapter", "package_details": "rmf_fleet_adapter_python Python bindings rmf_fleet_adapter Introduction rmf_fleet_adapter package defines classes interact rmf_core. Specifically Adapter MockAdapter class. package bindings dependencies. main difference rmf_fleet_adapter rmf_mock_adapter fact rmf_fleet_adapter objects interact ROS2 graph. MockAdapter Adapter difference MockAdapter instantiated issues, Adapter block wait scheduler node rmf_core presence Installation Place pybind_ament rmf_fleet_adapter_python packages ROS2 workspace, run colcon build normal. Running Examples Integration test script rmf loop delivery task: ros2 run rmf_fleet_adapter_python test_adapter.py probe effects ROS2 graph subscribing topics ros2 topic echo <TOPIC_NAME>: `/dispenser_requests`, `/dispenser_results`, `ingestor_requests`, `ingestor_results`, `/task_summaries` Traffic Light showcase \u201ctraffic light\u201d robots RMF. Terminal ros2 run rmf_fleet_adapter_python schedule_blockade_nodes Terminal ros2 run rmf_fleet_adapter_python traffic_light details, read README. Notes api bindings experimental. caution. Current docs gen rolling release RMF bindings, tests, examples Bindings Ensure built package sourced environment. simple importing module Python bindings! import rmf_adapter adpt check bindings print(dir(adpt)) Description Fleet adapters interactions rmf_core robot fleets. High level pathing task assignments issued robots rmf_core, fleet adapter assignments handle implementation specific manner direct individual robots execute actions monitoring updating rmf_core high-level states rmf_core robot update handles. information helpful docs rmf_core Usage bound APIs identical rmf_core written documentation packages, Python usage examples scripts tests insufficient, relevant implementations resort. Alternatively, explore interfaces list members methods dir(adpt.<WHATEVER_CLASS_YOU_WANT_TO_INSPECT>) function signatures help(adpt.<WHATEVER_CLASS_YOU_WANT_TO_INSPECT>) Binding Details package Python bindings code rmf_core packages. implemented Pybind11. note result inspect source, Python implementations bound code, advisable rmf_fleet_adapter package, code.. Additionally, objects instantiated (generally) references called bound methods Python side. bindings override virtual methods called side Python code write Python scripts! Features functionalities bound implement fleet adapters communicate rest rmf_core systems ROS2 graph. Allowing Adapter/MockAdapter: Communicate rmf_core adding fleets requesting deliveries RobotCommandHandle: custom robot command handles commands rmf_core packages implement execute robot behaviors: Docking File truncated lines full file"},
{"url": "https://index.ros.org/p/rmf_task_ros2", "package": "rmf_task_ros2", "package_summary": "A package managing the dispatching of tasks in RMF system.", "package_details": "rmf_task_ros2 package package interfaces rmf_task ROS interfaces. Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_traffic_ros2", "package": "rmf_traffic_ros2", "package_summary": "A package containing messages used by the RMF traffic management system.", "package_details": "rmf_traffic_ros2 package package interfaces rmf_traffic ROS interfaces. Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_websocket", "package": "rmf_websocket", "package_summary": "A package managing the websocket api endpoints in RMF system.", "package_details": "rmf_websocket package package websocker wrapper client library interact websocket server. Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_building_sim_common", "package": "rmf_building_sim_common", "package_summary": "Common utility functions for Gazebo-classic and Gazebo building plugins", "package_details": "rmf_building_sim_common package common library Ignition Gazebo simulator plugins simulated building infrastructure. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_building_sim_gz_classic_plugins", "package": "rmf_building_sim_gz_classic_plugins", "package_summary": "Gazebo plugins so that buildings generated by rmf_building_map_tools can\n    talk to the ROS 2-based systems in the rmf_traffic_ros2 package.", "package_details": "rmf_building_sim_gz_classic_plugins package Gazebo-classic simulator plugins allowing simulated building infrastructure communicate ROS system. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_building_sim_gz_plugins", "package": "rmf_building_sim_gz_plugins", "package_summary": "Gazebo plugins for building infrastructure simulation", "package_details": "rmf_building_sim_gz_plugins package Gazebo plugins allowing simulated building infrastructure communicate ROS system. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_robot_sim_common", "package": "rmf_robot_sim_common", "package_summary": "Common utility functions for Gazebo-classic and Gazebo RMF plugins", "package_details": "rmf_robot_sim_common\\ package common library Ignition Gazebo simulator plugins robots RMF demos. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_robot_sim_gz_classic_plugins", "package": "rmf_robot_sim_gz_classic_plugins", "package_summary": "ROS 2 Gazebo-classic plugins for TeleportIngestors, TeleportDispensers and Readonly Objects", "package_details": "rmf_robot_sim_gz_classic_plugins package Gazebo-classic simulator plugins robots RMF demos. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_robot_sim_gz_plugins", "package": "rmf_robot_sim_gz_plugins", "package_summary": "ROS 2 Gazebo plugins for TeleportIngestors and TeleportDispensers", "package_details": "rmf_robot_sim_gz__plugins package Gazebo simulator plugins robots RMF demos. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_task", "package": "rmf_task", "package_summary": "Package for managing tasks in the Robotics Middleware Framework", "package_details": "rmf_task package package functionality managing tasks RMF. Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_task_sequence", "package": "rmf_task_sequence", "package_summary": "Implementation of phase-sequence tasks for the Robotics Middleware Framework", "package_details": "rmf_task package packages implementation phase-sequence tasks Robotics Middleware Framework Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_traffic", "package": "rmf_traffic", "package_summary": "Package for managing traffic in the Robotics Middleware Framework", "package_details": "rmf_traffic package package functionality managing traffic RMF. Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_building_map_tools", "package": "rmf_building_map_tools", "package_summary": "RMF Building map tools", "package_details": "building_map_tools package package tools manipulating format-converting building maps. Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_traffic_editor", "package": "rmf_traffic_editor", "package_summary": "traffic editor", "package_details": "Traffic Editor graphical editor robot traffic flows. intent easy annotate building floorplans desired robot traffic lanes generate simulation models test evaluate traffic schemes. Quality Declaration package claims Quality Level category. Quality Declaration details. System Requirements program developed tested Ubuntu LTS, yaml-cpp. Compiling Instructions Traffic Editor structured Colcon package. installing ROS Eloquent, command sequence create colcon workspace ~/colcon_workspace build traffic-editor sudo apt update sudo apt install libyaml-cpp-dev qt5-default libopencv-dev libopencv-videoio-dev mkdir ~/colcon_workspace/src ~/colcon_workspace/src git clone https://github.com/open-rmf/rmf_traffic_editor ~/colcon_workspace source /opt/ros/eloquent/setup.bash colcon build --packages-select rmf_traffic_editor companion traffic_editor_assets package nifty bunch assets rmf_traffic_editor. included checkout. able run traffic-editor sourcing install space workspace, \u201cclean\u201d terminal: source ~/colcon_workspace/install/setup.bash traffic-editor Quick Start time running starting editor traffic-editor bring blank window. you\u2019ll traffic-editor model thumbnails installed traffic_editor_assets, rmf_traffic_editor find automatically. thumbnails top-view renderings art assets added environments, chairs. Click Edit->Preferences... path \u201cThumbnail Path\u201d box reasonable. \u201cFind\u2026\u201d button browse filesystem point desired thumbnail directory. installed recommended traffic_editor_assets package, find thumbnail directory install space <workspace_dir>/install/traffic_editor_assets/share/assets/thumbnails.) Creating Project empty Building Map Click Project->New... save project test.project.yaml Click Edit->Project Properties... enter \u201ctest\u201d project test.building.yaml building path. click Click Edit->Building Properties... enter \u201ctest\u201d building Click Creating level adding stuff Click \u201cAdd\u2026\u201d button \u201clevels\u201d tab side main editor window. pop dialog create level. Enter click create meter square level. zoom mouse wheel rendering left side main window. pan dragging mouse mouse wheel middle button) depressed. able click green dot toolbar icon, \u201cAdd Vertex\u201d tool press click vertices white area. Press [Escape] key return \u201cSelect\u201d tool. able click add wall tool press drag vertex vertex add wall segments. delete wall segments vertices, press [Escape] enter Select mode. click wall segment vertex, press [Delete]. Save work Click Project->Save press Ctrl+S save project building map. Adding real-world measurements set scale set scale drawing, click add measurement tool press drag vertex add real-world measurement line, show pink line. click select tool press Esc) click line left button. populate property-editor lower-right pane editor window. real-world length measurement line meters. set measurement line drawing, editor compute average pixels-per-meter supplied measurements. re-load document (closing editor re-opening) re-compute scale. ideal, frequently-used feature. Typically scale map set time. Adding lifts Click \u201cAdd\u2026\u201d button \u201clifts\u201d tab side main editor window. pop dialog create lift. position, size, reference floor dialog. Note: include keywork \u201clift\u201d lift slotcars recognize lift models. File truncated lines full file"},
{"url": "https://index.ros.org/p/rmf_traffic_editor_assets", "package": "rmf_traffic_editor_assets", "package_summary": "Assets for use with traffic_editor.", "package_details": "rmf_traffic_editor_assets Thumbnails static assets rmf_traffic_editor GUI! repository automatically cloned build traffic_editor ~/.traffic_editor directory, default place traffic_editor thumbnail assets. Updating update store thumbnails rebuilding traffic_editor manually invoking git pull directory. ~/.traffic_editor/assets git pull Artist Credits Licenses Credits licenses individual asset\u2019s creator downloading model corresponds asset\u2019s Gazebosim Fuel!"},
{"url": "https://index.ros.org/p/rmf_traffic_editor_test_maps", "package": "rmf_traffic_editor_test_maps", "package_summary": "Some test maps for traffic_editor and rmf_building_map_tools.", "package_details": "test_maps package maps testing traffic editor. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmf_utils", "package": "rmf_utils", "package_summary": "Simple C++ programming utilities used by Robotics Middleware Framework packages", "package_details": "rmf_utils rmf_utils simple programming utilities Robotics Middleware Framework packages Quality Declaration package claims Quality Level category. Quality Declaration details."},
{"url": "https://index.ros.org/p/rmw", "package": "rmw", "package_summary": "Contains the ROS middleware API.", "package_details": "RMW ROS Middleware Interface abstraction layer DDS implementations communication ROS Client Library. package rmw interface DDS implementation general functionality implementers. information, https://design.ros2.org/articles/ros_middleware_interface.html Interface Features specific information rmw interface features, api docs. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmw_implementation_cmake", "package": "rmw_implementation_cmake", "package_summary": "CMake functions which can discover and enumerate available implementations.", "package_details": "rmw_implementation_cmake package CMake functions discover enumerate rmw implementations. Features package CMake functions: call_for_each_rmw_implementation: Call CMake macro RMW implementation. get_available_rmw_implementations: package names ROS middleware implementations. get_default_rmw_implementation: package default ROS middleware implementation."},
{"url": "https://index.ros.org/p/rmw_dds_common", "package": "rmw_dds_common", "package_summary": "Define a common interface between DDS implementations of ROS middleware.", "package_details": "rmw_dds_common: ROS utilities DDS-based RMWs rmw_dds_common collection APIs support DDS based, RMW implementations. Quality Declaration package claims Quality Level category, Quality Declaration details. API package Generic graph cache Common discovery messages Data types utilities feature list reference."},
{"url": "https://index.ros.org/p/rmw_fastrtps_cpp", "package": "rmw_fastrtps_cpp", "package_summary": "Implement the ROS middleware interface using eProsima FastRTPS static code generation in C++.", "package_details": "rmw_fastrtps_cpp rmw_fastrtps_cpp implements ROS middleware interface eProsima Fast DDS static code generation information repository level README Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmw_fastrtps_dynamic_cpp", "package": "rmw_fastrtps_dynamic_cpp", "package_summary": "Implement the ROS middleware interface using introspection type support.", "package_details": "rmw_fastrtps_cpp rmw_fastrtps_dynamic_cpp implements ROS middleware interface eProsima Fast DDS introspection typesupport run time decide serialization/deserialization mechanism. information repository level README Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmw_fastrtps_shared_cpp", "package": "rmw_fastrtps_shared_cpp", "package_summary": "Code shared on static and dynamic type support of rmw_fastrtps_cpp.", "package_details": "rmw_fastrtps_shared_cpp rmw_fastrtps_shared_cpp common code static dynamic type support rmw_fastrtps_cpp. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rmw_implementation", "package": "rmw_implementation", "package_summary": "Proxy implementation of the ROS 2 Middleware Interface.", "package_details": "rmw_implementation Proxy implementation ROS Middleware Interface, forwarding calls chosen dynamically loaded) rmw implementation. RMW_IMPLEMENTATION environment variable, set, user select rmw implementations. default rmw implementation Refer rmw_implementation_cmake package learn default. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/ros1_bridge", "package": "ros1_bridge", "package_summary": "A simple bridge between ROS 1 and ROS 2", "package_details": "Bridge communication ROS ROS package network bridge enables exchange messages ROS ROS bridge implemented time Python API ROS developed. support limited message/service types compile time bridge. bridge prebuilt ROS binaries includes support common ROS interfaces (messages/services), interface packages listed ros2/common_interfaces repository tf2_msgs. documentation details ROS ROS interfaces bridge interfaces (including custom types), build bridge source (instructions building sourcing custom types separate ROS ROS workspaces. documentation setup. efficiency reasons, topics bridged matching publisher-subscriber pairs active topic side bridge. result ros2 topic echo <topic-name> doesn\u2019t work fails error message determine type passed topic subscribers present dynamic bridge hasn\u2019t bridged topic workaround topic type explicitly ros2 topic echo <topic-name> <topic-type> triggers bridging topic echo command represents subscriber. ROS side rostopic echo doesn\u2019t option topic type explicitly. dynamic bridge subscribers present. alternative --bridge-all-2to1-topics option bridge ROS topics ROS tools rostopic echo, rostopic list rqt topics matching ROS subscribers. Run ros2 run ros1_bridge dynamic_bridge options. Supported ROS Ubuntu Versions Important Compatibility Notice ros1_bridge requires ROS reached end-of-life (EOL) ROS Noetic. Ubuntu LTS support ROS compatible ros1_bridge. Ubuntu Version Supported ROS Versions Supported ROS Versions ros1_bridge Support (Focal) Noetic Ninjemys Foxy Fitzroy (EOL), Galactic Geochelone (EOL), Humble Hawksbill Full support (Jammy) Partial (unsupported officially) Humble Hawksbill, Iron Irwini Requires building source (Noble) Jazzy Jalisco, Kilted Kaiju supported ros1_bridge, system ROS ROS installable buildable. Mixing ROS distributions unsupported Ubuntu versions recommended lead broken builds missing dependencies. Prerequisites order run bridge prebuilt binaries build bridge ROS packages source. run examples examples source environment install space bridge built unpacked Additionally source ROS environment set ROS_MASTER_URI run roscore. ROS packages required build bridge: catkin roscpp roslaunch roscore executable) rosmsg std_msgs Python package rospkg run examples ROS packages: rosbash rosrun executable) roscpp_tutorials rospy_tutorials rostopic rqt_image_view Prerequisites examples file order examples portable versions ROS, define environment variables, ROS1_INSTALL_PATH ROS2_INSTALL_PATH. defined paths installation location respective ROS versions. installed Noetic default location, definition ROS1_INSTALL_PATH /opt/ros/noetic. Building bridge requires build ROS assume downloaded ~/ros2_rolling, plan building case, ROS2_INSTALL_PATH defined ~/ros2_rolling/install. you\u2019ve chosen install versions ROS adjust definitions match installation paths. definitions continuously page, add lines shell startup file (~/.bashrc bash, ~/.zshrc zsh). Modify definitions versions ROS you\u2019re shell you\u2019re export ROS1_INSTALL_PATH=/opt/ros/noetic export ROS2_INSTALL_PATH=~/ros2_rolling/install Note trailing character definition. problems involving paths, verify correct path installation location, trailing definition. Building bridge source continuing prerequisites building ROS source installed instructions. building package required patches ROS latest releases longer case. run trouble version ros_comm rosbag. bridge pkg-config find ROS packages. ROS packages CMake find_package(). CMAKE_PREFIX_PATH paths ROS overlay ROS packages. steps Linux OSX. build ROS bridge normal colcon arguments. File truncated lines full file"},
{"url": "https://index.ros.org/p/hardware_interface", "package": "hardware_interface", "package_summary": "ros2_control hardware interface", "package_details": "Overview detailed information package, ros2_control Documentation!"},
{"url": "https://index.ros.org/p/hardware_interface_testing", "package": "hardware_interface_testing", "package_summary": "ros2_control hardware interface testing", "package_details": "hardware_interface_testing package set hardware interfaces controllers packages test functionality."},
{"url": "https://index.ros.org/p/joint_limits_interface", "package": "joint_limits_interface", "package_summary": "Interface for enforcing joint limits.", "package_details": "Joint Limits Interface Overview joint_limits_interface data structures representing joint limits, methods populating common formats URDF ROS parameter server, methods enforcing limits kinds hardware interfaces. joint_limits_interface controllers implement HardwareInterface) operates controllers updated, write() method equivalent) robot abstraction. Enforcing limits overwrite commands set controllers, operate separate raw data buffer. main elements involved setting joint limits interface: Joint limits representation JointLimits Position, velocity, acceleration, jerk effort. SoftJointLimits Soft position limits, Loading URDF convenience methods loading joint limits information (position, velocity effort), soft joint limits information URDF. Loading ROS params convenience methods loading joint limits ROS parameter server (position, velocity, acceleration, jerk effort). Parameter specification MoveIt, addition parse jerk effort limits. Joint limits interface effort-controlled joints, soft-limits implementation ported. position-controlled joints, modified version soft limits implemented. velocity-controlled joints, simple saturation based acceleration velocity limits implemented. Examples refer joint_limits_interface wiki page."},
{"url": "https://index.ros.org/p/ros2controlcli", "package": "ros2controlcli", "package_summary": "The ROS 2 command line tools for ROS2 Control.", "package_details": "Read Docs usage command line arguments."},
{"url": "https://index.ros.org/p/force_torque_sensor_broadcaster", "package": "force_torque_sensor_broadcaster", "package_summary": "Controller to publish state of force-torque sensors.", "package_details": "force_torque_sensor_broadcaster Controller publish state force-torque sensors. Pluginlib-Library: force_torque_sensor_broadcaster Plugin: force_torque_sensor_broadcaster/ForceTorqueSensorBroadcaster (controller_interface::ControllerInterface)"},
{"url": "https://index.ros.org/p/imu_sensor_broadcaster", "package": "imu_sensor_broadcaster", "package_summary": "Controller to publish readings of IMU sensors.", "package_details": "imu_sensor_broadcaster Controller publish readings IMU sensors. Pluginlib-Library: imu_sensor_broadcaster Plugin: imu_sensor_broadcaster/IMUSensorBroadcaster (controller_interface::ControllerInterface)"},
{"url": "https://index.ros.org/p/joint_trajectory_controller", "package": "joint_trajectory_controller", "package_summary": "Controller for executing joint-space trajectories on a group of joints", "package_details": "joint_trajectory_controllers package package implements controllers interpolate joint\u2019s trajectory. detailed documentation check docs folder ros2_control documentation."},
{"url": "https://index.ros.org/p/pid_controller", "package": "pid_controller", "package_summary": "Controller based on PID implememenation from control_toolbox package.", "package_details": "pid_controller Controller based PID implementation control_toolbox package. Pluginlib-Library: pid_controller Plugin: pid_controller/PidController (controller_interface::ControllerInterface)"},
{"url": "https://index.ros.org/p/pose_broadcaster", "package": "pose_broadcaster", "package_summary": "Broadcaster to publish cartesian states.", "package_details": "pose_broadcaster Controller publish poses pose sensors. Pluginlib-Library: pose_broadcaster Plugin: pose_broadcaster/PoseBroadcaster (controller_interface::ControllerInterface)"},
{"url": "https://index.ros.org/p/range_sensor_broadcaster", "package": "range_sensor_broadcaster", "package_summary": "Controller to publish readings of range sensors.", "package_details": "range_sensor_broadcaster Controller publish readings Range sensors. Pluginlib-Library: range_sensor_broadcaster Plugin: range_sensor_broadcaster/RangeSensorBroadcaster (controller_interface::ControllerInterface)"},
{"url": "https://index.ros.org/p/kortex_driver", "package": "kortex_driver", "package_summary": "ROS2 driver package for the Kinova Robot Hardware.", "package_details": "ROS KINOVA KORTEX\u2122 Driver ROS KINOVA KORTEX\u2122 driver implements ros2_control hardware interface SystemInterface. Command interfaces driver exports commands interfaces position, velocity, effort interfaces joint defined URDF. Additionally, twist interfaces exported effector operational space control. additional interfaces exported, including set_gripper_max_velocity, set_gripper_max_effort gripper joint, reset_fault/command, reset_fault/async_success fault management. State interfaces driver exports position velocity state interfaces joint defined URDF. Additionally, state interface reset_fault/internal_fault determining robot\u2019s fault state."},
{"url": "https://index.ros.org/p/ros2acceleration", "package": "ros2acceleration", "package_summary": "The acceleration command for ROS 2 command line tools.", "package_details": "ros2acceleration acceleration command ROS command line tools. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/ros2doctor", "package": "ros2doctor", "package_summary": "A command line tool to check potential issues in a ROS 2 system", "package_details": "ros2doctor folder source code ros2doctor. ROS command line interface tools included standard install ROS distro. ros2doctor similar roswtf ROS examine ROS setup, distribution, platform, network interface, potential issues running ROS system. Usage Run ros2 doctor ros2 wtf(alias) conduct checks. Run ros2 doctor -h/--help print command arguments. Run ros2 doctor -r/--report report checked items. Run ros2 doctor -rf/--report-fail report failed checks Run ros2 doctor -iw/--include-warnings include warnings failed checks. combination. Add Checks add checks information report, Python entry points add modules setup.py. entry_points={ 'ros2doctor.checks': 'PlatformCheck ros2doctor.api.platform:PlatformCheck', 'NetworkCheck ros2doctor.api.network:NetworkCheck', 'ros2doctor.report': 'PlatformReport ros2doctor.api.platform:PlatformReport', 'NetworkReport ros2doctor.api.network:NetworkReport',"},
{"url": "https://index.ros.org/p/ros2multicast", "package": "ros2multicast", "package_summary": "The multicast command for ROS 2 command line tools.", "package_details": "ros2multicast package multicast command ROS command line tools. tool check multicast UDP packets passed endpoints. invoke command machine: ros2 multicast receive machine waiting packet arrive invoke command machine: ros2 multicast send successful machine output received message World!\"."},
{"url": "https://index.ros.org/p/ros_gz", "package": "ros_gz", "package_summary": "Meta-package containing interfaces for using ROS 2 with", "package_details": "ROS-Gazebo packages ros_gz metapackage installs packages integrating ROS Gazebo:"},
{"url": "https://index.ros.org/p/ros_gz_bridge", "package": "ros_gz_bridge", "package_summary": "Bridge communication between ROS and Gazebo Transport", "package_details": "Bridge communication ROS Gazebo package network bridge enables exchange messages ROS Gazebo Transport. message types bridged topics: ROS type Gazebo type builtin_interfaces/msg/Time ignition::msgs::Time std_msgs/msg/Bool ignition::msgs::Boolean std_msgs/msg/ColorRGBA ignition::msgs::Color std_msgs/msg/Empty ignition::msgs::Empty std_msgs/msg/Float32 ignition::msgs::Float std_msgs/msg/Float64 ignition::msgs::Double std_msgs/msg/Header ignition::msgs::Header std_msgs/msg/Int32 ignition::msgs::Int32 std_msgs/msg/UInt32 ignition::msgs::UInt32 std_msgs/msg/String ignition::msgs::StringMsg geometry_msgs/msg/Wrench ignition::msgs::Wrench geometry_msgs/msg/WrenchStamped ignition::msgs::Wrench geometry_msgs/msg/Quaternion ignition::msgs::Quaternion geometry_msgs/msg/Vector3 ignition::msgs::Vector3d geometry_msgs/msg/Point ignition::msgs::Vector3d geometry_msgs/msg/Pose ignition::msgs::Pose geometry_msgs/msg/PoseArray ignition::msgs::Pose_V geometry_msgs/msg/PoseWithCovariance ignition::msgs::PoseWithCovariance geometry_msgs/msg/PoseStamped ignition::msgs::Pose geometry_msgs/msg/Transform ignition::msgs::Pose geometry_msgs/msg/TransformStamped ignition::msgs::Pose geometry_msgs/msg/Twist ignition::msgs::Twist geometry_msgs/msg/TwistStamped ignition::msgs::Twist geometry_msgs/msg/TwistWithCovariance ignition::msgs::TwistWithCovariance geometry_msgs/msg/TwistWithCovarianceStamped ignition::msgs::TwistWithCovariance gps_msgs/GPSFix ignition::msgs::NavSat nav_msgs/msg/Odometry ignition::msgs::Odometry nav_msgs/msg/Odometry ignition::msgs::OdometryWithCovariance rcl_interfaces/msg/ParameterValue ignition::msgs::Any ros_gz_interfaces/msg/Altimeter ignition::msgs::Altimeter ros_gz_interfaces/msg/Contact ignition::msgs::Contact ros_gz_interfaces/msg/Contacts ignition::msgs::Contacts ros_gz_interfaces/msg/Dataframe ignition::msgs::Dataframe ros_gz_interfaces/msg/Entity ignition::msgs::Entity ros_gz_interfaces/msg/EntityWrench ignition::msgs::EntityWrench ros_gz_interfaces/msg/Float32Array ignition::msgs::Float_V ros_gz_interfaces/msg/GuiCamera ignition::msgs::GUICamera ros_gz_interfaces/msg/JointWrench ignition::msgs::JointWrench ros_gz_interfaces/msg/Light ignition::msgs::Light ros_gz_interfaces/msg/SensorNoise ignition::msgs::SensorNoise ros_gz_interfaces/msg/StringVec ignition::msgs::StringMsg_V ros_gz_interfaces/msg/TrackVisual ignition::msgs::TrackVisual ros_gz_interfaces/msg/VideoRecord ignition::msgs::VideoRecord ros_gz_interfaces/msg/WorldControl ignition::msgs::WorldControl rosgraph_msgs/msg/Clock ignition::msgs::Clock sensor_msgs/msg/BatteryState ignition::msgs::BatteryState sensor_msgs/msg/CameraInfo ignition::msgs::CameraInfo sensor_msgs/msg/FluidPressure ignition::msgs::FluidPressure sensor_msgs/msg/Imu ignition::msgs::IMU sensor_msgs/msg/Image ignition::msgs::Image sensor_msgs/msg/JointState ignition::msgs::Model sensor_msgs/msg/Joy ignition::msgs::Joy sensor_msgs/msg/LaserScan ignition::msgs::LaserScan sensor_msgs/msg/MagneticField ignition::msgs::Magnetometer sensor_msgs/msg/NavSatFix ignition::msgs::NavSat sensor_msgs/msg/PointCloud2 ignition::msgs::PointCloudPacked sensor_msgs/msg/Range ignition::msgs::LaserScan tf2_msgs/msg/TFMessage ignition::msgs::Pose_V trajectory_msgs/msg/JointTrajectory ignition::msgs::JointTrajectory vision_msgs/msg/Detection3D ignition::msgs::AnnotatedOriented3DBox vision_msgs/msg/Detection3DArray ignition::msgs::AnnotatedOriented3DBox_V services: ROS type Gazebo request Gazebo response ros_gz_interfaces/srv/ControlWorld ignition.msgs.WorldControl ignition.msgs.Boolean Run ros2 run ros_gz_bridge parameter_bridge instructions. Gazebo Transport talker ROS listener Start parameter bridge watch topics. Shell ~/bridge_ws/install/setup.bash ros2 run ros_gz_bridge parameter_bridge /chatter@std_msgs/msg/String@ignition.msgs.StringMsg start ROS listener. Shell /opt/ros/humble/setup.bash ros2 topic echo /chatter start Gazebo Transport talker. File truncated lines full file"},
{"url": "https://index.ros.org/p/ros_gz_image", "package": "ros_gz_image", "package_summary": "Image utilities for Gazebo simulation with ROS.", "package_details": "Image utilities ROS Gazebo Transport package unidirectional bridge images Gazebo ROS. bridge subscribes Gazebo image messages (ignition::msgs::Image) republishes ROS image_transport. compressed images, install compressed_image_transport bridge publish /compressed images. image_transport plugins."},
{"url": "https://index.ros.org/p/ros_gz_interfaces", "package": "ros_gz_interfaces", "package_summary": "Message and service data structures for interacting with Gazebo from ROS2.", "package_details": "Message service data structures interacting Gazebo ROS2 package Gazebo-specific ROS message service data structures (.msg .srv) Messages (.msg) Contact: related ignition::msgs::Contact. Contact info collisions Gazebo Sim. Contacts: related ignition::msgs::Contacts. list contacts. Entity: related ignition::msgs::Entity. Entity Gazebo Sim. EntityFactory: related ignition::msgs::EntityFactory. Message create entity. EntityWrench: related ignition::msgs::EntityWrench. Wrench applied Entity Gazebo Sim. Light: related ignition::msgs::Light. Light info Gazebo Sim. WorldControl: related ignition::msgs::WorldControl. Message control world Gazebo Sim. WorldReset: related ignition::msgs::WorldReset. Reset time model simulation. Services (.srv) ControlWorld: Control world Gazebo Sim,for example,pasue,pasue multiple steps,resume,etc. DeleteEntity: Delete Entity Gazebo Sim SetEntityPose: Set pose Entity Gazebo Sim SpawnEntity: Spawn Entity Gazebo Sim"},
{"url": "https://index.ros.org/p/ros_gz_sim", "package": "ros_gz_sim", "package_summary": "Tools for using Gazebo Sim simulation with ROS.", "package_details": "ROS Gazebo Sim package convenient integrate ROS Gazebo, Launch files ROS-enabled executables Run Gazebo Sim convenient launch file, ros2 launch ros_gz_sim gz_sim.launch.py gz_args:=\"shapes.sdf\" Spawn entities create executable spawn SDF URDF entities file disk Gazebo Fuel ROS parameter start Gazebo Sim: ros2 launch ros_gz_sim gz_sim.launch.py spawn model: ros2 run ros_gz_sim create -world default -file 'https://fuel.ignitionrobotics.org/1.0/openrobotics/models/Gazebo' options ros2 run ros_gz_sim create --helpshort <gazebo_ros> export model paths package.xml <gazebo_ros> tag <export> tag package.xml file add paths GZ_SIM_RESOURCE_PATH GZ_SIM_SYSTEM_PLUGIN_PATH, environment variables configure Gazebo search paths resources SDFormat files, meshes, plugins values attributes gazebo_model_path gazebo_media_path appended GZ_SIM_RESOURCE_PATH. plugin_path appended GZ_SIM_SYSTEM_PLUGIN_PATH. Finding resources tutorial learn environment variables. keyword ${prefix} setting values expanded package\u2019s share path ros2 pkg prefix --share <package <export> <gazebo_ros gazebo_model_path=\"${prefix}/models\"/> <gazebo_ros gazebo_media_path=\"${prefix}/media\"/> <gazebo_ros plugin_path=\"${prefix}/plugins\"/> </export> required directory installed CMakeLists.txt install(DIRECTORY models DESTINATION share/${PROJECT_NAME}) order reference models ROS package unambiguously, recommended set gazebo_model_path parent prefix. <export> <gazebo_ros gazebo_model_path=\"${prefix}/../\"/> </export> ROS package called my_awesome_pkg SDFormat model cool cool_robot: my_awesome_pkg models cool_robot model.config model.sdf package.xml gazebo_model_path=\"${prefix}/../ set reference cool_robot model world file package uri: File truncated lines full file"},
{"url": "https://index.ros.org/p/ros_gz_sim_demos", "package": "ros_gz_sim_demos", "package_summary": "Demos using Gazebo Sim simulation with ROS.", "package_details": "ROS Gazebo Sim demos package demos showing Gazebo Sim ROS. Run Gazebo Sim convenient launch file, ros2 launch ros_gz_sim gz_sim.launch.py gz_args:=\"shapes.sdf\" Air pressure Publishes fluid pressure readings. ros2 launch ros_gz_sim_demos air_pressure.launch.py demo shows custom QoS parameters. sensor data published \u201cbest-effort\u201d, subscribe \u201creliable\u201d data won\u2019t work. difference ros2 topic echo /air_pressure --qos-reliability best_effort ros2 topic echo /air_pressure --qos-reliability reliable Camera Publishes RGB camera image info. Images exposed ROS ros_gz_bridge ros_gz_image. image bridge (unidirectional, image_transport): ros2 launch ros_gz_sim_demos image_bridge.launch.py regular bridge: ros2 launch ros_gz_sim_demos camera.launch.py camera publishes information triggered: ros2 launch ros_gz_sim_demos triggered_camera.launch.py Trigger camera: ros2 topic pub /camera/trigger std_msgs/msg/Bool \"{data: true}\" Diff drive Send commands differential drive vehicle listen odometry. ros2 launch ros_gz_sim_demos diff_drive.launch.py unpause send command ros2 topic pub /model/vehicle_blue/cmd_vel geometry_msgs/msg/Twist \"{linear: angular: demo shows custom QoS parameters. commands subscribed \u201creliable\u201d, publish \u201cbest-effort\u201d commands won\u2019t work. difference ros2 topic pub /model/vehicle_blue/cmd_vel geometry_msgs/msg/Twist \"{linear: angular: --qos-reliability reliable ros2 topic pub /model/vehicle_blue/cmd_vel geometry_msgs/msg/Twist \"{linear: angular: --qos-reliability best_effort Depth camera Depth camera data obtained sensor_msgs/msg/Image, ros_gz_bridge ros_gz_image sensor_msgs/msg/PointCloud2, ros_gz_point_cloud image bridge (unidirectional, image_transport): ros2 launch ros_gz_sim_demos image_bridge.launch.py image_topic:=/depth_camera TODO: Blocked ros_gz_point_cloud issue. Gazebo Sim plugin: ros2 launch ros_gz_sim_demos depth_camera.launch.py GPU lidar GPU lidar data obtained sensor_msgs/msg/LaserScan, ros_gz_bridge File truncated lines full file"},
{"url": "https://index.ros.org/p/ros_ign", "package": "ros_ign", "package_summary": "Shim meta-package to redirect to", "package_details": "shim meta-package ros_gz"},
{"url": "https://index.ros.org/p/ros_ign_bridge", "package": "ros_ign_bridge", "package_summary": "Shim package to redirect to ros_gz_bridge.", "package_details": "shim package ros_gz_bridge"},
{"url": "https://index.ros.org/p/ros_ign_gazebo", "package": "ros_ign_gazebo", "package_summary": "Shim package to redirect to ros_gz_sim.", "package_details": "shim package ros_gz_sim"},
{"url": "https://index.ros.org/p/ros_ign_gazebo_demos", "package": "ros_ign_gazebo_demos", "package_summary": "Shim package to redirect to ros_gz_sim_demos.", "package_details": "shim package ros_gz_sim_demos"},
{"url": "https://index.ros.org/p/ros_ign_image", "package": "ros_ign_image", "package_summary": "Shim package to redirect to ros_gz_image.", "package_details": "shim package ros_gz_image"},
{"url": "https://index.ros.org/p/ros_ign_interfaces", "package": "ros_ign_interfaces", "package_summary": "Shim package to redirect to ros_gz_interfaces.", "package_details": "shim package ros_gz_interfaces"},
{"url": "https://index.ros.org/p/ros_image_to_qimage", "package": "ros_image_to_qimage", "package_summary": "A package that converts a ros image msg to a qimage object", "package_details": "ros_image_to_qimage Converts ROS2 sensor_msgs/msg/Image QImage. Installation ROS2 Galactic Humble Rolling Binary installation Source ROS installation, run: sudo apt install ros-${ROS_DISTRO}-ros-image-to-qimage Alternatively build source, source ROS installation, run ROS workspace: git clone https://github.com/ros-sports/ros_image_to_qimage.git src/ros_image_to_qimage --branch ${ROS_DISTRO} colcon build ROS2 Foxy source installation Source ROS installation, run ROS workspace: git clone https://github.com/ros-sports/ros_image_to_qimage.git src/ros_image_to_qimage --branch ${ROS_DISTRO} colcon build Usage #include \"ros_image_to_qimage/ros_image_to_qimage.hpp\" void imageCallback(const sensor_msgs::ImageConstPtr& msg) QImage qImage ros_image_to_qimage::Convert(*msg); package.xml, add <depend>ros_image_to_qimage</depend> CMakeLists.txt, suppose link my_target library: find_package(ros_image_to_qimage REQUIRED) ament_target_dependencies(my_target ros_image_to_qimage)"},
{"url": "https://index.ros.org/p/rosbag2_performance_benchmarking", "package": "rosbag2_performance_benchmarking", "package_summary": "Code to benchmark rosbag2", "package_details": "Rosbag2 writer benchmarking primary package test performance rosbag2. works benchmark_launch.py launchfile run entire set benchmarks. Launchfile requires arguments: benchmark benchmark description repetitions, cache size, database configuration producers producers description publisher/producer instances, frequency, messages size Templates configuration files config directory package. run test benchmark test.yaml mixed_110Mbs.yaml): ros2 launch rosbag2_performance_benchmarking benchmark_launch.py benchmark:=`ros2 pkg prefix rosbag2_performance_benchmarking`/share/rosbag2_performance_benchmarking/config/benchmarks/test.yaml producers:=`ros2 pkg prefix rosbag2_performance_benchmarking`/share/rosbag2_performance_benchmarking/config/producers/mixed_110Mbs.yaml summary benchmark result file benchmark config: <db_root_folder>/<BENCHMARK_NAME>/summary_result_file BENCHMARK_NAME generated config names, transport type timestamp. human friendly output, postprocess report generation tool Launch benchmark result directory argument (directory summary_result_file file): scripts/report_gen.py <BENCHMARK_RESULT_DIR> Binaries launch file: benchmark_publishers runs publishers based parameters. no_transport parameter set False; writer_benchmark runs storage-only benchmarking, mimicking subscription queues transport whatsoever. no_transport parameter set True. results_writer based provider parameters, write results (percentage recorded messages) recording. parameters storage uri, read bag metadata file. Compression Note opt select compression benchmarking, generated data random representative specific case. publish non-random data, modify ByteProducer. General knowledge: benchmarking Background: benchmarking disk writes system understand limitation disk poses throughput data recording. Performance bag write higher extended period time memory). command if=/dev/zero of=/tmp/output conv=fdatasync bs=384k count=1k; /tmp/output method great benchmarking disk easy start requires dependencies. write zeros /tmp/output file block size blocks, ends write finishes. benchmark disk bags written (check mount points change \u201c/tmp/output\u201d path needed). Note: depends parameters running system give ballpark figure ran times. fio sophisticated accurate benchmarks, fio command. big data blocks fio TEST --eta-newline=5s --filename=fio-tempfile.dat --rw=write --size=500m --io_size=10g --blocksize=1024k --ioengine=libaio --fsync=10000 --iodepth=32 --direct=1 --numjobs=1 --runtime=60 --group_reporting. Profiling bags tools Tools profiling: sudo apt-get install iotop ioping sysstat iotop works similar top command, shows disk reads, writes, swaps higher frequency batch mode process deliver data plotted. sudo iotop <PID> running bag. ioping check latency requests device strace determine syscalls bottleneck. strace ros2 bag record /image --max-cache-size ./tmp. report finishing recording Ctrl-C."},
{"url": "https://index.ros.org/p/rosbag2_storage_mcap", "package": "rosbag2_storage_mcap", "package_summary": "rosbag2 storage plugin using the MCAP file format", "package_details": "rosbag2_storage_mcap package storage plugin rosbag2 extends support MCAP file format. Move ros-tooling organization package merged https://github.com/ros2/rosbag2 https://github.com/ros-tooling/rosbag2_storage_mcap. view historical pull requests git history package, check Installation rosbag2_storage_mcap part current ROS distributions. Ubuntu, ROS installation instructions, Replace \"rolling\" ROS distro (`echo $ROS_DISTRO`) sudo apt install ros-rolling-rosbag2-storage-mcap Usage MCAP files regular ros2 bag commands adding --storage mcap option (abbreviated mcap): ros2 bag record mcap /topic1 /topic2 ros2 bag play mcap path/to/your_recording.mcap ros2 bag info mcap path/to/your_recording.mcap Writer Configuration configure details MCAP writer ros2 bag record, --storage-config-file options provide YAML file describing mcap::McapWriterOptions. Field descriptions copied McapWriterOptions declaration Field Type Values Description noChunkCRC bool Disable CRC calculation Chunks. noChunking=true. noAttachmentCRC bool Disable CRC calculation Attachments. enableDataCRC bool Enables CRC calculation entire Data section. noChunking=True. noSummaryCRC bool Disable CRC calculation Summary section. noChunking bool write Chunks file, writing Schema, Channel, Message records Data section. noMessageIndex bool write Message Index records file. noSummary=true noChunkIndex=false, Chunk Index records written Summary section, providing coarse message index. noSummary bool write Summary Summary Offset sections file, placing Footer record immediately DataEnd. provide speed boost file writing produce smaller files, expense requiring conversion process fast summarization indexed access desired. chunkSize unsigned int Target uncompressed Chunk payload size bytes. Chunk\u2019s uncompressed data meets exceeds size, Chunk compressed compression enabled) written disk. Note smaller Chunks written, Chunk Data section. option noChunking=true. compression \u201cZstd\u201d Compression algorithm writing Chunks. option noChunking=true. compressionLevel \u201cFastest\u201d, \u201cFast\u201d, \u201cDefault\u201d, \u201cSlow\u201d, \u201cSlowest\u201d Compression level writing Chunks. Slower generally produces smaller files, expense CPU time. levels map internal settings compression algorithm. forceCompression bool default, Chunks benefit compression written uncompressed. option force compression Chunks. option noChunking=true. noRepeatedSchemas bool Advanced option. noRepeatedChannels bool Advanced option. noMetadataIndex bool Advanced option. noChunkIndex bool Advanced option. noStatistics bool Advanced option. noSummaryOffsets bool Advanced option. mcap_writer_options.yml noChunkCRC: false noChunking: false noMessageIndex: false noSummary: false chunkSize: compression: \"Zstd\" compressionLevel: \"Fast\" forceCompression: false ros2 bag record mcap my_bag --storage-config-file mcap_writer_options.yml Storage Preset Profiles preset profiles ros2 bag record mcap my_bag --storage-preset-profile fastwrite fastwrite Configures MCAP writer highest write throughput lowest resource utilization. preset calculate CRCs integrity checking, write message index. preset profile resource-constrained robots. Equivalent storage configuration: noChunking: true noSummaryCRC: true MCAPs written fastwrite long-term storage format recommended. features work reading MCAP files message index, reading messages subset topics seeking. recording MCAPs robot fastwrite, good idea post-process files restore message index save storage space: File truncated lines full file"},
{"url": "https://index.ros.org/p/zstd_vendor", "package": "zstd_vendor", "package_summary": "Zstd compression vendor package, providing a dependency for Zstd.", "package_details": "zstd_vendor CMake wrapper Zstandard compression library."},
{"url": "https://index.ros.org/p/rosidl_runtime_c", "package": "rosidl_runtime_c", "package_summary": "Provides definitions, initialization and finalization functions, and macros for getting and working with rosidl typesupport types in C.", "package_details": "rosidl_generator_c rosidl_runtime_c package runtime ROSIDL functionality Features list features rosidl_runtime_c feature documentation. Quality Declaration Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_runtime_cpp", "package": "rosidl_runtime_cpp", "package_summary": "Provides definitions and templated functions for getting and working with rosidl typesupport types in C++.", "package_details": "rosidl_runtime_cpp rosidl_runtime_cpp package generates runtime ROSIDL interfaces files Features features rosidl_runtime_cpp documented feature documentation. Quality Declaration Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_typesupport_interface", "package": "rosidl_typesupport_interface", "package_summary": "The interface for rosidl typesupport packages.", "package_details": "rosidl_typesupport_interface rosidl_typesupport_interface package macros define rosidl typesupport interface. Features rosidl_typesupport_interface interface macros rosidl typesupport packages. macros.h header. Quality Declaration Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_typesupport_introspection_c", "package": "rosidl_typesupport_introspection_c", "package_summary": "Generate the message type support for dynamic message construction in C.", "package_details": "rosidl_typesupport_introspection_c rosidl_typesupport_introspection_c functionality message service typesupport handler functions dynamically accessing manipulating messages. Features features rosidl_typesupport_introspection_c FEATURES. Quality Declaration Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_typesupport_introspection_cpp", "package": "rosidl_typesupport_introspection_cpp", "package_summary": "Generate the message type support for dynamic message construction in C++.", "package_details": "rosidl_typesupport_introspection_cpp rosidl_typesupport_introspection_cpp functionality message service typesupport handler functions dynamically accessing manipulating messages. Features features rosidl_typesupport_introspection_cpp FEATURES. Quality Declaration Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_default_runtime", "package": "rosidl_default_runtime", "package_summary": "A configuration package defining the runtime for the ROS interfaces.", "package_details": "rosidl_default_runtime rosidl_default_runtime CMake functionality finding adding runtime dependencies rosidl packages. Features features package consist serving gathering dependency runtime related dependencies rosidl packages. dependencies package.xml. helps reduce boilerplate needed developers create rosidl packages. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_typesupport_c", "package": "rosidl_typesupport_c", "package_summary": "Generate the type support for C messages.", "package_details": "rosidl_typesupport_c rosidl_typesupport_c functionality message service typesupport handler functions. Features features rosidl_typesupport_c FEATURES. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_typesupport_cpp", "package": "rosidl_typesupport_cpp", "package_summary": "Generate the type support for C++ messages.", "package_details": "rosidl_typesupport_cpp rosidl_typesupport_cpp functionality message service typesupport handler functions. Features features rosidl_typesupport_cpp FEATURES. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/fastrtps_cmake_module", "package": "fastrtps_cmake_module", "package_summary": "Provide CMake module to find eProsima FastRTPS.", "package_details": "fastrtps_cmake_module package CMake module find eProsima FastRTPS installation system. Features CMake module FindFastRTPS.cmake enables packages easily find FastRTPS adding find_package(fastrtps_cmake_module) CMakeLists.txt file. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_typesupport_fastrtps_c", "package": "rosidl_typesupport_fastrtps_c", "package_summary": "Generate the C interfaces for eProsima FastRTPS.", "package_details": "rosidl_typesupport_fastrtps_c rosidl_typesupport_fastrtps_c package functionality generating rosidl interfaces eProsima FastRTPS. Features rosidl_typesupport_fastrtps_c features FEATURES. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rosidl_typesupport_fastrtps_cpp", "package": "rosidl_typesupport_fastrtps_cpp", "package_summary": "Generate the C++ interfaces for eProsima FastRTPS.", "package_details": "rosidl_typesupport_fastrtps_cpp rosidl_typesupport_fastrtps_cpp package functionality generating rosidl interfaces eProsima FastRTPS. Features rosidl_typesupport_fastrtps_cpp features FEATURES. Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/rosx_introspection", "package": "rosx_introspection", "package_summary": "Parse any ROS/ROS2 message without compile-time information", "package_details": "ROS Introspection Unified successor libraries: ros_type_introspection ros_msg_parser ros2_introspection library compiles ROS1 (catkin), ROS2 (colcon/ament) ROS dependency (vanilla cmake). parse ROS message runtime, requires: type instance \u201csensors_msgs/JointState\u201d) definition type instance raw memory buffer deserialized individual key/values pairs. raw memory buffer obtained rosbag::MessageInstance Topic::ShapeShifter ROS1. GenericSubscriber rosbag2_storage::SerializedBagMessage ROS2. MCAP. Python binding Compilation instructions: cmake build_python -DCMAKE_BUILD_TYPE=Release -DROSX_PYTHON_BINDINGS=ON cmake --build build_python rosbag (MCAP file) test command PYTHONPATH=build_python/python python3 python/mcap_ros_parser.py path_to_your_rosbag.mcap Note providing folder dynamic library PYTHONPATH."},
{"url": "https://index.ros.org/p/rpyutils", "package": "rpyutils", "package_summary": "Package containing various utility types and functions for Python", "package_details": "rpyutils utility types functions Python API Context manager adding DLLs Windows search path. applies Python newer: add_dll_directories_from_env"},
{"url": "https://index.ros.org/p/rqt_dotgraph", "package": "rqt_dotgraph", "package_summary": "rqt GUI plugin to visualize dot graphs.", "package_details": "rqt_dotgraph ROS2 node rqt plugin visualizing DOT graph files. load DOT file subscribe ROS2 topic. visualize DOT graphs, module includes version xdot_qt.py forked ROSPlan released LGPLv3. forked version package modified released LGPLv3. rest package released license. Nodes rqt_dotgraph Subscriptions dot_graph (std_msgs/String) String dot graph contents DOT file). Parameters ~title (string, default: Dot Graph Viewer) Window title. Troubleshooting Plugin File rqt plugins issues running. occurred updating graphics drivers. typical error message RosPluginProvider._parse_plugin_xml() plugin file \"/home/user/ws/install/rqt_dotgraph/share/rqt_dotgraph/plugin.xml\" package \"rqt_dotgraph\" fix run command continue previous commands error occurred. ros2 run rqt_dotgraph rqt_dotgraph --force-discover Import Errors Running running node ros2 run rqt_dotgraph rqt_dotgraph error occurs ImportError: import 'QVariant' 'PySide2.QtCore' (/home/thomas/src/rqt_dotgraph/venv/lib/python3.10/site-packages/PySide2/QtCore.abi3.so) Fix pip install PyQt5 error occurs ModuleNotFoundError: module named 'PySide2' Fix pip install PySide2"},
{"url": "https://index.ros.org/p/rqt_gauges", "package": "rqt_gauges", "package_summary": "Visualization plugin for several sensors.", "package_details": "RQT gauges rqt_gauges rqt Python plugin. create types gauges: Dial Rotational Bar ROS2 Distro Build Status Package build Rolling Iron Humble widget expected able subscribe specific topic select field topic show gauge features added widget: Show topic field Modify minimum maximum gauge Modify units dial compile <workspace-with-the-package> colcon build --packages-select rqt_gauges source install/setup.bash RQT Run RQT plugin rqt path menu tab: Plugins Visualization Dial Rotational Bar Standalone Plugin Run standalone node: ros2 run rqt_gauges rqt_gauges Play changing minimum limit, maximum limit units gauge boxes bottom widget. Subscribe topics watch gauge move. Create publishers: geometry_msgs/msg/Twist std_msgs/msg/Int16: terminal: ros2 topic pub /test_topic_2 geometry_msgs/msg/Twist \"linear: angular: terminal: ros2 topic pub /test_topic std_msgs/msg/Int16 \"data: plugin start filling text box top reach specific field specific topic topic autocompleter order avoid issues): Select topic completing required field: /test_topic/data File truncated lines full file"},
{"url": "https://index.ros.org/p/rsl", "package": "rsl", "package_summary": "ROS Support Library", "package_details": "ROS Support Library (RSL) RSL collection utilities ROS projects. Read docs Killer Features algorithm Functions inspecting collections monad.hpp Functions operators monadic expressions no_discard.hpp [[nodiscard]] lambdas overload.hpp Class template easily visiting variants parameter_validators.hpp Functions validating rclcpp::Parameter queue.hpp Thread-safe queue random.hpp Modern randomness easy static_string.hpp Static capacity string class static_vector.hpp Static capacity vector class strong_type.hpp Strong typedef class try.hpp Macro emulatate absl::CONFIRM operator? Rust"},
{"url": "https://index.ros.org/p/rt_manipulators_examples", "package": "rt_manipulators_examples", "package_summary": "Examples for RT Manipulators C++ Library", "package_details": "Manipulators Examples CRANE-X7 Kinematics rt_manipulators_cpp\u306e\u30b5\u30f3\u30d7\u30eb \u3092ROS ros2 launch rt_manipulators_examples example.launch.py example:=x7_forward_kinematics"},
{"url": "https://index.ros.org/p/rt_manipulators_cpp", "package": "rt_manipulators_cpp", "package_summary": "RT Manipulators C++ Library", "package_details": "RT\u30de\u30cb\u30d4\u30e5\u30ec\u30fc\u30bfC++\u30e9\u30a4\u30d6\u30e9\u30ea build_install_library.bash ./build_install_library.bash compiler identification GNU CXX compiler identification GNU Check working compiler: /usr/bin/cc Check working compiler: /usr/bin/cc works Detecting compiler ABI info Detecting compiler ABI info Detecting compile features Built target rt_manipulators_cpp Built target rt_manipulators_cpp Install project... Install configuration: Installing: /usr/local/lib/librt_manipulators_cpp.so.1.0.0 Installing: /usr/local/lib/librt_manipulators_cpp.so.1 Installing: /usr/local/lib/librt_manipulators_cpp.so Up-to-date: /usr/local/include/rt_manipulators_cpp Installing: /usr/local/include/rt_manipulators_cpp/hardware.hpp Installing: /usr/local/include/rt_manipulators_cpp/joint.hpp \u30d3\u30eb\u30c9\u306b\u6210\u529f\u3059\u308b\u3068\u3001CMake\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(\u4f8b\uff1a/usr/local/lib\u3001/usr/local/include)\u306b\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea(librt_manipulators_cpp.so)\u3068\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb(rt_manipulators_cpp/*.hpp)\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002 test.cpp -lrt_manipulators_cpp uninstall_library.bash ./uninstall_library.bash /usr/local/lib/librt_manipulators_cpp.so.1.0.0 /usr/local/lib/librt_manipulators_cpp.so.1 /usr/local/lib/librt_manipulators_cpp.so /usr/local/include/rt_manipulators_cpp/hardware.hpp /usr/local/include/rt_manipulators_cpp/joint.hpp \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u306f\u30b5\u30f3\u30d7\u30eb\u96c6\u306eREADME.md\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 hardware.hpp/cpp Hardware\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059 hardware_communicator.hpp/cpp Hardware\u30af\u30e9\u30b9\u306e\u3046\u3061\u3001Dynamixel\u3068\u306e\u901a\u4fe1\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059 hardware_joints.hpp/cpp Hardware\u30af\u30e9\u30b9\u306e\u3046\u3061\u3001\u30b8\u30e7\u30a4\u30f3\u30c8\u60c5\u5831\u3092\u6271\u3046\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059 joints.hpp/cpp config_file_parser.hpp/cpp dynamixel_* \u5404Dynamixel\u3068\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u5909\u63db\u3092\u62c5\u3044\u307e\u3059 kinematics.hpp/cpp kinematics_utils.hpp/cpp link.hpp GoogleTest\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb mkdir ~/gtest ~/gtest curl https://github.com/google/googletest/archive/release-1.11.0.tar.gz tar -xvf release-1.11.0.tar.gz mkdir googletest-release-1.11.0/build googletest-release-1.11.0/build cmake sudo install ./run_test_library.bash File truncated lines full file"},
{"url": "https://index.ros.org/p/rviz_2d_overlay_plugins", "package": "rviz_2d_overlay_plugins", "package_summary": "RViz2 plugin for 2D overlays in the 3D view. Mainly a ROS2 port of the JSK overlay plugin\n        (https://github.com/jsk-ros-pkg/jsk_visualization).", "package_details": "rviz_2d_overlay_plugins Plugin displaying overlays RViz2 scene. Based jsk_visualization package, released ROS1, 3-Clause BSD license. Text Overlay text formatting options text overlay OverlayText.msg message type Alignment Positioning easy positioning overlay edges rviz window, support multiple/dynamic window sizes, position offsets respective border. Depending horizontal_alignment LEFT, CENTER, horizontal_distance field sets distance left border, offset center. LEFT alignment, distance means text aligned border gap, positive distance moves overlay center. CENTER alignment, distance means completely centered, positive values move overlay bottom window. TOP BOTTOM vertical alignment work LEFT horizontal case. string topic simple coverter node (rviz2d_from_string_node) covert std_msgs/msg/String rviz_2d_overlay_msgs/msg/OverlayText. working principle simple, subscribes String topic, publishes content OverlayText proeries set ROS parameters overtaking RViz2. launch file runs node sets parameters launch import LaunchDescription launch_ros.actions import Node def generate_launch_description(): return LaunchDescription([ Node( package='rviz_2d_overlay_plugins', executable='string_to_overlay_text', name='string_to_overlay_text_1', output='screen', parameters=[ {\"string_topic\": \"chatter\"}, {\"fg_color\": colors r,g,b,w,k,p,y (red,green,blue,white,black,pink,yellow) case /chatter topic needed published single command: ros2 topic pub /chatter std_msgs/String \"data: world\" Circular Gauge Overlay PieChartDisplay boring pie chart, displays single PieChartDisplay \u201cCircular Gauge\u201d synonymously package. gauge displaying std_msgs/Float32. Formatting positioning, setting maximum display options rviz."},
{"url": "https://index.ros.org/p/sbg_driver", "package": "sbg_driver", "package_summary": "ROS driver package for communication with the SBG navigation systems.", "package_details": "sbg_driver ROS2 driver package SBG Systems IMU, AHRS INS. driver package sbgECom binary protocol read data configure SBG Systems devices. Initial work ENSTA Bretagne. Author: SBG Systems Maintainer: SBG Systems Contact: support@sbg-systems.com Features driver supports SBG systems sensors, IMUs, AHRS INS, degree configurations driver supports features: Parse IMU/AHRS/INS/GNSS sbgECom protocol Publish standard ROS2 messages detailed specific SBG Systems topics Subscribe RTCM data support DGPS/RTK mode centimeters-level accuracy Calibrate magnetic field on-board ELLIPSE algorithms Configure ELLIPSE products yaml files note [!NOTE] ROS2 drivers SBG Systems sensors, drivers configure Ellipse family. INS EKINOX, APOGEE QUANTA, sbgInsRestApi PULSE-40, sbgEcom encapsulation sbgInsRestApi: started Guide Installation Installation Packages User install sbg_ros2_driver standard ROS2 installation system. Humble sudo apt-get install ros-humble-sbg-driver Galactic sudo apt-get install ros-galactic-sbg-driver Foxy sudo apt-get install ros-foxy-sbg-driver Building sources Dependencies Robot Operating System (ROS2) sbgECom Library (embeds v4.0.1987-stable compatible ELLIPSE firmware Building Clone repository Release version) Build ROS2 colcon build system colcon_ws/src git clone https://github.com/SBG-Systems/sbg_ros2_driver.git sbg_ros2_driver rosdep update rosdep install --from-path colcon build source install/setup.bash Usage run default ROS2 node default configuration file ros2 launch sbg_driver sbg_device_launch.py run magnetic calibration node ros2 launch sbg_driver sbg_device_mag_calibration_launch.py Config files Default config files configuration file defined structure. sbg_device_uart_default.yaml config file default UART connection device. configure device ROS2 node, previously configured (manually ROS2 node). defines outputs device: /sbg/imu_data, /sbg/ekf_quat ROS2 standard outputs /imu/data, /imu/velocity, /imu/temp /sbg/status, /sbg/utc_time /imu/utc_ref sbg_device_udp_default.yaml config file default UDP connection device. configure device ROS2 node, previously configured (manually). defines outputs device: /sbg/imu_data, /sbg/ekf_quat ROS2 standard outputs /imu/data, /imu/velocity, /imu/temp /sbg/status, /sbg/utc_time /imu/utc_ref config files ellipse_A_default.yaml Default config file Ellipse-A. ellipse_E_default.yaml Default config file Ellipse-E external NMEA GNSS. ellipse_N_default.yaml Default config file Ellipse-N internal GNSS. ellipse_D_default.yaml Default config file Ellipse-D internal GNSS. Launch files Default launch files File truncated lines full file"},
{"url": "https://index.ros.org/p/sick_safetyscanners2", "package": "sick_safetyscanners2", "package_summary": "ROS2 Driver for the SICK safetyscanners", "package_details": "Sick_Safetyscanners ROS2 Driver ROS2 Driver reads raw data SICK Safety Scanners publishes data laser_scan msg. ROS1 Driver https://github.com/SICKAG/sick_safetyscanners Table contents Supported Hardware started ROS API Creators Supported Hardware Supported microScan3, nanoScan3 outdoorScan3 variants Ethernet connection. started future ROS2 driver released debian package, build source supported. Prerequisites Linux Working ROS-Distro Correctly setup SICK Safety Scanner Connected SICK Safety Scanner correctly setup ethernet network. host sensor network. Installation Dependencies Dependencies installed sudo apt-get install ros-<rosdistro>-sick-safetyscanners2-interfaces sudo apt-get install ros-<rosdistro>-sick-safetyscanners-base sources sick_safetyscanners_base (https://github.com/SICKAG/sick_safetyscanners_base) sick_safetyscanners2_interfaces (https://github.com/SICKAG/sick_safetyscanners2_interfaces) Source source /opt/ros/<rosdistro>/setup.bash mkdir ~/colcon_ws/src/ ~/colcon_ws/src/ git clone https://github.com/SICKAG/sick_safetyscanners2.git colcon build --symlink-install source ~/colcon_ws/install/setup.sh Starting Classic Node start driver launch file started. driver work correctly, sensor host defined. parameters passed sensor arguments launch file. ros2 launch sick_safetyscanners2 sick_safetyscanners2_launch.py start driver launch file defined parameters. Lifecycle Node start driver lifecycle launch file started. driver work correctly, sensor host defined. parameters passed sensor arguments launch file. ros2 launch sick_safetyscanners2 sick_safetyscanners2_lifecycle_launch.py start driver launch file defined parameters. configure activate lifecycle node commands issued: Configure ros2 lifecycle set /sick_safetyscanners2_lifecycle_node configure //Activate ros2 lifecycle set /sick_safetyscanners2_lifecycle_node activate Visualization visualize data start rviz2 subscribe ~/scan topic. default frame_id \u201cscan\u201d customized launch file rviz2 File truncated lines full file"},
{"url": "https://index.ros.org/p/sick_safetyscanners2_interfaces", "package": "sick_safetyscanners2_interfaces", "package_summary": "Interfaces for the sick_safetyscanners ros2 driver", "package_details": "SICK Safetyscanner ROS2 Interfaces package interfaces ROS2 driver SICK Safetyscanners. includes message service definitions Extended Laser Scan Includes detected reflectors. Output Paths status configured output paths. Raw Data data sensor processing. Field Data service returning protective warning field geometries mapping respective output paths."},
{"url": "https://index.ros.org/p/sick_safetyscanners_base", "package": "sick_safetyscanners_base", "package_summary": "Provides an Interface to read the sensor output of a SICK\n  Safety Scanner", "package_details": "Sick_Safetyscanners_Base CPP Driver Table contents Supported Hardware started API Creators CPP standalone Driver reads raw data SICK Safety Scanners takes custom functions publish data. Supported Hardware Supported microScan3, nanoScan3 outdoorScan3 variants Ethernet connection. started driver released github repository, installed source. Prerequisites Linux Correctly setup SICK Safety Scanner Connected SICK Safety Scanner correctly setup ethernet network. host sensor network. Installed libboost Installation installation github repository cloned installed. custom install directory wanted -DCMAKE_INSTALL_PREFIX option path. git clone https://github.com/SICKAG/sick_safetyscanners_base.git sick_safetyscanners_base mkdir build build cmake -DCMAKE_INSTALL_PREFIX=<path install folder> install Usage library driver path installation added cmake prefix path application. achieve bevor invoking cmake application. export CMAKE_PREFIX_PATH=<path install folder> driver settings driver included #include <sick_safetyscanners_base/SickSafetyscanners.h> #include <sick_safetyscanners_base/Exceptions.h> #include <sick_safetyscanners_base/Types.h> #include <sick_safetyscanners_base/datastructure/CommSettings.h> driver running choose synchronous asynchronous APIs based case pass instance boost::asio::io_service constructor AsyncSickSafetyScanner. API Synchronous Client cases driver spawn internal child threads asynchronously process incomming sensor data class. Function Information SyncSickSafetyScanner<br>(sick::types::ip_address_t sensor_ip, <br>sick::types::port_t sensor_port, <br>sick::datastructure::CommSettings comm_settings); Constructor call. bool isDataAvailable(); Non-blocking call wheether sensor data fetch receive-function internal sensor data receiving buffer. const Data receive<br>(sick::types::time_duration_t timeout boost::posix_time::pos_infin); Blocking call receive sensor data packet time. Sensor Port std::string sensor_ip_str sick::types::ip_address_t sensor_ip boost::asio::ip::address_v4::from_string(sensor_ip_str); sick::types::port_t tcp_port Prepare CommSettings Sensor streaming data sick::datastructure::CommSettings comm_settings; std::string host_ip_str comm_settings.host_ip boost::asio::ip::address_v4::from_string(host_ip_str); comm_settings.host_udp_port Create sensor instance auto safety_scanner std::make_unique<sick::SyncSickSafetyScanner>(sensor_ip, tcp_port, comm_settings); Receive sensor data packet auto timeout boost::posix_time::seconds(5); sick::datastructure::Data data safety_scanner->receive(timeout); Asynchronous Client File truncated lines full file"},
{"url": "https://index.ros.org/p/sick_safevisionary_driver", "package": "sick_safevisionary_driver", "package_summary": "Provides an interface to read the sensor output of a SICK Safevisionary sensor in ROS 2", "package_details": "Sick Safevisionary Driver official ROS2 driver Sick safeVisionary2 cameras. top-level readme started. Lifecycle states driver implements thin ROS2 wrapper sick_safevisionary_base library form lifecycle node. contrast conventional ROS2 nodes, lifecycle nodes give control driver\u2019s individual states. handy performing clean reset runtime. You\u2019ll find information individual states state transitions design article. driver\u2019s behavior roughly State Behavior Unconfigured topics advertised previously advertised topics removed. Inactive driver establishes UDP data connection camera processes sensor data publishing. Active driver continuously publishes camera data consistent time stamp topics. Finalized driver shutdown resources cleaned previously advertised topics removed. Managing lifecycle ROS2 command line interface trigger state transitions. commands /sick_safevisionary node primary states: ros2 lifecycle set /sick_safevisionary configure ros2 lifecycle set /sick_safevisionary activate ros2 lifecycle set /sick_safevisionary deactivate ros2 lifecycle set /sick_safevisionary shutdown integration tests Python."},
{"url": "https://index.ros.org/p/sick_safevisionary_interfaces", "package": "sick_safevisionary_interfaces", "package_summary": "Provides interface descriptions to communicate with a SICK Safevisionary Sensor over ROS 2", "package_details": "Sick Safevisionary Interfaces Interface definitions Sick safeVisionary2 driver. Individual build root sourced workspace, call colcon build --packages-select sick_safevisionary_interfaces build package individually."},
{"url": "https://index.ros.org/p/sick_safevisionary_tests", "package": "sick_safevisionary_tests", "package_summary": "Integration tests for the Sick SafeVisionary2 driver", "package_details": "Sick Safevisionary Tests Integration tests high-level concept validation Sick safeVisionary2 driver. information integration tests ROS2 Run tests manually root sourced workspace, call colcon test --packages-select sick_safevisionary_tests colcon test-result --verbose run inspect integration tests locally. clean test results outdated errors colcon test-result --delete-yes"},
{"url": "https://index.ros.org/p/simple_actions", "package": "simple_actions", "package_summary": "Simple library for using the `rclpy/rclcpp` action libraries", "package_details": "simple_actions simple version rclpy/rclcpp action libraries. Key Design Principles simple situations active goals. people future long head hurting. Callbacks/methods deal regular Goal/Feedback/Result methods, wrapped versions. Action Client connect server quickly, warning printed waits, message report finally connect. Implementations SimpleActionServer (Python) SimpleActionServer SimpleActionClient (Python) SimpleActionClient"},
{"url": "https://index.ros.org/p/simple_launch", "package": "simple_launch", "package_summary": "Python helper class for the ROS 2 launch system", "package_details": "simple_launch package Python class writing ROS launch files. motivation package ROS launch Python syntax suited simple cases running basic nodes, spawning robot_state_publisher, grouping nodes namespaces components. package inspired ros2_launch_util. entry point SimpleLauncher class, capabilities. Basic syntax Namespace argument parser initialization SimpleLauncher(namespace use_sim_time scope_included_files False) initialize nodes relative namespace use_sim_time Boolean, creates use_sim_time launch argument default forwards nodes, explicitely running node use_sim_time 'auto', SimpleLauncher set True /clock topic advertized (case running simulation). side effects /clock topic advertized launch file system clock. use_sim_time (default) forwarded nodes scope_included_files False (default) including launch file shares argument passing argument, modify argument inclusion. default behavior launch undesired. OpaqueFunction behavior scoped argument resolved) scope_included_files effect. Node registration sl.node(package, executable, **node_args) package node package executable executable node_args additional Node arguments Launch file include sl.include(package, launch_file, launch_dir launch_arguments=None) package package included launch file launch_file launch file launch_dir directory package share launch_arguments dictionary arguments pass included launch file Call service launch line runs temporary client waits service calls sl.call_service(server, request verbosity server path service (possibly namespaced). service type deduced request dictionary representing service request. incomplete, service request default values. verbosity underlying node describe 'req' request info, 'res' response info 'reqres' request parameter changed current namespace. Setting parameters line runs temporary client waits node parameters sl.set_parameters(node_name, parameters: dict verbosity node_name node (possibly namespaced) parameters dictionary parameters set verbosity underlying node describe 'req' request info, 'res' response info 'reqres' calls set_parameters service node passed types. errors happen parameters exist type. Robust types parameters launch API, differents types expected node parameters: list dictionaries node remappings: list (key, pairs included launch arguments: list (key, pairs xacro arguments: concatenation key:=value strings sl.include, sl.node xacro_args calls type simplest single dictionary) convert expected API. Launch arguments simple_launch declaring launch arguments return. Declare launch argument sl.declare_arg(name, default_value, description declare returns argument Contrary base API, default raw Python type. Retrieve launch argument sl.arg(name): returns argument SimpleSubstitution Retrieve arguments dictionary sl.arg_map('robot', 'x', 'y'): returns {'robot': <robot arg 'x': arg 'y': arg Typical forwarding launch arguments node included launch file. Groups scopes Groups created sl.group(): syntax accept, namespace if/unless condition event. Actions added scope inherit previous defined groups. File truncated lines full file"},
{"url": "https://index.ros.org/p/situational_graphs_datasets", "package": "situational_graphs_datasets", "package_summary": "Graph datasets for situational_graphs_reasoning repo", "package_details": "Situational Graphs Datasets Situational Graphs Datasets python library Situational Graphs Reasoning utility. generate, manages transforms synthetic Scene Graphs structured indoor environments. Situational Graphs Reasoning employes purposes: Generation training data. Transformation preparation real data."},
{"url": "https://index.ros.org/p/situational_graphs_msgs", "package": "situational_graphs_msgs", "package_summary": "Custom messages for s_graphs", "package_details": "Situational Graphs Messages Custom messages s_graphs repo dependencies."},
{"url": "https://index.ros.org/p/situational_graphs_reasoning", "package": "situational_graphs_reasoning", "package_summary": "Graph reasoning for extracting semantic concepts using GNNs", "package_details": "Situational Graphs Reasoning Situational Graphs Reasoning ROS2 package generating real-time semantic concepts Rooms Walls Wall Surfaces S-Graphs. purpose, Graph Neural Networks (GNNs) estimate existing relations wall surfaces. Table contents Published Papers Installation Installation S-Graphs Installation Source Usage Configuration files ROS Related Subscribed Topics Published Topics Published Papers Learning High-level Semantic-Relational Concepts SLAM Installation [!NOTE] Situational Graphs Reasoning tested Ubuntu ROS2 Foxy, Humble Distros. strongly recommend cyclone_dds default fastdds. Installation S-Graphs Follow S-Graphs installation instructions Installation Source [!IMPORTANT] proceeding, rosdep installed. install sudo apt-get install python3-rosdep addition, ssh keys needed configured GitHub account. haven\u2019t configured ssh keys, follow tutorial Update Rosdep: rosdep init rosdep update --include-eol-distros Create ROS2 workspace S-Graphs mkdir $HOME/workspaces $HOME/workspaces Clone S-Graphs repository created workspace git clone git@github.com:snt-arg/situational_graphs_reasoning.git develop [!IMPORTANT] Nvidia GPU install CUDA link. code tested CUDA dont CUDA S-Graphs CPU Install required dependencies. Change $ROS_DISTRO ros2 version. situational_graphs_reasoning source /opt/ros/$ROS_DISTRO/setup.sh pip3 install requirements.txt [!NOTE] compile debug traces backward_cpp) run: colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo Usage Follow S-Graphs instructions package functionalities. launch situational_graphs_reasoning.py. Configuration files File Description config/same_room_training.json Describes data preprocessing GNN hyperparameters room generation. config/same_wall_training.json Describes data preprocessing GNN hyperparameters wall generation. ROS Related Subscribed Topics situational_graphs_reasoning_node node Topic Message Type Description File truncated lines full file"},
{"url": "https://index.ros.org/p/situational_graphs_reasoning_msgs", "package": "situational_graphs_reasoning_msgs", "package_summary": "Custom reasoning msgs", "package_details": "Situational Graphs Reasoning msgs Situational Graphs Reasoning msgs ROS2 package messages related utility Reasoning, employed generate semantic concepts S-Graphs. Messages Match [string] basis_nodes [Node[]] target_nodes [Node[]] edges [Edge[]] Graph [string] nodes [Node[]] edges [Edge[]] Node [int32] type [string] attributes [Attribute[]] Edge origin_node [int64] target_node [int64] attributes [Attribute[]] Attribute [string] str_value [string] fl_value [float64[]]"},
{"url": "https://index.ros.org/p/situational_graphs_wrapper", "package": "situational_graphs_wrapper", "package_summary": "Graph wrapper for situational_graphs_wrapper repo", "package_details": "Situational Graphs Wrapper Situational Graphs Wrapper python library Situational Graphs Reasoning utility add custom layer Networkx graph management."},
{"url": "https://index.ros.org/p/soccer_vision_2d_msgs", "package": "soccer_vision_2d_msgs", "package_summary": "A package containing some 2D vision related message definitions in the soccer domain.", "package_details": "soccer_vision_2d_msgs package messages visually detected objects soccer field, balls, field markings robots. Documentation documentation, Soccer Vision Msgs."},
{"url": "https://index.ros.org/p/soccer_vision_3d_msgs", "package": "soccer_vision_3d_msgs", "package_summary": "A package containing some 3D vision related message definitions in the soccer domain.", "package_details": "soccer_vision_3d_msgs package messages visually detected objects soccer field, balls, field markings robots Documentation documentation, Soccer Vision Msgs."},
{"url": "https://index.ros.org/p/soccer_vision_attribute_msgs", "package": "soccer_vision_attribute_msgs", "package_summary": "A package containing attributes of objects in 2d/3d vision in the soccer domain.", "package_details": "soccer_vision_attribute_msgs package messages attributes objects soccer field, balls, field markings robots, visually detected. attributes defined separatly soccer_vision_2d_msgs soccer_vision_3d_msgs, due large overlap information, package aims abstract attributes aren\u2019t specific vision. soccer_vision_2d_msgs soccer_vision_3d_msgs depend package. Documentation documentation, Soccer Vision Attribute Msgs."},
{"url": "https://index.ros.org/p/soccer_object_msgs", "package": "soccer_object_msgs", "package_summary": "Package providing interfaces for objects in a soccer domain.", "package_details": "soccer_object_msgs Package ROS2 interfaces related Soccer. information, Documentation"},
{"url": "https://index.ros.org/p/sol_vendor", "package": "sol_vendor", "package_summary": "vendor package for the sol2 library", "package_details": "sol_vendor"},
{"url": "https://index.ros.org/p/sophus", "package": "sophus", "package_summary": "C++ implementation of Lie Groups using Eigen.", "package_details": "windows: Sophus Overview implementation Lie groups commonly geometric problems Computer Vision Robotics applications). package includes special orthogonal groups present rotations special Euclidean group represent rigid body transformations rotations translations) API documentation: https://strasdat.github.io/Sophus/ Cross platform support Sophus compiles clang gcc Linux msvc Windows. specific compiler operating system versions supported Continuous Integration GitHubCI AppVeyor details. work minor modification) modern configurations long support CMake, Eigen (optionally) fmt. fmt dependency eliminated passing \"-DUSE_BASIC_LOGGING=ON\" cmake configuring Sophus."},
{"url": "https://index.ros.org/p/spdlog_vendor", "package": "spdlog_vendor", "package_summary": "Wrapper around spdlog, providing nothing but a dependency on spdlog, on some systems.\n    On others, it provides an ExternalProject build of spdlog.", "package_details": "spdlog_vendor CMake shim spdlog library: https://github.com/gabime/spdlog.git Quality Declaration files Quality declaration package: spdlog_vendor Quality declaration spdlog: spdlog"},
{"url": "https://index.ros.org/p/sros2_cmake", "package": "sros2_cmake", "package_summary": "CMake macros to configure security", "package_details": "Security Helper Add authentication, cryptography, access control security keys cmake macro. macro generate secure root directory exists, create authentication cryptography keys. package.xml add: <depend>sros2_cmake</depend> CMakeLists add: find_package(sros2_cmake REQUIRED) sros2_generate_artifacts(ENCLAVES <enclave_name>) Macro definition: sros2_generate_artifacts(ENCLAVES <enclave_1> <enclave_2>...<enclave_n>) ENCLAVES (macro multi-arg) takes enclaves names keys generated Executables enclaves. nodes process enclave. SECURITY (cmake arg) define generate key/keystores ROS_SECURITY_KEYSTORE (env variable) location keystore POLICY_FILE (cmake arg) defined, generate security artifacts enclave defined policy file."},
{"url": "https://index.ros.org/p/stomp", "package": "stomp", "package_summary": "This package  provides the STOMP (Stochastic Trajectory Optimization for Motion Planning) algorithm that can be used for robot motion planning tasks or other similar optimization tasks", "package_details": "stomp_ros Build Status Platform Status Linux (Focal) Linux (Bionic) Windows Lint (Clang-Format) Lint (CMake-Format) Build Build workspace: catkin workspace directory type command: catkin build Build Unit Test catkin workspace directory type command: catkin build --cmake-args -DSTOMP_ENABLE_TESTING=ON Run Unit Test catkin workspace stomp build directory type command: ctest"},
{"url": "https://index.ros.org/p/launch_system_modes", "package": "launch_system_modes", "package_summary": "System modes specific extensions to the launch tool, i.e. launch actions, events, and event\n    handlers for system modes.", "package_details": "General information repository, including legal information, build instructions issues/limitations, README repository root. launch_system_modes package ROS package launch actions, events, event handlers system_modes package. General information repository, including legal information, project context, build instructions issues/limitations, README.md repository root. Launch System Modes Package actions, events, event handlers implemented system modes Actions launch actions implemented system modes: System: Declares system, consisting system parts, allowing system mode specific launch events event handlers. Node: Declares node, lifecycle node system modes. inherits launch_ros/lifecycle_node action system mode specific events event handlers. Events ChangeMode: Trigger mode change System Node ChangeState: Trigger state transition System, launch_ros/ChangeState works lifecycle nodes, systems. ModeChanged: Emitted System Node changed mode. StateTransition: Emitted System changed state, launch_ros/StateTransition works lifecycle nodes, systems. Event Handlers OnModeChanged: Event handler mode System Node OnStateTransition: Event handler state transitions System Examples examples show launch_system_modes: system_modes_examples/launch/example_system_start_drive_base.launch.py starts actuation system system parts, nodes drive_base manipulator. trigger configure transition drive_base system part (lines state change handler (lines notices successful transition triggers activate transition drive_base system part (lines state change handler (lines notices successful transition active triggers mode change drive_base system part default mode (lines mode change handler (lines notices successful transition default mode triggers mode change drive_base system part FAST mode (lines system_modes_examples/launch/example_system_started.launch.py starts system, events event handlers system trigger configure transition actuation system (lines state change handler (lines notices successful transition triggers activate transition actuation system (lines mode change handler (lines notices successful transition default mode triggers mode change actuation system PERMORMANCE mode (lines"},
{"url": "https://index.ros.org/p/system_modes", "package": "system_modes", "package_summary": "The system modes concept assumes that a robotics system is built\n    from components with a lifecycle. It adds a notion of (sub-)systems,\n    hiararchically grouping these nodes, as well as a notion of modes\n    that determine the configuration of these nodes and (sub-)systems in\n    terms of their parameter values.", "package_details": "ROS System Modes system modes concept assumes robotics system built components lifecycle. adds notion (sub-)systems, hiararchically grouping nodes, notion modes determine configuration nodes (sub-)systems terms parameter values. list (current future) requirements system modes requirements. General information repository, including legal information, project context, build instructions issues/limitations, README.md repository root. System Modes Package system modes concept implemented package ROS package library system mode inference, mode manager, mode monitor. System Modes Library library consists parser system modes model mode inference mechanism. Hierarchal System Modeling assume system comprise loosely-coupled potentially distributed components runtime lifecycle; hereinafter referred \u2018nodes\u2019. call semantic grouping nodes (sub-)system. assume (sub-)systems hierarchically grouped (sub-)systems, system-of-systems. nodes (sub-)systems belong (sub-)system referred parts (sub-)system. introduced notion (sub-)systems refer concrete software entity, virtual abstraction efficient consistent handling node groups. Note: stage concept, assume entire system up-front. revisions concept care changing systems, nodes and/or (sub-)systems joining runtime. Lifecycle package, assume nodes ROS Lifecycle Nodes. extend ROS default lifecycle aspects: introduce modes specializations ACTIVE state, System Modes. introduce optional transition ACTIVE activating changing modes deactivating node. additionally establish lifecycle (sub-)systems introduced parts system assumed lifecycle. System Modes System modes extend ACTIVE state ROS lifecycle configurations nodes (sub-)systems: Modes nodes consist parameter values. Modes (sub-)system) consist modes parts. node representing actuator provide modes maximum speed maximum torque values. actuation sub-system, grouping actuator nodes, provide modes activate/deactivate contained actuator nodes and/or change modes based modes. system hierarchy system modes system modes hierarchy model file (SHM file, yaml format) parsed mode inference mechanism. SMH file adheres format (curly brackets placeholders, square brackets optional parts, ellipses repeatability): {system}: ros__parameters: type: system parts: {node} modes: __DEFAULT__: {node}: {state}[.{MODE}] {MODE}: {node}: {state}[.{MODE}] {node}: ros__parameters: type: node modes: __DEFAULT__: ros__parameters: {parameter}: {MODE}: ros__parameters: {parameter}: system_modes_examples package shows simple consisting modes system nodes. model file Mode Inference introduced (sub-)systems concrete software entities, state mode inferred states modes parts. inference mechanism part system modes library mode manager mode monitor included package. show system states modes deterministically inferred conditions: Nodes asked state, mode, parameters true, lifecycle nodes provide lifecycle state service (GetState) mode manager mode service (GetMode). Target states modes attempting state mode change system node, mode manager publishes information request. topics latched order nodes inference joining running system. Mode Observer Additionally, library comprises Mode Observer serves local cache states modes observed system parts. mode observer obtain current state mode initially sevrice calls (GetState, GetMode) subsequently monitors transitions events mode events. mode observer supposed instantiated ROS node states modes locally fast access, exemplary ModeObserverNode testing. Mode Manager mode manager ROS node accepts SHM file command line parameter. parses SHM file creates services, publishers, subscribers manage system modes. File truncated lines full file"},
{"url": "https://index.ros.org/p/system_modes_examples", "package": "system_modes_examples", "package_summary": "Example systems and according launch files for the system_modes\n    package.", "package_details": "General information repository, including legal information, build instructions issues/limitations, README repository root. system_modes_examples package ROS package simple system_modes package. ROS LifecycleNodes, drive_base node manipulator node, simple model file (yaml). Model File SMH file example_modes.yaml specifies actuation system consisting drive_base node manipulator node, system modes actuation system, system modes nodes: manipulator node default mode, STRONG mode, WEAK mode, configuring values max_torque. drive_base node default mode, FAST mode, SLOW mode, configuring values max_speed controller (PID MPC). actuation system comprises nodes. default mode, PERFORMANCE mode, MODERATE mode, changing modes nodes additional SMH file example_modes_with_namespaces.yaml demonstates system modes work namespaces. node setup service calls adapted starting manipulator nodes namespaces left resp. Running Setup package provies proper launch configruation, open terminals set system: terminal start drive_base node: ros2 launch system_modes_examples drive_base.launch.py terminal start manipulator node: ros2 launch system_modes_examples manipulator.launch.py terminal start mode_manager model file: ros2 launch system_modes mode_manager.launch.py modelfile:=[path/to]/example_modes.yaml installed binary package model file located /opt/ros/[distribution]/share/system_modes_examples/. built package source, file typically located install/system_modes_examples/share/system_modes_examples/.) mode manager parses SHM model file creates services topics manage system modes nodes services topics manage system modes lifecycle actuation system. launch files launch system_modes_examples package automatically launch nodes ros2 launch system_modes_examples example_system.launch.py launches nodes drive_base, manipulator, mode manager. ros2 launch system_modes_examples example_system_start_drive_base.launch.py launches nodes drive_base, manipulator, mode manager, additionally transitions drive_base FAST mode system modes launch events, launch/example_system_start_drive_base.launch.py#L75-L104. ros2 launch system_modes_examples example_system_started.launch.py launches nodes drive_base, manipulator, mode manager, additionally transitions system PERFORMANCE mode system modes launch events, launch/example_system_started.launch.py#L67-L95. additional terminal, start mode_monitor system modes inference action: ros2 launch system_modes mode_monitor.launch.py modelfile:=[path/to]/example_modes.yaml monitor updates displays current lifecycle states modes system. set system able monitor play Change System States System Modes additional terminal, mimic planning/executive component change state mode system components. Start initializing system inactive. ROS command: ros2 service call /actuation/change_state lifecycle_msgs/ChangeState \"{transition: label: configure}}\" call service mode manager, change state nodes inactive Observe console output mode manager nodes mode monitor. mode monitor display system state: Activate system ROS command: ros2 service call /actuation/change_state lifecycle_msgs/ChangeState \"{transition: label: activate}}\" change actuation system active default mode explicit mode requested), mode manager set drive_base active leave manipulator inactive, model file. mode monitor display system state: Set system PERFORMANCE mode ROS command: ros2 service call /actuation/change_mode system_modes_msgs/ChangeMode \"{mode_name: 'PERFORMANCE'}\" change actuation system PERFORMANCE mode, mode manager change drive_base FAST mode activate manipulator node STRONG mode. mode monitor display system state: Note, system state mode node modes inferred, explained mode inference section system_modes package. play mode inference. change mode nodes explicitly target mode actual mode actuation system diverge. Execute ROS commands: ros2 service call /drive_base/change_mode system_modes_msgs/ChangeMode \"{mode_name: 'SLOW'}\" ros2 service call /manipulator/change_mode system_modes_msgs/ChangeMode \"{mode_name: 'WEAK'}\" mode monitor display system state: Note, mode monitor able infer system\u2019s actual mode MODERATE. based fact nodes active, drive_base SLOW mode, manipulator WEAK mode. requested mode actuation system PERFORMANCE, monitor infers system transitioning target mode, indicating actual system state activating lifecycle). System Recovery order Error Handling Rules action, Bring system PERFORMANCE mode command: ros2 service call /actuation/change_mode system_modes_msgs/ChangeMode \"{mode_name: 'PERFORMANCE'}\" Deactivate manipulator node command: ros2 service call /manipulator/change_state lifecycle_msgs/ChangeState \"{transition: label: deactivate}}\" system detect deviation intended actual system state recognizes rule, degrade_from_PERFORMANCE rule SMH file example_modes.yaml. rule, mode manager sends actuation system default mode. visible logging output terminal running mode manager: rule, bring system PERFORMANCE mode command: ros2 service call /actuation/change_mode system_modes_msgs/ChangeMode \"{mode_name: 'PERFORMANCE'}\" time, deactivate drive_base node command: ros2 service call /drive_base/change_state lifecycle_msgs/ChangeState \"{transition: label: deactivate}}\" system detect deviation intended actual system state recognizes inactive_from_PERFORMANCE rule. mode manager deactivate actuation system."},
{"url": "https://index.ros.org/p/system_modes_msgs", "package": "system_modes_msgs", "package_summary": "Interface package, containing message definitions and service definitions\n    for the system modes package.", "package_details": "ROS System Modes Messages package message types services System Modes Library. Message Types msg/Mode.msg Mode definition, lines lifecycle_msgs State, identifying mode string. msg/ModeEvent.msg Notifies transition system mode, lines lifecycle_msgs TransitionEvent. Services srv/GetMode.srv Requests current mode (sub-)system node, lines lifecycle_msgs GetState srv/GetAvailableModes.srv Requests modes (sub-)system node, lines lifecycle_msgs GetAvailableStates srv/ChangeMode.srv Requests change mode, lines lifecycle_msgs ChangeState"},
{"url": "https://index.ros.org/p/test_launch_system_modes", "package": "test_launch_system_modes", "package_summary": "Launch tests for the launch_system_modes package, i.e. launch actions, events, and event\n    handlers for system modes.", "package_details": "ROS System Modes system modes concept assumes robotics system built components lifecycle. adds notion (sub-)systems, hiararchically grouping nodes, notion modes determine configuration nodes (sub-)systems terms parameter values. General information repository, including legal information, project context, build instructions issues/limitations, README.md repository root. Test Launch System Modes Package test_launch_system_modes package comprises launch tests launch_system_modes project, launch actions, events, event handlers system modes."},
{"url": "https://index.ros.org/p/teleop_twist_joy", "package": "teleop_twist_joy", "package_summary": "Generic joystick teleop for twist robots.", "package_details": "ros2/teleop_twist_joy Overview purpose package provide generic facility tele-operating Twist-based ROS robots standard joystick. converts joy messages velocity commands. node rate limiting autorepeat functionality. expected advantage features built joy Executables package teleop_node republishes sensor_msgs/msg/Joy messages scaled geometry_msgs/msg/Twist messages. message type changed geometry_msgs/msg/TwistStamped publish_stamped_twist parameter. Subscribed Topics joy (sensor_msgs/msg/Joy) Joystick messages translated velocity commands. Published Topics cmd_vel (geometry_msgs/msg/Twist geometry_msgs/msg/TwistStamped) Command velocity messages arising Joystick commands. Parameters require_enable_button (bool, default: true) require enable button enabling movement. enable_button (int, default: Joystick button enable regular-speed movement. enable_turbo_button (int, default: Joystick button enable high-speed movement (disabled axis_linear.<axis> Joystick axis linear movement control. axis_linear.x (int, default: axis_linear.y (int, default: axis_linear.z (int, default: scale_linear.<axis> Scale apply joystick linear axis regular-speed movement. scale_linear.x (double, default: scale_linear.y (double, default: scale_linear.z (double, default: scale_linear_turbo.<axis> Scale apply joystick linear axis high-speed movement. scale_linear_turbo.x (double, default: scale_linear_turbo.y (double, default: scale_linear_turbo.z (double, default: axis_angular.<axis> Joystick axis angular movement control. axis_angular.yaw (int, default: axis_angular.pitch (int, default: axis_angular.roll (int, default: scale_angular.<axis> Scale apply joystick angular axis. scale_angular.yaw (double, default: scale_angular.pitch (double, default: scale_angular.roll (double, default: scale_angular_turbo.<axis> Scale apply joystick angular axis high-speed movement. scale_angular_turbo.yaw (double, default: scale_angular_turbo.pitch (double, default: scale_angular_turbo.roll (double, default: inverted_reverse (bool, default: false) invert turning left-right reversing differential wheeled robots). publish_stamped_twist (bool, default: false) publish geometry_msgs/msg/TwistStamped command velocity messages. frame (string, default: 'teleop_twist_joy') Frame header TwistStamped messages. Usage Install users building source required, execute apt-get install ros-<rosdistro>-teleop-twist-joy install. Run launch file arguments changed terminal launch file. configure node match joystick config file common package (atk3, ps3-holonomic, xbox, located https://github.com/ros2/teleop_twist_joy/tree/humble/config. default, run config xbox) ros2 launch teleop_twist_joy teleop-launch.py joy_config:='xbox' Note: launch file launches joy node run separately. Arguments joy_config (string, default: 'ps3') Config file joy_dev (string, default: File truncated lines full file"},
{"url": "https://index.ros.org/p/teleop_twist_keyboard", "package": "teleop_twist_keyboard", "package_summary": "A robot-agnostic teleoperation node to convert keyboard commands to Twist\n    messages.", "package_details": "teleop_twist_keyboard Generic Keyboard Teleoperation ROS Run ros2 run teleop_twist_keyboard teleop_twist_keyboard Publishing topic case my_cmd_vel). ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap cmd_vel:=my_cmd_vel Usage node takes keypresses keyboard publishes Twist messages. works keyboard layout. Moving Holonomic mode (strafing), hold shift key: stop increase/decrease max speeds increase/decrease linear speed increase/decrease angular speed CTRL-C quit Parameters stamped (bool, default: false) false default), publish geometry_msgs/msg/Twist message. true, publish geometry_msgs/msg/TwistStamped message. frame_id (string, default: stamped true, frame_id publishing geometry_msgs/msg/TwistStamped message. speed (double, default: speed node starts default. turn (double, default: turn rate (rad/s) node starts default."},
{"url": "https://index.ros.org/p/tensorrt_cmake_module", "package": "tensorrt_cmake_module", "package_summary": "Exports a CMake module to find TensorRT.", "package_details": "tensorrt_cmake_module CMake module find TensorRT."},
{"url": "https://index.ros.org/p/tf_transformations", "package": "tf_transformations", "package_summary": "Reimplementation of the tf/transformations.py library for common Python spatial operations", "package_details": "tf_transformations Context ROS library helpful transformations.py module rotation-based conversions. Quoting ROS wiki page package includes popular transformations.py module. TransformerROS transformations.py perform conversions quaternions matrices. transformations.py has[sic] conversion numpy matrices; convert transformations Euler angles, quaternions, matrices. supported distros ROS library widely sorts angular conversions rospy code. ROS supports confused equivalent library. Quoting (Tully Foote) ROS Answers, tf.transformations fork https://github.com/cgohlke/transformations/. package deprecated \u201cTransformations.py longer actively developed issues numerical instabilities.\u201d recommended alternative package called transforms3d. originally pip apt package managers rosdistro. library obstacles porting ROS code ROS difficult. API API consistent naming, one-to-one translation. tf.transformations.quaternion_from_euler replaced transforms3d.euler.euler2quat, returns quaternion ordering transforms3d returns functions migrated. noted transforms3d Refactoring Plan, functions integrate\u201d pile. Migration you\u2019re migrate code easily. options: transforms3d adding dependency python3-transforms3d package.xml noting differences API discussed library tf_transformations. wrote ROS tf.transformations import euler_from_quaternion change code ROS tf_transformations import euler_from_quaternion Note ROS DOT transformations ROS UNDERSCORE transformations. add dependency tf_transformations package.xml Installation package full ROS binary, install sudo apt install ros-$ROSDISTRO-tf-transformations older versions, manually install transforms3d library pip. sudo pip3 install transforms3d Implementation library transforms3d math functions. functions Refactoring Plan, original implementation left place. ideal maintain math functions, complexity geometry hand, future, effort fix problems upstream replace implementations package upstream versions. original transformations.py library remarkably stable. commits entire Git history initial commit porting Python3, line cosmetic change). hope package maintenance correct problems. Special package rests shoulders giants, author Christoph Gohlke [github] Matthew Brett."},
{"url": "https://index.ros.org/p/tinyspline_vendor", "package": "tinyspline_vendor", "package_summary": "The vendor package for tinyspline.", "package_details": "tinyspline_vendor CMake wrapper tinyspline library. Usage find_package(tinyspline_vendor REQUIRED) tinyspline library find_package(tinyspline REQUIRED) target_link_libraries(${PROJECT_NAME} tinyspline::tinyspline tinyspline library find_package(tinysplinecxx REQUIRED) target_link_libraries(${PROJECT_NAME} tinysplinecxx::tinysplinecxx"},
{"url": "https://index.ros.org/p/tinyxml2_vendor", "package": "tinyxml2_vendor", "package_summary": "Wrapper around tinyxml2, providing nothing but a dependency on tinyxml2, on some systems.\n    On others, it provides a fixed CMake module or even an ExternalProject build of tinyxml2.", "package_details": "tinyxml2_vendor temporary vendor package tinyxml2"},
{"url": "https://index.ros.org/p/tinyxml_vendor", "package": "tinyxml_vendor", "package_summary": "CMake shim over the tinxml library.", "package_details": "tinyxml_vendor Vendor package providing tinyxml cmake package"},
{"url": "https://index.ros.org/p/tlsf", "package": "tlsf", "package_summary": "TLSF allocator version 2.4.6", "package_details": "package snapshot TLSF version downloaded .tar http://www.gii.upv.es/tlsf/main/repo Github repository: https://github.com/emeryberger/Malloc-Implementations/tree/master/allocators/TLSF/TLSF-2.4.6"},
{"url": "https://index.ros.org/p/topic_based_ros2_control", "package": "topic_based_ros2_control", "package_summary": "ros2 control hardware interface for topic_based sim", "package_details": "Topic Based Ros2 Control Description: ROS package integrating ros2_control system topics command robot publish state. Documentation Installation User Guide Developers Guide"},
{"url": "https://index.ros.org/p/tracetools_acceleration", "package": "tracetools_acceleration", "package_summary": "LTTng tracing provider wrapper for ROS 2 packages using hardware acceleration.\n    Fork of tracetools to trace hardware acceleration in ROS 2.", "package_details": "tracetools_acceleration LTTng tracing provider wrapper ROS packages hardware acceleration. tracetools_acceleration fork tracetools, refer package original work. Quality Declaration quality claimed REP-2004."},
{"url": "https://index.ros.org/p/io_context", "package": "io_context", "package_summary": "A library to write Synchronous and Asynchronous networking applications", "package_details": "Context library write synchronous asynchronous networking applications."},
{"url": "https://index.ros.org/p/serial_driver", "package": "serial_driver", "package_summary": "A template class and associated utilities which encapsulate basic reading from serial ports", "package_details": "Serial Driver package encapsulates basic receiving sending serial data. package executabe: serial_bridge: combined receiver sender nodes package serial_driver library ROS2 dependencies"},
{"url": "https://index.ros.org/p/udp_driver", "package": "udp_driver", "package_summary": "A library to write Synchronous and Asynchronous networking applications, ROS and ROS2 nodes", "package_details": "UDP Driver package encapsulates basic receving sending udp data. package executabes: udp_receiver_node_exe: receive UDP data udp_sender_node_exe: send UDP data asynchronosouly udp_bridge_node_exe: combined receiver sender nodes package udp_driver library ROS2 dependencies"},
{"url": "https://index.ros.org/p/twist_stamper", "package": "twist_stamper", "package_summary": "ROS2 package for converting between Twist and TwistStamped messages", "package_details": "twist_stamper ROS2 package converting Twist TwistStamped messages. package nodes, twist_stamper twist_unstamper easy conversion Usage twist_stamper twist_stamper node converts Twist messages TwistStamped. topics parameters /cmd_vel_in Twist topic listen /cmd_vel_out TwistStamped topic publish frame_id Parameter set output frame (default node teleop_twist_joy publishing Twist message topic /cmd_vel expecting TwistStamped message my_frame frame /my_node/cmd_vel command: ```ros2 run twist_stamper twist_stamper \u2013ros-args cmd_vel_in:=cmd_vel cmd_vel_out:=my_node/cmd_vel frame_id:=my_frame unsure, leave `frame_id` empty. twist_unstamper `twist_unstamper` node converts `TwistStamped` messages `Twist`. topics parameters `/cmd_vel_in` `TwistStamped` topic listen `/cmd_vel_out` `Twist` topic publish node publishing `TwistStamped` message topic `/cmd_vel_stamped` expecting `Twist` message `/my_node/cmd_vel` command: ```ros2 run twist_stamper twist_unstamper --ros-args cmd_vel_in:=cmd_vel_stamped cmd_vel_out:=my_node/cmd_vel"},
{"url": "https://index.ros.org/p/uncrustify_vendor", "package": "uncrustify_vendor", "package_summary": "Wrapper around uncrustify, providing nothing but a dependency on uncrustify, on some systems.\n    On others, it provides an ExternalProject build of uncrustify.", "package_details": "uncrustify_vendor CMake shim uncrustify library: https://github.com/uncrustify/uncrustify"},
{"url": "https://index.ros.org/p/unique_identifier_msgs", "package": "unique_identifier_msgs", "package_summary": "ROS messages for universally unique identifiers.", "package_details": "unique_identifier_msgs ROS messages Universally Unique Identifiers. information UUIDs, wikipedia UUID specification. information ROS interfaces, interfaces documentation. Messages (.msg) UUID: universally unique identifier (UUID). Quality Declaration package claims Quality Level category, Quality Declaration details."},
{"url": "https://index.ros.org/p/unitree_ros", "package": "unitree_ros", "package_summary": "Unitree ros package", "package_details": "Unitree ROS2 Driver ROS2 package control legged robot Unitree ROS topics. package acts middleware ROS2 unitree_legged_sdk, enables control robot velocity commands receive robot state. additional features standing up/down robot head LEDs status information. [!NOTE] supports unitree_legged_sdk High level commands Table Contents Installation Installation Source Usage ROS Related Subscribed Topics Published Topics ROS Parameters Features Robot LED statuses Battery Protection Obstacle Avoidance Related Packages License Contributions Credits Maintainers Third-party Assets Installation package ROS index Iron Humble distributions. sudo apt install ros-[distro]-unitree-ros [!IMPORTANT] foxy ROS distribution, build source Installation Source [!NOTE] clone recursively, depends unitree_legged_sdk. mkdir ~/unitree_ws/src ~/unitree_ws/src git clone --recurse-submodules https://github.com/snt-arg/unitree_ros.git cloned repository, build Colcon. ~/unitree_ws source /opt/ros/[ros-distro]/setup.bash zsh zsh shell! colcon build --symlink-install source install/setup.bash zsh zsh shell! built workspace, able driver control robot. Usage driver wired Wi-Fi connection. default, set wired connection. launch driver, launch file wired connection command: ros2 launch unitree_ros unitree_driver_launch.py Wi-Fi connection command: ros2 launch unitree_ros unitree_driver_launch.py wifi:=true case prefer modify parameters, passing parameters file. default parameters config/params.yaml ros2 launch unitree_ros unitree_driver_launch.py params_file:=\"path_to_your_params_file\" #wifi:=true/false ROS Related File truncated lines full file"},
{"url": "https://index.ros.org/p/ur_description", "package": "ur_description", "package_summary": "URDF description for Universal Robots", "package_details": "Universal_Robots_ROS2_Description repository description files meshes Universal Robots manipulators. Build status ROS2 Distro Branch Build status Released packages Humble humble ur_description Jazzy jazzy ur_description Kilted rolling ur_description Rolling rolling ur_description detailed build status shows state workflows repo. note detailed view intended developers, give users overview current released state. License UR8LONG meshes, meshes, meshes, meshes meshes constitutes \u201cGraphical Documentation\u201d subject governed \u201cTerms Conditions Graphical Documentation\u201d. Universal Robots\u2019 Terms Conditions Graphical Documentation fully comply OSI\u2019s definition Open Source, modify share \u201cGraphical Documentation\u201d, including UR8LONG meshes, meshes, meshes, meshes, subject restrictions. questions license license doesn\u2019t fit use-case, contact legal@universal-robots.com. content licensed BSD-3-Clause license Structure repository relevant files urdf/ur_macro.xacro macro file UR-manipulator description. file included external projects visualize configure manipulators properly. macro urdf/ur.urdf.xacro file. urdf/ur.ros2_control.xacro definition manipulator\u2019s joints interfaces ros2_control framework. Testing description manipulator visualize robot install repository workspace execute ros2 launch ur_description view_ur.launch.py ur_type:=ur5e test descriptions change ur_type argument. Package Description structure package description robots. robot variants configured configuration files. files changed customizing description. Basically, description modified configuration values stored files: config/urXX/default_kinematics.yaml calibration values extracted robot. Changing values extracted real robot result description matching real robot (w.r.t tool0 frame). highly recommended matching kinematic values real-world applications. config/urXX/joint_limits.yaml you\u2019d restrict robot\u2019s joint limits, limits modified config/urXX/physical_parameters.yaml physics simulation parameters inertia poses values) tuned config/urXX/visual_parameters.yaml users change visual aspects, replacing cap wrist_3_link. config file specifies meshes visual collision) configuration files passed ur_macro.urdf specific macro defined file) ur.urdf.xacro. Contents files parsed ur_common.xacro. Arguments passed main ur.urdf.xacro file kinematics_params Filename default_kinematics.yaml equivalent specific kinematics) file joint_limit_params Filename joint_limits.yaml file physical_params Filename physical_parameters.yaml file visual_params Filename visual_params.yaml file launchfile launch/view_ur.launch.py abstracts parameters ur_type argument basically replace urXX part paths shown picture Creating description including description real-world applications complex description consisting objects robot. recommended create separate ROS package description. description store robot-specific kinematics parameters file. mentioned urdf/ur.urdf.xacro file integrate robot scene description. Basically, create copy file extend modifications specific scene."},
{"url": "https://index.ros.org/p/ur_calibration", "package": "ur_calibration", "package_summary": "Package for extracting the factory calibration from a UR robot and change it such that it can be used by ur_description to gain a correct URDF", "package_details": "ur_calibration Package extracting factory calibration robot changing ur_description gain correct URDF model. robot calibrated factory giving exact inverse kinematics. ROS, extract calibration information robot. step control robot driver, highly recommended effector positions magnitude centimeters. Nodes calibration_correction node extracts calibration information robot, calculates URDF correction saves .yaml file. launch folder ur_calibration package helper script: ros2 launch ur_calibration calibration_correction.launch.py robot_ip:=<robot_ip> target_filename:=\"${HOME}/my_robot_calibration.yaml\" parameter robot_ip insert address ROS reach robot. target_filename provide absolute path result saved Creating calibration launch package local robots dealing multiple robots organization sense store calibration data package dedicated purpose create package doesn\u2019t exist) Replace actual colcon_ws folder <colcon_ws>/src ros2 pkg create <organization_name>_ur_launch --build-type ament_cmake --dependencies ur_client_library --description \"Package calibrations launch files robots.\" Create skeleton package mkdir <organization_name>_ur_launch/etc mkdir <organization_name>_ur_launch/launch echo 'install(DIRECTORY launch DESTINATION share/${PROJECT_NAME})' <organization_name>_ur_launch/CMakeLists.txt colcon build --packages-select <organization_name>_ur_launch package store calibration data package. recommend naming robot individually, ex-ur10-1. ros2 launch ur_calibration calibration_correction.launch.py robot_ip:=<robot_ip> target_filename:=\"$(ros2 pkg prefix <organization_name>_ur_launch)/share/<organization_name>_ur_launch/etc/ex-ur10-1_calibration.yaml\" life easier, create launchfile robot. base respective launchfile driver: Replace actual colcon_ws folder <colcon_ws>/src/<organization_name>_ur_launch/launch $(ros2 pkg prefix ur_robot_driver)/share/ur_robot_driver/launch/ur_control.launch.py ex-ur10-1.launch.py modify parameter section launchfile match actual calibration: kinematics_params PathJoinSubstitution( [FindPackageShare(\"<organization_name>_ur_launch\"), \"ex-ur10-1_calibration.yaml\"] cloning repository startup robot simply launching Replace actual colcon_ws folder <colcon_ws> colcon build --packages-select <organization_name>_ur_launch ros2 launch <organization_name>_ur_launch ex-ur10-1.launch.py robot_ip:=xxx.yyy.zzz.www ur_type:=ur5e use_fake_hardware:=false launch_rviz:=true"},
{"url": "https://index.ros.org/p/ur_controllers", "package": "ur_controllers", "package_summary": "Provides controllers that use the speed scaling interface of Universal Robots.", "package_details": "ur_controllers package controllers hardware interface ros_control special robot family. speed_scaling_interface read current speed scaling controllers. scaled_joint_command_interface access joint values commands combination speed scaling speed_scaling_state_controller publishes current execution speed reported robot topic interface. Values floating points scaled_joint_trajectory_controller similar joint_trajectory_controller, speed scaling reported robot reduce progress trajectory. package package controllers default ros_control set. created support features offered robot family. controllers implementations features intended generalized merged default ros_control controller set future point. Controller description packages offers couple specific controllers explained sections. ur_controllers/SpeedScalingStateBroadcaster controller publishes current actual execution speed reported robot. Values floating points ur_robot_driver calculated multiplying RTDE data fields speed_scaling equal shown speed slider position teach pendant) target_speed_fraction fraction execution slowed controller). position_controllers/ScaledJointTrajectoryController velocity_controllers/ScaledJointTrajectoryController controllers work similar well-known joint_trajectory_controller. extended handle robot\u2019s execution speed specifically. default joint_trajectory_controller interpolate trajectory configured time constraints assume maximum velocity acceleration supported robot), lead significant path deviation due multiple reasons: speed slider robot motion commands ROS effectively scaled resulting slower execution. robot scale motions based configured safety limits resulting slower motion expected reaching desired target control cycle. Motions executed robot E-stopped protective stop Motion commands robot interpreted, external_control program node running robot controller. program interpreting motion commands paused. plot illustrates problem: graph shows trajectory joint moved target point starting point. joint\u2019s speed limited setting teach pendant, speed scaling (black line) activates limits joint speed (green line). result, target trajectory (light blue) doesn\u2019t executed robot, pink trajectory executed. vertical distance light blue line pink line path error control cycle. path deviation degrees point target point radians reached. cases mentioned addressed scaled trajectory versions. Trajectory execution transparently scaled speed slider teach pendant leading additional path deviations. Pausing program hitting E-stop effectively leads speed_scaling meaning trajectory continued program continued. trajectory executions explicitly paused continued. scaled version trajectory controller motion shown previous diagram deviation trajectory interpolation ROS side actual robot execution stays minimal robot reaches intermediate setpoint returning early\u201d hood implemented proceeding trajectory full time step fraction determined current speed scaling. speed scaling interpolation current control cycle start time step beginning previous control cycle."},
{"url": "https://index.ros.org/p/ur_robot_driver", "package": "ur_robot_driver", "package_summary": "The new driver for Universal Robots UR3, UR5 and UR10 robots with CB3 controllers and the e-series.", "package_details": "ur_robot_driver package actual driver robots. part universal_robots_driver repository requires packages repository. main repository\u2019s README information install startup driver. ROS-API ROS API documented standalone document. Technical details image shows coarse overview driver\u2019s architecture. connection primary interface robot sends version calibration information consumed calibration_check. calibration reported robot doesn\u2019t match configured calibration guide) error printed Roslog. Real-time data robot read RTDE interface. automatically connection robot established. joint states data immediately control robot, program node External Control URCap running robot interpreting commands external source. program running, controllers moving robot initial setup guide install start robot. URScript running robot requested External Control program node remote ROS robot ur_control.launch file parameter called urscript_file select program default response program request. Custom script snippets robot topic basis. default, interrupt programs controlling robot). subset functions, send secondary programs. documentation details. Note e-Series users: robot won\u2019t accept script code remote source robot put remote_control-mode. put remote_control-mode, program External Control program node started panel. purpose, dashboard services load, start stop main program running robot. ROS-API documentation details dashboard services. tool communication interface e-Series robots, socat script prepared robot\u2019s tool communication interface local device ROS tool communication setup guide details. driver ROS-Control control statements. position-based controllers ROS-Control. recommend controllers ur_controllers package. documentation details. Note: Speed scaling support controllers ur_controllers note modes term mode meanings driver. Remote control mode e-series robot operate command modes: local control mode teach pendant single point command remote control mode, motions starting loading programs activating freedrive mode blocked. Note remote control mode explicitly enabled robot\u2019s settings Settings System Remote Control. robot\u2019s manual details. remote control mode needed aspects driver headless mode sending script code robot dashboard functionalities restarting robot protective EM-Stop powering robot brake release loading starting programs set_mode action, dashboard calls mentioned Headless mode driver, headless mode, enabled headless mode activated, required script code external control robot driver starts. script code robot sending driver pressing motion-related button teach pendant, script overwritten action restarted resend_robot_program service. output Connection robot dropped, waiting connection. driver. Note pressing \u201cplay\u201d won\u2019t start external control program loaded controller. mode doesn\u2019t require \u201cExternal Control\u201d URCap installed robot program robot recommend non-headless mode leverage set_mode action start program execution teach pendant. headless mode removed future releases. Note e-Series: order leverage headless mode e-Series robot remote_control_mode explained controller_stopper small helper node stops restarts ROS controllers based boolean status topic. status false, running controllers set predefined consistent_controllers stopped. status returns true stopped controllers restarted. Subscribing robot\u2019s running state topic. Ideally topic latched publishes node reacts state state published cycle fine."},
{"url": "https://index.ros.org/p/urdf_launch", "package": "urdf_launch", "package_summary": "Launch files for common URDF operations", "package_details": "urdf_launch package launch files configurations common URDF operations. Load Description description.launch.py Loads URDF/Xacro robot model parameter, based launch arguments Launches single node, robot_state_publisher, robot model parameter. results robot description topic. result perform actions lines including boilerplate) launch file. launch import LaunchDescription launch.actions import IncludeLaunchDescription launch.substitutions import PathJoinSubstitution launch_ros.substitutions import FindPackageShare def generate_launch_description(): LaunchDescription() ld.add_action(IncludeLaunchDescription( PathJoinSubstitution([FindPackageShare('urdf_launch'), 'launch', 'description.launch.py']), launch_arguments={ 'urdf_package': 'turtlebot3_description', 'urdf_package_path': PathJoinSubstitution(['urdf', 'turtlebot3_burger.urdf'])}.items() return Display Robot Model developing URDF robot model, display robot model RViz. display.launch.py tasks Launches RViz preconfigured setup Launches joint state publisher optional GUI) launch file, previous command line, ros2 launch urdf_launch display.launch.py urdf_package:=turtlebot3_description urdf_package_path:=urdf/turtlebot3_burger.urdf"},
{"url": "https://index.ros.org/p/urg_node_msgs", "package": "urg_node_msgs", "package_summary": "urg_node_msgs", "package_details": "urg_node_msgs ROS messages pertaining urg_node package Branching Rolling: main branch Iron, Humble, Galactic, Foxy: iron branch"},
{"url": "https://index.ros.org/p/v4l2_camera", "package": "v4l2_camera", "package_summary": "A ROS 2 camera driver using Video4Linux2", "package_details": "v4l2_camera ROS camera driver Video4Linux2 Features Lists exposes user-settable controls camera ROS parameters. cv_bridge convert raw frames ROS messages, supports wide range encoding conversions. Supports image_transport enable compression. Supports composing camera node ROS intra-process commmunication zero-copy messaging. Supported Cameras package work camera properly supports instance include USB cameras. good check camera install v4l2-utils package Debian based systems), run v4l2-compliance tool. reports limited amounts failures warnings, good cameras case proven work: Brand Type Driver Notes Logitech uvcvideo Logitech BRIO Pro uvcvideo Microdia Integrated Webcam uvcvideo Integrated laptop camera, Dell XPS series Raspberry Camera Module (Noir) mmal Raspberry Support notes devices successfully driver instance merge request. Raspberry Support Raspberry moved camera stack based libcamera. part default Broadcom Unicam driver loaded Raspberry camera modules. driver, limited scope raw Bayer images. Image Signal Processors, turn raw images formats RGB JPEG, exposed separate devices. means responsibility pushed application v4l2_camera operate multiple devices, single all-in-one device drivers expose. Supporting scope package. find Unicam driver installing v4l-utils package, running: v4l2-ctl checking bcm2835-unicam. install run v4l2_camera node, mentionsunicam part driver Luckily, devices, load legacy driver Unicam driver, changing settings /boot/config.txt file: Set camera_autodetect=0 prevent hardware overlays Unicam driver loaded. Set start_x=1 enable camera legacy driver. reboot run v4l2-ctl v4l2_camera node, driver referred mmal v4l2_camera node operate normal. Installation ROS package install package ROS package repositories installed command ROS version sudo apt-get install ros-${ROS_DISTRO}-v4l2-camera Building source build package source, simply clone repository workspace, install dependencies, build colcon: git clone --branch ${ROS_DISTRO} https://gitlab.com/boldhearts/ros2_v4l2_camera.git src/v4l2_camera rosdep install --from-paths src/v4l2_camera --ignore-src colcon build sufficient cases, article detail. focuses Raspberry Raspberry Camera Module steps generally applicable. File truncated lines full file"},
{"url": "https://index.ros.org/p/vision_msgs_rviz_plugins", "package": "vision_msgs_rviz_plugins", "package_summary": "RVIZ2 plugins for visualizing vision_msgs", "package_details": "vision_msgs_rviz_plugins package RVIZ2 plugin display vision_msgs ROS Detection3DArray Display ObjectHypothesisWithPose/score Change color based ObjectHypothesisWithPose/id [car: orange, person: blue, cyclist: yellow, motorcycle: purple, grey] Visualization propperties Alpha Line Box Linewidth Change color map based yaml file Detection3D Display ObjectHypothesisWithPose/score Change color based ObjectHypothesisWithPose/id [car: orange, person: blue, cyclist: yellow, motorcycle: purple, grey] Visualization propperties Alpha Line Box Linewidth Change color map based yaml file BoundingBox3D Alpha Line Box header vision_msgs/BonudingBox visualizations rviz fixed frame transformation Linewidth BoundingBox3DArray Alpha Line Box Linewidth"},
{"url": "https://index.ros.org/p/vrpn_mocap", "package": "vrpn_mocap", "package_summary": "ROS2", "package_details": "vrpn_mocap ROS2 VRPN client built pirmarily interface motion capture devices VICON OptiTrack. detailed list supported hardware vrpn wiki. Installation Install Binary Release sudo apt install ros-<rosdistro>-vrpn-mocap Build Source Clone repo ROS2 workspace Run rosdep install --from-paths src --ignore-src install dependencies Run colcon build usual ROS2 routines: source install/setup.zsh, Usage Launch Default Configuration Command Line Run command, ros2 launch vrpn_mocap client.launch.yaml server:=<server port:=<port> replacing <server <port> VRPN server port, ros2 launch vrpn_mocap client.launch.yaml server:=192.168.0.4 port:=3883 ros2 topic list, able topics /vrpn_mocap/<tracker_name>/pose /vrpn_mocap/<tracker_name>/twist optional mocap reports velocity data /vrpn_mocap/<tracker_name>/accel optional mocap reports acceleration data <tracker_name> tracked objects. Customized Launch Check default parameter file launch file. write launch file custom configurations. Parameters server (string) server address domain (default: \"localhost\") port (int) VRPN server port (default: frame_id (string) frame fixed world frame (default: \"world\") update_freq (double) frequency motion capture data publisher (default: refresh_freq (double) frequency dynamic adding tracked objects (default: sensor_data_qos effort QoS VRPN data stream, set false system default QoS reliable (default: true) multi_sensor (bool) set true sensor (frame) reporting object (default: false) use_vrpn_timestamps (bool) timestamps coming VRPN. ensures interval frames timestamps modified (default: false) Acknowledgement ideas borrowed vrpn_client_ros ROS1 package interfacing VRPN devices. authors developers delivering maintaining original implementation."},
{"url": "https://index.ros.org/p/webots_ros2", "package": "webots_ros2", "package_summary": "Interface between Webots and ROS2", "package_details": "Webots ROS2 Interface package includes webots_ros2_* packages. learn package Webots visiting documentation."},
{"url": "https://index.ros.org/p/webots_ros2_control", "package": "webots_ros2_control", "package_summary": "ros2_control plugin for Webots", "package_details": "ros2_control plugin Webots"},
{"url": "https://index.ros.org/p/webots_ros2_driver", "package": "webots_ros2_driver", "package_summary": "Implementation of the Webots - ROS 2 interface", "package_details": "Implementation interface Webots ROS main functionalities package: automatically creates ROS interface Webots robot model. users configure ROS interface URDF files. users extend interface pluginlib plugin mechanism. links details: Tutorial: Creating Custom Package Tutorial: Creating Custom Plugin"},
{"url": "https://index.ros.org/p/webots_ros2_epuck", "package": "webots_ros2_epuck", "package_summary": "E-puck2 driver for Webots simulated robot", "package_details": "E-Puck package ROS2 interface simulated e-puck robot Webots. links details: E-puck Tutorial: E-puck ROS2 Beginners ROS2 Driver Physical E-puck"},
{"url": "https://index.ros.org/p/webots_ros2_importer", "package": "webots_ros2_importer", "package_summary": "This package allows to convert URDF and XACRO files into Webots PROTO files.", "package_details": "URDF Xacro Importers package URDF Xacro robot models imported Webots. links details: Tutorial: URDF Xacro"},
{"url": "https://index.ros.org/p/webots_ros2_mavic", "package": "webots_ros2_mavic", "package_summary": "Mavic 2 Pro robot ROS2 interface for Webots.", "package_details": "Mavic Pro package ROS2 interface simulated Mavic Pro robot Webots. Documentation"},
{"url": "https://index.ros.org/p/webots_ros2_msgs", "package": "webots_ros2_msgs", "package_summary": "Services and Messages of the webots_ros2 packages.", "package_details": "Webots Messages package custom ROS2 message definitions webots_ros2_* packages."},
{"url": "https://index.ros.org/p/webots_ros2_tesla", "package": "webots_ros2_tesla", "package_summary": "Tesla ROS2 interface for Webots.", "package_details": "Tesla package ROS2 interface simulated Tesla Webots. Documentation"},
{"url": "https://index.ros.org/p/webots_ros2_tests", "package": "webots_ros2_tests", "package_summary": "System tests for `webots_ros2` packages.", "package_details": "System Tests webots_ros2 packages"},
{"url": "https://index.ros.org/p/webots_ros2_tiago", "package": "webots_ros2_tiago", "package_summary": "TIAGo robots ROS2 interface for Webots.", "package_details": "TIAGo package ROS2 interface simulated TIAGo robot Webots. Documentation"},
{"url": "https://index.ros.org/p/webots_ros2_turtlebot", "package": "webots_ros2_turtlebot", "package_summary": "TurtleBot3 Burger robot ROS2 interface for Webots.", "package_details": "TurtleBot3 Burger package ROS2 interface simulated TurtleBot3 Burger robot Webots. Documentation"},
{"url": "https://index.ros.org/p/webots_ros2_universal_robot", "package": "webots_ros2_universal_robot", "package_summary": "Universal Robot ROS2 interface for Webots.", "package_details": "Universal Robot package interface ROS2 UR3e, UR5e UR10e simulation models Universal Robots running Webots. includes simulations robots. Documentation Creation UR5e URDF file URDF file UR5e robot package mix UR5e robot UniversalRobots 3-fingers-gripper robotiq. adaptations files repositories. order reproduce Xacro file generate URDF file follow steps: Clone repositories UniversalRobots robotiq package. Create Xacro file combine robot gripper add <webots> plugin tag: <?xml version=\"1.0\"?> <robot name=\"UR5e\" xmlns:xacro=\"http://wiki.ros.org/xacro\"> Custom mix ur5e robot robotiq gripper Webots. Based https://github.com/UniversalRobots/Universal_Robots_ROS2_Driver https://github.com/ros-industrial/robotiq. <webots> <plugin type=\"webots_ros2_control::Ros2Control\" </webots> ur5e robot <xacro:include filename=\"$(find webots_ros2_universal_robot)/resource/Universal_Robots_ROS2_Driver/ur_description/urdf/ur.urdf.xacro\" robotiq gripper <xacro:include filename=\"$(find webots_ros2_universal_robot)/resource/robotiq/robotiq_3f_gripper_visualization/cfg/robotiq-3f-gripper_articulated_macro.xacro\" <xacro:robotiq-3f-gripper_articulated prefix=\"\"/> </robot> Steps UniversalRobots files: ur.urdf.xacro file: Define joint_limit_params, kinematics_params, physical_params visual_params default arguments path .yaml files. Update paths package. visual_parameters.yaml file: Update paths package. ur_macro.xacro file: Remove lines Data files required driver Replace tag <xacro:ur_ros2_control.../> ros2 control instance <xacro:ur_ros2_control name=\"WebotsControl\" prefix=\"${prefix}\" initial_positions=\"${initial_positions}\" Update paths package. ur.ros2_control.xacro file: Remove script_filename output_recipe_filename input_recipe_filename tf_prefix hash_kinematics robot_ip <xacro:macro...> tag. Remove <joint name=\"speed_scaling\">, <joint name=\"gpio\">, <joint name=\"resend_robot_program\"> <joint name=\"system_interface\"> tags. Remove <command_interface name=\"velocity\">...</command_interface> tags <param...>...</param> tags <command_interface name=\"position\">...</command_interface> tags Replace <hardware></hardware> tag <hardware> <plugin>webots_ros2_control::Ros2ControlSystem</plugin> </hardware> order control gripper, add <sensor name=\"tcp_fts_sensor\">...</sensor> tag tags: File truncated lines full file](https://github.com/cyberbotics/webots_ros2/tree/master/webots_ros2_universal_robot/README.md)"},
{"url": "https://index.ros.org/p/zenoh_bridge_dds", "package": "zenoh_bridge_dds", "package_summary": "Bridge between ROS2/DDS and Eclipse zenoh (https://zenoh.io). It allows the integration of zenoh applications with ROS2,\n    or the tunneling of ROS2 communications between nodes via the zenoh protocol at Internet scale.", "package_details": "Eclipse Zenoh Eclipse Zenoh: Overhead Pub/sub, Store/Query Compute. Zenoh (pronounce /zeno/) unifies data motion, data rest computations. carefully blends traditional pub/sub geo-distributed storages, queries computations, retaining level time space efficiency mainstream stacks. Check website zenoh.io roadmap detailed information. DDS plugin standalone zenoh-bridge-dds :point_right: Install latest release: :point_right: Docker image: :point_right: Build \u201cmaster\u201d branch: Background Data Distribution Service (DDS) standard data-centric publish subscribe. DDS time long history deployments industries, gained bit attentions adoption Robotic Operating System (ROS communication ROS nodes. usage ROS plugin based DDS standard, work ROS extent. strongly advise ROS users zenoh-plugin-ros2dds dedicated support ROS DDS. integration ROS concepts, plugin benefits: integration ROS graph ROS topics/services/actions bridges) support ROS toolings (ros2 CLI, rviz2\u2026) Configuration ROS namespace bridge ROS Node) Services Action Zenoh Queryables efficiency scalability RPC DDS compact discovery information bridges forwarding ros_discovery_info messages Zenoh plugin DDS eventually deprecated ROS usage. Plugin bridge software built ways choose zenoh-plugin-dds: Zenoh plugin dynamic library loaded Zenoh router zenoh-bridge-dds: standalone executable features configurations descibed document applies Meaning \u201cplugin\u201d \u201cbridge\u201d words interchangeables rest document. install install latest release DDS plugin Zenoh router, zenoh-bridge-dds standalone executable, Manual installation platforms) release packages downloaded https://download.eclipse.org/zenoh/zenoh-plugin-dds/latest/ subdirectory Rust target. platforms target corresponds https://doc.rust-lang.org/stable/rustc/platform-support.html Choose platform download: zenoh-plugin-dds-<version>-<platform>.zip file plugin. unzip directory zenohd directory find plugin library /usr/lib) zenoh-bridge-dds-<version>-<platform>.zip file standalone executable. unzip run extracted zenoh-bridge-dds binary. Linux Debian Add Eclipse Zenoh private repository sources list: echo \"deb [trusted=yes] https://download.eclipse.org/zenoh/debian-repo/ sudo tee /etc/apt/sources.list /dev/null sudo apt update install plugin sudo apt install zenoh-plugin-dds. install standalone executable sudo apt install zenoh-bridge-dds. build :warning: WARNING :warning: Zenoh ecosystem active development. build git, build git Zenoh repository plan binding, plugin, backend, happen git compatible packaged Zenoh release deb, docker, pip). put effort mantaining compatibility git repositories Zenoh project. :warning: WARNING :warning: Rust doesn\u2019t stable ABI, plugins built exact Rust version zenohd, zenoh dependency version commit number) \u2018zenohd\u2019. incompatibilities memory mapping shared types zenohd library lead \"SIGSEV\" crash. order build zenoh bridge DDS install dependencies: Rust. Rust toolchain installed, up-to-date rustup update Linux, llvm clang development packages installed: Debians sudo apt install llvm-dev libclang-dev File truncated lines full file"},
{"url": "https://index.ros.org/p/zmqpp_vendor", "package": "zmqpp_vendor", "package_summary": "Vendor package for zmqpp", "package_details": "zmqpp_vendor vendor package https://github.com/zeromq/zmqpp"},
{"url": "https://index.ros.org/p/crane_plus_control", "package": "crane_plus_control", "package_summary": "CRANE+ V2 control package", "package_details": "crane_plus_control \u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306fros2_control \u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u3001CRANE+ ros2_control\u95a2\u9023\u30d5\u30a1\u30a4\u30eb crane_plus_control::CranePlusHardware (crane_plus_hardware) \u672c\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3059\u308bHardware Components\u3067\u3059 CRANE+ crane_plus_description/urdf/crane_plus.ros2_control.xacro\u304b\u3089\u8aad\u307f\u8fbc\u307e\u308c\u307e\u3059 launch/crane_plus_control.launch.py Controller Manager\u3068\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u8d77\u52d5\u3059\u308blaunch\u30d5\u30a1\u30a4\u30eb\u3067\u3059 config/crane_plus_controllers.yaml Controller Manager\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3067\u3059 crane_plus_hardware\u304cCRANE+ PC\u3068CRANE+ \u6b63\u3057\u304f\u8a2d\u5b9a\u3067\u304d\u3066\u3044\u306a\u3044\u5834\u5408\u3001CRANE+ USB\u901a\u4fe1\u30dd\u30fc\u30c8\u306e\u8a2d\u5b9a crane_plus_hardware\u306fUSB\u901a\u4fe1\u30dd\u30fc\u30c8\uff08/dev/ttyUSB*\uff09\u3092\u7d4c\u7531\u3057\u3066CRANE+ /dev/ttyUSB0\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408 sudo chmod /dev/ttyUSB0 latency_timer\u306e\u8a2d\u5b9a CRANE+ USB\u901a\u4fe1\u30dd\u30fc\u30c8\u3068\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 \u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066USB\u901a\u4fe1\u30dd\u30fc\u30c8\u306elatency_timer\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 \u53c2\u8003\u8cc7\u6599\uff1ahttps://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_wizard2/#usb-latency-setting /dev/ttyUSB0\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408 root\u306b\u5207\u308a\u66ff\u3048\u308b sudo echo /sys/bus/usb-serial/devices/ttyUSB0/latency_timer cat /sys/bus/usb-serial/devices/ttyUSB0/latency_timer exit Return Delay Time\u306e\u8a2d\u5b9a CRANE+ V2\u306b\u642d\u8f09\u3055\u308c\u3066\u3044\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfDynamixel AX-12A \u306b\u306fReturn Delay Time\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u307e\u3059\u3002 \u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u304cInstruction Packet\u3092\u53d7\u4fe1\u3057\u3066\u304b\u3089Status Packet\u3092\u9001\u4fe1\u3059\u308b\u307e\u3067\u306b500 usec\u306e\u9045\u308c\u304c\u3042\u308a\u307e\u3059\u3002 Dynamixel Wizard \u3092\u4f7f\u7528\u3057\u3066Retrun Delay Time\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u5236\u5fa1\u5468\u671f\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002 crane_plus_control.launch.py\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001Controller Manager\u30ce\u30fc\u30c9\u304c\u8d77\u52d5\u3057\u3001 crane_plus_joint_state_broadcaster (joint_state_broadcaster/JointStateBroadcaster) crane_plus_arm_controller (joint_trajectory_controller/JointTrajectoryController) crane_plus_gripper_controller (joint_trajectory_controller/JointTrajectoryController) \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30b8\u30e7\u30a4\u30f3\u30c8\u89d2\u5ea6\u60c5\u5831\uff08joint_states\uff09\u3092\u8868\u793a\u3067\u304d\u307e\u3059 ros2 topic echo /joint_states Controller Manager\u306e\u30d1\u30e9\u30e1\u30fc\u30bf Controller Manager\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f config/crane_plus_controllers.yaml ```yaml controller_manager: ros__parameters: update_rate: crane_plus_arm_controller: type: joint_trajectory_controller/JointTrajectoryController crane_plus_gripper_controller: File truncated lines full file"},
{"url": "https://index.ros.org/p/crane_plus_description", "package": "crane_plus_description", "package_summary": "CRANE+ V2 description package", "package_details": "crane_plus_description \u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306fCRANE+ V2\u306e\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf(xacro)\u3092\u6240\u6301\u3057\u3066\u3044\u307e\u3059\u3002 display robot model \u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001robot_state_publisher\u3001joint_state_publisher\u3001rviz2\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 CRANE+ V2\u306e\u30e2\u30c7\u30eb\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001xacro\u30d5\u30a1\u30a4\u30eb\u306e\u30c7\u30d0\u30c3\u30b0\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002 ros2 launch crane_plus_description display.launch.py Web\u30ab\u30e1\u30e9\u642d\u8f09\u30e2\u30c7\u30eb\u306e\u5834\u5408\u306f\u3001\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 ros2 launch crane_plus_description display.launch.py use_camera:=true configure servo angle limits CRANE+ Angle Limit\u3001CCW Angle Limit\uff09\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 CRANE+ V2\u306b\u642d\u8f09\u3055\u308c\u3066\u3044\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u306fROBOTIS\u306eAX-12A\u306e\u305f\u3081\u3001 Dynamixel Wizard crane_plus.urdf.xacro\u306b\u306f\u3001 <xacro:property name=\"M_PI\" <xacro:property name=\"TO_RADIAN\" value=\"${M_PI <xacro:property name=\"SERVO_HOME\" value=\"${TO_RADIAN <xacro:property name=\"JOINT_VELOCITY_LIMIT\" <xacro:property name=\"JOINT_1_LOWER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_1_UPPER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_2_LOWER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_2_UPPER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_3_LOWER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_3_UPPER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_4_LOWER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_4_UPPER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_HAND_LOWER_LIMIT\" TO_RADIAN SERVO_HOME}\"/> <xacro:property name=\"JOINT_HAND_UPPER_LIMIT\" TO_RADIAN SERVO_HOME}\"/>"},
{"url": "https://index.ros.org/p/crane_plus_examples", "package": "crane_plus_examples", "package_summary": "CRANE+ V2 examples package", "package_details": "crane_plus_examples \u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306fCRANE+ ROS CRANE+ V2\u672c\u4f53\u3092PC\u306b\u63a5\u7d9a\u3059\u308b CRANE+ V2\u672c\u4f53\u3092PC\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u203bCRANE+ USB\u901a\u4fe1\u30dd\u30fc\u30c8\u306e\u63a5\u7d9a\u3092\u78ba\u8a8d\u3059\u308b USB\u901a\u4fe1\u30dd\u30fc\u30c8\u306e\u8a2d\u5b9a\u306b\u3064\u3044\u3066\u306fcrane_plus_control\u306e README \u6b63\u3057\u304f\u8a2d\u5b9a\u3067\u304d\u3066\u3044\u306a\u3044\u5834\u5408\u3001CRANE+ move_group\u3068controller\u3092\u8d77\u52d5\u3059\u308b \u6a19\u6e96\u306eCRANE+ \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067move_group (crane_plus_moveit_config)\u3068 controller (crane_plus_control)\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 ros2 launch crane_plus_examples demo.launch.py port_name:=/dev/ttyUSB0 Web\u30ab\u30e1\u30e9\u642d\u8f09\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408 Web\u30ab\u30e1\u30e9\u642d\u8f09\u30e2\u30c7\u30eb\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 ```\u306f\u4f7f\u7528\u3059\u308bWeb\u30ab\u30e1\u30e9\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 ros2 launch crane_plus_examples demo.launch.py port_name:=/dev/ttyUSB0 use_camera:=true video_device:=/dev/video0 \u6e96\u5099\uff08Gazebo\u3092\u4f7f\u3046\u5834\u5408\uff09 move_group\u3068Gazebo\u3092\u8d77\u52d5\u3059\u308b \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067move_group (crane_plus_moveit_config)\u3068Gazebo\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 ros2 launch crane_plus_gazebo crane_plus_with_table.launch.py Web\u30ab\u30e1\u30e9\u642d\u8f09\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408 Web\u30ab\u30e1\u30e9\u642d\u8f09\u30e2\u30c7\u30eb\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 ros2 launch crane_plus_gazebo crane_plus_with_table.launch.py use_camera:=true CRANE+ V2\u306e\u524d\u306bArUco\u30de\u30fc\u30ab\u4ed8\u304d\u306eBox\u3092\u7f6e\u3044\u305f\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u74b0\u5883\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 aruco_detection\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 ros2 launch crane_plus_gazebo crane_plus_with_aruco_cube.launch.py use_camera:=true CRANE+ V2\u306e\u524d\u306b\u8d64\u3044Box\u3092\u7f6e\u3044\u305f\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u74b0\u5883\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 color_detection\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 ros2 launch crane_plus_gazebo crane_plus_with_red_cube.launch.py use_camera:=true ros2 launch crane_plus_examples example.launch.py example:='gripper_control' \u7d42\u4e86\u3059\u308b\u3068\u304d\u306fCtrl+c\u3092\u5165\u529b\u3057\u307e\u3059\u3002 Gazebo\u3067\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408 Gazebo\u3067\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306fuse_sim_time\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u307e\u3059\u3002 ros2 launch crane_plus_examples example.launch.py example:='gripper_control' use_sim_time:=true Examples demo.launch.py\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u72b6\u614b\u3067\u5404\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002 File truncated lines full file"},
{"url": "https://index.ros.org/p/crane_plus_gazebo", "package": "crane_plus_gazebo", "package_summary": "CRANE+ V2 gazebo simulation package", "package_details": "crane_plus_gazebo CRANE+ \u306eGazebo \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068Gazebo\u304c\u8d77\u52d5\u3057\u3001CRANE+ V2\u30e2\u30c7\u30eb\u3068Table\u3001Box\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u521d\u56de\u8d77\u52d5\u6642\u306fTable\u3068Box\u306e\u30e2\u30c7\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u3001\u30e2\u30c7\u30eb\u306e\u8868\u793a\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u5b9f\u6a5f\u3068\u306e\u63a5\u7d9a\u3084crane_plus_examples/launch/demo.launch.py\u306e\u5b9f\u884c\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002 ros2 launch crane_plus_gazebo crane_plus_with_table.launch.py ros2 launch crane_plus_gazebo crane_plus_with_table.launch.py use_camera:=true CRANE+ V2\u306e\u524d\u306bArUco\u30de\u30fc\u30ab\u4ed8\u304d\u306eBox\u3092\u7f6e\u3044\u305f\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u74b0\u5883\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 ros2 launch crane_plus_gazebo crane_plus_with_aruco_cube.launch.py CRANE+ V2\u306e\u524d\u306b\u8d64\u3044Box\u3092\u7f6e\u3044\u305f\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u74b0\u5883\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 ros2 launch crane_plus_gazebo crane_plus_with_red_cube.launch.py"},
{"url": "https://index.ros.org/p/crane_plus_moveit_config", "package": "crane_plus_moveit_config", "package_summary": "CRANE+ V2 move_group config package", "package_details": "crane_plus_moveit_config \u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306fCRANE+ V2\u306emove_group\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u53ca\u3073launch\u30d5\u30a1\u30a4\u30eb\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002 ros-planning/moveit2/moveit_demo_nodes/run_move_group run_move_group.launch.py\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001move_group\u3084rviz\u7b49\u306e\u30ce\u30fc\u30c9\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002 CRANE+ V2\u672c\u4f53\u3092\u52d5\u304b\u3059\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002(crane_plus_examples\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002) config\u30d5\u30a1\u30a4\u30eb controllers.yaml moveit_simple_controller_manager\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059 \u8a2d\u5b9a\u5185\u5bb9\u306fcrane_plus_control\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u540d\u3084\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30bf\u30a4\u30d7\u306b\u4f9d\u5b58\u3057\u307e\u3059 crane_plus.srdf move_group\u3068\u3057\u3066arm\u3001gripper\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059 arm\u306egourp_state\u3068\u3057\u3066home\u3001vertical\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059 kinematics.yaml arm\u306ekinematics_solver\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059 \u30c7\u30d5\u30a9\u30eb\u30c8\u306eKDLKinematicsPlugin\u3067\u306f\u8ecc\u9053\u8a08\u753b\u306b\u5931\u6557\u3059\u308b\u305f\u3081\u3001LMAKinematicsPlugin\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059 ompl_planning.yaml Open Motion Planning Library\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059 ros-planning/moveit_resources/panda_moveit_config\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6d41\u7528\u3057\u3066\u3044\u307e\u3059"},
{"url": "https://index.ros.org/p/ds_dbw_joystick_demo", "package": "ds_dbw_joystick_demo", "package_summary": "Demonstration of drive-by-wire with joystick", "package_details": "ds_dbw_joystick_demo ROS2 interface Dataspeed drive-by-wire platforms Launch drive-by-wire demo ros2 launch ds_dbw_joystick_demo joystick_demo.launch.xml sys:=true Launch drive-by-wire demo send brake commands ros2 launch ds_dbw_joystick_demo joystick_demo.launch.xml sys:=true steer:=false brake:=true thrtl:=false shift:=false misc:=false Launch drive-by-wire demo steer options ros2 launch ds_dbw_joystick_demo joystick_demo.launch.xml sys:=true steer_cmd_type:=angle steer_max:=500.0 steer_rate:=0.0 steer_accel:=0.0 Launch drive-by-wire demo brake options ros2 launch ds_dbw_joystick_demo joystick_demo.launch.xml sys:=true brake_cmd_type:=pressure brake_min:=0.0 brake_max:=80.0 brake_inc:=0.0 brake_dec:=0.0 ros2 launch ds_dbw_joystick_demo joystick_demo.launch.xml sys:=true brake_cmd_type:=accel brake_min:=0.1 brake_max:=-8.0 brake_inc:=0.0 brake_dec:=0.0 Launch drive-by-wire demo throttle options ros2 launch ds_dbw_joystick_demo joystick_demo.launch.xml sys:=true thrtl_cmd_type:=percent thrtl_min:=0.0 thrtl_max:=100.0 thrtl_inc:=0.0 thrtl_dec:=0.0 Parameters joystick_demo.launch.xml complete list args steer Send steer commands. Default true steer_cmd_type Steer command type. Default percent. Options: torque angle curvature yaw_rate percent steer_max Steer command scale factor applied joystick axis. Default steer_cmd_type) steer_rate Steer command rate limit deg/s. Negative unlimited. Default (firmware selects default steer_accel Steer command acceleration limit deg/s^2. Negative unlimited. Default (firmware selects default brake Send brake commands. Default true brake_cmd_type Brake command type. Default percent. Options: pressure torque accel accel_acc accel_aeb pedal_raw percent brake_max Brake command scale factor applied joystick axis brake_min). Default brake_cmd_type) brake_min Brake command scale factor applied joystick axis brake_max). Default brake_cmd_type) brake_inc Brake command rate limit increase. Negative unlimited. Default (firmware selects default (units change brake_cmd_type) brake_dec Brake command rate limit decrease. Negative unlimited. Default (firmware selects default (units change brake_cmd_type) thrtl Send throttle commands. Default true thrtl_cmd_type Throttle command type. Default percent. Options: pedal_raw percent thrtl_max Throttle command scale factor applied joystick axis thrtl_min). Default thrtl_cmd_type) thrtl_min Throttle command scale factor applied joystick axis thrtl_max). Default thrtl_cmd_type) thrtl_inc Throttle command rate limit increase Negative unlimited. Default (firmware selects default thrtl_dec Throttle command rate limit decrease Negative unlimited. Default (firmware selects default shift Send gear shift commands. Default true misc Send misc commands (turn-signal Default true ignore Set ignore flag steer/brake/thrtl command messages. Default false enable Enable/disable DBW game controller left/right bumper buttons. Default true buttons Enable/disable DBW system enable/disable buttons. Default true Controls Logitech Gamepad controls: Disable Left Bumper Enable Bumper Brakes Left Trigger Throttle Trigger Steering Left/right joystick axis Hold start full steering range, Turn Signals D-Pad left/right toggle on/off AEB precharge D-Pad up/down"},
{"url": "https://index.ros.org/p/launch_pal", "package": "launch_pal", "package_summary": "Utilities for launch files", "package_details": "launch_pal Utilities simplifying common ROS2 launch operations. get_pal_configuration Implementation PAL\u2019s PAPS-007 standard configuration management. Retrieves parameters, remappings arguments node ament_index-registered YAML configurations file. properly handle overloading parameters, enabling instance default configuration specific configuration robot family robot unit. User overrides Users provide local overrides configuration files $HOME/.pal/config. instance, creating file ~/.pal/config/default_volume.yml content: /volume: ros__parameters: default_volume: override ROS parameter default_volume node /volume. persist user configuration robot reboots. default location user configuration $HOME/.pal/config. changed setting environment variable $PAL_USER_PARAMETERS_PATH. Variables Configuration files cointain variables form ${VAR}. /costmap: ros__parameters: robot_radius: ${robot_radius} variables resolved robot_info_publisher. /robot_info_publisher: ros__parameters: robot_radius: default, variables values stored /etc/robot_info/conf.d overriden user $HOME/.pal/robot_info/conf.d. Templates Templates define configuration presets Node. define set parameters, remappings arguments define achieve functionality node. Templates independent node multiple nodes. rgb_camera_low_contrast.yaml ros__parameters: color: contrast\": gain\": gamma\": saturation\": rgb_camera_high_contrast.yaml ros__parameters: color: contrast\": gain\": gamma\": saturation\": Template, template key set Node\u2019s configuration file. head_camera.yaml /head_camera_node: template: \"rgb_camera_low_contrast.yaml\" right_hand_camera.yaml /right_hand_camera_node: template: \"rgb_camera_low_contrast.yaml\" File truncated lines full file"},
{"url": "https://index.ros.org/p/lsc_ros2_driver", "package": "lsc_ros2_driver", "package_summary": "ROS2 driver package for Autonics LSC Series", "package_details": "Autonics LSC ROS2 Driver ROS2 Driver Autonics LSC Series Table Contents Supported Hardware ROS API Installation Start Supported Hardware Model LSC Series Website Autonics/LiDAR/LSC ROS API Published Topics scan(sensor_msgs/LaserScan) Scan data device diagnostics(diagnostic_updater) Scan topic status Parameters Dynamic frame_id(default laser, type string) Frame scan data range_min(default type double) Minimum range range_max(default type double) Maximum range intensities(default true, type string) Flag choose putting intensities information topic message Static addr(default type string) Device address port(default type string) Port number device pub_topic(default scan. type string) published topic diagnostics_tolerance(default type double) Tolerance topic frequency diagnostics_windows_time(default type int) Number events statics angle_min(default type double) Maximum angle [deg] angle_max(default type double) Minimum angle [deg] angle_offset(default type double) Angle offset[deg] ip_change(default false, type bool) enable ip_change prev_addr(default type string) address device new_addr(default type string) address change Installation source LINUX source /opt/ros/$ROS_DISTRO/setup.bash mkdir ~/colcon_ws/src ~/colcon_ws colcon build --symlink-install source ~/colcon_ws/install/local_setup.bash ~/colcon_ws/src git clone https://github.com/AutonicsLiDAR/lsc_ros2_driver.git sudo apt update sudo apt install ros-$ROS_DISTRO-diagnostic-updater ~/colcon_ws colcon build --packages-select lsc_ros2_driver --event-handlers console_direct+ source ~/colcon_ws/install/local_setup.bash WINDOWS C:\\dev\\ros2_humble\\local_setup.bat mkdir C:\\dev\\colcon_ws\\src C:\\dev\\colcon_ws colcon build --symlink-install C:\\dev\\colcon_ws\\install\\local_setup.bat C:\\dev\\colcon_ws\\src git clone https://github.com/AutonicsLiDAR/lsc_ros2_driver.git git clone https://github.com/ros/diagnostics.git ros2 C:\\dev\\colcon_ws colcon build --packages-select diagnostic_updater --event-handlers console_direct+ colcon build --packages-select lsc_ros2_driver --event-handlers console_direct+ C:\\dev\\colcon_ws\\install\\local_setup.bat binary sudo apt install ros-$ROS_DISTRO-lsc-ros2-driver Start ros2 launch lsc_ros2_driver lsc_ros2_driver_launch.py"},
{"url": "https://index.ros.org/p/py_trees_ros_tutorials", "package": "py_trees_ros_tutorials", "package_summary": "Tutorials for py_trees on ROS2.", "package_details": "PyTrees Tutorials ROS Tutorials usage PyTrees ROS generally, behaviour trees robotics applications. Documentation Documentation tutorials ReadTheDocs. devel release-2.3.x PyTrees ROS Ecosystem Refer py_trees_ros/README.md information PyTrees packages ROS ecosystem."},
{"url": "https://index.ros.org/p/py_trees_ros_viewer", "package": "py_trees_ros_viewer", "package_summary": "A Qt-JS application for visualisation of executing/log-replayed behaviour trees in a ROS2 ecosystem.", "package_details": "PyTrees ROS Viewer [Features] [Quickstart] [Usage] [Modding] Qt-JS application visualisation behaviour trees ROS ecosystem. implementation serves GUI visualisation tool PyTrees ROS. Features Tree Visualisation Collapsible Subtrees Zoom Scale Contents Fit Timeline Rewind Resume Blackboard View Activity View Quickstart sudo apt install ros-<rosdistro>-py-trees-ros-tutorials sudo apt install ros-<rosdistro>-py-trees-ros-viewer shell py-trees-tree-viewer shell ros2 launch py_trees_ros_tutorials tutorial_eight_dynamic_application_loading_launch.py Click 'Scan' robot dashboard interface Wear colander, Usage snapshot stream discovered selected, you\u2019ll land splash screen enumerates interactive options viewer continuously scan update namespace drop-down list py_tree instances (specifically, namespace snapshot stream services). connected, provide convenience automatically making connection instance discovers. switch streaming services drop-down. minimum, stream send updates tree graph tree behaviours modifies status). Additional configuration stream managed checkboxes top window introspect blackboard and/or request frequent updates tracking blackboard large tree, collapse sections tandem screenshot capability highlight area interest communicate design problem report bug. vein, filter blackboard keys expicitly manually selected behaviours. Problems debugging catastrophe final state tree doesn\u2019t uncover root mayhem resulted? common situation timeline! Rewind previous state time travel. Note: stream configuration applies future messages change concerned able debug affectively, \u2018Blackboard Data\u2019 \u2018Periodic\u2019 checkboxes enabled time travelling timeline sufficient data analysis. Travelling timeline online. Simply hit \u2018Resume\u2019 button resume visualisation live feed. Modding underlying py_trees_js library lends ways. application baseline reference utilises underlying py_trees_js library fully) modifications suit case. Open issue questions and/or assistance. Visualisation behaviour trees implementation py_trees. Replicate hybrid qt-js application replace backend.py. data structure eventually passed library json dictionary fundamental properties behaviour trees tree graph structure, behaviour status) matter wiring connections converting data. Visualisation middleware architecture File truncated lines full file"},
{"url": "https://index.ros.org/p/raspimouse_ros2_examples", "package": "raspimouse_ros2_examples", "package_summary": "Raspberry Pi Mouse examples", "package_details": "English raspimouse_ros2_examples ROS examples Raspberry Mouse. ROS1 examples run Gazebo, click <img src=https://rt-net.github.io/images/raspberry-pi-mouse/raspberry_pi_mouse.JPG width=500 Supported ROS distributions Foxy Humble branch) Requirements Raspberry Mouse https://rt-net.jp/products/raspberrypimousev3/ Linux Ubuntu server https://ubuntu.com/download/raspberry-pi Device Driver rt-net/RaspberryPiMouse ROS Humble Hawksbill Raspberry Mouse ROS package https://github.com/rt-net/raspimouse2 Remote Computer (Optional) ROS Humble Hawksbill Raspberry Mouse ROS package https://github.com/rt-net/raspimouse2 Installation ~/ros2_ws/src Clone package git clone $ROS_DISTRO-devel https://github.com/rt-net/raspimouse_ros2_examples.git Install dependencies rosdep install --from-paths --ignore-src Build Install ~/ros2_ws colcon build --symlink-install source ~/ros2_ws/install/setup.bash License repository licensed Apache LICENSE details. Examples joystick_control object_tracking line_follower camera_line_follower SLAM direction_controller joystick_control joystick controller control Raspberry Mouse. Requirements Joystick Controller Logicool Wireless Gamepad SONY DUALSHOCK Launch nodes command: ros2 launch raspimouse_ros2_examples teleop_joy.launch.py joydev:=\"/dev/input/js0\" joyconfig:=f710 mouse:=true DUALSHOCK ros2 launch raspimouse_ros2_examples teleop_joy.launch.py joydev:=\"/dev/input/js0\" joyconfig:=dualshock3 mouse:=true Control remote computer RaspberryPiMouse ros2 run raspimouse raspimouse remote computer ros2 launch raspimouse_ros2_examples teleop_joy.launch.py mouse:=false picture shows default key configuration. Logicool Wireless Gamepad set input mode (DirectInput Mode). File truncated lines full file"},
{"url": "https://index.ros.org/p/raspimouse_navigation", "package": "raspimouse_navigation", "package_summary": "Navigation package for Raspberry Pi Mouse", "package_details": "raspimouse_navigation Navigation2\uff1a\u521d\u3081\u3066\u306e\u30ed\u30dc\u30c3\u30c8\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30ac\u30a4\u30c9 Navigation2\uff1a\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u65b9\u6cd5 Navigation2\uff1a\u30d1\u30e9\u30e1\u30fc\u30bf\u4e00\u89a7"},
{"url": "https://index.ros.org/p/ros2_ouster", "package": "ros2_ouster", "package_summary": "ROS2 Drivers for the Ouster OS-1 Lidar", "package_details": "ROS2 Ouster Drivers refer base repository README file."},
{"url": "https://index.ros.org/p/plansys2_bt_actions", "package": "plansys2_bt_actions", "package_summary": "This package contains the Problem Expert module for the ROS2 Planning System", "package_details": "Actions purpose package provide built-in support plansys2 actions Behavior Trees (BTs) implementation. drop-in replacement vanilla plansys2::ActionExecutorClient form ROS2 node, execute arbitrary passed ROS parameter. BehaviorTree.CPP node, plansys2::BtActionNode, included provide convenient wrapper ROS2 action client common application nodes). ROS2 node implementing plansys2 actions bt_action_node ROS node takes parameters set execution. parameters action_name: plansys2 action implement. Note match pddl domain file. bt_xml_file: absolute path .xml file execute. plugins: list BehaviorTree.CPP shared libraries load. node .xml BehaviorTree.CPP library libraries enable_groot_monitoring: boolean specifies ZMQ publisher created, Groot (default false) publisher_port: ZMQ publisher port enable_groot_monitoring enabled) server_port: ZMQ server port enable_groot_monitoring enabled) max_msgs_per_second: max ZMQ messages enable_groot_monitoring enabled) bt_file_logging: boolean enables logging state .fbl files, playing behavior tree execution Groot (default false) bt_minitrace_logging: boolean enables logging .json files recording execution time node (default false) Files created .fbl minitrace loggers stored /tmp/<node_name>/, names timestamp. node calling ROS2 action servers BtActionNode template class convenient means calling ROS2 action servers takes care details setting handling ROS action client, reducing code duplication providing simple API. template parameter class type ROS action action_tutorials_interfaces::action::Fibonacci) node\u2019s constructor takes arguments: XML tag ROS topic action server /namepace/server_name), BT::NodeConfiguration. Note XML NodeConfiguration BT.CPP node. functions user use/implement optional). static BT::PortsList providedPorts(): node ports define member function. default implementation free override additional ports desired. default, function returns input ports: server_name (string) server_timeout (double). ports preserved overriding providedBasicPorts server_name: (optional) means overriding action server topic constructor server_timeout: long wait action server failing, units seconds (default BT::PortsList providedBasicPorts(BT::PortsList addition): convenience function preserving default input ports overriding providedPorts() function. shown static BT::PortsList providedPorts() override return providedBasicPorts({ BT::InputPort<std::string>(\"my_additional_port\") virtual BT::NodeStatus on_tick(): function called time node ticked sense). user expected set goal_ variable function, type template parameter. Note node ticked multiple times action completes, set goal tick node IDLE). preempt current goal send tick, set goal_updated_ member variable true, goal_ variable. shown BT::NodeStatus on_tick() override (status() BT::NodeStatus::IDLE) block execute tick goal_.string \"foo\"; condition>) block execute anytime afterward goal_.string \"bar\"; goal_updated_ true; virtual void on_feedback(const std::shared_ptr<ActionT::Feedback> feedback): function called feedback received action server asynchronous execution optional) virtual BT::NodeStatus on_success(): function called action server returned successfully return BT::NodeStatus::SUCCESS default. override node\u2019s success depends result, result_ member variable. virtual BT::NodeStatus on_aborted(): function called action server aborted action, returning BT::NodeStatus::FAILURE default. virtual BT::NodeStatus on_cancelled(): function called action cancelled, returning BT::NodeStatus::SUCCESS default."},
{"url": "https://index.ros.org/p/plansys2_core", "package": "plansys2_core", "package_summary": "This package contains the PDDL-based core  for the ROS2 Planning System", "package_details": "PlanSys2 Core package hosts abstract interface (virtual base classes) plugins Planner popf, downward)"},
{"url": "https://index.ros.org/p/plansys2_domain_expert", "package": "plansys2_domain_expert", "package_summary": "This package contains the Domain Expert module for the ROS2 Planning System", "package_details": "Domain Expert Domain Expert module responsible maintaining PDDL domain. main class plansys2::DomainExpertNode, instantiated DomainExpertNode.cpp. plansys2::DomainExpertNode rclcpp_lifecycle::LifecycleNode configuration phase reads model_file parameter, .pddl file read model. class responsible maintaining domain plansys2::DomainExpert, independent ROS2. Domain Expert change active, accessing functionality ROS2 services. facilitate task application developer, plansys2::DomainExpertClient class implemented hides complexity handling ROS2 messages services. API similar plansys2::DomainExpert, implement plansys2::DomainExpertInterface interface. Services: /domain_expert/get_domain [plansys2_msgs::srv::GetDomain] /domain_expert/get_domain_action_details [plansys2_msgs::srv::GetDomainActionDetails] /domain_expert/get_domain_actions [plansys2_msgs::srv::GetDomainActions] /domain_expert/get_domain_durative_action_details [plansys2_msgs::srv::GetDomainDurativeActionDetails] /domain_expert/get_domain_durative_actions [plansys2_msgs::srv::GetDomainActions] /domain_expert/get_domain_function_details [plansys2_msgs::srv::GetNodeDetails] /domain_expert/get_domain_functions [plansys2_msgs::srv::GetStates] /domain_expert/get_domain_predicate_details [plansys2_msgs::srv::GetNodeDetails] /domain_expert/get_domain_predicates [plansys2_msgs::srv::GetStates] /domain_expert/get_domain_types [plansys2_msgs::srv::GetDomainTypes] /domain_expert/get_domain_constants [plansys2_msgs::srv::GetDomainConstants]"},
{"url": "https://index.ros.org/p/plansys2_executor", "package": "plansys2_executor", "package_summary": "This package contains the Executor module for the ROS2 Planning System", "package_details": "Executor Executor module responsible requesting plan Planner, carry calling nodes client application implements actions. executing action, checks requisites Start, case durative Actions). requirements meet, cancels plan execution. responsible applying effects actions, requesting updates Problem Expert. main class Executor plansys2::ExecutorNode, instantiated executor_node.cpp. executions plans carried ROS2 actions, plansys2_msgs::action::ExecutePlan. note goal Domain Expert. ExecutorNode domain problem, plan Planner. action plan, ExecuterNode creates plansys2::ActionExecutor. lifetime object action. object calls actions implemented client appliciation ROS2 actions plansys2_msgs::action::ExecuteAction. client action implementation class plansys2::ActionExecutorClient avoid complexity managing ROS2 actions. feedback information plansys2_msgs::action::ExecuteAction, feedback plansys2::ExecutorNode composed returned plansys2::ExecutorClient. current action plan progress executing action. graph shows execution flow: Actions: /execute_plan [plansys2_msgs::action::ExecutePlan] ActionExecutorClient) /${ACTION_NAME}[plansys2_msgs::action::ExecuteAction] Services: /executor/get_ordered_sub_goals [plansys2_msgs::srv::GetOrderedSubGoals] Subscribed topics: ActionExecutor) /problem_expert/update_notify [std_msgs::msg::Empty] Parameters: ExecutorNode) ~/action_timeouts/actions [list strings] List actions duration overrun percentages ~/action_timeouts/[ACTION_NAME]/duration_overrun_percentage [double] Defines allowable time overrun action based percentage predicted plan duration. plan predicts action secs duration overrun percentage action halted actual duration exceeds secs. executor: ros__parameters: action_timeouts: actions: [\"move\"] move: duration_overrun_percentage:"},
{"url": "https://index.ros.org/p/plansys2_msgs", "package": "plansys2_msgs", "package_summary": "Messages and service files for the ROS2 Planning System", "package_details": "PlanSys2 Messages Representing PDDL Expressions Trees PDDL expressions conveniently represented trees. PDDL expression. (robot_at millennium_falcon)(not (robot_at death_star))) root node tree corresponds outer parentheses encompassing statement. statement children. child corresponds predicate (robot_at millennium_falcon) child corresponds expression (robot_at death_star)). Similarly, expression child predicate (robot_at death_star). tree node implemented simple class object form class Node public String public Node[] children; node data relevant node links children. tree stored list nodes. Representing PDDL Expressions ROS Messages PlanSys2 requires PDDL construct trees passed nodes system. define PDDL tree ROS, custom messages, plansys2_msgs/Tree plansys2_msgs/Node. contents plansys2_msgs/Tree simply array type plansys2_msgs/Node. plansys2_msgs/Node[] nodes contents plansys2_msgs/Node data relevant node links children. uint8 node_type uint8 expression_type uint8 modifier_type uint32 node_id uint32[] children string plansys2_msgs/Param[] parameters float64 bool negate node_type defines type PDDL construct node represents. values supported PlanSys2. uint8 uint8 uint8 uint8 ACTION uint8 PREDICATE uint8 FUNCTION uint8 EXPRESSION uint8 FUNCTION_MODIFIER uint8 NUMBER node_type EXPRESSION, expr_type field define type expression represented. expressions types supported PlanSys2. uint8 COMP_GE uint8 COMP_GT uint8 COMP_LE uint8 COMP_LT uint8 ARITH_MULT uint8 ARITH_DIV uint8 ARITH_ADD uint8 ARITH_SUB node_type FUNCTION_MODIFIER modifier_type field define type function modifier represented. function modifier types supported PlanSys2. uint8 ASSIGN uint8 INCREASE uint8 DECREASE uint8 SCALE_UP uint8 SCALE_DOWN node_id corresponds node\u2019s location nodes list takes range len(nodes)-1]. children list specifies locations, node id\u2019s, node\u2019s children. string parameters list predicate function nodes, defined list parameters. field PDDL functions stores numeric Finally, negate field tracks inverse truth node parent PREDICATE node, PREDICATE node negate node\u2019s Actions plansys2_msgs::action::ExecutePlan start continuously monitor execution plan. File truncated lines full file"},
{"url": "https://index.ros.org/p/plansys2_planner", "package": "plansys2_planner", "package_summary": "This package contains the PDDL-based Planner module for the ROS2 Planning System", "package_details": "Planner Planner module responsible creating plans. default, popf, PDDL solver. module simple, task calling popf binary parsing result. main class plansys2::PlannerNode, instantiated planner_node.cpp. plansys2::PlannerNode rclcpp_lifecycle::LifecycleNode, functionality active phase. Plan solvers plan_solver_plugins parameter. case parameter POPF default. Services /planner/get_plan [plansys2_msgs::srv::GetPlan]"},
{"url": "https://index.ros.org/p/plansys2_popf_plan_solver", "package": "plansys2_popf_plan_solver", "package_summary": "This package contains the PDDL-based Planner module for the ROS2 Planning System", "package_details": "POPF Plan solver package plan solver popf solving PDDL plans."},
{"url": "https://index.ros.org/p/plansys2_problem_expert", "package": "plansys2_problem_expert", "package_summary": "This package contains the Problem Expert module for the ROS2 Planning System", "package_details": "Problem Expert Problem Expert module responsible maintaining instances, predicates goals PDDL problem. main class plansys2::ProblemExpertNode, instantiated ProblemExpertNode.cpp. plansys2::ProblemExpertNode rclcpp_lifecycle::LifecycleNode, functionality active phase. class responsible maintaining problem instance plansys2::ProblemExpert, independent ROS2. Problem Expert dynamic volatile, accessing functionality ROS2 services. facilitate task application developer, plansys2::ProblemExpertClient class implemented hides complexity handling ROS2 messages services. API similar plansys2::ProblemExpert, implement plansys2::ProblemExpertInterface interface. Problem Expert instantiates plansys2::DomainExpertClient, update query verified domain check valid. update Problem, notified publishing std_msgs::msg::Empty /problem_expert/update_notify. helps modules applications aware updates, polling check Services /problem_expert/add_problem_function [plansys2_msgs::srv::AffectNode] /problem_expert/add_problem_goal [plansys2_msgs::srv::AddProblemGoal] /problem_expert/add_problem_instance [plansys2_msgs::srv::AffectParam] /problem_expert/add_problem_predicate [plansys2_msgs::srv::AffectNode] /problem_expert/clear_problem_knowledge [plansys2_msgs::srv::ClearProblemKnowledge] /problem_expert/exist_problem_function [plansys2_msgs::srv::ExistNode] /problem_expert/exist_problem_predicate [plansys2_msgs::srv::ExistNode] /problem_expert/get_problem [plansys2_msgs::srv::GetProblem] /problem_expert/get_problem_function [plansys2_msgs::srv::GetNodeDetails] /problem_expert/get_problem_functions [plansys2_msgs::srv::GetStates] /problem_expert/get_problem_goal [plansys2_msgs::srv::GetProblemGoal] /problem_expert/get_problem_instance [plansys2_msgs::srv::GetProblemInstanceDetails] /problem_expert/get_problem_instances [plansys2_msgs::srv::GetProblemInstances] /problem_expert/get_problem_predicate [plansys2_msgs::srv::GetNodeDetails] /problem_expert/get_problem_predicates [plansys2_msgs::srv::GetStates] /problem_expert/is_problem_goal_satisfied [plansys2_msgs::srv::IsProblemGoalSatisfied] /problem_expert/remove_problem_function [plansys2_msgs::srv::AffectNode] /problem_expert/remove_problem_goal [plansys2_msgs::srv::RemoveProblemGoal] /problem_expert/remove_problem_instance [plansys2_msgs::srv::AffectParam] /problem_expert/remove_problem_predicate [plansys2_msgs::srv::AffectNode] /problem_expert/update_problem_function [plansys2_msgs::srv::AffectNode] Published topics /problem_expert/update_notify [std_msgs::msg::Empty]"},
{"url": "https://index.ros.org/p/plansys2_terminal", "package": "plansys2_terminal", "package_summary": "A terminal tool for monitor and manage the ROS2 Planning System", "package_details": "Terminal Plansys2 Terminal module tool monitor edit application. tutorial node created Terminal object, starts looping run_console() method reading terminal input calling services actions."},
{"url": "https://index.ros.org/p/plansys2_tests", "package": "plansys2_tests", "package_summary": "This package contains the tests package for the ROS2 Planning System", "package_details": "PlanSys2 tests"},
{"url": "https://index.ros.org/p/plansys2_tools", "package": "plansys2_tools", "package_summary": "A set of tools for monitoring ROS2 Planning System", "package_details": "Tools"},
{"url": "https://index.ros.org/p/irobot_create_nodes", "package": "irobot_create_nodes", "package_summary": "ROS 2 Nodes for the simulated iRobot(R) Create(R) 3 Educational Robot.", "package_details": "iRobot\u00ae Create\u00ae Nodes package set nodes simulating iRobot\u00ae Create\u00ae robot. node defined shared library registered rclcpp_components run-time composition applications."},
{"url": "https://index.ros.org/p/irobot_create_toolbox", "package": "irobot_create_toolbox", "package_summary": "Components and helpers for the iRobot(R) Create(R) 3 Educational Robot.", "package_details": "iRobot Create3 Toolbox Utilities tools building Create nodes."},
{"url": "https://index.ros.org/p/irobot_create_gz_bringup", "package": "irobot_create_gz_bringup", "package_summary": "Provides launch and configuration scripts for a Ignition simulated iRobot(R) Create(R) 3 Educational Robot.", "package_details": "turtlebot4_gz launch simulation, run ros2 launch irobot_create_gz_bringup create3_gz.launch.py Wait simulation environment load completely, press orange play button lower-left corner start simulation. robot starts docked charger. Worlds default simulation world depot environment. chage worlds, world argument. Supported worlds depot (default) maze Robot spawn location default robot spawns origin. change robot\u2019s spawn location, yaw arguments. Note changing result robot spawning air ground plane, depending"},
{"url": "https://index.ros.org/p/irobot_create_gz_plugins", "package": "irobot_create_gz_plugins", "package_summary": "Ignition plugins for simulated iRobot(R) Create(R) 3 Educational Robot.", "package_details": "turtlebot4_gz_gui_plugins"},
{"url": "https://index.ros.org/p/slg_msgs", "package": "slg_msgs", "package_summary": "This package provides classes and messages to interact with laser related geometry.", "package_details": "slg_msgs Overview package classes messages interact laser related geometry, simple laser geometry. simple_laser_geometry API point2D.hpp: Faster point class based PCL unnecesary functions. polygon.hpp: Definitions functionality relating polygons. segment2D.hpp: Definitions functionality relating segments laserscan. Messages (.msg) Segment: Describes laserscan splitted segment. SegmentArray: array Segment messages."},
{"url": "https://index.ros.org/p/turtlebot4_bringup", "package": "turtlebot4_bringup", "package_summary": "Turtlebot4 Robot Bringup", "package_details": "turtlebot4_bringup"},
{"url": "https://index.ros.org/p/turtlebot4_ignition_bringup", "package": "turtlebot4_ignition_bringup", "package_summary": "TurtleBot 4 Ignition Simulator bringup", "package_details": "turtlebot4_ignition"},
{"url": "https://index.ros.org/p/turtlebot4_ignition_gui_plugins", "package": "turtlebot4_ignition_gui_plugins", "package_summary": "Turtlebot4 Ignition Simulator GUI Plugins", "package_details": "turtlebot4_ignition_gui_plugins"},
{"url": "https://index.ros.org/p/kobuki_testsuite", "package": "kobuki_testsuite", "package_summary": "Kobuki test suite: this package provides tools to thoroughly test Kobuki's hardware.", "package_details": "kobuki_testsuite package tools kobuki_qtestsuite kobuki_desktop repository."},
{"url": "https://index.ros.org/p/adi_iio", "package": "adi_iio", "package_summary": "ROS package to interface with IIO devices", "package_details": "adi_iio ROS2 Package IIO Integration {.contents depth=\u201d2\u201d} Overview adi_iio package bridges gap Analog Devices\u2019 IIO hardware ROS2 ecosystem. robust, easy-to-integrate interfaces sensor data acquisition real-time processing, enabling rapid development advanced robotics automation applications. facilitating seamless communication data exchange IIO devices ROS2 nodes, package serves comprehensive framework integrating industrial systems modern robotics solutions. collection services read/write IIO attributes, manage IIO buffers. attach topics attributes/buffers project intended internal developers external contributors seeking leverage Analog Devices\u2019 IIO devices ROS2 environments. Started quickly started adi_iio package, organized detailed documentation sections: information prerequisites, repository setup, building package, refer Installation section. Examples Introduction{.interpreted-text role=\u201dref\u201d} overview examples. Start Service Call Reference{.interpreted-text role=\u201dref\u201d} ROS2 services. reference standalone nodes launch files specific hardware interaction. information parameters services, refer Node Description section. System Tests: package includes comprehensive system tests located test/ directory. tests integrated colcon test require specific hardware (Analog Devices IIO devices) execute. Refer test directory's README detailed setup instructions execution guidelines. building documentation, refer Building Project Documentation Locally. Issue Tracker: Report bugs, request features, submit technical queries Issue Tracker. Guidance: additional communication guidelines, refer COMMUNICATION. Contributing Contributions key project\u2019s success. submitting Familiarize code testing conventions. Consult CONTRIBUTING detailed instructions. Ensure code adheres design values guidelines. License project licensed Apache License, Version product party open source software. licenses notices software listed iio_ros2 Party Open Source Software. CHANGELOG Refer CHANGELOG version history release notes. Installation section describes install required software run adi_iio package. Prerequisites: installing adi_iio package, ensure compatible version ROS2 installed humble). ROS2 Humble Installation Guide instructions. libiio library installed Host host running Ubuntu target Raspberry automatically installed rosdep systems ROS2 installed. Alternatively, build specific version source installation script (Optional) Build libiio sources). File truncated lines full file"},
{"url": "https://index.ros.org/p/adi_imu", "package": "adi_imu", "package_summary": "Publisher for ADI IMUs", "package_details": "adi_imu ROS2 driver ADI's IMUs {.contents depth=\u201d2\u201d} Overview Analog Devices offers series precision, miniature microelectromechanical system (MEMS) inertial measurement units (IMUs) include triaxial gyroscope triaxial accelerometer. inertial combines signal conditioning optimizes dynamic performance. factory calibration characterizes sensor sensitivity, bias, alignment, linear acceleration (gyroscope bias), point percussion (accelerometer location). result, sensor dynamic compensation formulas provide accurate sensor measurements broad set conditions. Started quickly started adi_iio package, organized detailed documentation sections: information prerequisites, repository setup, building package, refer imu_ros2 repository section. information running adi_imu node local client remote client, refer Run adi_imu node section. information topics, parameters, examples, refer adi_imu node description section. adi_imu node, refer Examples section. Issue Tracker: Report bugs, request features, submit technical queries Issue Tracker. Guidance: additional communication guidelines, refer COMMUNICATION. Contributing Contributions key project\u2019s success. submitting Familiarize code testing conventions. Consult CONTRIBUTING.md detailed instructions. Ensure code adheres design values guidelines. License project licensed Apache License, Version LICENSE. product party open source software. licenses notices software listed imu_ros2 Party Open Source Software. Changelog Refer CHANGELOG file version history release notes. Supported Devices ADIS16465 ADIS16467 ADIS16470 ADIS16475 ADIS16477 ADIS16500 ADIS16501 ADIS16505 ADIS16507 ADIS16545 ADIS16547 ADIS16575 ADIS16576 ADIS16577 Applications Navigation, stabilization, instrumentation Unmanned autonomous vehicles Smart agriculture construction machinery Factory/industrial automation, robotics Virtual/augmented reality Internet Moving imu_ros2 repository repository implements ROS2 node reads data ADI IMU devices publishes read data topics. node able configure IMU devices. File truncated lines full file"},
{"url": "https://index.ros.org/p/aruco_markers", "package": "aruco_markers", "package_summary": "A ros2 node for detecting aruco markers in camera images", "package_details": "aruco_markers"},
{"url": "https://index.ros.org/p/at_sonde_ros_driver", "package": "at_sonde_ros_driver", "package_summary": "A ROS 2 driver to stream the monitored parameters of an In-Situ Aqua TROLL Multiparameter Sonde.", "package_details": "at_sonde_ros_driver Overview package ROS driver stream monitored parameters In-Situ Aqua TROLL Multiparameter Sonde, modbus serial communication. package tested Sonde. Installation ROS installed system. Binary install binary package, command: sudo apt update sudo apt install ros-$ROS_DISTRO-at-sonde-ros-driver Source build package source, follow steps: Create workspace directory: mkdir ~/ros2_ws/src ~/ros2_ws/src Clone repository: git clone https://github.com/ma-shangao/at_sonde_ros_driver.git Prepare required dependencies rosdep: ~/ros2_ws rosdep install --from-paths src --ignore-src Build package: colcon build ROS Node: at_sonde_ros_driver_node Published Topics node publishes topics: Topic Message Type Description ROS param pub_topic_names| std_msgs/msg/Float32 Publisher selected sonde parameters ROS Parameters configurable ROS parameters node: Parameter Type Default Description baud int Baud rate serial communication modbus_debug_flag bool false Enable debug messages modbus communication modbus_timeout_microseconds int Timeout modbus communication microseconds modbus_timeout_seconds int Timeout modbus communication seconds pub_topic_names list[string] [\u201ctemperature\u201d, \u201cbattery_remaining\u201d] Names topics publish streamed data retry_limit int Number retries modbus communication sensor_scan_flag bool false Scan sensor reconfiguration serial_port string \u201c/dev/ttyUSB0\u201d Serial port modbus communication sonde_add int Sonde address modbus communication streaming_param_reg_adds list[int] Register addresses parameters streamed pub_topic_names streaming_param_reg_adds parameters set pairs. element pub_topic_names corresponds element streaming_param_reg_adds, Usage run node, command: ros2 run at_sonde_ros_driver at_sonde_ros_driver_node ROS parameters configured YAML file. ros2 run at_sonde_ros_driver at_sonde_ros_driver_node --ros-args --params-file <path_to_yaml_file> Issues ROS parameters set start node."},
{"url": "https://index.ros.org/p/automatika_embodied_agents", "package": "automatika_embodied_agents", "package_summary": "agents", "package_details": "EmbodiedAgents fully-loaded ROS2 based framework creating interactive physical agents understand, remember, act contextual information environment. Production Ready Physical Agents: Designed autonomous robot systems operate real world dynamic environments. EmbodiedAgents simple create systems Physical Intuitive API: Simple pythonic API utilize local cloud based models (specifically Multimodal LLMs transformer based architectures) robots, benefits component lifecycle management, health monitoring fallback mechanisms agents robust. Self-referential Event Driven: agent created EmbodiedAgents start, stop reconfigure components based internal external events. agent change model planning based location map input vision model. EmbodiedAgents simple create agents self-referential G\u00f6del machines. Semantic Memory: Integrates vector databases, semantic routing supporting components quickly build arbitrarily complex graphs agentic information flow. utilize bloated \u201cGenAI\u201d frameworks robot. ROS2: Utilizes ROS2 underlying distributed communications backbone. Theoretically, devices provide ROS2 package utilized send data models, callbacks implemented commonly data types infinite extensibility. Checkout Installation Instructions started Quickstart Guide familiar Basic Concepts Dive Recipes Installation Install model serving platform core EmbodiedAgents agnostic model serving platforms. supports Ollama, RoboML platform cloud provider OpenAI compatible API vLLM, lmdeploy install instructions respective projects. Support platforms continuously added. support platform, open issue/PR. Install EmbodiedAgents (Ubuntu) ROS versions humble, install EmbodiedAgents package manager. Ubuntu: sudo apt install ros-$ROS_DISTRO-automatika-embodied-agents Alternatively, grab favorite deb package release page install sudo dpkg ros-$ROS_DISTRO-automatica-embodied-agents_$version$DISTRO_$ARCHITECTURE.deb attrs version package manager install pip pip install 'attrs>=23.2.0' Install EmbodiedAgents source Dependencies Install python dependencies pip install numpy opencv-python-headless 'attrs>=23.2.0' jinja2 httpx setproctitle msgpack msgpack-numpy platformdirs tqdm websockets Download Sugarcoat\ud83c\udf6c git clone https://github.com/automatika-robotics/sugarcoat Install EmbodiedAgents git clone https://github.com/automatika-robotics/embodied-agents.git colcon build source install/setup.bash python your_script.py Quick Start ROS package, EmbodiedAgents pure pythonic describing node graph Sugarcoat\ud83c\udf6c. Copy recipe python script run ```python agents.clients.ollama import OllamaClient agents.components import VLM agents.models import OllamaModel agents.ros import Topic, Launcher Define input output topics (pay attention msg_type) text0 Topic(name=\u201dtext0\u201d, msg_type=\u201dString\u201d) image0 Topic(name=\u201dimage_raw\u201d, msg_type=\u201dImage\u201d) text1 Topic(name=\u201dtext1\u201d, msg_type=\u201dString\u201d) Define model client (working Ollama case) OllamaModel generic wrapper Ollama models llava OllamaModel(name=\u201dllava\u201d, checkpoint=\u201dllava:latest\u201d) llava_client OllamaClient(llava) Define VLM component component represents node functionality) mllm VLM( inputs=[text0, image0], outputs=[text1], model_client=llava_client, trigger=[text0], component_name=\u201dvqa\u201d Additional prompt settings File truncated lines full file"},
{"url": "https://index.ros.org/p/automatika_ros_sugar", "package": "automatika_ros_sugar", "package_summary": "Syntactic sugar for ROS2 nodes creation and management", "package_details": "Sweetest Build ROS2 Systems Sugarcoat meta-framework injects lot syntactic sugar building complex, event-driven multinode systems ROS2, intuitive Python API. Key Features Feature Description Event-Driven Core Built-in primitives Events Actions enables dynamic runtime configuration control system\u2019s Components. Built-in Resilience Fallbacks Fault Tolerance core design concepts, ensuring systems robust reliable. Intuitive Python API Design entire system\u2014nodes, events, actions\u2014using clean, readable Python code. Dynamic Web Automatically generate fully dynamic, extensible web interface monitoring configuring system. Launch Replacement pythonic alternative ROS2 Launch API, providing greater flexibility runtime control real-world applications. Packages Built Sugarcoat Kompass: framework building robust comprehensive event-driven navigation stacks easy-to-use intuitive Python API. EmbodiedAgents: fully-loaded framework creating interactive physical agents understand, remember, act contextual information environment. Started Learn design concepts Sugarcoat Learn create ROS2 package Sugarcoat Introducing Dynamic Web Sugarcoat Recipes Dynamic Web feature takes system visibility control level. Built FastHTML MonsterUI, designed automatically generate fully dynamic, extensible web interface Sugarcoat recipe, completely eliminating manual front-end development. feature instantly transforms complex, multinode ROS2 system monitorable configurable web application. Automatic Generation Action Web effortlessly generates interfaces types Sugarcoat recipes: General MLLM Recipe fully functional interface generated MLLM agent recipe EmbodiedAgents, automatically providing controls settings real-time text robot. Vision Follower Recipe complex system components Kompass EmbodiedAgents control robot motion follow visual target. automatically renders image data, detections, robot action commands, demonstrating ability handle multimedia complex component interactions. What\u2019s Automatic Settings Interfaces configuring settings Components recipe generated fly. Auto Visualization: Front-end controls data visualizations Inputs Outputs created automatically. WebSocket-Based Streaming: Features bidirectional, low-latency communication streaming text, image, audio messages. Responsive Layouts: Input output elements presented clear, adaptable grid layouts. Extensible Design: Easily add support message types custom visualizations extensions. Sugarcoat Works core Sugarcoat revolves concepts: Component: main execution unit ROS2 lifecycle node abstraction) configured Inputs/Outputs Fallback behaviors. component reports Health Status. Learn Components Events Actions: Mechanisms handle reconfigure components dynamically runtime. Learn Events Learn Actions Launcher: Takes defined Components, Events, Actions, executes system multi-threaded multi-process execution. works internal Monitor manage component lifecycles track events. Learn Launcher File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_adapi_v1_msgs", "package": "autoware_adapi_v1_msgs", "package_summary": "The Autoware AD API interfaces", "package_details": "autoware_adapi_v1_msgs ResponseStatus message response status commonly service type API. API define status codes. status codes primarily error invalid parameter timeout. API succeeds, set success true, code message empty string. Alternatively, codes messages warnings additional information. API fails, set success false, code related status code, message information. status code reserved success. status code reserved typical cases. Routing routing service support formats. pose map dependent data body part route message optional, route exist cleared service. routing API. Localization initialization initialization state reflect localization errors. diagnostics purpose. localization API."},
{"url": "https://index.ros.org/p/autoware_adapi_version_msgs", "package": "autoware_adapi_version_msgs", "package_summary": "The Autoware AD API version interfaces", "package_details": "autoware_adapi_version_msgs InterfaceVersion product life cycle, multiple vehicles versions API due requirements functional improvements. vehicle stability vehicle enable advanced functionality. situation, API users developers web service switch application behavior based version vehicle version API Semantic Versioning order provide intuitive understanding versions."},
{"url": "https://index.ros.org/p/autoware_cmake", "package": "autoware_cmake", "package_summary": "CMake scripts for Autoware", "package_details": "autoware_cmake package CMake scripts Autoware. Usage autoware_package.cmake Call autoware_package() defining build targets, set common options Autoware. cmake_minimum_required(VERSION project(package_name) find_package(autoware_cmake REQUIRED) autoware_package() ament_auto_add_library(...)"},
{"url": "https://index.ros.org/p/autoware_lint_common", "package": "autoware_lint_common", "package_summary": "The list of commonly used linters in Autoware", "package_details": "autoware_lint_common custom version ament_lint_common Autoware. Usage Add dependencies ament_lint_auto autoware_lint_common package package.xml: <test_depend>ament_lint_auto</test_depend> <test_depend>autoware_lint_common</test_depend> CMakeLists.txt: if(BUILD_TESTING) find_package(ament_lint_auto REQUIRED) ament_lint_auto_find_test_dependencies() endif() ROS messages services, remove ADD_LINTER_TESTS argument rosidl_generate_interfaces() function CMakelists.txt file. linters run colcon test. ament_cmake_copyright ament_cmake_cppcheck ament_cmake_lint_cmake ament_cmake_xmllint Design original ament_lint_common formatters/linters ament_cmake_uncrustify, ament_cmake_cpplint ament_cmake_flake8. don\u2019t include run pre-commit MoveIt benefits version tools independent ament\u2019s version. easily integrate IDE. easily check files repository writing test_depend package. run formatters/linters building, error detection faster. Ideally, linters moved pre-commit support future."},
{"url": "https://index.ros.org/p/autoware_internal_localization_msgs", "package": "autoware_internal_localization_msgs", "package_summary": "The autoware_internal_localization_msgs package", "package_details": "autoware_internal_localization_msgs package message, service, action definitions localization system Autoware. Description package includes service definitions PoseWithCovarianceStamped: Service estimate initial pose covariance information InitializeLocalization Service initialize localization system methods Services PoseWithCovarianceStamped service estimate initial pose vehicle. Request: geometry_msgs/PoseWithCovarianceStamped pose_with_covariance: Input pose covariance Response: bool success: service execution successful bool reliable: estimated pose reliable geometry_msgs/PoseWithCovarianceStamped pose_with_covariance: Estimated pose covariance InitializeLocalization service initialize localization system methods. Request: geometry_msgs/PoseWithCovarianceStamped[<=1] pose_with_covariance: Optional input pose initialization uint8 method: Initialization method AUTO initial position automatically estimated localization algorithm. input pose initial guess DIRECT initial position set input pose localization algorithm. Response: autoware_common_msgs/ResponseStatus status: Response status error codes case failure: ERROR_UNSAFE Unsafe initialization ERROR_GNSS_SUPPORT GNSS support error ERROR_GNSS GNSS error ERROR_ESTIMATION Estimation error"},
{"url": "https://index.ros.org/p/autoware_lanelet2_extension", "package": "autoware_lanelet2_extension", "package_summary": "The autoware_lanelet2_extension package contains libraries to handle Lanelet2 format data.", "package_details": "autoware_lanelet2_extension package package external library Lanelet2 meant ease Lanelet2 Autoware. Lanelet Format Autoware Autoware extended Lanelet2 Format Autoware, means add tags default OSM file fully Lanelet2 maps. details custom tags, refer document. Code API Autoware OSM Parser Autoware Lanelet2 Format .osm extension original Lanelet2. custom tags parser. includes: reading <MapMetaInfo> tag information map format version map version. parser registered \u201cautoware_osm_handler\u201d lanelet parser Projection MGRS Projector MGRS projector projects latitude longitude MGRS Coordinates. Transverse Mercator Projector projector projects latitude longitude Transverse Mercator coordinate. similar UTM projector Lanelet2 library, custom central meridian origin. Regulatory Elements Autoware Traffic Light Autoware Traffic Light class retrieve information traffic lights. Autoware Traffic Light class members: traffic light shape light bulbs information traffic lights stopline traffic light Autoware intersection module requires information lanes object detection, lanes traffic light color red ego green, right_of_way tag regulatory element consists tuple (right_of_ways yield_lanes), right_of_ways priority overyield_lanes. right_of_way tag defined Lanelet2, package proper conditions tag set. Utility Message Conversion functions convert lanelet map objects ROS messages. conversions: lanelet::LaneletMapPtr to/from autoware_map_msgs::msg::LaneletMapBin lanelet::Point3d geometry_msgs::Point lanelet::Point2d geometry_msgs::Point lanelet::BasicPoint3d geometry_msgs::Point Query module functions retrieve information maps. crosswalks, trafficlights, stoplines Utilities module functions related Lanelet. matching waypoint lanelets Route Checker module function check loading route valid invalid, puts warning dying. case valid route created map current Visualization Visualization functions convert lanelet objects visualization marker messages. conversions: lanelet::Lanelet Triangle Markers lanelet::LineString LineStrip Markers TrafficLights Triangle Markers Nodes autoware_lanelet2_extension_sample Code explains autoware_lanelet2_extension library executable meant autoware_lanelet2_extension node checks .osm file Autoware version Lanelet2 format. check running: ros2 run autoware_lanelet2_extension autoware_lanelet2_validation \u2013ros-args map_file:=<path/to/map.osm> File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_control_msgs", "package": "autoware_control_msgs", "package_summary": "Autoware control messages package.", "package_details": "autoware_control_msgs Design Vehicle dimensions axes: https://autowarefoundation.github.io/autoware-documentation/main/design/autoware-interfaces/components/vehicle-dimensions/ Lateral.msg Defines lateral control command message timestamp. message conveys expectation vehicle\u2019s lateral state configuration time point: control_time. field steering_tire_angle required. field steering_tire_rotation_rate optional required nodes. field is_defined_steering_tire_rotation_rate set true. Longitudinal.msg Defines longitudinal control command message timestamp. message conveys expectation vehicle\u2019s longitudinal state configuration time point: control_time. field velocity required. field acceleration optional required nodes. field is_defined_acceleration set true. field jerk optional required nodes. field is_defined_jerk set true. Control.msg Defines control command message, combining Lateral.msg Longitudinal.msg. message conveys expectation vehicle\u2019s combined control state configuration time point: control_time. control_time defined, control_time field lateral longitudinal fields ControlHorizon.msg Defines control commands array calculated future horizon. Control messages ordered future time_step_ms increments. element array control signals control_time message. control_time field element controls array"},
{"url": "https://index.ros.org/p/autoware_map_msgs", "package": "autoware_map_msgs", "package_summary": "Autoware map messages package.", "package_details": "autoware_map_msgs AreaInfo.msg message represents area information. intended query partial differential map loading GetPartialPointCloudMap.srv GetDifferentialPointCloudMap.srv section). PointCloudMapCellWithID.msg message pointcloud data attached PointCloudMapCellMetaDataWithID.msg message pointcloud meta data attached IDs intended query selected PCD map loading GetSelectedPointCloudMap.srv section). MapProjectorInfo.msg message information required project global coordinates local coordinates Autoware, includes projection method parameters projection. information, refer readme map_projection_loader Autoware Universe. GetPartialPointCloudMap.srv area query (AreaInfo), response expected PCD maps attached unique area overlaps query. GetDifferentialPointCloudMap.srv area query IDs client node response expected PCD maps attached unique overlaps area query possessed client node set PCD map client node set PCD map overlaps area query, pcd}(id)$ function returns PCD data corresponds case, response loaded_pcds: $\\lbrace [id,{\\rm pcd}(id)]~ \\backslash \\rbrace$ ids_to_remove: $\\lbrace \\backslash \\rbrace$ A\\backslash \\iff \\wedge \\notin GetSelectedPointCloudMap.srv IDs query, response expected PCD maps attached unique query. interface, client expected receive PointCloudMapCellMetaDataWithID.msg metadata retrieve information IDs."},
{"url": "https://index.ros.org/p/autoware_perception_msgs", "package": "autoware_perception_msgs", "package_summary": "Autoware perception messages package.", "package_details": "autoware_perception_msgs TrafficSignalElement.msg element traffic signals red, amber, green, turn arrow. elements based Vienna Convention Road Signs Signals. TrafficSignal.msg direction intersection, state traffic signal number equipment. message represents traffic signal concept components planning. TrafficSignalArray.msg plural type TrafficSignal.msg."},
{"url": "https://index.ros.org/p/autoware_planning_msgs", "package": "autoware_planning_msgs", "package_summary": "Autoware planning messages package.", "package_details": "autoware_planning_msgs PoseWithUuidStamped.msg message pose data attached uuid header. case goal modification"},
{"url": "https://index.ros.org/p/autoware_sensing_msgs", "package": "autoware_sensing_msgs", "package_summary": "Autoware sensing messages package.", "package_details": "autoware_sensing_msgs GNSS/INS sensor messages Data Types: Position Orientation Twist (Velocity) linear angular Accel linear angular Position information, NavSatFix message. sensor MSL(Mean Sea Level) altitude, altitude field. sensor_msgs/NavSatFix fields std_msgs/Header header float64 latitude float64 longitude float64 altitude float64[9] position_covariance detailed info east, north, Coordinate Axes Conventions. Orientation GnssInsOrientationStamped.msg message GNSS-INS orientation information. orientation represented quaternion. sensor roll, pitch, yaw; convert quaternion. detailed info roll, pitch, yaw rotation axes Coordinate Axes Conventions. Velocity information, TwistWithCovarianceStamped message. structure geometry_msgs/TwistWithCovarianceStamped fields std_msgs/Header header geometry_msgs/TwistWithCovariance twist geometry_msgs/Twist twist geometry_msgs/Vector3 linear geometry_msgs/Vector3 angular float64[36] covariance linear field linear velocities axes. angular field angular velocities axes. covariance matrix parameters linear angular velocities order. detailed info covariance matrix RMSE? Variances? Covariance Matrix?. Acceleration information, AccelWithCovarianceStamped message. structure geometry_msgs/AccelWithCovarianceStamped fields std_msgs/Header header geometry_msgs/AccelWithCovariance accel geometry_msgs/Accel accel geometry_msgs/Vector3 linear geometry_msgs/Vector3 angular float64[36] covariance linear field linear accelerations axes. angular field angular accelerations axes. covariance matrix parameters linear angular accelerations order. detailed info covariance matrix RMSE? Variances? Covariance Matrix?. Design Coordinate Frames Frames Autoware defined flowchart earth Map[map] base_link base_link gnss_ins base_link sensor_a base_link sensor_b Autoware, earth frame omitted, GnssInsPositionStamped message. File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_v2x_msgs", "package": "autoware_v2x_msgs", "package_summary": "Autoware v2x messages package.", "package_details": "autoware_v2x_msgs Virtual gate messages Overview message represents status virtual gate passing area managed facility. virtual gate treats area entry permission shared resource controls vehicles acquiring releasing locks. facility support protocols, Autoware component converts protocol message. Autoware handle facilities protocols unified message. Sequence time lag commands reflected, vehicle wait receives status sequence command vehicle receives status, treat unlocked. Gates entrance exit gate IDs. check vehicles pass simultaneously multiple routes area. omitted, treated lock entire area. Vehicle message include vehicle add component required communication protocol. facilities publish multiple vehicle statuses, filter status vehicle."},
{"url": "https://index.ros.org/p/autoware_utils", "package": "autoware_utils", "package_summary": "The autoware_utils package", "package_details": "autoware_utils package deprecated compatibility. separate packages feature autoware_utils_debug autoware_utils_diagnostics autoware_utils_geometry autoware_utils_logging autoware_utils_math autoware_utils_pcl autoware_utils_rclcpp autoware_utils_system autoware_utils_tf autoware_utils_uuid autoware_utils_visualization"},
{"url": "https://index.ros.org/p/autoware_utils_debug", "package": "autoware_utils_debug", "package_summary": "The autoware_utils_debug package", "package_details": "autoware_utils_debug Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities debug. extensively Autoware project handle common tasks publishing debug data measuring time. Design debug_publisher.hpp: helper class publishing debug messages timestamps. debug_traits.hpp: Traits identifying debug message types. processing_time_publisher.hpp: Publishes processing times diagnostic messages. published_time_publisher.hpp: Tracks publishes time messages published. time_keeper.hpp: Tracks reports processing time functions. Code Snippets Handling Debug Message Types debug_traits.hpp #include <autoware_utils_debug/debug_publisher.hpp> #include <autoware_utils_debug/debug_traits.hpp> #include <rclcpp/rclcpp.hpp> int main(int argc, char argv[]) rclcpp::init(argc, argv); auto node rclcpp::Node::make_shared(\"debug_node\"); Initialize DebugPublisher autoware_utils_debug::DebugPublisher debug_pub(node, \"/debug\"); Publish debug message custom type float debug_data debug_pub.publish<autoware_internal_debug_msgs::msg::Float32Stamped>(\"example\", debug_data); rclcpp::shutdown(); return Logging Processing Times ProcessingTimePublisher #include <autoware_utils_debug/processing_time_publisher.hpp> #include <rclcpp/rclcpp.hpp> #include <map> int main(int argc, char argv[]) rclcpp::init(argc, argv); auto node rclcpp::Node::make_shared(\"processing_time_node\"); Initialize ProcessingTimePublisher autoware_utils_debug::ProcessingTimePublisher processing_time_pub(node.get(), \"~/debug/processing_time_ms\"); Simulate processing times std::map<std::string, double> processing_times {\"node1\", {\"node2\", {\"node3\", Publish processing times processing_time_pub.publish(processing_times); rclcpp::shutdown(); return"},
{"url": "https://index.ros.org/p/autoware_utils_diagnostics", "package": "autoware_utils_diagnostics", "package_summary": "The autoware_utils_diagnostics package", "package_details": "autoware_utils_diagnostics Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities diagnostics. extensively Autoware project handle common tasks handling diagnostic tasks. Design diagnostics_interface.hpp: interface publishing diagnostic messages."},
{"url": "https://index.ros.org/p/autoware_utils_geometry", "package": "autoware_utils_geometry", "package_summary": "The autoware_utils_geometry package", "package_details": "autoware_utils_geometry Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities geometry. extensively Autoware project handle common tasks geometric calculations message conversions. Design message modules. covariance.hpp: Indices accessing covariance matrices ROS messages. operation.hpp: Overloaded operators quaternion messages. geometry module classes functions handling points, vectors, polygons, performing geometric operations: boost_geometry.hpp: Integrates Boost.Geometry advanced geometric computations, defining point, segment, box, linestring, ring, polygon types. alt_geometry.hpp: Implements alternative geometric types operations vectors polygons, including vector arithmetic, polygon creation, geometric predicates. ear_clipping.hpp: algorithms triangulating polygons ear clipping method. gjk_2d.hpp: Implements GJK algorithm fast intersection detection convex polygons. sat_2d.hpp: Implements SAT (Separating Axis Theorem) algorithm detecting intersections convex polygons. random_concave_polygon.hpp random_convex_polygon.hpp: Generate random concave convex polygons testing purposes. pose_deviation.hpp: Calculates deviations poses terms lateral, longitudinal, yaw angles. boost_polygon_utils.hpp: Utility functions manipulating polygons, including: Checking polygon clockwise. Rotating polygons origin. Converting poses shapes polygons. Expanding polygons offset. geometry.hpp: Comprehensive geometric operations, including: Distance calculations points segments. Curvature computation. Pose transformations interpolations. Intersection checks convex polygons GJK. Conversion coordinate systems. Code Snippets Vector2d alt_geometry.hpp #include \"autoware_utils/geometry/alt_geometry.hpp\" namespace autoware_utils_geometry::alt; int main() Vector2d vec1(3.0, Vector2d vec2(1.0, Compute dot product double dot_product vec1.dot(vec2); Compute norm double norm vec1.norm(); return Manipulating Polygons boost_polygon_utils.hpp #include \"autoware_utils/geometry/boost_polygon_utils.hpp\" #include \"autoware_utils/geometry/boost_geometry.hpp\" #include <rclcpp/rclcpp.hpp> int main(int argc, char argv[]) rclcpp::init(argc, argv); auto node rclcpp::Node::make_shared(\"polygon_node\"); Create polygon autoware_utils_geometry::Polygon2d polygon; Assume polygon populated points Rotate polygon degrees autoware_utils_geometry::Polygon2d rotated_polygon autoware_utils_geometry::rotate_polygon(polygon, M_PI Expand polygon offset autoware_utils_geometry::Polygon2d expanded_polygon autoware_utils_geometry::expand_polygon(polygon, Check polygon clockwise bool is_clockwise autoware_utils_geometry::is_clockwise(polygon); rclcpp::shutdown(); return"},
{"url": "https://index.ros.org/p/autoware_utils_logging", "package": "autoware_utils_logging", "package_summary": "The autoware_utils_logging package", "package_details": "autoware_utils_logging Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities logging. extensively Autoware project handle common tasks configuring logger levels. Design logger_level_configure.hpp: Utility configuring logger levels dynamically."},
{"url": "https://index.ros.org/p/autoware_utils_math", "package": "autoware_utils_math", "package_summary": "The autoware_utils_math package", "package_details": "autoware_utils_math Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities mathematics. extensively Autoware project handle common tasks normalization unit conversion. Design accumulator.hpp: class accumulating statistical data, supporting min, max, calculations. constants.hpp: Defines commonly mathematical constants gravity. normalization.hpp: Functions normalizing angles degrees. range.hpp: Functions generating sequences numbers (arange, linspace). trigonometry.hpp: Optimized trigonometric functions faster computation. unit_conversion.hpp: Functions converting units degrees radians, km/h Code Snippets Accumulator accumulator.hpp #include <autoware_utils_math/accumulator.hpp> int main() autoware_utils_math::Accumulator<double> acc; acc.add(1.0); acc.add(2.0); acc.add(3.0); std::cout acc.mean() std::cout \"Min: acc.min() std::cout \"Max: acc.max() std::cout \"Count: acc.count() return"},
{"url": "https://index.ros.org/p/autoware_utils_pcl", "package": "autoware_utils_pcl", "package_summary": "The autoware_utils_pcl package", "package_details": "autoware_utils_pcl Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities point cloud. extensively Autoware project handle common tasks point cloud transformations. Design pcl_conversion.hpp: Efficient conversion transformation PointCloud2 messages PCL point clouds. transforms.hpp: Efficient methods transforming manipulating point clouds. Code Snippets Efficient Point Cloud Conversion pcl_conversion.hpp #include <autoware_utils_pcl/pcl_conversion.hpp> #include <sensor_msgs/msg/point_cloud2.hpp> #include <pcl/point_types.h> #include <pcl/PCLPointCloud2.h> #include <Eigen/Core> #include <rclcpp/rclcpp.hpp> int main(int argc, char argv[]) rclcpp::init(argc, argv); auto node rclcpp::Node::make_shared(\"pcl_conversion_node\"); Load point cloud data sensor_msgs::msg::PointCloud2 cloud_in; Assume populated data pcl::PointCloud<pcl::PointXYZ> pcl_cloud; Define transformation matrix Eigen::Matrix4f transform Eigen::Matrix4f::Identity(); Populate transform matrix actual values Convert transform point cloud autoware_utils::transform_point_cloud_from_ros_msg(cloud_in, pcl_cloud, transform); rclcpp::shutdown(); return"},
{"url": "https://index.ros.org/p/autoware_utils_rclcpp", "package": "autoware_utils_rclcpp", "package_summary": "The autoware_utils_rclcpp package", "package_details": "autoware_utils_rclcpp Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities rclcpp. extensively Autoware project handle common tasks handling parameters, topics services. Design parameter.hpp: Simplifies parameter declaration, retrieval, updating, waiting. polling_subscriber.hpp: subscriber class polling policies (latest, newest, Code Snippets Update Parameters Dynamically update_param.hpp #include <autoware_utils_rclcpp/update_param.hpp> #include <rclcpp/rclcpp.hpp> int main(int argc, char argv[]) rclcpp::init(argc, argv); auto node rclcpp::Node::make_shared(\"param_node\"); double param_value std::vector<rclcpp::Parameter> params node->get_parameters({\"my_param\"}); (autoware_utils::update_param(params, \"my_param\", param_value)) RCLCPP_INFO(node->get_logger(), \"Updated parameter param_value); RCLCPP_WARN(node->get_logger(), \"Parameter 'my_param' rclcpp::shutdown(); return"},
{"url": "https://index.ros.org/p/autoware_utils_system", "package": "autoware_utils_system", "package_summary": "The autoware_utils_system package", "package_details": "autoware_utils_system Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities system. extensively Autoware project handle common tasks performance monitoring error handling. Design backtrace.hpp: Prints backtraces debugging. lru_cache.hpp: Implements LRU cache. stop_watch.hpp: Measures elapsed time profiling."},
{"url": "https://index.ros.org/p/autoware_utils_tf", "package": "autoware_utils_tf", "package_summary": "The autoware_utils_tf package", "package_details": "autoware_utils_tf Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities transform. extensively Autoware project handle common tasks managing transform listener vehicle transform. Design transform_listener.hpp: Manages transformation listeners. self_pose_listener.hpp: Listens self-pose vehicle."},
{"url": "https://index.ros.org/p/autoware_utils_uuid", "package": "autoware_utils_uuid", "package_summary": "The autoware_utils_uuid package", "package_details": "autoware_utils_uuid Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities UUID. extensively Autoware project handle common tasks generation conversion UUID. Design uuid_helper.hpp: Utilities generating managing UUIDs."},
{"url": "https://index.ros.org/p/autoware_utils_visualization", "package": "autoware_utils_visualization", "package_summary": "The autoware_utils_visualization package", "package_details": "autoware_utils_visualization Overview autoware_utils library comprehensive toolkit designed facilitate development autonomous driving applications. package essential utilities visualization. extensively Autoware project handle common tasks creating markers RViz. Design marker_helper.hpp: Helper functions creating manipulating visualization markers."},
{"url": "https://index.ros.org/p/better_launch", "package": "better_launch", "package_summary": "A better replacement for the ROS2 launch system: intuitive, simple, memorable.", "package_details": "Features Usage TUI Differences Performance Installation ROS2 Contributors [!TIP] documentation? multiple examples! Let\u2019s face ROS2 severe downgrade terms usability compared ROS1. considerable improvements, current launch system borderline unusable. I\u2019ve listed personal gripes you\u2019re feel wrote better_launch. dozens imports class instances basic tasks, launch files simple beautiful better_launch import BetterLaunch, launch_this @launch_this(ui=True) def my_main(enable_x: bool True): nice launch files BetterLaunch() enable_x: bl.node( \"examples_rclpy_minimal_publisher\", \"publisher_local_function\", \"example_publisher\", Include launch files, regular ROS2 launch files! bl.include(\"better_launch\", \"ros2_turtlesim.launch.py\") my_package my_launch_file.py --enable_x True attention? Read learn improve existing ROS2 launch? redemption amount refactoring REPs (ROS enhancement proposals) turn sails. Tools highly rated simple_launch launch-generator exist, ROS2 launch hood inherit clunkiness. fixing inherently broken solution, decided RAP ROS abandonment proposal Essentially, better_launch ROS2 launch intuitive simple understand, easy remember. better_launch abstraction layer ROS2 launch; full replacement required dependencies existing launch system. expect BetterLaunch instance create subscribers, publishers, services, service clients, action servers action clients fly start stop nodes start stop lifecycle nodes manage lifecycle stage start stop composers load components organize nodes groups define hasslefree topic remaps nodes groups pass arguments command line declare easily load parameters yaml files locate files based filenames package names string substitutions resolve paths include better_launch launch files include ROS2 launch files regular ROS2 launch files include better_launch launch files configure logging ROS2, readable output manage node nice terminal reminiscent rosmon quick comparison, bravely unfold sections ROS2 ```python https://docs.ros.org/en/jazzy/Tutorials/Intermediate/Launch/Using-Substitutions.html launch_ros.actions import Node launch import LaunchDescription launch.actions import DeclareLaunchArgument, ExecuteProcess, TimerAction launch.conditions import IfCondition launch.substitutions import LaunchConfiguration, PythonExpression def generate_launch_description(): turtlesim_ns LaunchConfiguration('turtlesim_ns') use_provided_red LaunchConfiguration('use_provided_red') new_background_r LaunchConfiguration('new_background_r') turtlesim_ns_launch_arg DeclareLaunchArgument( 'turtlesim_ns', default_value='turtlesim1' use_provided_red_launch_arg DeclareLaunchArgument( 'use_provided_red', default_value='False' new_background_r_launch_arg DeclareLaunchArgument( 'new_background_r', default_value='200' File truncated lines full file](https://github.com/dfki-ric/better_launch/tree/main/./README.md)"},
{"url": "https://index.ros.org/p/camera_ros", "package": "camera_ros", "package_summary": "node for libcamera supported cameras (V4L2, Raspberry Pi Camera Modules)", "package_details": "ROS node libcamera ROS node support variety cameras libcamera. node supports Raspberry cameras. Installation Binary packages ROS package repository Linux ROS distributions (check rosdep resolve camera_ros). install DEB RPM packages source ROS distribution source /opt/ros/$ROS_DISTRO/setup.bash DEB package sudo apt install ros-$ROS_DISTRO-camera-ros RPM package sudo dnf install ros-$ROS_DISTRO-camera-ros [!NOTE] installs package libcamera dependency. bloomed version official upstream repo https://git.libcamera.org/libcamera/libcamera.git full support Raspberry camera modules. full camera module support Raspberry build \u201craspberrypi\u201d fork https://github.com/raspberrypi/libcamera manually. Build Instructions libcamera camera_ros node depends libcamera version ways install dependency: System Package: Linux distributions provide binary libcamera package. Raspberry custom libcamera fork additional support newer camera modules. distribution packages, skip libcamera rosdep key resolving dependencies (rosdep install --skip-keys=libcamera). ROS Package: install newer version ROS repo (package ros-$ROS_DISTRO-libcamera). package installed default building camera_ros source resolving rosdep keys. Source: Finally, build libcamera source. option \u201craspberrypi\u201d fork Ubuntu. build libcamera part ROS workspace colcon-meson. recommended system-wide installation avoids conflicts system package. install dependencies: Install libcamera build dependencies https://libcamera.org/getting-started.html#dependencies. Install colcon-meson package manager, sudo apt install python3-colcon-meson, pip, pip install colcon-meson. camera_ros camera_ros package built libcamera colcon workspace: create workspace mkdir ~/camera_ws/src ~/camera_ws/src check libcamera sudo apt install python3-colcon-meson Option official upstream git clone https://git.libcamera.org/libcamera/libcamera.git Option raspberrypi fork support newer camera modules git clone https://github.com/raspberrypi/libcamera.git check camera_ros repository git clone https://github.com/christianrauch/camera_ros.git resolve binary dependencies build workspace source /opt/ros/$ROS_DISTRO/setup.bash ~/camera_ws/ rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO --skip-keys=libcamera colcon build --event-handlers=console_direct+ binary distribution libcamera, skip adding workspace. Additionally, bloomed libcamera package ROS repos, omit --skip-keys=libcamera binary dependency resolved automatically. Launching Node package standalone node executable: ros2 run camera_ros camera_node composable node (camera::CameraNode): ros2 component standalone camera_ros camera::CameraNode launch file composable node: ros2 launch camera_ros camera.launch.py Interfaces camera node interfaces compatible image_pipeline stack. node publishes camera images camera parameters service set camera parameters. Topics type description ~/image_raw sensor_msgs/msg/Image image ~/image_raw/compressed sensor_msgs/msg/CompressedImage image (compressed) ~/camera_info sensor_msgs/msg/CameraInfo camera parameters Services type description ~/set_camera_info sensor_msgs/srv/SetCameraInfo set camera parameters File truncated lines full file"},
{"url": "https://index.ros.org/p/canboat_vendor", "package": "canboat_vendor", "package_summary": "Thin package wrapper for Canboat", "package_details": "canboat_vendor wrapper Canboat repository building ROS Colcon. colcon build \u2013packages-select canboat_vendor ros2 run canboat_vendor executable built Canboat repository> executables actisense-serial analyzer analyzer-explain analyzer-explain-j1939 analyzer-j1939 candump2analyzer command-group-function ikonvert-serial iptee n2kd n2kd_monitor nmea0183-serial replay request-group-function socketcan-writer"},
{"url": "https://index.ros.org/p/clips_vendor", "package": "clips_vendor", "package_summary": "Vendor package for the CLIPS rule based production system", "package_details": "clips_vendor Wrapper clips (https://clipsrules.net/) usage ROS Replaces make-based original build system cmake builds dynamic libraries flexible usage. core implementation, cli optionally clipsjni applications demos examples svn source repository (https://svn.code.sf.net/p/clipsrules/code). Note clips compiled main application library libclips.so built shared library libclips_c.so clipsjni applications). namespaced version libclips_ns.so supplied, wraps original files namespace clips minimize conflicts libraries projects. clips written project namespaces lot preprocessor macros involved, require careful considerations. read Issues avoid related pitfalls. Build Instructions optional features controlled CMake variables: BUILD_WITH_JAVA_EXAMPLES BUILD_WITH_CLIPS_EXAMPLES default examples added, build source, simply pass cmake args shown colcon build --cmake-args -DBUILD_WITH_JAVA_EXAMPLES=true -DBUILD_WITH_CLIPS_EXAMPLES=true Usage CLI Simply run clips: clips Shared Libraries CMake: find_package(clips_vendor) find_package(clips) target_link_libraries(<target> PUBLIC Clips::libclips) compiled library target_link_libraries(<target> PUBLIC ClipsC::libclips_c) compiled library target_link_libraries(<target> PUBLIC ClipsNS::libclips_ns) wen namespaced library #include<clips/clips.h> libclips extern #include<clips/clips.h> libclips_c #include<clips_ns/clips.h> libclips_ns Optional java Examples commands path sourcing: clips-animal-deme clips-auto-demo clips-ide clips-router-demo clips-sudoku-demo clips-wine-demo Optional CLIPS Examples files located installation destination opt/clips_vendor/examples. Issues Clashes Libraries libclips libclips_c unnamespaced definitions structs functions, recommended libclips_ns prevent accidental clashes libraries. chosen clips library, CLIPS headers #define macros interfere libraries. LHS RHS macros interfere template identifiers boost/function_types/property_tags.hpp. cases, undefine macros including clips.h header. Mixing Macros Enums libclips_ns issue mixing typedef enums working namespaced version library. snippet constant.h: typedef enum FLOAT_BIT INTEGER_BIT CLIPSType; #define NUMBER_BITS (INTEGER_BIT FLOAT_BIT) namespace wrapping, \u201cunscoped\u201d enum requires usage namespace reference values, clips::FLOAT_BIT. macro NUMBER_BITS expands (INTEGER_BIT FLOAT_BIT) valid expansion wrapped namespace scenario namespace clips; NUMBER_BITS. clips::NUMBER_BITS valid, NUMBER_BITS declared usage namespace clips."},
{"url": "https://index.ros.org/p/coal", "package": "coal", "package_summary": "An extension of the Flexible Collision Library.", "package_details": "Coal extension Flexible Collision Library FCL forked creating project called HPP-FCL. large part code rewritten removed (unused untested code), features introduced Due major decided rename HPP-FCL project Coal. Coal projects research papers, cite features Compared original FCL library, main features dedicated efficient implementations GJK EPA algorithms rely libccd) support safety margins collision detection accelerated version collision detection Nesterov, leads increased performance factor details paper computation bound distance objects collision checking performed, collision implementation Python bindings easy code prototyping support geometries height fields, capsules, ellipsoids, enhance reliability fix myriad bugs efficient computation contact points contact patches objects full support object serialization Boost.Serialization Note: broad phase reintroduced Justin Carpentier based FCL version project robotics frameworks Pinocchio, open-source library implements efficient versatile rigid-body dynamics algorithms, Humanoid Path Planner, open-source library Motion Manipulation Planning. Coal develop Simple, (differentiable) efficient simulator robotics high-performance library original FCL library, Coal implements well-established GJK algorithm variants collision detection distance computation. implementations lead state-of-the-art performance, shown figures hand, benchmarked Coal major state-of-the-art software alternatives: Bullet simulator, original FCL library Drake framework), libccd library MuJoCo). results depicted figure, notably shows accelerated variants GJK largely outperform large margin times faster). notice y-axis log scale. hand, care dedicated collision detection solvers GJK narrow phase? simply formulate collision detection problem quadratic problem call off-the-shelf optimization solver ProxQP)? observe GJK-based approaches largely outperform solutions based classic optimization solvers solver ProxQP), notably large geometries composed tens hundreds vertices. Open-source projects relying Coal Pinocchio fast flexible implementation Rigid Body Dynamics algorithms analytical derivatives. IfcOpenShell Open source IFC library geometry engine. Crocoddyl software realize model predictive control complex robotics platforms. TSID software implements Task Space Inverse Dynamics HPP SDK implements motion planners humanoids robots. Jiminy simulator based Pinocchio. ocs2 toolbox Optimal Control Switched Systems (OCS2) Installation Conda Coal installed conda-forge channel: conda install coal conda-forge Docker docker run ghcr.io/coal-library/coal:devel Build find build instruction library python bindings installed simply conda conda-forge install coal. library, include files python bindings installed $CONDA_PREFIX/lib, $CONDA_PREFIX/include $CONDA_PREFIX/lib/python3.XX/site-packages. Coal ```cpp #include \u201ccoal/math/transform.h\u201d #include \u201ccoal/mesh_loader/loader.h\u201d #include \u201ccoal/BVH/BVH_model.h\u201d File truncated lines full file"},
{"url": "https://index.ros.org/p/coin_d4_driver", "package": "coin_d4_driver", "package_summary": "ROS package for LDS-03 (COIN-D4) Lidar", "package_details": "LDS-03 (COIN-D4) LDS-03 (COIN-D4) replaces previous LDS-02 sensor. LDS-02 replaces previous LDS-01 sensor. Active Branches: humble, jazzy, main Open Source Projects Related TurtleBot3 turtlebot3 turtlebot3_msgs turtlebot3_simulations turtlebot3_manipulation turtlebot3_autorace turtlebot3_applications turtlebot3_applications_msgs turtlebot3_machine_learning turtlebot3_home_service_challenge hls_lfcd_lds_driver ld08_driver coin_d4_driver open_manipulator dynamixel_sdk OpenCR-Hardware OpenCR Documentation, Videos, Community Official Documentation ROBOTIS DYNAMIXEL ROBOTIS e-Manual Dynamixel SDK ROBOTIS e-Manual TurtleBot3 ROBOTIS e-Manual OpenMANIPULATOR-X Learning Resources ROBOTIS YouTube Channel ROBOTIS Open Source YouTube Channel ROBOTIS TurtleBot3 YouTube Playlist ROBOTIS OpenMANIPULATOR YouTube Playlist Community Support ROBOTIS Community Forum TurtleBot category ROS Community"},
{"url": "https://index.ros.org/p/doom_ros", "package": "doom_ros", "package_summary": "Doom can run anywhere. Now it runs on ROS too.", "package_details": "<img src=data/doom_ros.png width=\u201d320px\u201d/> doom_ros Doom run runs ROS <img src=data/doom_lvl1.gif width=\"320px\"/> <img src=data/doom_rqt_image_view.png width=\"320px\"/> Running ros2 launch doom_ros doom_ros.launch.py Docker Install Docker Engine Enable Docker xhost: xhost +local:docker Build Image Launch Container: docker compose --build Stop Container CTRL+C docker compose Notes package tested controllers: 8BitDo Pro+ Logitech DUALSHOCK case controller tested inputs making Extra files data folder: Repository resources, videos images DOOM1.WAD file rosbag (doom_rosbag.tar.gz) level\u2019s gameplay, including image joy inputs. video Disclaimer repository shareware version doom.wad. version freely re-distributed. future misunderstood file request removal! Don\u2019t sue"},
{"url": "https://index.ros.org/p/dual_laser_merger", "package": "dual_laser_merger", "package_summary": "merge dual lidar's scans.", "package_details": "dual_laser_merger ROS Package merge dual lidar scan data. package provide node concatenate pointcloud. laser scans coverted pointclouds transformed target_frame concatenated. concatenated pointcloud convert laserscan. Build source package works ROS Distributions: Humble, Jazzy, Rolling mkdir laser_merger_ws/src laser_merger_ws/src git clone humble https://github.com/pradyum/dual_laser_merger.git rosdep install --from-paths src --ignore-src colcon build --symlink-install source install/setup.bash Demo recorded bag file demo shows merging laser scan data lidars. ros2 launch dual_laser_merger demo_laser_merger.launch.py Requirements Lidar scan topic, messages topic required frame_id. ros2 topic info /lidar1/scan Type: sensor_msgs/msg/LaserScan Lidar scan topic, messages topic required frame_id. ros2 topic info /lidar2/scan Type: sensor_msgs/msg/LaserScan Lidar (laser_1) Lidar (laser_2) Target frame (lsc_mount) ros2 topic echo /tf_static transforms: header: stamp: sec: nanosec: frame_id: lsc_mount child_frame_id: laser_1 transform: translation: rotation: transforms: header: stamp: sec: nanosec: frame_id: lsc_mount child_frame_id: laser_2 transform: translation: rotation: Usage included launch file shown ament_index_python.packages import get_package_share_directory launch import LaunchDescription launch.actions import IncludeLaunchDescription launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description(): LaunchDescription() dual_laser_merger_node IncludeLaunchDescription( PythonLaunchDescriptionSource( f\"{get_package_share_directory('dual_laser_merger')}/dual_laser_merger.launch.py\" launch_arguments={ File truncated lines full file"},
{"url": "https://index.ros.org/p/dynamixel_hardware_interface", "package": "dynamixel_hardware_interface", "package_summary": "ROS 2 package providing a hardware interface for controlling Dynamixel motors via the ROS 2 control framework.", "package_details": "Dynamixel Hardware Interface User Guide Introduction ROS package providing hardware interface controlling Dynamixel motors ros2_control framework. repository includes dynamixel_hardware_interface plugin seamless integration ROS control, dynamixel_interfaces package custom message definitions interface Prerequisites package supports ROS Humble, Jazzy, Rolling. Ensure ROS properly installed. Hardware Requirements: Dynamixel servos USB2 Dynamixel adapter Proper power supply Dynamixel motors Installation Clone repository ROS workspace: ~/${WORKSPACE}/src git clone ${ROS_DISTRO} https://github.com/ROBOTIS-GIT/DynamixelSDK.git git clone ${ROS_DISTRO} https://github.com/ROBOTIS-GIT/dynamixel_hardware_interface.git git clone ${ROS_DISTRO} https://github.com/ROBOTIS-GIT/dynamixel_interfaces.git Build package: ~/${WORKSPACE} colcon build Source workspace: source ~/${WORKSPACE}/install/setup.bash Packages project integrates ROS packages provide extended functionality: open_manipulator ROS-based open-source software package designed OpenManipulator-X OMY. essential features motion planning, kinematics, control utilities seamless integration ROS environments. Configuration effectively Dynamixel Hardware Interface ROS control system, configure specific parameters ros2_control hardware description file. concise explanation key parameters, illustrated examples OpenManipulator-X ROS control.xacro file. Port Settings: Define serial port baud rate communication. Hardware Setup: Configure joints transmissions. Joints: Control monitor robot joints. GPIO: Define control Dynamixel motors. Port Communication Settings parameters define interface communicates Dynamixel motors: port_name: Serial port communication. baud_rate: Communication baud rate. error_timeout_ms: Timeout communication errors milliseconds). Hardware Configuration parameters define hardware setup: number_of_joints: Total number joints. number_of_transmissions: Number transmissions. Transmission Matrices: Define joint-to-transmission mappings. Joint Configuration Joints define control state interfaces robot movement: Key Attributes Unique joint ${prefix}joint1 Sub-Elements <command_interface>: Sends commands joints. <command_interface name=\"position\"> <state_interface>: Monitors joint state data. ```xml File truncated lines full file"},
{"url": "https://index.ros.org/p/dynamixel_interfaces", "package": "dynamixel_interfaces", "package_summary": "dynamixel_interfaces contains base messages and service useful for controlling Dynamixel.", "package_details": "dynamixel_interfaces Introduction interfaces (msgs) dynamixel_hardware_interface. Contributing contributions! follow guidelines CONTRIBUTING.md submit issues pull requests. License project licensed MIT License. LICENSE file details."},
{"url": "https://index.ros.org/p/feetech_ros2_driver", "package": "feetech_ros2_driver", "package_summary": "ros2_control hardware interface for Feetech Servos", "package_details": "Feetech ros2_control driver Description: ROS package integrating ros2_control Feetech\u2019s servos Documentation User Guide Developers Guide Acknowledgments development project referencing valuable repositories: https://github.com/adityakamath/SCServo_Linux https://github.com/workloads/scservo https://github.com/HarvestX/h6x_serial_interface https://github.com/Ar-Ray-code/feetech_scs_ros2_driver https://github.com/Kotakku/FT_SCServo_Debug_Qt codebases significant insights reference implementations helped shape project."},
{"url": "https://index.ros.org/p/rmw_stats_shim", "package": "rmw_stats_shim", "package_summary": "Partial RMW shim library to instrument RMW API calls", "package_details": "RMW Stats Shim Depends modified version rmw_implementation provide topic statistics calculation RMW layer node, instrument application code. component Wraps intercepts RMW API calls Calculates \u201cpublished period\u201d statistics Publisher Calculates \u201creceived period\u201d statistics Subscription Calculates age\u201d statistics Subscription publish system timestamp time rmw_take called, sum network latency executor latency Creates /topic_statistics Publisher Node publishes periodically statistics node Key points: Requires subscriptions, extra copies, statistics topics Requires modification application code Configuration Set environment variables launching node configure topic statistics Required: RMW_IMPLEMENTATION_WRAPPER=rmw_stats_shim ROS_TOPIC_STATISTICS_WINDOW_SIZE messages use\u00a0in rolling buffer stats (stores timestamp information, contents data) Default: ROS_TOPIC_STATISTICS_TOPIC_NAME topic publish statistics Default: /topic_statistics ROS_TOPIC_STATISTICS_PUBLISH_PERIOD Interval seconds periodically publish stats Default: Usage colcon build --packages-select rmw_implementation rmw_stats_shim source install/setup.bash export RMW_IMPLEMENTATION_WRAPPER=rmw_stats_shim run ROS node/launch/etc"},
{"url": "https://index.ros.org/p/rosgraph_monitor", "package": "rosgraph_monitor", "package_summary": "Monitors the ROS graph to detect error conditions", "package_details": "Rosgraph Monitor library rosgraph_monitor main class rosgraph_monitor::RosgraphMonitor, watches entire ROS application create up-to-date graph representation, running analyses check meets \u201chealthy\u201d criteria. library application code, run standalone parameter-configurable ROS Node rosgraph_monitor_node. Graph Monitor set diagnostic_msgs/DiagnosticStatus summarizing graph health. Diagnostics friendly format DiagnosticAggregator interpret toplevel health status. convenience launch file starts graph monitor node properly configured diagnostic aggregator, usage pattern. Graph Representation monitor track entities relationships: Node Publisher node type QoS profile Subscription node type QoS profile Health Checks health criteria Node Liveness: Report errors nodes present longer graph Graph Continuity: report warnings publishers subscriptions don\u2019t listening/sending Topic Frequencies: interpret /topic_statistics determine topics aren\u2019t expected rate. section information. rosgraph_monitor_node standalone users custom integration RosgraphMonitor class. Frequency Checks set expectations Topic Statistics Diagnostics, Enable /topic_statistics, rmw_stats_shim Set Deadline QoS policy Publishers sending fixed period (inverse frequency) set Deadline Subscription DeadlineMissed callbacks. Repeat Subscriptions special treatment. Usage API RosGraphMonitor Node Recommended: run launchfile ros2 launch rosgraph_monitor monitor_launch.yaml run standalone node, perform separate diagnostics aggregation ros2 run rosgraph_monitor rosgraph_monitor_node Configuration params_decl.yaml full parameters rosgraph_monitor Node. parameters mirror structure rosgraph_monitor::GraphMonitorConfiguration, class wrapping Node. Implementation Tidbits RosgraphMonitor class built initiate ROS communications, means preexisting program node. passed NodeGraphInterface abstract class pointer queries graph structure, passed TopicStatistics messages RosgraphMonitor receives shared pointer node\u2019s NodeGraphInterface receives /topic_statistics monitor ROS computation graph produce /diagnostics (DiagnosticArray) issues graph:"},
{"url": "https://index.ros.org/p/rosgraph_monitor_msgs", "package": "rosgraph_monitor_msgs", "package_summary": "Interfaces for reporting observations about the ROS 2 communication graph", "package_details": "rosgraph_monitor_msgs messages communication understanding gained monitoring ROS application graph: TopicStatistic.msg single statistic endpoint (Publisher/Subscription) TopicStatistics.msg timestamped array TopicStatistic, Node report periodically bulk endpoints"},
{"url": "https://index.ros.org/p/rosgraph_monitor_test", "package": "rosgraph_monitor_test", "package_summary": "Test package for rosgraph_monitor containing launch tests and test utilities", "package_details": "rosgraph_monitor_test Integration test package rosgraph_monitor ROS2 package. Overview package integration tests verify behavior rosgraph_monitor package realistic ROS2 environments. includes launch tests spin actual monitor nodes validate ability detect graph topology node lifecycle events, diagnostic status reporting. Usage Running Tests Run launch tests colcon test --packages-select rosgraph_monitor_test Run specific test file launch_test src/graph-monitor/rosgraph_monitor_test/test/test_graph_monitor_launch.py Run verbose output launch_test --verbose src/graph-monitor/rosgraph_monitor_test/test/test_graph_monitor_launch.py"},
{"url": "https://index.ros.org/p/jacro", "package": "jacro", "package_summary": "TODO: Project Short Description", "package_details": "Jacro \u201cxacro\u201d Jinja swapped creative naming! small wrapper jinja2 you\u2019re ROS jinja2 Usage import jacro jacro.process_text(\"Text arg1 arg2 mappings={\"arg1\": \"arg2\": jacro.process_file(\"filename.ext\", mappings={\"arg1\": \"arg2\": functionality jinja2 replacement xacro Custom functions jacro extra registered functions: ros_pkg_path('pkg'): replaces shared directory \u2018pkg\u2019 urdf: ros_pkg_path('my_robot_description') urdf: /path/to/my_robot_description/share/my_robot_description urdf: ros_pkg_path('std_msgs') urdf: /opt/ros/humble/share/std_msgs Command-Line Interface save output file, --output option. jacro input_filename output_filename arg1=value1 arg2=value2 print output console jacro input_filename arg1:=value_1 arg2:=[1, arg3:=[\"asd\", \"jafar\"] Linting pre-commit pre-commit run Testing pytest python pytest --capture=no colcon colcon build --packages-up-to jacro colcon test --packages-select jacro colcon test-result"},
{"url": "https://index.ros.org/p/jrl_cmakemodules", "package": "jrl_cmakemodules", "package_summary": "CMake utility toolbox", "package_details": "Shared CMake submodule repository meant submodule project CNRS LAAS/HPP JRL. factorizes CMake mechanisms provide uniform look\u2019n feel packages. documentation wiki information. checkout complete documentation modules. Supported CMake versions support CMake pre-commit project pre-commit pre-commit.ci. nice documentation projects, quickstart: install pre-commit: python pip install pre-commit run hooks files: pre-commit run run automatically hooks added modified files, commit: pre-commit install"},
{"url": "https://index.ros.org/p/kinematics_interface_pinocchio", "package": "kinematics_interface_pinocchio", "package_summary": "Pinocchio-based implementation of ros2_control kinematics interface", "package_details": "kinematics_interface_pinocchio Pinocchio-based ROS Kinematics Interface plugin. serve drop-in replacement default KDL plugin ROS offering backend inverse kinematics. Overview package Pinocchio-based implementation kinematics_interface ROS plugin interface default KDL plugin (kinematics_interface_kdl). path potentially performance benchmarked) additional features enabled Pinocchio. Installation install package ROS distribution\u2019s repositories: sudo apt-get update sudo apt-get install ros-${ROS_DISTRO}-kinematics-interface-pinocchio Alternatively, clone repository ROS workspace build source (requires pinocchio installed/built). Build Status ROS Distro Build Status Humble Jazzy Rolling Usage plugin place default KDL plugin: Update ROS package dependencies include kinematics_interface_pinocchio. configuration launch files, Pinocchio plugin shared library kinematics_interface_kdl. snippet: usage ROS controller configuration <plugin>kinematics_interface_pinocchio/KinematicsInterfacePinocchio</plugin> TODO Replicate KDL implementations capabilities Pinocchio Package ROS plugin usable place kinematics_interface_kdl Benchmark compare performance arbitrary frames base model\u2019s root joint) Add support floating-base robots Add support continuous joints composite joints supported Pinocchio License project licensed Apache License. LICENSE file details. Contributions"},
{"url": "https://index.ros.org/p/kompass_interfaces", "package": "kompass_interfaces", "package_summary": "ROS2 Interfaces for Kompass", "package_details": "kompass_interfaces interfaces ROS2 messages, services actions"},
{"url": "https://index.ros.org/p/laser_segmentation", "package": "laser_segmentation", "package_summary": "Implementation of algorithms for segmentation of laserscans.", "package_details": "laser_segmentation Overview Implementation differents algorithms segmentation laserscans, splitting subsets beams, ROS2 interface. implemented algorithm Jump distance clustering: widely method laser range data mobile robotics. simple fast method segment scans: Euclidean distance adjacent beams exceeds threshold distance, segment generated. Jump distance clustering merge: Similar algorithm checks pre-predecessor segments close deals over-segmented data small cluster outdoor environment. threshold condition implementation mentioned jump distance threshold fixed. dynamic jump distance threshold calculated methods Lee (Lee, Dietmayer (Dietmayer, Santos (Santos, parameters list change Includes dynamic reconfigure server parameter change online configuration algorithms filtering. Laser scan Segments Keywords: ROS2, laser, segmentation, clustering Author: Alberto Tudela laser_segmentation package tested [ROS2] Humble [Ubuntu] research code, expect fitness purpose disclaimed. Installation Building Source Dependencies Robot Operating System (ROS) (middleware robotics), slg_msgs (Library messages interact laser related geometry Humble branch), Building build source, clone latest version main repository colcon workspace compile package colcon_workspace/src git clone https://github.com/ajtudela/laser_segmentation.git humble rosdep install --from-path src --rosdistro humble colcon build --symlink-install Usage scan source running, run laser_segmentation node ros2 launch laser_segmentation segmentation.launch.py Nodes laser_segmentation Segmentation laserscans. Subscribed Topics scan ([sensor_msgs/LaserScan]) Laser scan topic segmentation performed. Published Topics segments ([slg_msgs/SegmentArray]) Splitted segments resulting segmentation. segments/visualization ([visualization_msgs/MarkerArray]) comprises namespaces: \u201csegments\u201d: markers segments showing segments [Rviz2]. \u201csegments_names\u201d: markers segments. \u201ccentroids\u201d: markers segment centroids [Rviz2]. Parameters scan_topic (string, default: \u201cscan\u201d) Topic laserscan. segment_topic (string, default: \u201csegments\u201d) Topic segmented laser scan. segmentation_type (string, default: \u201cjump_distance\u201d) Choose segmentation algorithms. Jump distance clustering (jump_distance) jump distance merge (jump_distance_merge). Parameters filtering min_points_segment (int, default: Minimium number points segment. File truncated lines full file"},
{"url": "https://index.ros.org/p/launch_frontend_py", "package": "launch_frontend_py", "package_summary": "Python frontend for writing ROS 2 launch files", "package_details": "Python frontend ROS Launch package launch implementation, \u201cplumbing\u201d ROS launch system. XML YAML hand frontends launch. intended user-facing API. community hooked Python launchfiles due early adoption frontends incomplete. mind, extensive explicit exact filenames PythonLaunchDescriptionSource, migration frontends difficult packages downstream consumers. Enter launch_frontend_py package Python-language frontend launch, identical usage XML YAML versions. benefits conciseness, declarative style, allowing launchfiles stay Python. Usage actions substitutions identical XML YAML launchfiles, caveat: [!NOTE] launch Actions attributes reserved Python keywords, cases Action attribute conditions. cases, underscore added launchfile features: launch_frontend_py import arg, executable, launch def generate_launch_description(): return launch([ arg(name='message', default='hello world'), arg(name='condition', default='True'), executable(cmd='echo $(var message)', output='both'), executable(cmd='echo conditional', if_='$(var condition)', output='both'), executable(cmd='echo not-condition', if_='$(not $(var condition))', output='both'), Release Status Distro Dev Doc Src Ubuntu Rolling Kilted Jazzy Humble"},
{"url": "https://index.ros.org/p/ld08_driver", "package": "ld08_driver", "package_summary": "ROS package for LDS-02(LD08) Lidar.\n    The Lidar sensor sends data to the Host controller for the Simultaneous Localization And Mapping(SLAM).", "package_details": "LDS-02 LDS-02 replaces previous LDS-01 sensor. Active Branches: noetic, humble, jazzy, main Legacy Branches: *-devel Open Source Projects Related TurtleBot3 turtlebot3 turtlebot3_msgs turtlebot3_simulations turtlebot3_manipulation turtlebot3_autorace turtlebot3_applications turtlebot3_applications_msgs turtlebot3_machine_learning turtlebot3_home_service_challenge hls_lfcd_lds_driver ld08_driver open_manipulator dynamixel_sdk OpenCR-Hardware OpenCR Documentation, Videos, Community Official Documentation ROBOTIS DYNAMIXEL ROBOTIS e-Manual Dynamixel SDK ROBOTIS e-Manual TurtleBot3 ROBOTIS e-Manual OpenMANIPULATOR-X Learning Resources ROBOTIS YouTube Channel ROBOTIS Open Source YouTube Channel ROBOTIS TurtleBot3 YouTube Playlist ROBOTIS OpenMANIPULATOR YouTube Playlist Community Support ROBOTIS Community Forum TurtleBot category ROS Community"},
{"url": "https://index.ros.org/p/mola_gnss_to_markers", "package": "mola_gnss_to_markers", "package_summary": "Takes GNSS (GPS) readings, a MOLA georeferenced map, and publishes markers to visualize the datums as ellipsoids on the map", "package_details": "Distro Build dev Release ROS Humble ROS Jazzy ROS Kilted ROS Rolling mola_gnss_to_markers Takes GNSS (GPS) readings, MOLA georeferenced map, publishes markers visualize datums ellipsoids map. Usage ros2 launch mola_gnss_to_markers mola_gnss_to_markers_launch.py ROS2 launch arguments ros2 launch mola_gnss_to_markers mola_gnss_to_markers_launch.py --show-args Arguments (pass arguments 'input_topic_gps': description (default: '/gps') 'input_topic_georef_metadata': description (default: '/lidar_odometry/geo_ref_metadata') 'output_topic_marker': description (default: '/gnss_georef_marker') 'output_marker_line_width': description (default: 'output_marker_color': description (default: </details> Input topics: ``/lidar_odometry/geo_ref_metadata`` (``mrpt_nav_interfaces/msg/GeoreferencingMetadata``) ``/gps`` (``sensor_msgs/msg/NavSatFix``) Output topics: ``gnns_georef_marker`` (``visualization_msgs/msg/Marker``) License BSD-3-Clause"},
{"url": "https://index.ros.org/p/mola_imu_preintegration", "package": "mola_imu_preintegration", "package_summary": "Integrator of IMU angular velocity readings", "package_details": "Distro Build dev Build releases Stable version ROS Humble amd64 arm64 ROS Jazzy amd64 arm64 ROS Kilted amd64 arm64 ROS Rolling amd64 arm64 mola_imu_preintegration lightweight package IMU preintegration routines, IMU data manipulation, basic IMU calibration. repository mola::imu::IMUIntegrator: class integrate IMU accelerations angular velocities. mola::imu::ImuTransformer: Transforms IMU readings arbitrary sensor pose vehicle reference base_link. mola::imu::LocalVelocityBuffer: Holds short window local velocities, accelerations, global orientation, external estimators IMU. mola::imu::trajectory_from_buffer(): Reconstruct trajectory LocalVelocityBuffer. Build install Refer root MOLA repository. Docs examples package page documentation. License package released GNU GPL license. options request. Modular Optimization framework Localization mApping (MOLA) https://github.com/MOLAorg/mola"},
{"url": "https://index.ros.org/p/mola_state_estimation_simple", "package": "mola_state_estimation_simple", "package_summary": "SE(3) pose and twist path data fusion estimator", "package_details": "mola_state_estimation_simple Simple kinematic state vector extrapolation algorithm fuse odometry sources. repository NavStateFuse: class integrate odometry, IMU, pose/twist estimations. package documentation. Build install Refer root MOLA repository. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/mola_state_estimation_smoother", "package": "mola_state_estimation_smoother", "package_summary": "SE(3) pose and twist path data fusion estimator", "package_details": "mola_navstate_smoother Sliding window Factor-graph data fusion odometry, IMU, GNSS, pose/twist estimations. repository NavStateFuse: class integrate odometry, IMU, pose/twist estimations. package documentation. Build install Refer root MOLA repository. License package released GNU GPL license. options request."},
{"url": "https://index.ros.org/p/moveit_task_constructor_demo", "package": "moveit_task_constructor_demo", "package_summary": "demo tasks illustrating various capabilities of MTC.", "package_details": "moveit_task_constructor_demo Description: simple pick place demo MoveIt Task Constructor. Panda Franka Emika Developed Henning Kayser Simon Goldstein PickNik Consulting Run Run demo ros2 launch moveit_task_constructor_demo demo.launch.py"},
{"url": "https://index.ros.org/p/mujoco_vendor", "package": "mujoco_vendor", "package_summary": "Vendor package for MuJoCo simulator", "package_details": "Mujoco_vendor Vendor package Mujoco Simulator."},
{"url": "https://index.ros.org/p/nanoeigenpy", "package": "nanoeigenpy", "package_summary": "A support library for bindings between Eigen in C++ and Python, based on nanobind", "package_details": "nanoeigenpy collection tools Eigen nanobind, successor eigenpy support library. aim transition Boost.Python. reintroduces features bindings Eigen matrix decompositions) nanobind time writing. Rationale Eigenpy based Boost.Python, aging, complex, heavily templated library community support. Support library features initially present Boost, added STL decade added Boost.Python. includes support {boost,std}::optional, {boost,std}::variant, {boost,std}::unique_ptr, proper support map types\u2026 present pybind11, nanobind, years. features finally added eigenpy lot developer effort. created additional supporting additional features including downstream consumers robotics community). Features nanoeigenpy features helping bind features Eigen Python: bindings Eigen\u2019s Geometry module quaternions, angle-axis representations\u2026 bindings Eigen\u2019s matrix dense sparse decompositions solvers Optional features nanoeigenpy bindings Eigen\u2019s Cholmod Apple Accelerate modules. [!NOTE] Accelerate module Eigen\u2019s master branch, official release Cholmod part SuiteSparse algorithms library. installed standalone conda. usage features included nanoeigenpy distributed Python module imported, standalone headers included Python bindings code CMake target. nanoeigenpy headers CMake) tools nanoeigenpy\u2019s headers, link CMake build tool CMake support planned nanoeigenpy CMake package find_package(nanoeigenpy REQUIRED) nanobind_add_module(my_ext NB_STATIC my_ext.cpp) target_link_libraries(my_ext PRIVATE nanoeigenpy::nanoeigenpy_headers) extension module code, include relevant headers call functions expose required type: #include <nanoeigenpy/geometry/quaternion.hpp> namespace nanobind; void f(const Eigen::Quaterniond &quat) NB_MODULE(my_ext, nanoeigenpy::exposeQuaternion<double>(m, \"Quaternion\"); m.def(\"f\", nb::arg(\"quat\")); compiled Python module case nanoeigenpy\u2019s Python extension module includes bindings Eigen::Quaternion double scalar type (AKA Eigen::Quaterniond). simply nanobind import extension module: #include <Eigen/Geometry> namespace nanobind; void f(const Eigen::Quaterniond &quat) NB_MODULE(my_ext, import nanoeigenpy's module nb::module_::import_(\"nanoeigenpy\"); m.def(\"f\", nb::arg(\"quat\")); Alternatively, Python code extension my_ext bring nanoeigenpy: import nanoeigenpy nanoeigenpy import Quaternion my_ext import quat Quaternion(0., f(quat) [!NOTE] File truncated lines full file"},
{"url": "https://index.ros.org/p/network_bridge", "package": "network_bridge", "package_summary": "Allows for arbitrary network links (UDP, TCP, etc) to bridge ROS2 messages", "package_details": "Network Bridge Network Bridge lightweight ROS2 node designed robust communication robotic systems arbitrary network protocols. Supporting UDP TCP protocols box, packages seamlessly bridges ROS2 topics networks, facilitating effective remote communications base station robotic systems, multiple robotic systems. Installation Installation apt Install sudo apt install ros-<distro>-network-bridge Building Source Simply clone repository ROS2 workspace build colcon build. Usage Demo TCP ros2 launch network_bridge tcp.launch.py ros2 topic pub /tcp1/MyDefaultTopic std_msgs/msg/String \"data: 'Hello World'\" ros2 topic echo /tcp2/MyDefaultTopic UDP ros2 launch network_bridge udp.launch.py ros2 topic pub /udp1/MyDefaultTopic std_msgs/msg/String \"data: 'Hello World'\" ros2 topic echo /udp2/MyDefaultTopic Configuration Simply setup network interface parameters list desired topics started. UDP cellular data, recommended setup VPN facilitate connection. note encryption occurs package. encryption, VPN. config/Udp1.yaml description parameters, TCP configuration files. Minimal configuration examples demonstrate robot sending message /gps/fix UDP basestation re-publish message. works seamlessly message types, long built sourced ends transmission. Robot /udp_sender: ros__parameters: UdpInterface: local_address: receive_port: remote_address: send_port: topics: \"/gps/fix\" Base Station /udp_receiver: ros__parameters: UdpInterface: local_address: receive_port: remote_address: send_port: Special case: topic /tf_static handled special cases. subscriber side listen messages, accumulate (similarly buffer) send rate. behavior disabled forced is_tf configuration. TFs excluded list TFs include finite, include exclude regex parameters. transform matched excluded included) frame_id child_frame_id matching pattern. /udp_sender: ros__parameters: UdpInterface: local_address: receive_port: remote_address: send_port: topics: \"/prefix/tf\" \"/tf_static\" /prefix/tf: is_tf: True is_static_tf: False rate: /tf_static: rate: is_static_tf: True exclude: [\"standoff.*\", \"spacer.*\", \".*wheel_link\", \".*cliff.*\"] Choice protocol UDP: UDP low-latency, high-throughput communications, occasional data loss tolerable. Ideal real-time telemetry data sensor streams. TCP: Opt TCP data integrity reliability critical. ensures control commands state transitions reliably delivered, potentially higher latency. Network protocols implemented pluginlib plugins, allowing creation arbitrary interfaces abstract class include/network_interfaces/network_interface_base.hpp. interface send receive bytes theoretically implemented, including protocols point-to-point communication, ZMQ. opening pull request implement network interface. Tuning File truncated lines full file"},
{"url": "https://index.ros.org/p/off_highway_can", "package": "off_highway_can", "package_summary": "The off_highway_can package", "package_details": "off_highway_can off_highway_can package library receive can_msgs/Frame socketcan_msgs/FdFrame ROS messages decode bytes custom message structures, encode bytes can_msgs/Frame socketcan_msgs/FdFrame ROS messages custom message structures send list message structures definition message signals filled derived classes node specific functionality. generic handling cyclic redundancy check rolling message counter message library. message structure definition information. Classes Receiver off_highway_can::Receiver abstract base class derived specific sensor types behavior. functionality process can_msgs/Frame socketcan_msgs/FdFrame ROS messages decode configured based message definitions. decoded signal values forwarded derived class user-defined processing off_highway_can::Receiver switch normal frames constructor argument use_fd. processing chain based completely message callbacks event-based. needed processing time message logged ROS debug message runtime compile time optionCOMPILE_DEBUG_LOG. off_highway_can::Receiver watchdog checks configured message received period time defined parameter timeout sends diagnostic error /diagnostics topic timeout occurs. Subscribed Topics from_can_bus (can_msgs/Frame) frames decode Disabled use_fd constructor argument from_can_bus_fd (socketcan_msgs/FdFrame) frames decode Enabled use_fd constructor argument Published Topics /diagnostics (diagnostic_msgs/DiagnosticArray) Update Rate: forced Diagnostic error base class timeout status Parameters receiver_params.yaml. Sender off_highway_can::Sender abstract base class derived specific behavior. functionality send can_msgs/Frame socketcan_msgs/FdFrame ROS messages encoding configured messages bytes based message definitions. encoded signal values published to_can_bus to_can_bus_fd topic. off_highway_can::Sender switch normal frames constructor argument use_fd. encoding publishing chain method call event-based. needed processing time encode publish configured messages logged ROS debug message runtime compile time optionCOMPILE_DEBUG_LOG. off_highway_can::Sender watchdog checks ROS message published defined parameter timeout sends diagnostic error /diagnostics topic timeout occurs. Published Topics to_can_bus (can_msgs/Frame) Encoded frames Disabled use_fd constructor argument to_can_bus_fd (socketcan_msgs/FdFrame) frames decode Enabled use_fd constructor argument /diagnostics (diagnostic_msgs/DiagnosticArray) Update Rate: forced Diagnostic status base class timeout status Parameters sender_params.yaml. Free Open Source Software (FOSS) File truncated lines full file"},
{"url": "https://index.ros.org/p/off_highway_general_purpose_radar", "package": "off_highway_general_purpose_radar", "package_summary": "The off_highway_general_purpose_radar package", "package_details": "off_highway_general_purpose_radar off_highway_general_purpose_radar package receiver node receive decode frames Bosch General Purpose Radar Off-Highway (GPR) ROS messages implements off_highway_can::Receiver. information Bosch General Purpose Radar Off-Highway (GPR), inputs, outputs interpreted datasheet Technical Customer Documentation (TCD) sensor system. Supported devices Device Part Number Description Datasheet General Purpose Radar Off-Highway (GPR) (series) (sample) Radar sensor target reflections Target output automotive supported Link Contact: off-highway.beg@bosch.com Nodes Receiver radar receiver decodes frames target list, manages current list publishes cyclically. received messages checked cyclic redundancy check (CRC), rolling message counter age (message older parameter allowed_age). checks succeed received message processed skipped. relevant radar frame IDs process target_base_id info_id parameters. correspond target frame info frame radar node adapted specific bus setup. multiple radar sensors decoded bus launch multiple receiver nodes individual parameters. target list published list radar targets point cloud targets (sensor limit). valid targets list published (measured flag set). receiver node receive configured period (parameter timeout), publish diagnostic error /diagnostics. sensor information frame published checked diagnostic status radar. error, node publish diagnostic error /diagnostics. Subscribed Topics received_messages (can_msgs/Frame) Radar frames decode Published Topics targets (off_highway_general_purpose_radar_msgs/Targets) Update Rate: configurable publish_frequency current target list radar custom message information target\u2019s frame. Mapping respective frame field. targets_pcl (sensor_msgs/PointCloud2) Update Rate: configurable publish_frequency current target list radar point cloud. info (off_highway_radar_msgs/Information) Update Rate: sensor information frame current sensor information message information respective frame. /diagnostics (diagnostic_msgs/DiagnosticArray) Update Rate: sensor information frame receiver timed periodically timeout period Diagnostic status statuses latest received sensor information timeout status. Parameters receiver_params.yaml. Launch files receiver_launch: Starts receiver parameters. Arguments: params: Path ROS YAML parameter file load receiver. default parameters package loaded."},
{"url": "https://index.ros.org/p/off_highway_premium_radar", "package": "off_highway_premium_radar", "package_summary": "The off_highway_premium_radar package", "package_details": "off_highway_premium_radar :warning: Radar Off-Highway Premium content off_highway_premium_radar packages preliminary subject change. :information_source: off_highway_premium_radar packages Series version Radar Off-Highway Premium sensor. Sample version off_highway_premium_radar_sample. off_highway_premium_radar package driver node receive send UDP datagrams Bosch Radar Off-Highway Premium ROS interface. information Bosch Radar Off-Highway Premium Supported devices Device Part Number Description Radar Off-Highway Premium Radar sensor locations Contact: off-highway.beg@bosch.com Nodes Driver radar driver opens UDP socket, decodes UDP protocol data units (PDUs) radar publishes data ROS messages. send required input radar UDP PDUs. figure overview: split location data PDUs measurement assembled driver single location data measurement published single ROS point cloud message. built-in recovery driver out-of-order dropped UDP packets sequence packets. warning log cases result drop location measurement eventually out-of-order packet). cases result publishing frequency drop output message detected built-in ROS diagnosis. Reducing load sensor network receiving device minimize risk cases. location data measurement locations data measured flag set number contained locations measured. addition, locations contained drivers output bit measurement status set (measured range check passed). cyclic output topic driver monitored ROS topic diagnostics, checks frequency timestamp publishes /diagnostics current status. driver receiving UDP packets expected frequency UDP interface documentation) updated timestamps, topic diagnostics produce error. order driver communicate sensor, configure connection network parameters. host port sensor port set settings configured sensor. defaults stated UDP interface documentation parameters. connect socket connect_sensor parameter filter UDP packets sensor driver process receives main benefit able run multiple driver processes sensors parallel host port ([established-over-unconnected technique]). driver node written library modular fashion extend functionality custom converter classes. design overview. Subscribed topics ~/ego_vehicle_data (off_highway_premium_radar_msgs/EgoVehicleData) Optional, subscription deactivated default. activated send_ego_vehicle_data ROS parameter. Expected cycle time: current velocity covariance acceleration. speed, speed variance, acceleration yaw rate driver sensor. units, yaw rate [rad/s], converted driver [deg/s] UDP interface specification! converted sensor UDP PDU. Logs error bytes UDP PDU Published topics ~/locations (sensor_msgs/msg/PointCloud2) Cycle time: location measurement radar point cloud. Fields float PCL filter compatibility, mapped Technical Customer Information signal brackets): Position location radial_distance (LocData_RadDist_i_j): Radial distance radial_velocity (LocData_RadRelVel_i_j): Radial relative velocity azimuth_angle (LocData_AziAng_i_j): Azimuth angle elevation_angle (LocData_EleAng_i_j): Elevation angle radar_cross_section (LocData_Rcs_i_j): Radar Cross Section signal_noise_ratio (LocData_Snr_i_j): Strength received power radial_distance_variance (LocData_RadDistVar_i_j): Variance radial distance measured radial_velocity_variance (LocData_RadRelVelVar_i_j): Variance radial relative velocity measured azimuth_angle_variance (LocData_VarAzi_i_j): Variance azimuth angle measured elevation_angle_variance (LocData_VarEle_i_j): Variance elevation angle measured radial_distance_velocity_covariance (LocData_DistVelCov_i_j): Covariance radial distance velocity measured velocity_resolution_processing_probability (LocData_ProVelRes_i_j): Probability velocity resolution processing azimuth_angle_probability (LocData_ProAziAng_i_j): Probability correct signal model File truncated lines full file"},
{"url": "https://index.ros.org/p/off_highway_premium_radar_msgs", "package": "off_highway_premium_radar_msgs", "package_summary": "The off_highway_premium_radar_msgs package", "package_details": "off_highway_premium_radar_msgs package ROS messages off_highway_premium_radar package maps UDP interface premium radar ROS messages. naming messages fields aligned UDP interface description updated written verbosely) adhere ROS naming conventions. mapped fields comment original UDP signal Technical Customer Information. Messages LocationDataHeader: Mapped Location Data/LocData_Header_i UDP interface. SensorStateInformation: Mapped Sensor State Information UDP interface. LocationAttributes: Mapped Location Attributes UDP interface. EgoVehicleInput: Mapped Ego Vehicle Input UDP interface. Rest defined messages messages top-level nested messages replicate nested description UDP packages UDP interface. Note: LocationData sensor_msgs/msg/PointCloud2. Services MeasurementProgram: Mapped Measurement Program Input UDP interface."},
{"url": "https://index.ros.org/p/off_highway_premium_radar_sample", "package": "off_highway_premium_radar_sample", "package_summary": "The off_highway_premium_radar_sample package", "package_details": "off_highway_premium_radar_sample :warning: Bosch Radar Off-Highway Premium Radar Sample packages considered legacy removed future release. off_highway_premium_radar_sample package driver node receive send UDP datagrams Bosch Radar Off-Highway Premium Sample ROS interface. information Bosch Radar Off-Highway Premium Sample, inputs, outputs interpreted Technical Customer Information (TCI), sensor hardware. driver tested sensor unicast configuration varying sensor IPs destination ports host. Supported devices Device Part Number Description Datasheet Radar Off-Highway Premium Sample Radar sensor locations Link Contact: off-highway.beg@bosch.com Nodes Driver radar driver opens UDP socket, decodes UDP protocol data units (PDUs) radar publishes data ROS messages. send required input radar UDP PDUs. figure overview: signal values received PDU checked range replaced signal-not-available (SNA) range applicable). split location data PDUs measurement assembled driver single location data measurement published single ROS point cloud message. built-in recovery driver out-of-order dropped UDP packets sequence packets. warning log cases result drop location measurement eventually out-of-order packet). cases result publishing frequency drop output message detected built-in ROS diagnosis. Reducing load sensor network receiving device minimize risk cases. location data measurement locations data measured flag set number contained locations measured. addition, locations contained drivers output bit measurement status set (measured range check passed). cyclic output topic driver monitored ROS topic diagnostics, checks frequency timestamp publishes /diagnostics current status. driver receiving UDP packets expected frequency UDP interface documentation) updated timestamps, topic diagnostics produce error. order driver communicate sensor, configure connection network parameters. host port sensor port set settings configured sensor. defaults stated UDP interface documentation parameters. connect socket connect_sensor parameter filter UDP packets sensor driver process receives main benefit able run multiple driver processes sensors parallel host port ([established-over-unconnected technique]). disadvantage driver socket able receive, process publish sensor broadcast messages. driver node written library modular fashion extend functionality custom converter classes. design overview. Subscribed topics ~/ego_vehicle_data (off_highway_premium_radar_sample_msgs/EgoVehicleData) Optional, subscription deactivated default. activated send_ego_vehicle_data ROS parameter. Expected cycle time: current velocity covariance acceleration. speed, speed variance, acceleration yaw rate driver sensor. units, yaw rate [rad/s], converted driver [deg/s] UDP interface specification! converted sensor UDP PDU. Logs error bytes UDP PDU Published topics ~/locations (sensor_msgs/msg/PointCloud2) Cycle time: location measurement radar point cloud. Fields float PCL filter compatibility, mapped Technical Customer Information signal brackets): Position location radial_distance (LocData_RadDist_i_j): Radial distance radial_velocity (LocData_RadRelVel_i_j): Radial relative velocity azimuth_angle (LocData_AziAng_i_j): Azimuth angle elevation_angle (LocData_EleAng_i_j): Elevation angle radar_cross_section (LocData_Rcs_i_j): Radar Cross Section signal_noise_ratio (LocData_Snr_i_j): Strength received power radial_distance_variance (LocData_RadDistVar_i_j): Variance radial distance measured radial_velocity_variance (LocData_RadRelVelVar_i_j): Variance radial relative velocity measured azimuth_angle_variance (LocData_VarAzi_i_j): Variance azimuth angle measured elevation_angle_variance (LocData_VarEle_i_j): Variance elevation angle measured File truncated lines full file"},
{"url": "https://index.ros.org/p/off_highway_premium_radar_sample_msgs", "package": "off_highway_premium_radar_sample_msgs", "package_summary": "The off_highway_premium_radar_sample_msgs package", "package_details": "off_highway_premium_radar_sample_msgs :warning: Bosch Radar Off-Highway Premium Radar Sample packages considered legacy removed future release. package ROS messages off_highway_premium_radar_sample package maps UDP interface premium radar ROS messages. naming messages fields aligned UDP interface description updated written verbosely) adhere ROS naming conventions. mapped fields comment original UDP signal Technical Customer Information. Messages LocationDataHeader: Mapped Location Data/LocData_Header_i UDP interface. SensorFeedback: Mapped Sensor Feedback UDP interface. SensorStateInformation: Mapped Sensor State Information UDP interface. SensorBroadcast: Mapped Sensor Broadcast UDP interface. LocationAttributes: Mapped Location Attributes UDP interface. SensorDtcInformation: Mapped Sensor DTC Information UDP interface. EgoVehicleInput: Mapped Ego Vehicle Input UDP interface. Rest defined messages messages top-level nested messages replicate nested description UDP packages UDP interface. Note: LocationData sensor_msgs/msg/PointCloud2. Services MeasurementProgram: Mapped Measurement Program Input UDP interface. SensorModeRequest: Mapped Sensor Mode Request Input UDP interface."},
{"url": "https://index.ros.org/p/off_highway_radar", "package": "off_highway_radar", "package_summary": "The off_highway_radar package", "package_details": "off_highway_radar off_highway_radar package receiver node receive decode frames Bosch Radar Off-Highway ROS messages implements off_highway_can::Receiver. package sender node encode send needed radar input data frames implementation off_highway_can::Sender. information Bosch Radar Off-Highway, inputs, outputs interpreted datasheet Technical Customer Documentation (TCD) sensor system. Supported devices Device Part Number Description Datasheet Radar Off-Highway (series software version F037SW0157V06.0001 (sample software version F037SW0116V05.0004) Radar sensor objects (filtered unfiltered) Object output automotive supported Link Contact: off-highway.beg@bosch.com Nodes Receiver radar receiver decodes frames object list, manages current list publishes cyclically. received messages checked cyclic redundancy check (CRC), rolling message counter age (message older parameter allowed_age). checks succeed received message processed skipped. relevant radar frame IDs process object_base_id info_id parameters. correspond object frame info frame radar node adapted specific bus setup. multiple radar sensors decoded bus launch multiple receiver nodes individual parameters. object list published list radar objects point cloud objects (sensor limit). valid objects list published (valid flag set). radar zone data processed version. receiver node receive configured period (parameter timeout), publish diagnostic error /diagnostics. sensor information frame published checked diagnostic status radar. error, node publish diagnostic error /diagnostics. Subscribed Topics from_can_bus (can_msgs/Frame) Radar frames decode Published Topics objects (off_highway_radar_msgs/Objects) Update Rate: configurable publish_frequency current object list radar custom message information object\u2019s frame. Mapping respective frame field. objects_pcl (sensor_msgs/PointCloud2) Update Rate: configurable publish_frequency current object list radar point cloud. info (off_highway_radar_msgs/Information) Update Rate: sensor information frame current sensor information message information respective frame. /diagnostics (diagnostic_msgs/DiagnosticArray) Update Rate: sensor information frame receiver timed periodically timeout period Diagnostic status statuses latest received sensor information timeout status. Parameters receiver_params.yaml. Sender radar sender listens ROS twist messages input, encodes frames publishes ROS messages. radar input signals limited range: Ego velocity signal: Yaw rate signal: deg/s, deg/s] Input ROS messages values ranges discarded sender encoded published. ROS twist message (parameter allowed_age), discarded, relevant radar frame IDs publish velocity yaw rate ego_velocity_id yaw_rate_id parameters. parameters correspond ego velocity yaw rate frame specific bus setup. multiple radar systems connected bus, single radar sender sufficient long radar systems expect ego velocity yaw rate messages IDs contrast multiple receivers). sender node receive valid configured period (parameter timeout), publish diagnostic error /diagnostics. File truncated lines full file"},
{"url": "https://index.ros.org/p/off_highway_radar_msgs", "package": "off_highway_radar_msgs", "package_summary": "The off_highway_radar_msgs package", "package_details": "off_highway_radar_msgs package ROS messages off_highway_radar package. Messages Information: Mapped radar info message Object: Composed radar object message ObjectA: Mapped radar object data message ObjectB: Mapped radar object data message Objects: List radar objects"},
{"url": "https://index.ros.org/p/off_highway_sensor_drivers_examples", "package": "off_highway_sensor_drivers_examples", "package_summary": "The off_highway_sensor_drivers_examples package", "package_details": "off_highway_sensor_drivers_examples off_highway_sensor_drivers_examples package sample launch files scripts assist processing data off_highway_sensor_drivers. off_highway_premium_radar_filter Series-connected Point Cloud Library (PCL) PassThrough filter nodes, filter point cloud returned off_highway_premium_radar driver radar_cross_section field values locations. Thresholds set values launch file adapted runtime dynamic reconfigure plugin rqt. Build :warning: Running requires building perception_pcl source. :warning: ROS binaries pcl_ros package required features run perception_pcl repository cloned built source. accomplish source folder workspace execute git clone ros2 https://github.com/ros-perception/perception_pcl git perception_pcl checkout c1ccdd2776043ba1477926acceab7df75f64bf22 rosdep update rosdep install --from-paths src --ignore-src colcon build --cmake-args '-DCMAKE_BUILD_TYPE=Release' build Source workspace running ros2 launch off_highway_sensor_drivers_examples off_highway_premium_radar_filter_launch.py Launch files off_highway_premium_radar_filter_launch.py: Starts off_highway_premium_radar driver parameters, PCL PassThrough filters rviz. Arguments: off_highway_premium_radar_params: Path ROS YAML parameter file load driver. default parameters off_highway_premium_radar package loaded. rviz_config: Path rviz configuration file. default configuration loaded package. off_highway_radar_extract_velocity demonstrate, velocity information messages geometry_msgs::msg::TwistStamped passed off_highway_radar driver. extract_velocity component extracts velocity information nav_msgs::msg::Odometry message republishes geometry_msgs::msg::TwistStamped message. Launch files off_highway_radar_extract_velocity_launch.py: Starts extract_velocity component sender component off_highway_radar composition intra-process communication. Arguments: params: Path ROS YAML parameter file load sender component off_highway_radar. default parameters off_highway_radar package loaded."},
{"url": "https://index.ros.org/p/off_highway_uss", "package": "off_highway_uss", "package_summary": "The off_highway_uss package", "package_details": "off_highway_uss off_highway_uss package receiver node receive decode frames Bosch Ultrasonic Sensor System (USS) Off-Highway ROS messages implements off_highway_can::Receiver. package sender node encode send needed USS input data frames implementation off_highway_can::Sender. information variants Bosch Ultrasonic Sensor System Off-Highway related datasheets Technical Documentation sensor system. Supported devices Device Part Number Description Datasheet Ultrasonic Sensor System OHW Entry (series) software version Ultrasonic sensor system sensors distances Distance output automotive supported Link Ultrasonic Sensor System OHW Premium (series) F037.B00.672-xx (sample) software version Ultrasonic sensor system sensors objects distances Object distance output automotive supported Link Ultrasonic Sensor System OHW Premium Safe F037.B01.117-xx (sample) (series) Ultrasonic sensor system developed accordance ISO ISO AgPL Direct Echo functionality driver package developed safety standards suitable safety applications. Link Contact: off-highway.beg@bosch.com Nodes Receiver USS receiver decodes frames object list direct echo list, manages current lists publishes cyclically. parameter use_j1939 defines automotive messages expected. support limitations: fixed source address USS ECU configured. dynamic assignment source addresses supported. receiver expects parameter group numbers (PGNs) arranged default DBC. rearrangement supported shift entire block. Moving individual PGNs supported. aware PGN bit extended received messages checked cyclic redundancy check (CRC), rolling message counter age (message older parameter allowed_age). checks succeed received message processed skipped. relevant USS frame IDs process (object_base_id, direct_echo_base_id, max_detection_range_id info_id) calculated id_offset (automotive pgn_offset parameter constant offsets. correspond configured USS ECU adapted specific bus setup. receiver checks source address contained message matches source_address parameter. multiple USS systems decoded bus launch multiple receiver nodes individual id_offset (automotive pgn_offset source_address parameters. object data published list objects point cloud objects (sensor limit). valid objects list published (type TYPE_NONE). Line objects point cloud format sampled position individual points based line_sample_distance parameter. parameter points line segment put point cloud. object frame multiplexed USS, frame objects. uniqueness, fields object published list formats computed adding multiplexor times ten enumeration frame IDs starting object_base_id results object range direct echo data published list direct echos direct echos (fills start set received). echo\u2019s field enumeration frame IDs starting direct_echo_base_id results echo range echo data list accompanied max_detection_range message, current maximum detection range individual ultrasonic sensors array. receiver node receive configured period (parameter timeout), publish diagnostic error /diagnostics. sensor information frame published checked diagnostic status USS. error, node publishes diagnostic error. Subscribed Topics from_can_bus (can_msgs/Frame) USS frames decode Published Topics objects (off_highway_uss_msgs/Objects) Update Rate: configurable publish_frequency current object list USS custom message information object\u2019s frame. Mapping respective frame multiplexor field. objects_pcl (sensor_msgs/PointCloud2) Update Rate: configurable publish_frequency current object list USS point cloud. Line objects sampled line_sample_distance equidistant points position. Mapping respective frame multiplexor field. direct_echos (off_highway_uss_msgs/DirectEchos) Update Rate: configurable publish_frequency current direct echo list USS custom message information echo\u2019s frame. Mapping respective frame field. maximum_detection_range (off_highway_uss_msgs/MaxDetectionRange) Update Rate: sensor maximum detection range frame File truncated lines full file"},
{"url": "https://index.ros.org/p/off_highway_uss_msgs", "package": "off_highway_uss_msgs", "package_summary": "The off_highway_uss_msgs package", "package_details": "off_highway_uss_msgs package ROS messages off_highway_uss package. Messages DirectEcho: Composed direct echo filtered echo DirectEchos: List USS direct echos Echo: Echo amplitude distance integers convey reserved values Information: Mapped USS info message Object: Mapped USS object message Objects: List USS objects"},
{"url": "https://index.ros.org/p/pangolin", "package": "pangolin", "package_summary": "Pangolin is a set of lightweight and portable utility libraries for prototyping 3D, numeric or video based programs and algorithms.", "package_details": "Pangolin Pangolin set lightweight portable utility libraries prototyping numeric video based programs algorithms. widely field Computer Vision means remove platform-specific boilerplate easy visualize data. general ethos Pangolin minimize boilerplate maximize portability flexibility simple interfaces factories windowing video. offers suite utilities interactive debugging, manipulation, plotters, tweak variables, drop-down Quake-like console python scripting live tweaking. Main features Cross Platform Windowing Build Windows, Linux, OSX Web Emscripten) Support windowing implementations including off-screen buffers Viewport Management Interaction Simple performant viewport management Intuitive navigation handlers Utilities work Computer Vision Robotics camera coordinate conventions Video Input Output Extensive video input/output wrappers ordinary machine-vision cameras media formats Flexible filter interface easily post-processing video channels formats, Tweak Variables widgeting libraries \u2018tweak\u2019 var libraries Pangolin offers implementation pros cons One-line definitions extensible types Drop-down Console Extensible shells, supports Python live console Easy access introspect tweak variables Code Find latest version Github: Clone Pangolin submodules git clone --recursive https://github.com/stevenlovegrove/Pangolin.git Dependencies Pangolin split components include dependencies optional pick mix enforcing package manager, simple script generate list (required, recommended packages installation manager apt, port, brew, dnf, pacman, vcpkg): package manager packages recommended ./scripts/install_prerequisites.sh --dry-run recommended Override package manager choice install packages ./scripts/install_prerequisites.sh brew You\u2019ll dependencies generally Build system (cmake, required) Windowing system Cocoa, Win, Web, Rendering (OpenGL, GLES) Video Image loading ffmpeg, jpeg, png, Wrappers Cross Compilers (Python3, pybind, Emscripten, Pangolin build dependencies silently feature, check output cmake stage Enabled lines. Building Pangolin CMake portable pre-build tool. checkout build pangolin directory \u2018build\u2019, execute shell equivalent GUI): Pangolin ~/your_fav_code_directory git clone --recursive https://github.com/stevenlovegrove/Pangolin.git Pangolin Install dependencies preferred method) ./scripts/install_prerequisites.sh recommended Configure build cmake build cmake --build build Ninja faster builds (sudo apt install ninja-build) cmake build -GNinja cmake --build build GIVEME PYTHON STUFF!!!! (Check output verify selected python version) cmake --build build pypangolin_pip_install Run tests! (Requires Catch2 manually installed Ubuntu.) cmake build Ninja BUILD_TESTS=ON cmake --build build build ctest master branch development branch. Choose stable tag prefer. File truncated lines full file"},
{"url": "https://index.ros.org/p/parameter_expression", "package": "parameter_expression", "package_summary": "Using mathematical expression in ROS 2 parameter", "package_details": "parameter_expression ROS package mathematical expressions dynamic parameters muParser library. Overview parameter_expression package class enables ROS nodes mathematical expressions parameter values. static numeric values, expressions \"sin(0.5) evaluated dynamically parameter set. Features Dynamic Expression Evaluation: Parameters set mathematical expressions evaluated real-time Mathematical Functions: Supports common mathematical functions sin, cos, tan, atan2, (powered muParser). Type Flexibility: Automatically handles parameter types (int, double, string expressions) Error Handling: error messages invalid expressions Dependencies rclcpp: ROS client library muParser: Mathematical expression parser library Usage Basic Usage Include header ROS node: #include <parameter_expression/parameter_expression.hpp> ensure dependencies package.xml CMakeLists.txt: <depend>parameter_expression</depend> find_package(parameter_expression REQUIRED) target_link_libraries( your_node parameter_expression::parameter_expression Create parameter expression node: class MyNode public rclcpp::Node public: MyNode() Node(\"my_node\") Create parameter expression default expression_param_ std::make_shared<parameter_expression::ParameterExpression>(*this, \"my_expression\", void some_function() current evaluated double expression_param_->get(); RCLCPP_INFO(this->get_logger(), \"Expression private: parameter_expression::ParameterExpression::SharedPtr expression_param_; Setting Parameters set parameter methods: Command Line ros2 param set /my_node my_expression \"sin(3.14159/2) Launch File parameter YAML file <launch> <node pkg=\"your_package\" exec=\"your_node\" name=\"my_node\"> <param name=\"my_expression\" </node> </launch> Advanced Usage Custom Parameter Descriptor rcl_interfaces::msg::ParameterDescriptor descriptor; descriptor.description mathematical expression calculation\"; descriptor.additional_constraints valid mathematical expression\"; auto expression_param std::make_shared<parameter_expression::ParameterExpression>( \"advanced_expression\", descriptor); File truncated lines full file"},
{"url": "https://index.ros.org/p/persist_parameter_server", "package": "persist_parameter_server", "package_summary": "ros2 parameter server that other nodes can write/read parameters including persistent parameters.", "package_details": "ROS2 Persistent Parameter Server ROS Persistent Parameter Server, resides ROS system serve parameter daemon. nodes(e.g client demo code) write/read parameter Parameter Server, Parameter Server able store parameter persistent storage user tmpfs, nfs, disk. overview slide deck general information. ROS2 Persistent Parameter Server Background Overview Persistent Parameter Registration Persistent Prefix Scope Overview Configurable Options Services Sequence Started Supported Distribution Docker Container Dependent Packages Prerequisites Build Run Kubernetes Test Run Issues Authors License Background discussion opened centralized parameter server good affinity ROS distributed system architecture. valuable ROS APIs messages specific semantic meaning misinterpreted. develop ROS tools practices bring level rigor parameters greater reusability correctness. expected requirement. Global configuration nodes share RTOS priorities, vehicle dimensions, Generic ROS system property server. Persistent storage support re-initialize system. parameters modified runtime cache persistent volume boot re-spawn, modified parameter loaded initialization. (parameter lifetime dependent case, system lifetime, node lifetime.) ROS1 based application Parameter Server. Overview Generally ROS Parameter Server simple blackboard write/read parameters nodes write/read parameter server share ROS system. concept \u201cPersistent Parameter\u201d ROS Parameter Server constructed ROS parameter API\u2019s, specific API\u2019s connect server client. security relies ROS security aspect. Persistent Parameter Registration Persistent Prefix persistent parameter prefix \u201cpersistent\u201d Scope Overview parameter server scope persistent parameter. parameter server built top ROS Parameter API, parameter server supports \u201cpersistent\u201d parameter based /parameter_events topic. Category Supported Description Parameter API ROS Parameter Client API supported, activity detected /parameter_events. Persistent Parameter File parameter server dedicated argument file load parameters. addition, persistent parameters stored file shutdown. \u2013file-path /tmp/parameter_server.yaml Parameter Arguments \u2013ros-args persistent.some_int:=42some_int registered persistent parameter, notified /parameter_events parameter server. Parameter File Arguments \u2013ros-args \u2013params-file ./parameters_via_cli.yamlsame parameter arguments, registered persistent parameter, notified /parameter_events parameter server. Launch Parameter ros2 launch persist_parameter_server parameter_server.launch.pysame parameter arguments, registered persistent parameter, notified /parameter_events parameter server. Configurable Options Node ROS parameter owned node, node needed access parameters, designed clarify semantics parameters owners. Node \u201cparameter_server\u201d node specifies. nodes \u201cparameter_server\u201d access system Parameter Server. exist multiple parameter servers, parameter servers node \u201cparameter_server_[special_string]\u201d, notice ROS node alphanumerics Persistent Volume Definition \u201cPersistent\u201d user cases, configurable set path store persistent \u2013file-path FILE_PATH parameter. Expecting parameter\u2019s lifespan system boot, path \u201c/tmp\u201d user fresh start reboot. physical persistent volume chosen users parameter hardware storage. initialization time, Parameter Server load parameters storage user. Storing Period sets interval periodically saving parameters file system, setting disables periodic storing. Node Options important options: allow_undeclared_parameters: (default true) automatically_declare_parameters_from_overrides: (default true) allow_dynamic_typing: (default false) configuration options passed arguments Options CLI File truncated lines full file](https://github.com/fujitatomoya/ros2_persist_parameter_server/tree/rolling/./README.md)"},
{"url": "https://index.ros.org/p/play_motion2_cli", "package": "play_motion2_cli", "package_summary": "The play_motion command for ROS 2 command line tools.", "package_details": "play_motion2_cli Command line interface managing play_motion2 aplication. list list verb listing existing motions. Arguments: --is-ready, -r:Additionally show motion ready. Usage: ros2 play_motion list [--is-ready info info verb displaying information motion. default, displays key, description joints. display specific information. Arguments: motion_name motion obtain information. argument required. --verbose, Prints detailed information motion usage, joint positions, times start. Usage: ros2 play_motion info <motion_name> [--verbose run run verb execute motion. Arguments: motion_name motion execute. argument required. --skip-planning: skip planning approaching position Usage: ros2 play_motion run <motion_name> [--skip-planning]"},
{"url": "https://index.ros.org/p/pymoveit2", "package": "pymoveit2", "package_summary": "Basic Python interface for MoveIt 2 built on top of ROS 2 actions and services", "package_details": "pymoveit2 Basic Python interface MoveIt built top ROS actions services. Note: official Python library MoveIt moveit_py Check announcement Joint Goal Pose Goal Gripper Action MoveIt Servo Instructions Dependencies primary dependencies required project. ROS Galactic, Humble Iron MoveIt selected ROS distribution additional dependencies installed rosdep building process Building Clone repository, install dependencies build colcon. Clone repository favourite ROS workspace git clone https://github.com/AndrejOrsula/pymoveit2.git Install dependencies rosdep install --rosdistro ${ROS_DISTRO} --from-paths Build colcon build --merge-install --symlink-install --cmake-args \"-DCMAKE_BUILD_TYPE=Release\" Sourcing utilising package, remember source ROS workspace. source install/local_setup.bash enables importing pymoveit2 module external workspaces. Examples demonstrate pymoveit2 usage, examples directory scripts demonstrate basic functionality. Additional examples ign_moveit2_examples repository. Prior running examples, configure environment control robot MoveIt instance, launch scripts panda_ign_moveit2 repository RViz (fake) ROS control ros2 launch panda_moveit_config ex_fake_control.launch.py Gazebo (simulated) ROS control ros2 launch panda_moveit_config ex_ign_control.launch.py individual scripts run. Move joint configuration ros2 run pymoveit2 ex_joint_goal.py --ros-args joint_positions:=\"[1.57, Move Cartesian pose (motion joint Cartesian space) ros2 run pymoveit2 ex_pose_goal.py --ros-args position:=\"[0.25, quat_xyzw:=\"[0.0, cartesian:=False Repeatadly toggle gripper \"open\"/\"close\" actions) ros2 run pymoveit2 ex_gripper.py --ros-args action:=\"toggle\" MoveIt Servo move end-effector circular motion ros2 run pymoveit2 ex_servo.py adding collision object primitive geometry planning scene MoveIt ros2 run pymoveit2 ex_collision_primitive.py --ros-args shape:=\"sphere\" position:=\"[0.5, dimensions:=\"[0.04]\" adding collision object mesh geometry planning scene MoveIt ros2 run pymoveit2 ex_collision_mesh.py --ros-args action:=\"add\" position:=\"[0.5, quat_xyzw:=\"[0.0, Directory Structure directory structure utilised package. ```bash examples/ [dir] Examples demonstrating pymoveit2 pymoveit2/ [dir] ROS launch scripts robots/ [dir] Presets robots (data extracted URDF/SRDF) gripper_command.py Interface Gripper controlled GripperCommand moveit2_gripper.py Interface MoveIt Gripper controlled JointTrajectoryController File truncated lines full file"},
{"url": "https://index.ros.org/p/qml_ros2_plugin", "package": "qml_ros2_plugin", "package_summary": "A QML plugin for ROS.\n    Enables full communication with ROS from QML.", "package_details": "Scientific Works module scientific context, feel free cite paper: @INPROCEEDINGS{fabian2021hri, author {Stefan Fabian Oskar von Stryk}, title {Open-Source Tools Efficient ROS ROS2-based Human-Robot Interface Development}, year booktitle European Conference Mobile Robots (ECMR)}, QML ROS2 Plugin Connects QML user interfaces Robot Operating System (ROS2). ROS version click aware loses semantic information type message provide. support Logging, Publisher, Subscription, ImageTransportSubscription, Service client, ActionClient, TfTransform, Ament index querying topics License: MIT https://github.com/StefanFabian/qml_ros2_plugin/assets/2090520/c45280cf-24fe-4ff1-8423-30035deda10d demo interface velocity publisher control display turtle demo lines code entire interface. examples folder turtle_demo_control.qml. Note: full examples including ROS init calls shutdown handling checkout examples directory. Logging Logging supported correctly reports qml file line message import Ros2 Item function doesWork() Ros2.debug(\"A debug message\") Set logging level Debug (default Info) Ros2.getLogger().setLoggerLevel(Ros2LoggerLevel.Debug); Ros2.debug(\"A debug message logged.\") Ros2.info(\"I information\") Ros2.warn(\"This warning\") Ros2.error(\"Great! error.\") Ros2.fatal(\"I'm dead\") Ros2.info(\"Just fatal kill node. die logging fatal\") Subscribers create Subscription topic message type system. type time compilation. Usage import Ros2 Item width: height: Subscription subscriber topic: \"/test\" onNewMessage: textField.text message.data Text text: message subscriber.message.data Text textField text: newMessage signal.\" Image Transport stream camera images. default transport \u201ccompressed\u201d. stream exposed QML QObject QAbstractVideoSurface based videoSurface property QML VideoOutput docs) source VideoOutput control. Multiple ImageTransportSubscribers topic share subscription ensure image converted QML compatible format Additionally, throttleRate property throttle camera rate subscribing frame shutting rate documentation). File truncated lines full file"},
{"url": "https://index.ros.org/p/rcl_logging_syslog", "package": "rcl_logging_syslog", "package_summary": "Implementation of rcl_logging API for an syslog/rsyslog backend.", "package_details": "rcl_logging_syslog rcl_logging_syslog alternative logging backend implementation ROS application rcl_logging_interface. rcl_logging_syslog SYSLOG(3) send log data rsyslog a.k.a rocket-fast system log processing main objective Enabling ROS logging system Cloud-Native Log Management Observability. overview slide deck information. Motivation logging data critical entire system observability status, application alert administrator give feedback system adjusting parameter. importance rises robotics robot application, distributed system ROS edge computing able wrong place logging data. rsyslog default Ubuntu distribution managed system service, performative, configuration supported including log data pipeline. user choose logging configuration depending application requirement case, file system sink, forwarding remote rsyslogd, FluentBit. FluentBit Fast Log Processor Forwarder part Graduated Fluentd Ecosystem CNCF sub-project. Demonstration works rsyslog FluebtBit https://github.com/user-attachments/assets/bdb05bf7-92b2-4b9a-8f20-3d3b803a7a86 rsyslog Fluentd Loki Grafana https://github.com/user-attachments/assets/4a1aae42-5c55-4f31-9198-8c7c246244ca Tutorials integrate Fluentd Loki Grafana Supported ROS Distribution Distribution Supported Branch Rolling Ridley rolling (Development) Kilted Kaiju kilted Jazzy Jalisco jazzy Humble Hawksbill humble Installation Prerequisites rsyslog installation rcl_logging_syslog requires rsyslog package, Ubuntu default. container, situation bit host system system services rsyslogd running default. case container, install rsyslog packages container root file system. [!NOTE] enable container host system privileges recommended, security. Install rsyslog package apt install rsyslog create ros directory rsyslog. commands require root permission. /var/log/ros root directory rcl_logging_syslog, logs expected stored root directory. mkdir /var/log/ros chown syslog:adm /var/log/ros [!WARNING] production, user configure group owner syslog. rsyslogd meet permission problem file system. rsyslog service check running application host system, check rsyslog system service. systemctl status rsyslog running application container environment, start rsyslogd daemon process. /usr/sbin/rsyslogd -iNONE prefer rsyslogd host system application container, bind /dev/log container /dev/log:/dev/log, application running container open Unix Domain Socket rsyslogd running host system. setting, rsyslogd configuration set host system. fluent-bit installation File truncated lines full file"},
{"url": "https://index.ros.org/p/reach_ros", "package": "reach_ros", "package_summary": "The reach_ros package", "package_details": "REACH ROS Plugins package ROS2-based plugin implemenations REACH kinematics, evaluation, display interfaces Installation clone repository colcon workspace ~/reach_ws/src git clone https://github.com/ros-industrial/reach_ros2.git Install dependencies vcs import src src/reach_ros2/dependencies.repos rosdep install --from-paths src --ignore-src Build repository colcon build --symlink-install Demo simple demonstration capability repository demo sub-directory. instructions details launch demo ROS Python instructions Python interface launch studies. Usage steps run reach study robot ROS1 infrastructure plugins. Create files describing robot system required REACH plugins URDF, SRDF, kinematics file, joint limits file, Create mesh model workpiece Note: origin model align kinematic base frame robot Create point cloud target points workpiece point cloud generated command line tool PCL pcl_mesh_sampling <workpiece_mesh>.ply <output_cloud>.pcd -n_samples <number samples> -leaf_size <leaf_size> -write_normals true Create configuration YAML file defining parameters reach study configuration interface plugins demo Run setup launch file ros2 launch reach_ros setup.launch robot_description_file:=<path_to_URDF> Run reach study analysis ros2 launch reach_ros start.launch robot_description_file:=<path_to_URDF> robot_description_semantic_file:=<path_to_SRDF> robot_description_kinematics_file:=<path_to_kinematics.yaml> robot_description_joint_limits_file:=<path_to_joint_limits.yaml> config_file:=<config_file.yaml> config_name:=<arbitrary_config> results_dir:=<arbitrary_results_directory> Evaluation Plugins Manipulability plugin MoveIt! calculate manipulability robot pose. Higher manipulability results higher pose score. Range: inf) Parameters: planning_group planning group evaluate manipulability robot pose jacobian_row_subset (optional) indices rows Jacobian evaluating manipulability. row indices correspond output space jacobian_row_subset: position manipulability Manipulability Scaled plugin MoveIt! calculate manipulability robot pose divided characteristic length motion group. characteristic length computed walking base link tip link motion group summing distances adjacent links. Higher scaled manipulability results higher pose score. Range: inf) Parameters: planning_group planning group evaluate manipulability robot pose jacobian_row_subset (optional) indices rows Jacobian evaluating manipulability. row indices correspond output space jacobian_row_subset: position manipulability excluded_links (optional) names links contained motion group contribute characteristic length Manipulability Ratio plugin MoveIt! calculate manipulability robot pose evaluate score. score calculated ratio smallest manipulability largest manipulability larger ratio, uniform dexterity higher score. Range Parameters: planning_group planning group evaluate manipulability robot pose jacobian_row_subset (optional) indices rows Jacobian evaluating manipulability. row indices correspond output space File truncated lines full file"},
{"url": "https://index.ros.org/p/replay_testing", "package": "replay_testing", "package_summary": "A testing library and CLI for replaying ROS nodes.", "package_details": "Replay Testing ROS2-based framework configuring, authoring running replay tests. Features include: MCAP replay automatic recording assets offline review Baked-in Unittest support MCAP asserts Parametric sweeps Easy-to-use CMake running Lightweight CLI running quickly Replay Tesing? Replay testing simply replay previously recorded data set ROS nodes. iterating piece code, typically easier develop local machine robot. able record data on-robot replay locally, worlds! robotics developers replay testing form package wraps conventions easy executable. Release Status Distro Dev Doc Src Ubuntu Rolling Kilted Jazzy Humble Usage CLI ros2 run replay_testing replay_test [REPLAY_TEST_PATH] Run @analyze previous run: ros2 run replay_testing replay_test [REPLAY_TEST_PATH] --analyze [RUN_ID] args: ros2 run replay_testing replay_test colcon test CMake package exposes CMake running replay tests part package\u2019s testing pipeline. find_package(replay_testing REQUIRED) if(BUILD_TESTING) add_replay_test([REPLAY_TEST_PATH]) endif() you\u2019ve set persist artifact paths test_results, *.xunit.xml file produced based REPLAY_TEST_PATH Authoring Replay Tests replay test authored file, my_replay_test.py. expose set Python decorators wrap class test. Replay testing distinct phases, required run replay test: Filter Fixtures @fixtures collecting preparing fixtures run launch specification. Duties include: mechanism input fixtures lidar_data.mcap). store MCAPs source control, Storing MCAP Filtering expected output topics produced run step. Produces filtered_fixture.mcap asset run step Asserts input topics present (Eventually) ways data forwards compatible updates robotics stack @fixtures.parameterize([LocalFixture(path=\"/tmp/mcap/my_data.mcap\")]) class FilterFixtures: required_input_topics [\"/vehicle/cmd_vel\"] expected_output_topics [\"/user/cmd_vel\"] Run @run launch description run replayed fixture. Usage: @run.default() class Run: def generate_launch_description(self) LaunchDescription: return LaunchDescription(\" LAUNCH DESCRIPTION File truncated lines full file"},
{"url": "https://index.ros.org/p/rko_lio", "package": "rko_lio", "package_summary": "A Robust Approach for LiDAR-Inertial Odometry Without Sensor-Specific Modelling", "package_details": "RKO-LIO Robust LiDAR-Inertial Odometry Sensor-Specific Modelling [![arXiv](https://img.shields.io/badge/arXiv-2509.06593-b31b1b.svg)](https://arxiv.org/abs/2509.06593) [![GitHub License](https://img.shields.io/github/license/PRBonn/rko_lio)](/LICENSE) [![GitHub commit](https://img.shields.io/github/last-commit/PRBonn/rko_lio)](/) [![PyPI Version](https://img.shields.io/pypi/v/rko_lio?color=blue)](https://pypi.org/project/rko-lio/) ![ROS Package Index](https://img.shields.io/ros/v/humble/rko_lio) ![ROS Package Index](https://img.shields.io/ros/v/jazzy/rko_lio) ![ROS Package Index](https://img.shields.io/ros/v/kilted/rko_lio) ![ROS Package Index](https://img.shields.io/ros/v/rolling/rko_lio) platforms, environments, odometry system Quick Start Assuming rosbag (ros1/ros2) tree, run RKO-LIO pip install rko_lio rosbags rerun-sdk data path directory *.bag files (ROS1) metadata.yaml (ROS2) rko_lio /path/to/data pip install packages? rko_lio odometry package rosbags required rosbag dataloader. ros1 ros2 bags supported! rerun-sdk required optional visualizer flag) Check options CLI rko_lio details Python usage docs. ROS Supported distros: Humble, Jazzy, Kilted, Rolling. sudo apt install ros-$ROS_DISTRO-rko-lio you\u2019d build source, clone repo colcon workspace rosdep install --from-paths src --ignore-src colcon build --packages-select rko_lio --symlink-install --event-handlers console_direct+ case system install dependencies rosdep, build dependencies building RKO-LIO colcon build --packages-select rko_lio --cmake-args -DRKO_LIO_FETCH_CONTENT_DEPS=ON launch file ros2 launch rko_lio odometry.launch.py imu_topic:=<topic> lidar_topic:=<topic> base_frame:=base_link parameters minimum launch file. Check launch configuration options ros2 launch rko_lio odometry.launch.py details ROS usage docs. License project free software MIT license. details, LICENSE file. Citation work leaving star :star: repository citing paper: @article{malladi2025arxiv, author {M.V.R. Malladi Guadagnino Lobefaro Stachniss}, title Robust Approach LiDAR-Inertial Odometry Sensor-Specific Modeling}, journal {arXiv preprint}, year volume {arXiv:2509.06593}, url {https://arxiv.org/pdf/2509.06593}, RA-L Submission check branch ral_submission version code submission RA-L. note branch meant as-is reproduction code submission supported. master release versions vastly improved, supported, recommended system. Acknowledgements File truncated lines full file"},
{"url": "https://index.ros.org/p/rmw_desert", "package": "rmw_desert", "package_summary": "Implement the ROS middleware interface using the DESERT protocol stack for underwater communications.", "package_details": "rmw_desert ROS middleware implementation DESERT underwater communication protocol"},
{"url": "https://index.ros.org/p/zenoh_security_tools", "package": "zenoh_security_tools", "package_summary": "This package generates config files to enforce security with Zenoh", "package_details": "zenoh_security_tools zenoh_security_tools package generate_configs executable generates Zenoh session config files access control, authentication encryption parameters based policies keystores generated sros2. Usage ros2 run zenoh_security_tools generate_configs Generate Zenoh session configs security artifacts. Options: -h,--help Print message exit -p,--policy TEXT REQUIRED path Access Control Policy file. -e,--enclaves TEXT directory security enclaves nodes policy file. -d,--ros-domain-id UINT REQUIRED ROS Domain -c,--session-config TEXT REQUIRED path Zenoh session config file. -r,--router-config TEXT REQUIRED path Zenoh router config file. configuring security rmw_zenoh process setting security similar tutorial relying security environment variables passing enclaves nodes, pass Zenoh session configs desired security parameters configured rmw_zenoh. modified session configs generated tool Setup steps walk running rmw_zenoh security enabled simple talker-lister system. create directory security artifacts configs generated. mkdir ~/sros2_demo Generate keystore ~/sros2_demo ros2 security create_keystore demo_keystore Generate certificates authentication encryption Generate security files talker listener nodes, zenohd router ros2 security create_enclave demo_keystore /talker_listener/talker ros2 security create_enclave demo_keystore /talker_listener/listener ros2 security create_enclave demo_keystore /talker_listener/zenohd Generate policy.xml access control Launch zenohd ros2 run rmw_zenoh_cpp rmw_zenohd Launch listener export RMW_IMPLEMENTATION=rmw_zenoh_cpp ros2 run demo_nodes_cpp listener Launch talker export RMW_IMPLEMENTATION=rmw_zenoh_cpp ros2 run demo_nodes_cpp talker run policy generator sros2 ros2 security generate_policy policy_listener_talker.xml Finally, terminate processes. access control Generate security configs enclaves access control). ros2 run zenoh_security_tools generate_configs --policy policy_listener_talker.xml --router-config <path default router config>/DEFAULT_RMW_ZENOH_ROUTER_CONFIG.json5 --session-config <path default session config>/DEFAULT_RMW_ZENOH_SESSION_CONFIG.json5 --ros-domain-id generate Zenoh session config files node policy_listener_talker.xml file. Run talker config file ```bash export ZENOH_SESSION_CONFIG_URI=talker.json5 ros2 run demo_nodes_cpp talker [INFO] [talker]: Publishing: World: [INFO] [talker]: Publishing: World: File truncated lines full file"},
{"url": "https://index.ros.org/p/robotraconteur_companion", "package": "robotraconteur_companion", "package_summary": "Robot Raconteur Companion library for C++", "package_details": "Robot Raconteur Companion Library Robot Raconteur companion library utilities working Robot Raconteur services devices. companion library intended Robot Raconteur Core library (https://github.com/robotraconteur/robotraconteur). companion library written compatible Robot Raconteur Core focuses core capabilities Robot Raconteur, transport, discovery, communication. companion number miscellaneous utilities working libraries Eigen, working standard Robot Raconteur service types (https://github.com/robotraconteur/robotraconteur_standard_robdef). companion library required Robot Raconteur, recommended users. companion intended evolve faster core library, accept contributions community. companion library licensed Apache license. Robot Raconteur Companion library utilities: Standard Service Definition (robdef) types YAML parsers device info structures Eigen converters Date/time converters Identifier utilities UUID utilities Service attribute utilities Sensor Data Structure Utilities Documentation Documentation https://robotraconteur.github.io/robotraconteur_companion/ Standard Service Types Usage library compiled standard service type thunk code. standard service types custom types, CMake lists: find_package(RobotRaconteurCompanion REQUIRED) add_executable(my_program my_sources.cpp) target_link_libraries(my_program ${OTHER_LIBRARIES} RobotRaconteurCompanion RobotRaconteurCore program initialization, #include <RobotRaconteur.h> #include \"RobotRaconteurCompanion/StdRobDef/StdRobDefAll.h\" RobotRaconteur::Companion::RegisterStdRobDefServiceTypes(); RobotRaconteur::ClientNodeSetup node_setup(std::vector<ServiceFactoryPtr>()); RobotRaconteur::ServiceNodeSetup custom service types program, find_package(RobotRaconteurCompanion REQUIRED) ROBOTRACONTEUR_GENERATE_THUNK(RR_THUNK_SRCS RR_THUNK_HDRS experimental.my_custom_types.robdef MASTER_HEADER IMPORT_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${RobotRaconteur_STANDARD_ROBDEF_DIRS} AUTO_IMPORT add_executable(my_program my_sources.cpp) target_link_libraries(my_program ${OTHER_LIBRARIES} RobotRaconteurCompanion RobotRaconteurCore ${RR_THUNK_HDRS} ${RR_THUNK_SRCS}) program initialization, #include <RobotRaconteur.h> #include \"RobotRaconteurCompanion/StdRobDef/StdRobDefAll.h\" #include \"robotraconteur_generated.h\" RobotRaconteur::Companion::RegisterStdRobDefServiceTypes(); RobotRaconteur::ClientNodeSetup node_setup(ROBOTRACONTEUR_SERVICE_TYPES); RobotRaconteur::ServiceNodeSetup Device Info Structure YAML Parsers Device Info structures describe devices capabilities. structures clients runtime, typically property device service. com.robotraconteur.device.Device standard type defines device_info property. com.robotraconteur.robotics.robot.Robot standard type defines device_info robot_info properties. structures describe wide variety devices, including robots, sensors, devices. YAML files store contents structures easier create edit Robot Raconteur companion library parsers YAML files. device info structure types supported: com.robotraconteur.actuator.ActuatorInfo com.robotraconteur.clock.ClockDeviceInfo com.robotraconteur.isoch.IsochDeviceInfo com.robotraconteur.device.DeviceInfo com.robotraconteur.eventlog.EventLogInfo File truncated lines full file"},
{"url": "https://index.ros.org/p/canopen_tests", "package": "canopen_tests", "package_summary": "Package with tests for ros2_canopen", "package_details": "CANopen Tests Enable launch tests \u2013cmake-args -DCANOPEN_ENABLED. run devices vcan0 enabled."},
{"url": "https://index.ros.org/p/ros2_fmt_logger", "package": "ros2_fmt_logger", "package_summary": "A modern, ROS 2 logging library that provides fmt-style formatting as a replacement for RCLCPP logging macros", "package_details": "ros2_fmt_logger modern, ROS logging library fmt-style formatting replacement RCLCPP logging macros. Features Function calls macros: logger.info(\"Hello, RCLCPP_INFO(logger, name.c_str()) Additional .on_change() method logging values Chrono syntax throttling: logger.warn_throttle(1s, \"Warning: compatible macros, easy start existing projects full rewrite current log statements Examples Once-only logging logger.info_once(\"This message matter times called\"); Throttled logging std::chrono_literals::operator\"\"s; logger.warn_throttle(1s, warning appears Change-based logging Log logger.info_on_change(sensor_value, \"Sensor reading changed sensor_value); Log change exceeds threshold logger.error_on_change(temperature, \"Temperature changed significantly: temperature); Quick Start Include package.xml <depend>ros2_fmt_logger</depend> Configure find_package find_package(ros2_fmt_logger REQUIRED) target_link_libraries(your_target ros2_fmt_logger::ros2_fmt_logger) Include header #include <ros2_fmt_logger/ros2_fmt_logger.hpp> Create logger instance rclcpp::Logger auto logger ros2_fmt_logger::Logger(node->get_logger()); custom clock throttling features auto logger ros2_fmt_logger::Logger(node->get_logger(), node->get_clock()); modern logging syntax RCLCPP_INFO(logger, \"Processing item logger.info(\"Processing item RCLCPP_ERROR(logger, \"Failed connect host.c_str(), port); logger.error(\"Failed connect host, port); Format String Syntax powerful fmt library format syntax: Basic formatting logger.info(\"Hello, Positional arguments logger.info(\"Processing items\", total, current); Format specifiers logger.info(\"Progress: progress); Percentage decimal logger.info(\"Value: Zero-padded floating point logger.info(\"Hex: number); Hexadecimal prefix Container formatting (requires fmt/ranges.h) logger.info(\"Values: std::vector{1, demo_ros2_fmt_logger.cpp examples. File truncated lines full file"},
{"url": "https://index.ros.org/p/broll", "package": "broll", "package_summary": "B-Roll utility library for interacting with video stream data in the context of rosbag2", "package_details": "B-Roll utilities dealing video stream data context Rosbag2. wrapper utilities libavcodec (ffmpeg). broll Library providing wrapper classes common libavcodec sensor_msgs operations decode_node decode_node node takes CompressedImage encoding republishes raw Image Topics Subscribed: video/compressed: sensor_msgs/msg/CompressedImage Topics Published: video/raw: sensor_msgs/msg/Image Parameters: scale: float scale apply image republishing. result size, rounds nearest number width height Examples: ros2 run broll decode_node --ros-args video/compressed:=camera0/compressed video/raw:=/camera0/raw_bgr scale:=0.5"},
{"url": "https://index.ros.org/p/rosbag2_storage_broll", "package": "rosbag2_storage_broll", "package_summary": "Rosbag2 storage plugin to play audio/video files as ROS messages using B-Roll tools", "package_details": "rosbag2_storage_broll Rosbag2 storage plugin read videos B-Roll libraries. ros2 bag play data/camera_0.mp4 --loop Feature package: rosbag2_storage_broll storage implementation rosbag2_storage_broll::bag_utils exported utility library functions manipulating bags Storage Plugin rosbag2_storage_broll Rosbag2 passing arbitrary configuration storage plugin --storage-config-file option. rosbag2_storage_broll takes YAML file fields: optional<string> namespace published topics, default \"video/\" compressed_topic: optional<string> compressed frame topic, default \"compressed\" frame_id: optional<string> frame apply message headers TODO(emersonknapp): plugin handle standard bags CompressedImage topic fundamental blocker bag_utils library bag_utils.hpp details"},
{"url": "https://index.ros.org/p/rosbag2_to_video", "package": "rosbag2_to_video", "package_summary": "Command line tool to create a video from a rosbag recording", "package_details": "rosbag2_to_video command line tool Installation Binaries sudo apt install ros-${ROS_DISTRO}-rosbag2-to-video source added colcon workspace installed usual. create workspace mkdir new_ws/src new_ws/src clone repo git clone https://github.com/fictionlab/rosbag2_to_video install dependencies rosdep update rosdep install --from-paths src --ignore-src build workspace colcon build Usage tool entrypoints: ros2 bag to_video ros2 run rosbag2_to_video rosbag2_to_video options."},
{"url": "https://index.ros.org/p/sicks300_ros2", "package": "sicks300_ros2", "package_summary": "This package published a laser scan message out of a Sick S300 laser scanner.", "package_details": "sicks300_ros2 Overview package implements driver Sick Safety laser scanners interface ROS lifecycle node. implementation protocol. Sick Professional CMS Sick Expert supported. cover full functionality protocol: handles distance measurements properly handles configured measurement range field properly handle I/O-data reflector data reads reflector marker field distance measurements) Keywords: ROS2, laser, driver, sick lifecycle sicks300_ros2 package tested [ROS2] Humble [Ubuntu] ported ROS2. research code, expect fitness purpose disclaimed. Configuration notes configure Configure output 500kBaud scanner frequency) Configure scanner Continuous Data Output Send data telegram configure distances, reflector data scanner frequency). Configuration measurement ranges protocol configure measurement range field full range values. protocol configure measurement range field scanner frequency). measurement ranges, ROS side laser_filters package. Installation Building Source Dependencies Robot Operating System (ROS) (middleware robotics), Building build source, clone latest version repository colcon workspace compile package colcon_workspace/src git clone https://github.com/ajtudela/sicks300_ros2.git rosdep install --from-path src --rosdistro humble colcon build Usage Add user dialout group access USB port: sudo usermod dialout $USER Run sicks300_ros2 node ros2 run sicks300_ros2 sicks300_ros2 Optionally, launch node angulor bound filter: ros2 launch sicks300_ros2 scan_with_filter.launch.py Nodes sicks300_ros2 Driver Sick Safety laser scanners. Published Topics scan ([sensor_msgs/LaserScan]) laserscan data. scan/standby ([std_msgs/Bool]) True scanner standby mode, false /diagnostics ([diagnostic_msgs/DiagnosticArray]) Diagnostic laser scan. Parameters port (string, default: \u201c/dev/ttyUSB0\u201d) USB port scanner. baud (int, default: Baudrate communicate laser scanner. File truncated lines full file"},
{"url": "https://index.ros.org/p/simulation_interfaces", "package": "simulation_interfaces", "package_summary": "A package containing simulation interfaces including messages, services and actions", "package_details": "Simulation Interfaces Standard ROS interfaces interacting simulators. Messages, services, actions documented respective files. Examples resources find examples, simulation scenes, RViz2 plugin tutorials simulation_interfaces_examples repository. Result.msg standard includes generic message handling service responses, Result.msg, included final version standard. generic, promoted common message included service mechanism Suggested interface implementation priorities GetSimulatorFeatures implemented users information state support standard simulation interfaces. aim maintaining consistency implemented feature, enabling Set parts. interfaces represent optional utility considered priority: GetEntityBounds GetNamedPoseBounds GetNamedPoses GetSpawnables SetEntityInfo GetAvailableWorlds LoadWorld UnloadWorld GetCurrentWorld"},
{"url": "https://index.ros.org/p/soar_ros", "package": "soar_ros", "package_summary": "An interface library to connect ROS2 with the Soar cognitive architecture.", "package_details": "soar_ros: ROS Interface Soar ROS2 package interface Soar cognitive architecture creating wrappers ROS2 messages handling Soar kernel continuos mode. Soar cognitive architecture developed University Michigan. field cognitive robotics projects, e.g.\u00a0a drone robot. integration Soar ROS difficult complex projects, include multiple publishers, subscribers, services clients. main limitation orginates synchronous callback model Soar inspired creation wrapper. detailed explanation reason development package read software architecture. package relies forked version Soar. major include cmake-based build scons removal SWIG language interfaces. detailed comparison commit history fork. Features library developed targeting ROS Humble Ubuntu configurations tested. blocking Soar kernel Publisher Subscriber Service Client Action Client features supported, Action Server Multiple Soar agents Definition description public API API documentation generated rosdoc2, build documentation. Examples examples extract test cases test/test_soar_ros.cpp. Publisher soar_ros::Publisher extends ROS Publisher user define data converted ROS data types Soar data types. class TestOutput public soar_ros::Publisher<std_msgs::msg::String> public: TestOutput(sml::Agent agent, rclcpp::Node::SharedPtr node, const std::string topic) Publisher<std_msgs::msg::String>(agent, node, topic) ~TestOutput() std_msgs::msg::String parse(sml::Identifier override std_msgs::msg::String msg; msg.data id->GetParameterValue(\"data\"); std::cout id->GetCommandName() msg.data std::endl; return msg; Service ROS2 AddTwoInts implemented. Soar adds integers sends result ROS2 Service, based soar_ros::Service class. code test/test_soar_ros.cpp. cpp class TestService public soar_ros::Service<example_interfaces::srv::AddTwoInts> public: TestService(sml::Agent agent, rclcpp::Node::SharedPtr node, const std::string topic) Service<example_interfaces::srv::AddTwoInts>(agent, node, topic) ~TestService() example_interfaces::srv::AddTwoInts::Response::SharedPtr parse(sml::Identifier override example_interfaces::srv::AddTwoInts::Response::SharedPtr response std::make_shared<example_interfaces::srv::AddTwoInts::Response>(); auto sum id->GetParameterValue(\u201csum\u201d); int32_t num std::stoi(sum); response.get()->sum num; File truncated lines full file"},
{"url": "https://index.ros.org/p/synapticon_ros2_control", "package": "synapticon_ros2_control", "package_summary": "A ros2_control interface for Synapticon motor drivers", "package_details": "Controlling Synapticon Devices ROS2 Package Description repository Synapticon drives (SOMANET Node, SOMANET Circulo SOMANET Integro) CSP (Cyclic Sync Position), CSV (Cyclic Sync Velocity), CST (Cyclic Sync Torque) modes ROS2 package. utilizes SOEM Ethercat Master. ROS package originally developed Andy Zelenak. Synapticon GmbH added examples, simulation, extended instructions easier installation, support containerization Docker. Table Contents Intention Overview Hardware Software Ubuntu ROS2 ROS2 Installation Synapticon Package Installation Demo Running Sudo (Optional) Isolated Environment (Docker) Docker Installation Synapticon Package Installation Demo Disclaimer Intention intention document provide instructions quickly Synapticon Devices ROS2 package Synapticon library. Additionally, order compatible Linux distributions, Docker images Overview subsections briefly demonstrate hardware software required Synapticon devices package. Hardware figure block diagram wiring setup Drives parameters configured OBLAC tools. Detailed instructions wiring diagrams devices Synapticon Web site documentation. package daisy chaining Synapticon drives order image Software demo, scenarios considered: Ubuntu installed system ROS2 (humble, rolling jazzy) Synapticon package installed system user run package isolated environment (Docker) Ubuntu ROS2 install ROS2 Ubuntu machine, follow steps ros.org install full version. minimal version installed; simulation desired, RViZ additionally installed. installation, configuration steps required. completeness demo, commands subsection copied website executed ROS2 installation. ROS2 Installation ensure locale supports UTF-8, run commands: sudo apt update sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 export LANG=en_US.UTF-8 Enable Ubuntu Universe repository: sudo apt install software-properties-common sudo add-apt-repository universe Add GPG key: sudo apt update sudo apt install curl sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key /usr/share/keyrings/ros-archive-keyring.gpg Add repository sources: echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu /etc/os-release echo $UBUNTU_CODENAME) main\" sudo tee /etc/apt/sources.list.d/ros2.list /dev/null Update apt cache: sudo apt update command updates packages system. Note commands work, skip step. sudo apt upgrade Finally, install ROS compilers (replace ROS_DISTRO desired ROS distribution humble, jazzy rolling): sudo apt install ros-ROS_DISTRO-desktop sudo apt install ros-dev-tools installation complete, add line /home/USER/.bashrc file (replace ROS_DISTRO desired ROS distribution humble, jazzy rolling): source /opt/ros/ROS_DISTRO/setup.bash order ROS2 interfere communication ports, set Domain (detailed information demo, ROS_DOMAIN_ID=1. add /home/$USER/.bashrc: export ROS_DOMAIN_ID=1 close reopen terminals. File truncated lines full file"},
{"url": "https://index.ros.org/p/zed_msgs", "package": "zed_msgs", "package_summary": "Contains message and service definitions used by the ZED ROS2 nodes.", "package_details": "ROS Interfaces zed-ros2-interfaces repository installs zed_msgs ROS2 package defines custom topics, services, actions packages defined repositories ZED ROS2 Wrapper ZED ROS2 Examples. Note: package require CUDA receive ZED data ROS machines NVIDIA GPU. Install package binaries ROS Humble package zed_msgs binary format official Humble repository. sudo apt install ros-humble-zed-msgs Install package source code install zed_msgs package source code obtain latest updates distributions Humble ROS Foxy). Build repository Dependencies zed_msgs colcon package. depends ROS packages: ament_cmake_auto builtin_interfaces std_msgs geometry_msgs shape_msgs rosidl_default_generators rosidl_default_runtime ament_lint_auto ament_cmake_copyright ament_cmake_cppcheck ament_cmake_lint_cmake ament_cmake_pep257 ament_cmake_uncrustify ament_cmake_xmllint Clone build Open terminal, clone repository, update dependencies, build packages: ~/catkin_ws/src git clone https://github.com/stereolabs/zed-ros2-interfaces.git sudo apt update rosdep update rosdep install --from-paths src --ignore-src colcon build --symlink-install --cmake-args=-DCMAKE_BUILD_TYPE=Release echo source $(pwd)/install/local_setup.bash ~/.bashrc source ~/.bashrc :pushpin: Note: command rosdep missing, install method: sudo apt-get install python-rosdep python-rosinstall-generator python-vcstool python-rosinstall build-essential :pushpin: Note: option --symlink-install important, symlinks copying files ROS2 folders installation, package ROS2 installed files nodes copied installation folders. symlinks modify workspace, reflecting modification executions needing issue colcon build command. true files don\u2019t compiled (Python scripts, configurations, :pushpin: Note: console interface zsh, change source command echo source $(pwd)/install/local_setup.zsh ~/.zshrc source ~/.zshrc. Custom Topics BoundingBox2Df BoundingBox2Di BoundingBox3D DepthInfoStamped GnssFusionStatus HealthStatusStamped Heartbeat Keypoint2Df Keypoint2Di Keypoint3D MagHeadingStatus Object ObjectsStamped PlaneStamped PosTrackStatus Skeleton2D Skeleton3D SvoStatus information reading Stereolabs online documentation Custom Services SetPose SetROI StartSvoRec SetSvoFrame.srv SaveAreaMemory.srv information reading Stereolabs online documentation meshes RVIZ rendering virtual File truncated lines full file"},
{"url": "https://index.ros.org/p/ai_prompt_msgs", "package": "ai_prompt_msgs", "package_summary": "Messages for interaction with AI models", "package_details": "ai_prompt_msgs Messages prompting interacting models. Server implementations list compatible servers. implement open add list! OpenAI: https://github.com/robosoft-ai/robosoft_openai"},
{"url": "https://index.ros.org/p/bcr_arm_ros2", "package": "bcr_arm_ros2", "package_summary": "TODO: Package description (metapackage)", "package_details": "package add custom functionalities BCR Arm, functionalities"},
{"url": "https://index.ros.org/p/clearpath_config", "package": "clearpath_config", "package_summary": "Clearpath Configuration YAML Parser and Writer", "package_details": "clearpath_config Clearpath Configuration YAML Parser Find documentation Clearpath Configuration YAML Clearpath ROS System Clearpath Documentation webpage. Configration Examples sample folder configurations starting point robot.yaml. Unit Tests unit tests written PyTest Good Integration Practices. clearpath_config_test package mirrors clearpath_config package structure. file clearpath_config tested file suffix _test.py. run tests: .../clearpath_config python3 pytest PyTest automatically search suffix _test current directory run tests."},
{"url": "https://index.ros.org/p/clearpath_nav2_demos", "package": "clearpath_nav2_demos", "package_summary": "Nav2 demos for Clearpath robots", "package_details": "clearpath_nav2_demos Nav2 slam_toolbox demos clearpath platforms"},
{"url": "https://index.ros.org/p/clearpath_ros2_socketcan_interface", "package": "clearpath_ros2_socketcan_interface", "package_summary": "A ROS 2 socketcan interface.", "package_details": "clearpath_ros2_socketcan_interface"},
{"url": "https://index.ros.org/p/create3_coverage", "package": "create3_coverage", "package_summary": "C++ action server exposing a non-systematic coverage behavior", "package_details": "iRobot\u00ae Create\u00ae Coverage creates ROS action server runs simple non-systematic coverage algorithm Create\u00ae purpose show command robot react hazard information. Build create3_examples_msgs packages. Source setup shell scripts. Start coverage action server ros2 run create3_coverage create3_coverage separate terminal command coverage action ros2 action send_goal /coverage create3_examples_msgs/action/Coverage \"{explore_duration:{sec: nanosec: max_runtime:{sec: 1000,nanosec: Robot initial configuration NOTES: start behavior robot undocked, close dock. behavior fail robot run dock. safe start robot docked. start behavior robot contact obstacles cliffs. Troubleshooting Waiting action server users notice unable communicate coverage action server Fast-DDS RMW, due bug https://github.com/ros2/rmw_fastrtps/issues/563. simple fix consists updating rwm_fastrtps_cpp library version"},
{"url": "https://index.ros.org/p/create3_examples_msgs", "package": "create3_examples_msgs", "package_summary": "Package containing action, message and service definitions used by the iRobot(R) Create(R) 3 examples", "package_details": "iRobot\u00ae Create\u00ae Examples messages ROS action, message, service definitions iRobot\u00ae Create\u00ae Examples packages. Actions (.action) Coverage: Command robot perform non-systematic coverage behavior environment."},
{"url": "https://index.ros.org/p/create3_examples_py", "package": "create3_examples_py", "package_summary": "Python examples for interacting with the iRobot(R) Create(R) 3 Educational Robot", "package_details": "iRobot\u00ae Create\u00ae Examples Python package Python script demonstrate interact Create\u00ae robot. iRobot\u00ae Create\u00ae Dance NOTES: undock robot starting executable show drive robot changing LED colors. create patterns follow tempo favourite songs! run ros2 run create3_examples_py create3_dance"},
{"url": "https://index.ros.org/p/create3_lidar_slam", "package": "create3_lidar_slam", "package_summary": "Example for using an RPLIDAR A1 with a Create 3", "package_details": "iRobot\u00ae Create\u00ae LIDAR SLAM demo sets LIDAR SLAM Create\u00ae robot Slamtec RPLIDAR spinning laser rangefinder. Parts List Raspberry USB-C\u00ae USB-C\u00ae cable[^2] Slamtec RPLidar USB Micro USB cable flat head machine screw self-tapping screw self-tapping screw Setup Hardware Setup files assume RPLIDAR mounted center rotation top Create robot, arrangement shown SLAM solver relies proper tree; mount sensor location, modify parameters static transform publisher launched launch/sensors_launch.py. Note STLs brackets referenced create3_docs repository. Affix LIDAR robot. STLs mount RPLidar USB adapter. LIDAR attached mounting plate qty. screws. USB adapter attached mounting plate heat staking soldering iron tip well-ventilated space). mounting plates attached Create\u00ae faceplate self-tapping screws. Affix single board computer (abbreviated SBC guide) robot. Raspberry devices work. STLs mount Raspberry Create\u00ae robot. Raspberry attached mounting plate qty. self-tapping screws. mounting plate attached Create\u00ae cargo bay self-tapping screws. Connect LIDAR SBC USB Micro USB cable. Thread cable passthrough top robot. Connect SBC Create\u00ae adapter board USB-C\u00ae USB-C\u00ae cable. SBC Setup SBC, clone build create3_examples repository. Source setup shell scripts terminal open: source ~/create3_examples_ws/install/local_setup.sh Run sensors launch script, includes LIDAR driver transform laser scan robot: ros2 launch create3_lidar_slam sensors_launch.py robot namespace, add namespace:='ROBOTNAMESPACE' previous command, ROBOTNAMESPACE namespace robot separate terminal run slam toolbox: ros2 launch create3_lidar_slam slam_toolbox_launch.py robot namespace, add namespace:='ROBOTNAMESPACE' previous command, ROBOTNAMESPACE namespace robot. warnings errors startup, message printed ready: [async_slam_toolbox_node-1] Registering sensor: [Custom Lidar] terminal, drive robot ros2 run teleop_twist_keyboard teleop_twist_keyboard robot namespace, add --ros-args __ns:=/ROBOTNAMESPACE previous command, ROBOTNAMESPACE namespace robot. Computer Setup Clone build create3_examples repository. source setup shell scripts. source ~/create3_examples_ws/install/local_setup.sh Run rviz launch script, launches rviz2 configuration: ros2 launch create3_lidar_slam rviz_launch.py robot namespace, add namespace:='ROBOTNAMESPACE' previous command, ROBOTNAMESPACE namespace robot. rviz2 configuration command imports configure rviz2 subscribe laser, occupancy map, display base_footprint frame laser building map frame. File truncated lines full file"},
{"url": "https://index.ros.org/p/create3_republisher", "package": "create3_republisher", "package_summary": "C++ action server exposing a non-systematic coverage behavior", "package_details": "create3_republisher package ROS applications capable republishing ROS entities. designed work iRobot Create robot. means robot publishing topic /my_robot/odom application subscribe topic republish messages namespace, /my_republisher/odom. works publishers, services actions. /my_robot/cmd_vel remapped /my_republisher/cmd_vel, users send motion commands /my_republisher/cmd_vel move robot send ROS action goal /my_republisher/drive_distance, ROS middlewares tendency discover ROS entities network allocate resources don\u2019t communicate. performance issues due excessive memory allocations, discovery traffic double delivery messages. republisher problem. occurs Create robot connected RaspberryPi SBC), runs applications high number ROS entities deal big messages navigation stack, rtabmap, IMPORTANT: tool experience problems setup. NOTE: tool requires understanding configure ROS application DDS XML configuration files. Prerequisites robot ROS applications ROS Humble. Fast-DDS RMW robot applications. approach RMW-specific, instructions DDS config file webserver check modify Create robot RMW webserver docs details) Ensure discover communicate ROS devices starting. RaspberryPi SBC) pinging Create robot usb0 interface ping Verify ros2 topic list shows Create robot topics procedure advanced communication configuration, stuff wasn\u2019t working hard debug instructions assume didn\u2019t custom DDS configuration communication working. case, custom configuration integrated DDS configuration files, covered tutorial. Connecting Create Robot SBC republisher instructions show isolate robot discover communicate entity, republisher, ignore processes running RaspberryPi SBC). entities, navigation application interact republisher subscribe Create topics, send requests) discovered \u201cdefault setup\u201d republisher. sections show examples customize common scenarios. Build repository RaspberryPi SBC). mkdir ~/ws/src ~/ws/src git clone https://github.com/iRobotEducation/create3_examples.git colcon build --symlink-install Modify Fast-DDS XML profile Create webserver, match fastdds-robot-passive-unicast.xml profile. webserver docs details. Launch republisher app terminal RaspberryPi SBC) fastdds-active-unicast.xml profile. source ~/ws/install/setup.sh export RMW_IMPLEMENTATION=rmw_fastrtps_cpp export FASTRTPS_DEFAULT_PROFILES_FILE=~/ws/src/create3_examples/create3_republisher/dds-config/fastdds-active-unicast.xml ros2 daemon stop ros2 launch create3_republisher create3_republisher_launch.py command assumes Create robot default namespace republish Create robot names `/repub` namespace. Create robot running namespace, `/my_robot`, and/or change republication namespace, `/my_repub`, command line arguments. ros2 launch create3_republisher create3_republisher_launch.py republisher_ns:=/my_repub robot_ns:=/my_robot **IMPORTANT: NAMESPACES **NOTE:** list entities republished defined `params.yaml` file find `~/ws/install/create3_republisher/share/create3_republisher/bringup/params.yaml`. Comment uncomment entries file customize Run applicatios communicate Create terminal RaspberryPi SBC) passive unicast DDS configuration profile. export RMW_IMPLEMENTATION=rmw_fastrtps_cpp export FASTRTPS_DEFAULT_PROFILES_FILE=~/ws/src/create3_examples/create3_republisher/dds-config/fastdds-passive-unicast.xml ros2 daemon stop ros2 topic echo /repub/tf ros2 action send_goal /repub/drive_distance irobot_create_msgs/action/DriveDistance \"{distance: 0.5,max_translation_speed: OPTIONAL: Connect laptop RaspberryPi SBC) setup RaspberryPi Create robot able communicate ROS laptop devices network) won\u2019t able discover robot SBC. File truncated lines full file"},
{"url": "https://index.ros.org/p/create3_teleop", "package": "create3_teleop", "package_summary": "Example launch files for teleoperating the iRobot(R) Create(R) 3 Educational Robot.", "package_details": "Create3 Teleoperation package scripts instructions teleoperating Create\u00ae robot keyboard joystick. Keyboard Teleoperation ros2 run teleop_twist_keyboard teleop_twist_keyboard Joystick Teleoperation ros2 launch create3_teleop teleop_joystick_launch.py default xbox controller, easily overriden joy_config launchfile argument supported platforms. time writing, Logitech Attack3 (atk3) Logitech Extreme Pro ps3-holonomic) Xbox (xbox) controller: ros2 launch create3_teleop teleop_joystick_launch.py joy_config:=ps3 select specific device joy_dev argument. ros2 launch create3_teleop teleop_joystick_launch.py joy_dev:=/dev/input/js1"},
{"url": "https://index.ros.org/p/ess_imu_driver2", "package": "ess_imu_driver2", "package_summary": "ROS2 package for Epson IMU using C++ wrapper around Linux C driver", "package_details": "README Epson IMU Driver ROS2 Node README Epson IMU Driver ROS2 Node repository kind hardware software UART Interface: SPI Interface: driver? driver usleep() supported time delays? driver GPIOs control IMU RESET#, DRDY, EXT pins? build, install, run package? console output colcon build: console output launching ROS node: ROS IMU Node publish messages? ROS Topic Message /imu/data ROS Topic Message /imu/data_raw inaccurate ROS timestamps, high latencies, slower expected IMU data rates? ROS timestamps USB-UART bridges Modifying latency_timer udev mechanism Modifying latency_timer sysfs mechanism Modifying low_latency flag setserial utility SPI interface Package Contents References repository code ROS2 package demonstrating ROS2 node configures publishes IMU messages supported Epson IMU. code software communication Epson IMU ROS UART SPI interface. UART connection, code standard Unix Terminal library (termios) communicating direct USB-serial converter FTDI USB-UART bridge ICs. SPI connection, code Unofficial wiringPi library accessing GPIO SPI functions Raspberry platform running Ubuntu Linux distro. ROS2 node demonstration software ROS wrapper Linux driver software: src/epson_imu_uart_ros2_node.cpp UART interface src/epson_imu_spi_ros2_node.cpp SPI interface source files src/ based Linux driver originally released Linux driver logger EPSON IMU Information ROS2, tutorials ROS.org kind hardware software Epson IMU Epson IMU models time software release: G320PDG0, G320PDGN, G354PDH0, G364PDCA, G364PDC0 G365PDC1, G365PDF1, G370PDF1, G370PDS0 G330PDG0, G366PDG0, G370PDG0, G370PDT0 G570PR20 ROS2 Foxy Humble download) ROS.org software developed tested ROS2: Foxy, Humble Description: Ubuntu LTS, Ubuntu LTS Hardware Platform: Core Raspberry RaspberryPi UART Interface: Epson USB evaluation board equivalent FTDI USB-Serial interface connecting Epson IMU ROS host (tty/serial) M-G32EV041 Alternatively, direct connection Epson IMU ROS platform supporting CMOS compatible UART interface M-G32EV031. SPI Interface: NOTE: software intended embedded Linux host system compatible SPI interface (SCLK, MISO, MOSI) GPIOs RST#, DRDY). Raspberry enabled SPI interface enabled raspi-config equivalent. code separate GPIO manually control chipselect chipselect assigned RapsberryPi SPI interface. chipselect assigned SPI interface work, tested. Epson Breakout evaluation board equivalent required connect CMOS compatible pins ROS host (SPI GPIOs) M-G32EV031 driver? code assumes user familiar building ROS2 packages colcon build process README detailed step step instructions build install ROS2 software. refer ROS.org website detailed instructions ROS package build process. ROS.org NOTE: bare minimum, user re-build package colcon modifying CMakeLists.txt configure serial interface type, INTERFACE= (UART SPI) host platform type, PLATFORM= (RPI NONE=PC) IMU settings editing launch files located launch/ folder modifying src\\ source files driver usleep() supported time delays? NOTE: hcl_linux.c hcl_rpi.c, seDelayMS() seDelayMicroSecs() wrapper functions time delays millisecond microseconds, embedded Linux platforms, user modify redirect platform specific delay routines usleep() supported. RaspberryPi, time delay functions millisecond microseconds redirected WiringPi library delay() delayMicroseconds(), hardware delay library, software delay loop preferred. driver GPIOs control IMU RESET#, DRDY, EXT pins? connecting IMU UART interface, GPIO pins connecting IMU RESET# DRDY optional, embedded Linux platforms RapsberryPi). connecting IMU SPI interface, GPIO pins connecting IMU DRDY mandatory (RESET# recommended, EXT optional). time_correction function accurate time stamping external GNSS 1PPS signal, IMU EXT pin connected 1PPS. File truncated lines full file"},
{"url": "https://index.ros.org/p/husarion_components_description", "package": "husarion_components_description", "package_summary": "URDF descriptions of components offered with Husarion robots", "package_details": "husarion_components_description URDF models sensors components offered Husarion robots URDF Sensors Code Device DEV01 Cover Access Panel DEV02 Carrying Handles DEV03 Wooden Mounting Plate DEV04H High Frame DEV04L High Frame DEV05 Pillar DEV06 Basket Railings DEV07 Small Gate DEV07T Rotated Small Gate DEV09 Large Gate ANT02 Teltonika CAM01 Orbbec Astra CAM03 StereoLabs ZED CAM04 StereoLabs ZED CAM05 StereoLabs ZED CAM06 StereoLabs ZED CAM11 Luxonis OAK-D-PRO LDR01 RPLIDAR LDR06 RPLIDAR LDR10 Ouster LDR11 Ouster LDR12 Ouster LDR13 Ouster LDR14 Ouster LDR15 Ouster LDR20 Velodyne Puck MAN01 Universal Robots UR3e MAN02 Universal Robots UR5e MAN04 6DoF Kinova Gen3 MAN05 6DoF Kinova Gen3 vision MAN06 7DoF Kinova Gen3 MAN07 7DoF Kinova Gen3 vision GRP02 Robotiq WCH01 Wibotic receiver [!NOTE] manipulators (code MAN<X>) simulation environment. Support manipulators physical robot implemented separate software components. refer official documentation. Including sensor build package running: create workspace folder clone husarion_components_description mkdir ros2_ws/src ros2_ws git clone https://github.com/husarion/husarion_components_description.git src/husarion_components_description case package simulation export HUSARION_ROS_BUILD_TYPE=simulation rosdep update --rosdistro $ROS_DISTRO rosdep install --from-path src --rosdistro $ROS_DISTRO colcon build include sensor, code: include file definition xacro macro sensor <xacro:include filename=\"$(find husarion_components_description)/urdf/slamtec_rplidar.urdf.xacro\" ns=\"lidar\" evaluate macro place sensor robot <xacro:lidar.slamtec_rplidar parent_link=\"cover_link\" xyz=\"0.0 rpy=\"0.0 list parameters component_name [string, default: local namespace allowing distinguish identical devices Called components.yaml. parent_link [string, default: parent link sensor attached. xyz [float list, default: float values defining translation base sensor parent link. Values rpy [float list, default: float values define rotation parent link base sensor. Values rad. robot_namespace [string, default: global namespace common entire robot. present components.yaml. model [string, default: model argument appears load model manufacturer. present components.yaml. sensors define specific parameters. Refer definition info."},
{"url": "https://index.ros.org/p/husarion_ugv", "package": "husarion_ugv", "package_summary": "Meta package that contains all packages of Husarion UGV (Unmanned Ground Vehicle)", "package_details": "husarion_ugv ROS Metapackage composing basic functionalities Husarion UGV robot VCS Tool yaml files directing external robot dependencies."},
{"url": "https://index.ros.org/p/husarion_ugv_battery", "package": "husarion_ugv_battery", "package_summary": "Nodes monitoring the battery state of Husarion Panhter robot", "package_details": "husarion_ugv_battery package nodes monitoring publishing internal battery state Husarion UGV. Launch Files package battery.launch.py: Responsible activating battery node, dealing reading publishing battery data. Configuration Files battery_parameters.yaml: Defines parameters battery_driver_node. ROS Nodes battery_driver_node Publishes battery state read ADC unit. Publishes _battery/battery_1_status_raw [sensor_msgs/BatteryState]: battery raw state. _battery/battery_2_status_raw [sensor_msgs/BatteryState]: battery raw state. Published battery detected. battery/battery_status [sensor_msgs/BatteryState]: values batteries robot batteries. state single battery published. battery/charging_status [husarion_ugv_msgs/ChargingStatus]: Battery charging status. diagnostics [diagnostic_msgs/DiagnosticArray]: Battery diagnostic messages. Subscribers hardware/io_state [husarion_ugv_msgs/IOState]: Current state hardware/robot_driver_state [husarion_ugv_msgs/RobotDriverState]: Current motor controllers\u2019 state error flags. Subscribed Roboteq motor controllers data. Parameters adc.device0 [string, default: /sys/bus/iio/devices/iio:device0]: ADC number IIO device. adc.device1 [string, default: /sys/bus/iio/devices/iio:device1]: ADC number IIO device. adc.ma_window_len.charge [int, default: Window length moving average, smooth battery charge readings. adc.ma_window_len.temp [int, default: Window length moving average, smooth battery temperature readings. battery_timeout [float, default: Specifies timeout seconds. node fails read battery data exceeding duration, node publish unknown battery state. ma_window_len.voltage [int, default: Window length moving average, smooth battery voltage readings. ma_window_len.current [int, default: Window length moving average, smooth battery current readings. roboteq.driver_state_timeout [float, default: Specifies timeout seconds driver state messages considered (deprecated)."},
{"url": "https://index.ros.org/p/husarion_ugv_bringup", "package": "husarion_ugv_bringup", "package_summary": "Default launch files and configuration used to start Husarion UGV", "package_details": "husarion_ugv_bringup package default configuration launch files start basic functionalities Husarion UGV. Launch Files package bringup.launch.py: Responsible activating robot system."},
{"url": "https://index.ros.org/p/husarion_ugv_controller", "package": "husarion_ugv_controller", "package_summary": "ros2 controllers configuration for Husarion UGV", "package_details": "husarion_ugv_controller package default configuration launch files start basic functionalities Husarion UGV. Launch Files controller.launch.py: Establishes communication hardware loading robot\u2019s URDF plugins configures controllers exchange information engine driver IMU. Configuration Files WH01_controller.yaml: Configures imu_broadcaster, joint_state_broadcaster drive_controller controllers default wheels. WH02_controller.yaml: Configures imu_broadcaster, joint_state_broadcaster drive_controller controllers mecanum wheels. WH04_controller.yaml: Configures imu_broadcaster, joint_state_broadcaster drive_controller controllers small pneumatic wheels. WH05_controller.yaml: Configures imu_broadcaster, joint_state_broadcaster drive_controller controllers Lynx pneumatic wheels."},
{"url": "https://index.ros.org/p/husarion_ugv_description", "package": "husarion_ugv_description", "package_summary": "The package contains URDF and mesh files for Husarion UGV", "package_details": "husarion_ugv_description package URDF files responsible creating representation robot relationships types connections (joints) individual links. information robot\u2019s mesh. Launch Files load_urdf.launch.py loads robot\u2019s URDF creates simple bindings display moving joints. overwrite_robot_description.launch.py launch able change robot_description topic runtime. rviz.launch.py launch RViz2 basic configuration. Configuration Files components.yaml: quickly add visualization sensors, connections simulate behavior simulator. WH01.yaml: Description physical visual parameters wheel WH02.yaml: Description physical visual parameters wheel WH04.yaml: Description physical visual parameters wheel WH05.yaml: Description physical visual parameters wheel"},
{"url": "https://index.ros.org/p/husarion_ugv_diagnostics", "package": "husarion_ugv_diagnostics", "package_summary": "Package for diagnosting usage of OS on the Husarion UGV robot", "package_details": "husarion_ugv_diagnostics Package nodes monitoring publishing Built-in Computer status Husarion UGV. Launch Files system_monitor.launch.py: Launch node analyzes state important components robot Configuration Files system_monitor.yaml: Defines parameters system_monitor_node. ROS Nodes system_monitor_node Publishes built-in computer system status, monitoring parameters CPU usage, RAM usage, disk usage, CPU temperature. Publishes diagnostics [diagnostic_msgs/DiagnosticArray]: System monitor diagnostic messages. system_status [husarion_ugv_msgs/SystemStatus]: Built-in computer system status, includes important computation-related parameters. Parameters cpu_usage_warn_threshold [float, default: Threshold CPU usage warning percentage. cpu_temperature_warn_threshold [float, default: Threshold CPU temperature warning degrees Celsius. ram_usage_warn_threshold [float, default: Threshold memory usage warning percentage. disk_usage_warn_threshold [float, default: Threshold disk usage warning percentage. publish_frequency [double, default: System status publishing frequency"},
{"url": "https://index.ros.org/p/husarion_ugv_gazebo", "package": "husarion_ugv_gazebo", "package_summary": "The packages simulating behaviour of the Husarion robots", "package_details": "husarion_ugv_gazebo package launch file source files run robot simulation Gazebo. simulator reproduce behavior real robot including provision analogous ROS_API. Launch Files spawn_robot.launch.py: Responsible spawning robot simulator. simulate_robot.launch.py: Responsible giving birth robot simulating physical behavior, driving, displaying data, simulate_multiple_robots.launch.py: Similar logic allowing quickly add swarm robots. simulation.launch.py: target file runs gazebo simulator adds simulates robot\u2019s behavior accordance arguments. Configuration Files battery_plugin.yaml: Simulated LinearBatteryPlugin configuration. gz_bridge.yaml: data exchange ROS Gazebo simulation. teleop_with_estop.config: Gazebo layout configuration file, adds E-Stop Teleop widgets. ROS Nodes EStop EStop Gazebo GUI plugin responsible easy convenient changing robot\u2019s E-stop state. Service Clients hardware/e_stop_reset [std_srvs/Trigger]: Resets E-stop. hardware/e_stop_trigger [std_srvs/Trigger]: Triggers E-stop. EStopSystem Plugin based gz_system responsible handling sensor interfaces IMU sending requests joints compatible ros2_control. Plugin adds E-Stop support. Publishers gz_ros2_control/e_stop [std_msgs/Bool]: Current E-stop state. Service Servers gz_ros2_control/e_stop_reset [std_srvs/Trigger]: Resets E-stop. gz_ros2_control/e_stop_trigger [std_srvs/Trigger]: Triggers E-stop. [!NOTE] topics services remapped match real robot Parameters Required parameters defined including interface URDF check panther_macro.urdf.xacro). e_stop_initial_state [bool, default: true]: Initial state E-stop. LEDStrip LEDStrip Gazebo System plugin responsible visualizing light displaying markers based data received gz::msgs::Image message. [!NOTE] topics services mentioned related Gazebo interfaces, ROS interfaces. Subscribers {topic} [gz::msgs::Image]: Subscribes image message visualization. topic parameter. Service Servers /marker [gz::msgs::Marker]: Service request markers visualizing received image. Parameters parameters required including interface URDF refer gazebo.urdf.xacro file details). light_name [string, default: light entity. visualization attached entity. topic [string, default: topic Image message received. namespace [string, default: Specifies namespace differentiate topics models scenarios multiple robots. frequency [double, default: Defines frequency animation updated. width [double, default: Specifies width (y-axis) visualization array. height [double, default: Specifies height (z-axis) visualization array."},
{"url": "https://index.ros.org/p/husarion_ugv_hardware_interfaces", "package": "husarion_ugv_hardware_interfaces", "package_summary": "Hardware controller for Husarion UGV", "package_details": "husarion_ugv_hardware_interfaces Package implements SystemInterface ros2_control Husarion UGV. ROS Nodes package doesn\u2019t standalone nodes, plugins loaded resource manager. hardware interface, add URDF. check panther_macro.urdf.xacro lynx_macro.urdf.xacro. UGVSystem (PantherSystem LynxSystem) Plugins Panther Lynx based abstraction called UGVSystem. parts systems similar plugin responsible communicating engine controllers bus, providing E-Stop functionality, managing built-in computer\u2019s GPIO ports. Publishers diagnostics [diagnostic_msgs/DiagnosticArray]: System diagnostic messages. hardware/e_stop [std_msgs/Bool]: Current E-stop state. hardware/io_state [husarion_ugv_msgs/IOState]: Current state. hardware/robot_driver_state [husarion_ugv_msgs/RobotDriverState]: Current motor controllers\u2019 state error flags. Service Servers hardware/aux_power_enable [std_srvs/SetBool]: Enables disables AUX power. hardware/charger_enable [std_srvs/SetBool]: Enables disables charger. hardware/digital_power_enable [std_srvs/SetBool]: Enables disables digital power. hardware/e_stop_reset [std_srvs/Trigger]: Resets E-stop. hardware/e_stop_trigger [std_srvs/Trigger]: Triggers E-stop. hardware/fan_enable [std_srvs/SetBool]: Enables disables fan. hardware/led_control_enable [std_srvs/SetBool]: Enables disables SBC (Single Board Computer) control LEDs. hardware/motor_torque_enable [std_srvs/SetBool]: enable/disable motor torque E-Stop triggered. Parameters Required parameters defined including interface URDF check panther_macro.urdf.xacro lynx_macro.urdf.xacro). Physical properties encoder_resolution [int, default: Property encoder shouldn\u2019t changed. gear_ratio [float, default: Property gearbox shouldn\u2019t changed. motor_torque_constant [float, default: set Roboteq driver (TNM parameter), shouldn\u2019t changed, measured property motor. max_rpm_motor_speed [float, default: Max RPM speed set Roboteq driver (MXRPM parameter). gearbox_efficiency [float, default: Measured efficiency, converting read current torque, vary depending factors temperature wear. settings can_interface_name [string, default: robot_can]: interface. master_can_id [int, default: master device (set canopen_configuration.yaml). sdo_operation_timeout_ms [int, default: Timeout SDO operations, SDO operation required operation, timeout set higher pdo_motor_states_timeout_ms [int, default: Depends frequency Roboteq configured send motor states (PDO data. default, received data, takes pdo_motor_states_timeout_ms, motor states read error triggered. default set expected period margin. pdo_driver_state_timeout_ms [int, default: Depends frequency Roboteq configured send driver state (PDO data. default, received data, takes pdo_driver_state_timeout_ms, driver state read error triggered. default set expected period margin. driver_states_update_frequency [float, default: default, driver state published frequency, shouldn\u2019t updated controller loop iteration. exact frequency driver state published won\u2019t match depend frequency controller exact period calculated formula controller_frequency ceil(controller_frequency driver_states_update_frequency)). max_roboteq_initialization_attempts [int, default: cases, SDO error happen initialization, configure attempts, escalating general error. max_roboteq_activation_attempts [int, default: Similar initialization, SDO errors escalating error. max_write_pdo_cmds_errors_count [int, default: consecutive errors happen escalating general error. max_read_pdo_motor_states_errors_count [int, default: consecutive errors happen escalating general error. max_read_pdo_driver_state_errors_count [int, default: consecutive errors happen escalating general error. PantherSystem additional settings front_driver_can_id [int, default: defined properties Roboteq (set canopen_configuration.yaml). rear_driver_can_id [int, default: Required PantherSystem]: defined properties Roboteq (set canopen_configuration.yaml). LynxSystem additional settings driver_can_id [int, default: defined properties Roboteq (set canopen_configuration.yaml). [!CAUTION] max_write_pdo_cmds_errors_count, max_read_pdo_motor_states_errors_count, max_read_pdo_driver_state_errors_count, sdo_operation_timeout, pdo_motor_states_timeout_ms pdo_driver_state_timeout_ms safety-critical parameters, changed specific cases, work cautious changing PhidgetImuSensor Plugin responsible communicating IMU filtering data Madgwick Filter. Parameters Required parameters defined including interface URDF check panther_macro.urdf.xacro lynx_macro.urdf.xacro). Physical properties serial [int, default: serial number Phidgets Spatial connect default), connects Spatial Phidget hub_port [int, default: Phidgets VINT hub port connect Spatial Phidget connected VINT hub. Defaults heating_enabled [bool, default: false]: internal heating element; MOT0109 onwards. set parameter older versions. time_resynchronization_interval_ms [int, default: number milliseconds wait resynchronizing time Phidgets Spatial local time. Larger values \u2018jumps\u2019, timestamp drift. Setting disables resynchronization. Defaults data_interval_ms [int, default: number milliseconds acquisitions data device (allowed values dependent device). Defaults callback_delta_epsilon_ms [int, default: number milliseconds epsilon allowed callbacks attempting resynchronize time. set difference data_interval_ms millisecond considered viable resynchronization. Higher values give code leeway resynchronize, cost potentially bad resynchronizations values give results, result resynchronizing. data_interval_ms. Defaults cc_mag_field [double, default: Ambient magnetic field calibration device\u2019s user guide information calibrate. cc_offset0 [double, default: Calibration offset device\u2019s user guide information calibrate. cc_offset1 [double, default: Calibration offset device\u2019s user guide information calibrate. cc_offset2 [double, default: Calibration offset device\u2019s user guide information calibrate. cc_gain0 [double, default: Gain offset device\u2019s user guide information calibrate. cc_gain1 [double, default: Gain offset device\u2019s user guide information calibrate. cc_gain2 [double, default: Gain offset device\u2019s user guide information calibrate. cc_t0 [double, default: offset device\u2019s user guide information calibrate. cc_t1 [double, default: offset device\u2019s user guide information calibrate. cc_t2 [double, default: offset device\u2019s user guide information calibrate. cc_t3 [double, default: offset device\u2019s user guide information calibrate. cc_t4 [double, default: offset device\u2019s user guide information calibrate. cc_t5 [double, default: offset device\u2019s user guide information calibrate. Madgwick filter settings File truncated lines full file"},
{"url": "https://index.ros.org/p/husarion_ugv_lights", "package": "husarion_ugv_lights", "package_summary": "Package used to control the robot lights", "package_details": "husarion_ugv_lights Package control Husarion UGV robot\u2019s lights. Launch files package lights.launch.py: Responsible launching nodes required control robot\u2019s lights. Configuration Files {robot_model}_animations.yaml: Defines describes appearance parameters animations specific robot. {robot_model}_driver.yaml: Defines describes specific hardware configuration specific robot. lights_controller_parameters.yaml: Defines parameters lights_controller_node. lights_driver_parameters.yaml: Defines parameters lights_driver_node. ROS Nodes LightsControllerNode node type rclcpp_components responsible processing animations publishing frames light_driver node. Publishers lights/channel_1_frame [sensor_msgs/Image, encoding: RGBA8, height: width: num_led]: animation frame displayed robot Front Bumper Lights. lights/channel_2_frame [sensor_msgs/Image, encoding: RGBA8, height: width: num_led]: animation frame displayed robot Rear Bumper Lights. Service Servers lights/set_animation [husarion_ugv_msgs/SetLEDAnimation]: setting animation Bumper Lights based animation Parameters animations_config_path [string, default: $(find husarion_ugv_lights)/husarion_ugv_lights/config/{robot_model}_animations.yaml]: Path YAML file description led configuration. file includes definition robot panels, virtual segments default animations. controller_frequency [float, default: Frequency lights controller node process animations. user_led_animations_path [string, default: Path YAML file description user defined animations. LightsDriverNode node type rclcpp_components responsible displaying frames robot\u2019s lights. Publishers diagnostics [diagnostic_msgs/DiagnosticArray]: Lights diagnostic messages. Subscribers lights/channel_1_frame [sensor_msgs/Image, encoding: RGBA8, height: width: num_led]: Frame displayed robot Front Bumper Lights. lights/channel_2_frame [sensor_msgs/Image, encoding: RGBA8, height: width: num_led]: Frame displayed robot Rear Bumper Lights. Service Servers lights/set_brightness [husarion_ugv_msgs/SetLEDBrightness]: setting global LED brightness, ranges Service Clients hardware/led_control_enable [std_srvs/SetBool]: SBC controlling LEDs. Parameters frame_timeout [float, default: Time incoming frame considered global_brightness [float, default: LED global brightness. range channel_1_num_led [int, default: Number LEDs bumper. channel_2_num_led [int, default: Number LEDs bumper."},
{"url": "https://index.ros.org/p/husarion_ugv_localization", "package": "husarion_ugv_localization", "package_summary": "robot localization configuration for Husarion UGV", "package_details": "husarion_ugv_localization package responsible activating mods responsible fusion data related robot\u2019s location. Launch files package localization.launch.py: Responsible activating EKF filtration dependencies needed operate GPS. nmea_navsat.launch.py: Responsible launching NMEA NavSat driver node. Configuration Files enu_localization.yaml: configures data fusion ekf_filter navsat_transform nodes, wheel encoders IMU. Orientation East-North-Up (ENU) coordinates. enu_localization_with_gps.yaml: configures data fusion ekf_filter navsat_transform nodes, wheel encoders, IMU, GPS. Orientation East-North-Up (ENU) coordinates. nmea_navsat.yaml: parameters NMEA NavSat driver node. relative_localization.yaml: configures data fusion ekf_filter navsat_transform nodes, wheel encoders, IMU. initial orientation relative mode. relative_localization_with_gps.yaml: configures data fusion ekf_filter navsat_transform nodes, wheel encoders, IMU, GPS. initial orientation relative mode."},
{"url": "https://index.ros.org/p/husarion_ugv_manager", "package": "husarion_ugv_manager", "package_summary": "Set of nodes used for high level management of Husarion UGV", "package_details": "husarion_ugv_manager package nodes responsible high-level control Husarion UGV. Launch Files package manager.launch.py: Responsible launching behavior trees responsible safety LED animations scheduling. Configuration Files lights.xml: BehaviorTree managing lights. LightsBT.btproj: BehaviorTree project managing Panther lights. SafetyBT.btproj: BehaviorTree project managing Panther safety protocols. safety.xml: BehaviorTree monitoring managing dangerous situations. shutdown.xml: BehaviorTree initiating shutdown procedures. lights_manager_parameters.yaml: Defines parameters lights_manager node. lights_manager.yaml: parameters lights_manager node. safety_manager_parameters.yaml: Defines parameters safety_manager node. safety_manager.yaml: parameters safety_manager node. shutdown_hosts.yaml: List hosts request shutdown. ROS Nodes lights_manager_node Node responsible managing Bumper Lights animation scheduling. Subscribers battery/battery_status [sensor_msgs/BatteryState]: State internal Battery. hardware/e_stop [std_msgs/Bool]: State emergency stop. Service Clients Default Trees) ~/lights/set_animation [husarion_ugv_msgs/SetLEDAnimation]: setting animation Bumper Lights based animation Parameters battery.anim_period.critical [float, default: Time wait repeating animation, indicating critical Battery state. battery.anim_period.low [float, default: Time wait repeating animation, indicating Battery state. battery.charging_anim_step [float, default: parameter defines minimum change battery percentage required trigger update battery charging animation. battery.percent.threshold.critical [float, default: Battery percentage drops animation indicating critical Battery state start displayed. battery.percent.threshold.low [float, default: Battery percentage drops animation indicating Battery state start displayed. battery.percent.window_len [int, default: Moving average window length smooth Battery percentage readings. bt_project_path [string, default: $(find husarion_ugv_manager)/config/PantherBT.btproj]: Path BehaviorTree project. plugin_libs [list, default: Empty list]: List names plugins project. ros_communication_timeout.availability [float, default: Timeout wait service/action initializing node. ros_communication_timeout.response [float, default: Timeout receive service/action response call. ros_plugin_libs [list, default: Empty list]: List names ROS plugins project. timer_frequency [float, default: Frequency lights tree ticked. safety_manager_node Node responsible managing safety features, software shutdown components. Subscribers battery/battery_status [sensor_msgs/BatteryState]: State internal Battery. hardware/e_stop [std_msgs/Bool]: State emergency stop. hardware/io_state [husarion_ugv_msgs/IOState]: State pins. hardware/robot_driver_state [husarion_ugv_msgs/RobotDriverState]: State motor controllers. system_status [husarion_ugv_msgs/SystemStatus]: Built-in computer system status, includes important computation-related parameters. Service Clients Default Trees) ~/hardware/aux_power_enable [std_srvs/SetBool]: Enables Aux Power output. ~/hardware/e_stop_trigger [std_srvs/Trigger]: Triggers E-stop. ~/hardware/fan_enable [std_srvs/SetBool]: Enables fan. Parameters battery.temp.window_len [int, default: Moving average window length smooth temperature readings Battery. bt_project_path [string, default: $(find husarion_ugv_manager)/config/PantherBT.btproj]: Path BehaviorTree project. cpu.temp.fan_off [float, default: Temperature Built-in Computer\u2019s CPU, fan turned cpu.temp.fan_on [float, default: Temperature Built-in Computer\u2019s CPU, fan turned cpu.temp.window_len [int, default: Moving average window length smooth temperature readings Built-in Computer\u2019s CPU. driver.temp.fan_off [float, default: Temperature drivers fan turned driver.temp.fan_on [float, default: Temperature drivers fan turned driver.temp.window_len [int, default: Moving average window length smooth temperature readings driver. fan_turn_off_timeout [float, default: Minimal time fan turned plugin_libs [list, default: Empty list]: List names plugins project. ros_communication_timeout.availability [float, default: Timeout wait service/action initializing node. ros_communication_timeout.response [float, default: Timeout receive service/action response call. ros_plugin_libs [list, default: Empty list]: List names ROS plugins project. shutdown_hosts_path [string, default: Path YAML file list hosts request shutdown. correctly format YAML file, include hosts field consisting list fields: [string, default: host shutdown HTTP request. port [string, default: HTTP communication port. secret [string, default: husarion]: Secret sign HTTP request timeout [string, default: Time wait host shutdown. Built-in Computer turn computers shutdown reached timeout. mind hardware cut power time pressing power button. Refer hardware manual information. timer_frequency [float, default: Frequency safety tree ticked."},
{"url": "https://index.ros.org/p/husarion_ugv_msgs", "package": "husarion_ugv_msgs", "package_summary": "Custom messages for Husarion UGV", "package_details": "husarion_ugv_msgs Custom ROS messages services Panther robot."},
{"url": "https://index.ros.org/p/husarion_ugv_utils", "package": "husarion_ugv_utils", "package_summary": "Package for commonly used functions, classes, and configurations", "package_details": "husarion_ugv_utils Package commonly functions, classes, configurations Husarion UGV system."},
{"url": "https://index.ros.org/p/franka_inria_inverse_dynamics_solver", "package": "franka_inria_inverse_dynamics_solver", "package_summary": "A C++ library implementing the inverse dynamics solver for the Franka Emika Panda (FER) real robot.", "package_details": "franka_inria_inverse_dynamics_solver Contents dynamics solver real Franka Emika (FER) robot based model identified paper: Gaz, Cognetti, Oliva, Robuffo Giordano, Luca, \u201cDynamic Identification Franka Emika Panda Robot Retrieval Feasible Parameters Penalty-Based Optimization,\u201d IEEE Robotics Automation Letters, vol. Oct. doi: 10.1109/lra.2019.2931248. group INRIA library computation dynamic parameters, composed header files function) source files implementations. top library InverseDynamicsSolverFrankaInria developed, include files: get_CoriolisMatrix.hpp: vector positions vector velocities, joint space, computes matrix torques related centrifugal Coriolis effects; get_CoriolisMatrix_old.cpp: computes Coriolis matrix temporary variables store intermediate results computation; function needed library implementation, legacy purposes get_CoriolisMatrix.cpp: computes Coriolis matrix intermediate variables; get_FrictionTorque.hpp: vector velocities, computes vector torques due friction; get_GravityVector.hpp: vector positions joint space, computes vector torques due gravity; get_MassMatrix.hpp: vector positions joint space, computes inertia matrix. get_MassMatrix.cpp: computes inertia matrix temporary variables store intermediate results computation; function needed library implementation, legacy purposes get_MassMatrix_parziale.cpp: computes inertia matrix intermediate variables. dynamics solver implements inverse_dynamics_solver::InverseDynamicsSolver class. build build package, run root colcon workspace: colcon build --packages-up-to franka_inria_inverse_dynamics_solver source install/setup.bash Demo evaluate solver demo, configured launch file. demo reads bag file sequence sensor_msgs/msg/JointState messages state, computes torques InverseDynamicsSolverFrankaInria solver, saved bag file. Run demo launch demo, run ros2 launch franka_inria_inverse_dynamics_solver evaluate_solver_franka.launch.py default, demo reads panda_exciting_trajectory.db3 bag file, produces output panda_exciting_trajectory_real_torques folder (created current working directory), computed torques written /torques topic. change configuration ros2 launch franka_inria_inverse_dynamics_solver evaluate_solver_franka.launch.py input_bag:=<my_bag_file> output_bag:=<my_output_folder> topic:=<my_output_topic> Visualize results refer parent class documentation visualize results, evaluation joint torque signals input_bag, stored output_bag. Citation find work cite @article{Gaz_2019, title={Dynamic Identification Franka Emika Panda Robot Retrieval Feasible Parameters Penalty-Based Optimization}, volume={4}, ISSN={2377-3774}, url={http://dx.doi.org/10.1109/lra.2019.2931248}, DOI={10.1109/lra.2019.2931248}, number={4}, journal={IEEE Robotics Automation Letters}, publisher={Institute Electrical Electronics Engineers (IEEE)}, author={Gaz, Claudio Cognetti, Marco Oliva, Alexander Robuffo Giordano, Paolo Luca, Alessandro}, year={2019}, month=oct, pages={4147\u20134154}"},
{"url": "https://index.ros.org/p/inverse_dynamics_solver", "package": "inverse_dynamics_solver", "package_summary": "A library implementing an inverse dynamics solver for serial manipulators.", "package_details": "inverse_dynamics_solver package superclass generic inverse dynamics solver. dynamic model form ddq C(q,dq) f(dq) tau, library return values: getInertiaMatrix(q) returns inertia matrix function joint positions getCoriolisVector(q) returns Coriolis centrifugal effects vector C(q,dq) function joint positions velocities getGravityVector(q) returns gravity vector function joint positions getFrictionVector(dq) returns possibly nonlinear friction vector f(dq), function joint velocities getDynamicParameters(q, returns tuple C(q,dq), getTorques(q, ddq) returns ddq C(q,dq) check InverseDynamicsSolver class information. Usage solver initialized usage, initialize() method. method accepts NodeParametersInterface configuration parameters passed correct namespace, robot_description string format) dynamics solved refer method documentation information. Configuration solver (optionally) configured parameters, pass node parameters interface. necessity effectiveness parameters depend specific implementation. time KDL based solver affected configuration. refer related documentation parameters configured. Demo Demos tests concrete implementations library: check InverseDynamicsSolverKDL, InverseDynamicsSolverUR10 InverseDynamicsSolverFrankaInria. Evaluate solver evaluate solver computing torques sequence sensor_msgs/msg/JointState messages launching evaluate_solver demo. refer launch files kdl_inverse_dynamics_solver Franka Emika Panda (FER) robots), ur10_inverse_dynamics_solver franka_inria_inverse_dynamics_solver demo configured plugins. Visualize results Run plot_joint_state Python script assess performance solver, comparison ground truth computed torques, torques retrieved measured joint states, mentioned ros2 run inverse_dynamics_solver plot_joint_state.py BAG_FILES [BAG_FILES OUTPUT_DIR additional information, run ros2 run inverse_dynamics_solver plot_joint_state.py"},
{"url": "https://index.ros.org/p/kdl_inverse_dynamics_solver", "package": "kdl_inverse_dynamics_solver", "package_summary": "A KDL-based library implementing an inverse dynamics solver for simulated robots.", "package_details": "kdl_inverse_dynamics_solver Contents implementation InverseDynamicsSolver general-purpose KDL dynamics solver based pluginlib. KDL parser read robot description parameter spawned xacro. order library, parameter passed launch files. refer test section, specifically test launch file, official guide pass parameters. build build package, run instruction root colcon workspace: colcon build --packages-up-to kdl_inverse_dynamics_solver source install/setup.bash Demo evaluate solver demo, configured launch files Panda robots. demo reads bag file sequence sensor_msgs/msg/JointState messages state, computes torques InverseDynamicsSolverKDL solver, saved bag file. Run demos Panda launch Panda demo, run ros2 launch kdl_inverse_dynamics_solver evaluate_solver_kdl_panda.launch.py default, demo reads panda_exciting_trajectory.db3 bag file, produces output panda_exciting_trajectory_torques folder (created current working directory), computed torques written /torques topic. change configuration ros2 launch kdl_inverse_dynamics_solver evaluate_solver_kdl_panda.launch.py input_bag:=<my_bag_file> output_bag:=<my_output_folder> topic:=<my_output_topic> launch demo, run ros2 launch kdl_inverse_dynamics_solver evaluate_solver_kdl_ur10.launch.py default, demo reads ur10_exciting_trajectory.db3 bag file, produces output ur10_exciting_trajectory_torques folder (created current working directory), computed torques written /torques topic. change configuration ros2 launch kdl_inverse_dynamics_solver evaluate_solver_kdl_ur10.launch.py input_bag:=<my_bag_file> output_bag:=<my_output_folder> topic:=<my_output_topic> Visualize results refer parent class documentation visualize results, evaluation joint torque signals input_bag, stored output_bag. test library tested simulated robot. kinematic description UR\u2019s official package, ur_description. tests consist checking fixed joint position velocity state, KDL solver returns expected values dynamic components. build execute test, run colcon test --packages-select kdl_inverse_dynamics_solver results, run colcon test-result --verbose expected output build/kdl_inverse_dynamics_solver/Testing/20240510-0742/Test.xml: test, errors, failures, skipped build/kdl_inverse_dynamics_solver/test_results/kdl_inverse_dynamics_solver/launch_test_kdl_inverse_dynamics_solver.launch.py.xunit.xml: tests, errors, failures, skipped Summary: tests, errors, failures, skipped Optional analysis INFO messages printed console test, run colcon test --packages-select kdl_inverse_dynamics_solver --event-handlers console_cohesion+ expected output line: ```text tests passed, tests failed File truncated lines full file"},
{"url": "https://index.ros.org/p/ur10_inverse_dynamics_solver", "package": "ur10_inverse_dynamics_solver", "package_summary": "A C++ library implementing the inverse dynamics solver for the UR10 real robot.", "package_details": "ur10_inverse_dynamics_solver Contents dynamics solver real robot based model identified current level paper: Petrone, Ferrentino Chiacchio, Dynamic Model Robot ROS2 Integration,\u201d IEEE Transactions Industrial Informatics, doi: 10.1109/TII.2025.3534415. library InverseDynamicsSolverUR10 depends files, automatically generated MATLAB: getCoriolisCurrents: vector positions vector velocities, joint space, computes vector currents related Coriolis effects, expressed getCurrents: vector positions, vector velocities vector accelerations, joint space, computes vector currents friction effect, expressed getGravityCurrents: vector positions joint space, computes vector currents due gravity, expressed getInertiaCurrents: vector positions joint space, computes inertia matrix, expressed dynamics solver implements inverse_dynamics_solver::InverseDynamicsSolver class. methods output torques expected parent, plugin previously discussed current-based methods, motor gains, implement parent class\u2019 methods. build build package, run root colcon workspace: colcon build --packages-up-to ur10_inverse_dynamics_solver source install/setup.bash Demo evaluate solver demo, configuration robot launch file. demo reads bag file sequence sensor_msgs/msg/JointState messages state, computes torques InverseDynamicsSolverUR10 solver, saved bag file. Run demo launch demo, run ros2 launch ur10_inverse_dynamics_solver evaluate_solver_ur10.launch.py default, demo reads ur10_exciting_trajectory.db3 bag file, produces output ur10_exciting_trajectory_real_torques folder (created current working directory), computed torques written /torques topic. change configuration ros2 launch ur10_inverse_dynamics_solver evaluate_solver_ur10.launch.py input_bag:=<my_bag_file> output_bag:=<my_output_folder> topic:=<my_output_topic> Visualize results refer parent class documentation visualize results, evaluation joint torque signals input_bag, stored output_bag. test test consists validating solver trajectory, reference joint positions, velocities accelerations stored, ground-truth joint efforts ground truth computed MATLAB, estimated model regressive form. test checks library computes values ground truth. build execute test, run colcon test --packages-select ur10_inverse_dynamics_solver results, run colcon test-result --verbose expected output build/ur10_inverse_dynamics_solver/Testing/20240510-0742/Test.xml: test, errors, failures, skipped build/ur10_inverse_dynamics_solver/test_results/ur10_inverse_dynamics_solver/launch_test_ur10_inverse_dynamics_solver.launch.py.xunit.xml: tests, errors, failures, skipped Summary: tests, errors, failures, skipped Optional analysis INFO messages printed console test, run colcon test --packages-select ur10_inverse_dynamics_solver --event-handlers console_cohesion+ expected output line: tests passed, tests failed Citation find work cite ```bibtex @article{Petrone_2025, title={The Dynamic Model Robot ROS2 Integration}, ISSN={1941-0050}, File truncated lines full file"},
{"url": "https://index.ros.org/p/nicla_vision_ros2", "package": "nicla_vision_ros2", "package_summary": "Integration of the Arduino Nicla Vision board in the ROS2 world. \n    Sensors data from the Nicla Vision is collected and trasmited to the relevant ROS2 topics", "package_details": ":rocket: Nicla Vision ROS2 package :rocket: ROS2 interface Arduino Nicla Vision board Description ROS package enables Arduino Nicla Vision board ready-to-use ROS world! :boom: implemented architecture image: Arduino Nicla Vision board streams sensors data ROS-running machine TCP/UDP socket. package running ROS-running machine, allowing deserialize received info, stream ROS topics list sensors respective ROS topics: color camera streams /nicla/camera/camera_info /nicla/camera/image_raw /nicla/camera/image_raw/compressed Time-of-Flight (distance) sensor streams /nicla/tof Microphone streams /nicla/audio /nicla/audio_info /nicla/audio_stamped Imu streams /nicla/imu user easily configure package, launch parameters, receive sensors data UDP TCP socket connections, socket address. user decide sensor streamed ROS environment. repository find Python code optimised receiving data board, subsequently publishing ROS topics. Table Contents Installation Usage Package List Video License Cite Installation Step-by-step instructions ROS package running (tested ROS Noetic). <your_workpace>/src git clone https://github.com/ADVRHumanoids/nicla_vision_ros2.git <your_workpace> colcon build source <your_workpace>/devel/setup.bash Note rely audio_common_msgs microphone data. package binary ros2 copy-pasted messages repo Additional Note: binary package released ROS2! Usage Follow steps enjoying Arduino Nicla Vision board ROS2! Run ROS2 package Launch package: ros2 launch nicla_vision_ros2 nicla_receiver.launch receiver_ip:=\"x.x.x.x\" connection_type:=\"tcp/udp\" <optional arguments> Set `receiver_ip` address ROS-running machine. address executing command: ifconfig \"inet\" address \"enp\" voice. Set socket type TCP UDP (`connection_type:=\"tcp\"` `\"udp\"`). `<optional arguments>`, decide: sensor streamed ROS2 `enable_imu:=true enable_range:=true enable_audio:=true enable_audio_stamped:=false enable_camera_compressed:=true enable_camera_raw:=true`), socket port (default `receiver_port:=8002`). run ready receiving sensors data transmitted board, move point Arduino Nicla Vision setup](#2-arduino-nicla-vision-setup)**. simulating Arduino Nicla Vision Gazebo Rviz: ros2 launch nicla_vision_ros2 nicla_sim.launch.py <optional arguments> `<optional arguments>`, decide run simulation Gazebo Rviz, sensor simulate set true default). Arduino Nicla Vision setup completed setup steps Nicla Vision Drivers repository, turn Arduino Nicla Vision. power Arduino Nicla Vision, automatically connect network start streaming ROS-running machine. Note: LED board! seconds sec) turned LED Blue. board correctly connected streaming, LED turn connection issues, LED Blue execution Green LED, unforseen errors. execution Red LED, memory errors picture quality high). Video Demonstration https://github.com/ADVRHumanoids/nicla_vision_ros/assets/26459008/a3eaf921-02ea-4482-80a0-5830a338eb74 File truncated lines full file"},
{"url": "https://index.ros.org/p/numpy_ndarray_msgs", "package": "numpy_ndarray_msgs", "package_summary": "A ROS2 package for transmitting NumPy ndarrays between ROS2 nodes.", "package_details": "ROS2 NDArray Message ROS2 package transmitting NumPy ndarrays ROS2 nodes. Features Custom ROS2 message type numpy.ndarray Bi-directional conversion NumPy arrays ROS2 messages Multi-dimensional array support data types Type-safe Python utilities full type hints Requirements ROS2 Humble higher Python Installation ~/ros2_ws/src git clone https://github.com/Geson-anko/numpy_ndarray_msgs.git colcon build --packages-select numpy_ndarray_msgs source install/setup.sh Install Python Utility Package pip install ros2-ndarray-msg-utils Usage Python Utility Package import numpy ndarray_msg_utils import to_ros_msg, from_ros_msg, NDArray rclpy.clock import ROSClock Convert NumPy array ROS2 message array np.array([[1, dtype=np.float32) Type Hint msg: NDArray msg to_ros_msg(array) Header msg to_ros_msg(array, timestamp=ROSClock().now(), frame_id=\"array_frame\") Convert NumPy array restored from_ros_msg(msg) PyTorch Support pip install \"ros2-ndarray-msg-utils[torch]\" import torch ndarray_msg_utils.torch import to_ros_msg, from_ros_msg Convert PyTorch tensor ROS2 message tensor torch.tensor([[1, dtype=torch.float32) msg to_ros_msg(tensor) Convert PyTorch tensor restored from_ros_msg(msg) License MIT License"},
{"url": "https://index.ros.org/p/rai_interfaces", "package": "rai_interfaces", "package_summary": "Interfaces for RAI communication", "package_details": "rai_interfaces rai_interfaces ROS package message service interface definitions communication RAI ecosystem. interfaces designed support integration communication robotics systems ROS compatible ROS Humble Jazzy distributions. Features Custom message service definitions RAI platform. Compatible ROS Humble Jazzy. Lightweight modular easy reuse packages. Installation Prerequisites ROS (Humble Hawksbill Jazzy Jalisco) installed sourced. colcon build system. rosdep installing dependencies. Clone ROS Workspace Create ROS workspace don\u2019t mkdir ~/rai_ws/src ~/rai_ws/src Clone rai_interfaces repository: git clone https://github.com/RobotecAI/rai_interfaces.git Install dependencies: ~/rai_ws rosdep install --from-paths src --ignore-src Build workspace: colcon build Source workspace: source install/setup.bash Usage building sourcing workspace, interfaces RAI ROS packages."},
{"url": "https://index.ros.org/p/robosoft_openai", "package": "robosoft_openai", "package_summary": "A server which sends prompts to OpenAI", "package_details": "robosoft_openai OpenAI server node ROS2 Applications don\u2019t image processing pipeline GPU robot, calls OpenAI replace functionality. July generally recommend yes/no questions, parse response package includes simple filter parses yes/no. safe robot drive respond word, door open? respond word, customer table? respond word, robot successfully grasp cube? respond word, control panel identical time checked? respond word, examples reinforcement learning, determining reward earned. Setup Requires OpenAI key https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key Set environment variable: export OPENAI_API_KEY=\"...\" Dependencies sudo apt install libcurl4-openssl-dev sudo apt install nlohmann-json3-dev sudo apt install libb64-dev Run Here\u2019s quick ros2 run robosoft_openai openai_server Send prompt. Here\u2019s returns bool yes/no question. Note image field service request left empty\u2026 ros2 service call /openai_server ai_prompt_msgs/srv/StringImagePrompt prompt:\\ pirate? respond one-word answer, Here\u2019s returns full string\u2026 ros2 service call /openai_server ai_prompt_msgs/srv/StringImagePrompt prompt:\\ pirate?\" Here\u2019s client sends image wooden table prompts wooden table: ros2 run robosoft_openai example_client Citation work, cite Zelenak, Lock, Aldrich, OpenAI Server ROS2. Github. https://github.com/robosoft-ai/robosoft_openai"},
{"url": "https://index.ros.org/p/scenario_execution_py_trees_ros", "package": "scenario_execution_py_trees_ros", "package_summary": "Fixes in py-trees-ros not yet release", "package_details": "Scenario Execution Trees ROS package latest py_trees_ros.trees.BehaviourTree part release package."},
{"url": "https://index.ros.org/p/example_multi_robot", "package": "example_multi_robot", "package_summary": "Example Multi Robot", "package_details": "Navigation run multi robot scenario, build tb4_sim_scenario package: colcon build --packages-up-to tb4_sim_scenario Source workspace: source install/setup.bash spawns robots. robot initialised nav2 moves straight line. reaches specific point velocity command robot position itsel front robot replans path moves robot. run scenario, run command. ros2 launch tb4_sim_scenario sim_nav_scenario_launch.py scenario:=examples/example_multi_robot/example_multi_robot.osc detailed understanding code structure scenario implementation refer tutorial documentation."},
{"url": "https://index.ros.org/p/example_scenario_control", "package": "example_scenario_control", "package_summary": "Scenario Execution Example for Scenario Control using RVIZ", "package_details": "Navigation run Scenario Control, build example_scenario_control Package: colcon build --packages-up-to example_scenario_control Source workspace: source install/setup.bash run command launch scenario: ros2 launch example_scenario_control example_scenario_control_launch.py detailed understanding code structure scenario implementation refer tutorial documentation."},
{"url": "https://index.ros.org/p/example_simulation", "package": "example_simulation", "package_summary": "Scenario Execution Example for Simulation", "package_details": "Simulation Navigation run Simulation Navigation scenario, build example_simulation package: colcon build --packages-up-to example_simulation Source workspace: source install/setup.bash run command launch scenario: ros2 launch tb4_sim_scenario sim_nav_scenario_launch.py scenario:=examples/example_simulation/scenarios/example_simulation.osc turtlebot initialised nav2 drives goal ride obstacle spawned front turtlebot drive object. detailed understanding code structure scenario implementation refer tutorial documentation."},
{"url": "https://index.ros.org/p/scenario_execution_docker", "package": "scenario_execution_docker", "package_summary": "Scenario Execution library for docker interactions", "package_details": "Scenario Execution Library Docker interaction scenario_execution_docker package actions interact docker. scenario execution library: docker.osc: Actions interact docker"},
{"url": "https://index.ros.org/p/scenario_execution_floorplan_dsl", "package": "scenario_execution_floorplan_dsl", "package_summary": "Scenario Execution library for Floorplan DSL", "package_details": "Scenario Execution Library Floorplan DSL scenario_execution_floorplan_dsl package actions interact Floorplan DSL. scenario execution library: floorplan_dsl.osc: Floorplan DSL specific actions create simulation worlds Build build docker image floorplan dsl git clone https://github.com/secorolab/FloorPlan-DSL FloorPlan-DSL git checkout 34bd70bc89b285173226e27add6f4f5589de106a docker build --tag floorplan:latest build scenario execution dependencies source /opt/ros/humble/setup.bash colcon build --packages-up-to scenario_execution_floorplan_dsl scenario_execution_ros scenario_execution_gazebo scenario_execution_nav2 tb4_sim_scenario source install/setup.bash Test run scenario ros2 run scenario_execution_ros scenario_execution_ros libs/scenario_execution_floorplan_dsl/example/example.osc"},
{"url": "https://index.ros.org/p/scenario_execution_gazebo", "package": "scenario_execution_gazebo", "package_summary": "Scenario Execution library for Gazebo", "package_details": "Scenario Execution Library Gazebo scenario_execution_gazebo package actions interact Gazebo simulator. scenario execution library: gazebo.osc: Gazebo specific actions interact simulation"},
{"url": "https://index.ros.org/p/scenario_execution_kubernetes", "package": "scenario_execution_kubernetes", "package_summary": "Package for scenario execution kubernetes library", "package_details": "Scenario Execution Kubernetes packages custom actions interact Kubernetes cluster. scenario execution libraries: kubernetes.osc: Kubernetes specific actions creating deleting pods."},
{"url": "https://index.ros.org/p/scenario_execution_moveit2", "package": "scenario_execution_moveit2", "package_summary": "Scenario Execution library for moveIt2", "package_details": "Scenario Execution Library moveIt2 scenario_execution_moveit2 package actions interact moveit2 manipulation stack. scenario execution library: moveit2.osc: Actions specific moveit2 manipulation stack"},
{"url": "https://index.ros.org/p/scenario_execution_nav2", "package": "scenario_execution_nav2", "package_summary": "Scenario Execution library for Nav2", "package_details": "Scenario Execution Library Nav2 scenario_execution_nav2 package actions interact nav2 navigation stack. scenario execution library: nav2.osc: Actions specific nav2 navigation stack"},
{"url": "https://index.ros.org/p/scenario_execution_os", "package": "scenario_execution_os", "package_summary": "Scenario Execution library for OS interactions", "package_details": "Scenario Execution Library interaction scenario_execution_os package actions interact operating system. scenario execution library: os.osc: Actions interact operating system"},
{"url": "https://index.ros.org/p/scenario_execution_pybullet", "package": "scenario_execution_pybullet", "package_summary": "Scenario Execution library for PyBullet", "package_details": "Scenario Execution Library PyBullet scenario_execution_pybullet package actions interact PyBullet simulator. scenario execution library: pybullet.osc: PyBullet specific actions interact simulation run build scenario_execution_pybullet package dependencies: python venv my_venv source my_venv/bin/activate pip install libs/scenario_execution_pybullet/requirements.txt pip install libs/scenario_execution_pybullet libs/scenario_execution run command launch scenario: ./my_venv/lib/scenario_execution/scenario_execution libs/scenario_execution_pybullet/scenario_execution_pybullet/scenarios/example_pybullet.osc"},
{"url": "https://index.ros.org/p/scenario_execution_x11", "package": "scenario_execution_x11", "package_summary": "Scenario Execution library for X11", "package_details": "Scenario Execution Library scenario_execution_x11 package actions interact window system. scenario execution library: x11.osc: Actions specific window system Run colcon build sudo apt install mesa-utils ros2 run scenario_execution_ros scenario_execution_ros libs/scenario_execution_x11/scenarios/example_capture.osc"},
{"url": "https://index.ros.org/p/scenario_execution", "package": "scenario_execution", "package_summary": "Scenario Execution", "package_details": "Scenario Execution scenario_execution package core package Scenario Execution Robotics. functionalities parsing, py-trees creation execution. scenario execution libraries: standard.osc: OpenSCENARIO DSL standard library. slightly modified sync feature set scenario execution imports standard_base.osc. standard_base.osc: base parts OpenSCENARIO DSL standard library units basic structs. convenience, numerical struct members initialized robotics.osc: robotic-specific specifications. helper.osc: helper actions logging running external processes."},
{"url": "https://index.ros.org/p/scenario_execution_control", "package": "scenario_execution_control", "package_summary": "Scenario Execution Control", "package_details": "Scenario Execution Control scenario_execution_control package code control scenarios ROS2) application RViz."},
{"url": "https://index.ros.org/p/scenario_execution_coverage", "package": "scenario_execution_coverage", "package_summary": "Robotics Scenario Execution Coverage Tools", "package_details": "Scenario Execution Coverage scenario_execution_coverage packages tools: scenario_variation: Create concrete scenarios scenario variation definition scenario_batch_execution: Execute multiple scenarios,"},
{"url": "https://index.ros.org/p/scenario_execution_interfaces", "package": "scenario_execution_interfaces", "package_summary": "ROS2 Interfaces for Scenario Execution", "package_details": "Scenario Execution Interfaces scenario_execution_interfaces package ROS2 messages services, interface scenario execution control package"},
{"url": "https://index.ros.org/p/scenario_execution_ros", "package": "scenario_execution_ros", "package_summary": "Scenario Execution for ROS", "package_details": "Scenario Execution ROS scenario_execution_ros package ROS2 middleware implementation scenario execution. py_trees_ros packages py_trees\u2019s implementation ROS2. scenario execution libraries: ros.osc: ROS specific actions topic publish service call."},
{"url": "https://index.ros.org/p/scenario_execution_rviz", "package": "scenario_execution_rviz", "package_summary": "The scenario_execution_rviz package", "package_details": "Scenario Execution Rviz scenario_execution_rviz package rviz plugins visualizing controlling scenario working ROS Scenario View Panel Scenario View panel shows behavior tree running scenario. panel accessible Panels :arrow_right: Add panel :arrow_right: scenario_execution_rviz :arrow_right: ScenarioView. image shows snapshot rviz plugin run example_nav2 scenario: plugin subscribes /scenario_execution/snapshots default. Double-click header modify topic. Icon Licence MIT License (MIT) Copyright css.gg"},
{"url": "https://index.ros.org/p/arm_sim_scenario", "package": "arm_sim_scenario", "package_summary": "MoveIt2 Arm Simulation Scenario Execution", "package_details": "MoveIt2 Arm Simulation Scenario Execution"},
{"url": "https://index.ros.org/p/gazebo_static_camera", "package": "gazebo_static_camera", "package_summary": "Spawn a static camera within a gazebo world", "package_details": "Gazebo Static Camera package spawn basic camera gazebo."},
{"url": "https://index.ros.org/p/gazebo_tf_publisher", "package": "gazebo_tf_publisher", "package_summary": "Node to publish ignition ground truth TF tree", "package_details": "Gazebo Publisher Gazebo Publisher searches frame robot publishes global ROS topic started namespace. output Frame syntax: robot_name_base_link_gt. expected frames gazebo topic order: map robot_name base_link. default base_frame_id:=base_link. start gazebo ground truth publisher run code gazebo pose topic: ros2 launch gazebo_tf_publisher gazebo_tf_publisher_launch.py gz_pose_topic:=/world/name/dynamic_pose/info view gazebo topic list run command: ign topic previous command prints gazebo topics pose topic robots present simulation. start node ROS namespace, use_namespace:=True namespace:=desired_namespace."},
{"url": "https://index.ros.org/p/tb4_sim_scenario", "package": "tb4_sim_scenario", "package_summary": "TurtleBot 4 Simulation Scenario Execution", "package_details": "Turtlebot4 Simulation Scenario Execution tb_sim_scenario package launch files parameter files start Gazebo Simulator, spawn Turtlebot execute scenario. Launch arguments ros2 launch tb4_sim_scenario_bringup sim_nav_scenario_launch.py scenario:=<OSC2 SCENARIO>"},
{"url": "https://index.ros.org/p/scenario_execution_docker_test", "package": "scenario_execution_docker_test", "package_summary": "Tests for Scenario Execution library for Docker", "package_details": "Tests Scenario Execution Library Docker scenario_execution_docker_test package tests functionality scenario_execution_docker."},
{"url": "https://index.ros.org/p/scenario_execution_gazebo_test", "package": "scenario_execution_gazebo_test", "package_summary": "Tests for Scenario Execution library for Gazebo", "package_details": "Tests Scenario Execution Library Gazebo scenario_execution_gazebo_test package test scenarios test scenario_execution_gazebo tb4_sim_scenario setup."},
{"url": "https://index.ros.org/p/scenario_execution_nav2_test", "package": "scenario_execution_nav2_test", "package_summary": "Tests for Scenario Execution library for Nav2", "package_details": "Tests Scenario Execution Library Nav2 scenario_execution_nav2_test package test scenarios test scenario_execution_nav2 tb4_sim_scenario setup."},
{"url": "https://index.ros.org/p/scenario_execution_ros_test", "package": "scenario_execution_ros_test", "package_summary": "Tests for Scenario Execution library for ROS", "package_details": "Tests Scenario Execution Library ROS scenario_execution_ros_test package tests functionality scenario_execution_ros."},
{"url": "https://index.ros.org/p/scenario_execution_test", "package": "scenario_execution_test", "package_summary": "Tests for Scenario Execution library", "package_details": "Tests Scenario Execution Library scenario_execution_test package tests functionality scenario_execution."},
{"url": "https://index.ros.org/p/message_modification", "package": "message_modification", "package_summary": "Modification of message data", "package_details": "Message modification message_modification packages ros nodes receive ROS messages, modify content republish"},
{"url": "https://index.ros.org/p/scenario_status", "package": "scenario_status", "package_summary": "Simple node to call a service to publish the py-trees-\\\n    behaviour tree to a topic, then subscribe to that topic and publish \\\n    changes in behaviour states as strings at the time they are \\\n    happening", "package_details": "Scenario Status scenario_status packages scenario_status ROS node publishes current scenario status topic. ros-bag recording match data scenario status."},
{"url": "https://index.ros.org/p/tf_to_pose_publisher", "package": "tf_to_pose_publisher", "package_summary": "Publish a tf transform to a pose topic", "package_details": "Pose Publisher tf_to_pose_publisher packages tf_to_pose_publisher node publishes transform PoseStamped topic."},
{"url": "https://index.ros.org/p/simple_term_menu_vendor", "package": "simple_term_menu_vendor", "package_summary": "A Python package which creates simple interactive menus on the command line.", "package_details": "Simple Terminal Menu Overview simple-term-menu creates simple menus interactive command line programs. offer choice options user. Menu entries selected arrow, emacs (C-n/C-p) keys. module terminfo database detect terminal features automatically disables styles Linux macOS supported. Breaking version update version breaking TerminalMenu constructor takes keyword-only arguments parameter menu entries). easier add parameters future releases well-arranged parameter list. command line interface revised. separate words consistently rearranges short options. important short options save free letters future releases. version multi_select_key parameter named multi_select_keys takes iterable keys default space andtab multi-select keys. toggle selected items search mode. shortcut_parentheses_highlight_style parameter renamed shortcut_brackets_highlight_style consistent multi_select_cursor_brackets_style parameter. Installation simple-term-menu PyPI Python installed pip: python3 pip install simple-term-menu Arch Linux derivatives, install simple-term-menu AUR: yay python-simple-term-menu find self-contained executables 64-bit Linux distributions macOS High Sierra newer releases page. created PyInstaller require glibc Linux fine Linux system). Usage Create menu default style Create instance class TerminalMenu pass menu entries list strings constructor. Call show method output menu wait keyboard input: #!/usr/bin/env python3 simple_term_menu import TerminalMenu def main(): options [\"entry \"entry \"entry terminal_menu TerminalMenu(options) menu_entry_index terminal_menu.show() print(f\"You selected {options[menu_entry_index]}!\") \"__main__\": main() output select menu entry arrow keys (vim motions) accept choice hitting enter cancel menu escape, <Ctrl>-C. show returns selected menu entry index menu canceled. pass optional title TerminalMenu constructor menu. title simple string, multiline string newlines) list strings. applies status_bar parameter, places status bar menu. callable status_bar parameter takes selected entry returns status bar string. Styling pass styling arguments TerminalMenu constructor. style tuple keyword strings. keywords accepted: bg_black bg_blue bg_cyan bg_gray bg_green bg_purple bg_red bg_yellow fg_black fg_blue File truncated lines full file"},
{"url": "https://index.ros.org/p/tecgihan_driver", "package": "tecgihan_driver", "package_summary": "Linux and ROS driver software for Tec Gihan sensor amplifiers for robots", "package_details": "tecgihan_driver Package Description package softwares Tec Gihan Co.,Ltd. sensor amplifiers running Linux ROS (Robot Operating System). Linux ROS(Robot Operating System) Sensors Amplifiers Tec Gihan Co.,Ltd. Amplifiers Robot DMA-03 Robot Force Sensors USL06-H5 Series USL08-H6 Series System Requirement tecgihan_driver supports system combinations. tecgihan_driver Ubuntu ROS Humble Ubuntu ROS Jazzy Software Configurations DMA-03 Robot Amplifier Driver DMA-03 Launch Files Launch dma03_demo_launch.xml ROS launch file launch DMA-03 Robot amplifier demonstration DMA-03 ROS launch dma03_ros_launch.py dma03_ros_launch.xml ROS launch file launches software dma03_ros_publisher.py parameter settings dma03_ros_publisher.py ROS launch Python Scripts Python dma03_driver.py Linux software DMA-3 Robot Amplifier communication control software DMA-03 amplifier robots DMA-03 Linux Linux software depend ROS ROS Linux DMA03DriverForRobot API dma03_ros_publisher.py ROS wrapper publishes data retrieved ROS Topics ROS ROS Publish data acquired amplifier, timer event ROS Topic Message Type ROS Vector3Stamped header Header stamp Type: Time sec Type: int nanosec Type: int frame_id Type: string vector: Type: Vector3 Type: float Type: float Type: float force_to_wrench.py program converts Vector3Stamped type message topic published dma03_ros_publisher.py WrenchStamped type message topic displayed RViz publishes ROS topic dma03_ros_publisher.py Vector3Stamped RViz WrenchStamped ROS set_udev_rules.py program set permissions DMA-03 Robot amplifier Linux Linux DMA-03 Installation installation, version ROS installed Ubuntu Ubuntu ROS ROS Documentation: Jazzy Installation Ubuntu (deb packages) https://docs.ros.org/en/jazzy/Installation/Ubuntu-Install-Debs.html ROS Documentation: Humble Installation Ubuntu (deb packages) https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html Open terminal install tecgihan_driver running commands line line. tecgihan_driver $ROS_DISTRO Replace jazzy humble $ROS_DISTRO jazzy humble sudo apt update sudo apt full-upgrade sudo apt install ros-$ROS_DISTRO-tecgihan-driver installing apt command user configured belong dialout group order enable access DMA-03 Robot amplifier. enable group settings, methods File truncated lines full file"},
{"url": "https://index.ros.org/p/turtlebot4_setup", "package": "turtlebot4_setup", "package_summary": "Turtlebot4 setup scripts", "package_details": "Turtlebot4 Setup Setup scripts tools TurtleBot Raspberry Visit TurtleBot User Manual details. Create image manually Follow instructions create Turtlebot4 image manually. Create Ubuntu Image install Raspberry Imager. Insert card run Raspberry Imager. Follow instructions install Ubuntu Server (64-bit) card. Ensure Raspberry powered inserting flashed card. set Raspberry connecting network Ethernet keyboard HDMI monitor micro HDMI cable. Ethernet Setup Connect Raspberry Network Ethernet cable. Boot Raspberry Find Raspberry Pi\u2019s router\u2019s portal. SSH Raspberry address. ssh ubuntu@xxx.xxx.xxx.xxx default login ubuntu password ubuntu. prompted change password. HDMI Setup Connect keyboard Raspberry USB. Connect monitor Raspberry HDMI0 port. Boot Raspberry default login ubuntu password ubuntu. prompted change password. Manually configure Wi-Fi logged Raspberry configure Wi-Fi: sudo nano /etc/netplan/50-cloud-init.yaml Add lines: wifis: wlan0: optional: true access-points: \"YOUR_WIFI_SSID\": password: \"YOUR_WIFI_PASSWORD\" dhcp4: true Note: Ensure wifis: aligned existing ethernets: line. indentations spaces. tabs. Reboot Raspberry connected Wi-Fi. Find Raspberry Pi\u2019s router\u2019s portal. SSH Raspberry address. ssh ubuntu@xxx.xxx.xxx.xxx Download run setup script wget https://raw.githubusercontent.com/turtlebot/turtlebot4_setup/humble/scripts/turtlebot4_setup.sh bash script automatically install ROS Humble, TurtleBot packages, important apt packages. configure RPi4 work TurtleBot complete, RPi4 rebooted sudo reboot. run turtlebot4-setup configure robot setup tool."},
{"url": "https://index.ros.org/p/aandd_ekew_driver_py", "package": "aandd_ekew_driver_py", "package_summary": "aandd ek/ew series driver python package", "package_details": "aandd_ekew_driver_py install python module \u201cserial\u201d sudo rosdep init rosdep update rosdep install --from-paths aandd_ekew_driver_py --ignore-src prepare interfaces (option) node weight_scale_interfaces ~/dev_ws/src git clone https://github.com/TechMagicKK/weight_scale_interfaces.git ~/dev_ws colcon build --cmake-clean-first --symlink-install --packages-select weight_scale_interfaces install/local_setup.zsh rs-232c device setting ~/dev_ws/aandd_ekew_driver_py/launch edit bringup.launch.py change params (port, baudrate, rate) build ~/dev_ws colcon build --cmake-clean-first --symlink-install --packages-select aandd_ekew_driver_py install/local_setup.zsh launch node ros2 launch aandd_ekew_driver_py bringup.launch.py launch node fake device test ros2 launch aandd_ekew_driver_py bringup.launch.py use_fake:=True change publish rate ros2 param set /aandd_ekew_node rate fix port add privilege(option) check vendor product plug/unplug usb cable order find vendor product device lsusb command. text. Bus Device Linux Foundation root hub Bus Device 04f2:b7c0 Chicony Electronics Integrated Camera Bus Device 06cb:00f9 Synaptics, Bus Device Intel Corp. Bus Device RATOC System, REX-USB60F Bus Device Linux Foundation root hub Bus Device Linux Foundation root hub Bus Device Linux Foundation root hub find line. Bus Device RATOC System, REX-USB60F vendor product **NOTE: vendor product depend device. difference device.** change aandd_ekew_driver_py/rules/99-weight-scale.rules product product open rule file ros_ws/src/aandd_ekew_driver_py/rules vim 99-weight-scale.rules change values idVendor idProduct. vendor product edit SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0584\", ATTRS{idProduct}==\"b020\", SYMLINK+=\"weightscale\", MODE=\"0666\" copy rule file /etc/udev/rules.d/ sudo 99-weight-scale.rules /etc/udev/rules.d enable rule sudo udevadm control --reload unplug plug usb cable. change successful, find /dev/weightscale. change port weightscale bringup.launch.py. port launch.substitutions.LaunchConfiguration('port', default='/dev/ttyUSB0') port launch.substitutions.LaunchConfiguration('port', default='/dev/weightscale') File truncated lines full file"},
{"url": "https://index.ros.org/p/adi_tmc_coe", "package": "adi_tmc_coe", "package_summary": "Metapackage for Trinamic Motor Controllers (TMC) that uses CANopen-over-etherCAT(CoE) protocol.", "package_details": "adi_tmc_coe Metapackage Official ROS Driver Trinamic Motor Controllers (TMC) CANopen-over-etherCAT(CoE) protocol. Packages adi_tmc_coe_core adi_tmc_coe_core/README.md adi_tmc_coe_interfaces adi_tmc_coe_interfaces/README.md :memo: Note: ROS1, package complete driver adi_tmc_coe; ROS2, adi_tmc_coe metapackage group adi_tmc_coe_core ROS Nodes Libraries) adi_tmc_coe_interfaces custom msg srv)"},
{"url": "https://index.ros.org/p/adi_tmc_coe_core", "package": "adi_tmc_coe_core", "package_summary": "Core package for Trinamic Motor Controllers (TMC) that uses CANopen-over-etherCAT(CoE) protocol.", "package_details": "adi_tmc_coe_core Core package Trinamic Motor Controllers (TMC) CANopen-over-etherCAT(CoE) protocol. Background Supported TMC boards: TMCM-1461-CoE Supported communication interface interface driver: CANopen-over-etherCAT (SOEM) Supported ROS distro: Humble (Ubuntu Supported platform: Intel 64-bit (amd64) Supported setup: Single/Multiple TMC Single ECAT interface (namespace-managed) :memo: Note: officially supported TMC boards abovementioned, market-ready TMCs YAMLs repository expected work tested users. Contact Developers issues encountered. Hardware tested TMCM-1461-CoE setup, TMCM-1461-CoE External power supply USB LAN ethernet adapter 4pin female M8-RJ45 etherCAT cable pin male power supply cable image shows connection diagram setup labels): image shows actual setup reference): Software Software Architecture Software Dependencies Assumptions building package: Installed ROS Humble. follow steps. Setup workspace workspace folder named \u201cros2_ws\u201d). follow steps. Clone website: branch dropdown set \u201chumble\u201d. Click \u201cClone\u201d \u201cCode\u201d button, copy SSH HTTPS link \u201c*.git\u201d). terminal, ~/ros2_ws/src git clone <copied SSH HTTPS link adi_tmc_coe #clones repo \"adi_tmc_coe\" directory Build proper exports source /opt/ros/<ROS version>/setup.bash source /opt/ros/humble/setup.bash \u201cROS version\u201d user\u2019s actual ROS version install required dependencies SoftwareDependencies) rosdep: ~/ros2_ws rosdep init rosdep update rosdep install --from-paths src --ignore-src ~/ros2_ws colcon build clean building, run colcon build --cmake-clean-first :memo: Note: recommended terminal dedicated building package/workspace avoid complex issues mentioned ROS2 Source overlay Pre-Launch (One-time setup) Trinamic modules TMCL_IDE specially CoE due interface Check module communication protocol CoE (UART, USB Proceed steps module TMCL_IDE. :memo: Note: communication protocol cable communicate TMCL_IDE UART USB TTL adapter, USB TypeC/TypeB/Micro, PCAN-USB adapter). time set motors TMC, required calibrate tune PID settings motors calibrations/tuning downloading TMCL-IDE. BLDC Motors Calibrate motors run-through/tutorial calibration TMCL-IDE Wizard Pool feature, check link. Tune settings motors run-through/tutorial tuning TMCL-IDE Tuning feature, check link. :memo: Note: calibration tuning store parameters set TMCL_IDE board\u2019s EEPROM. File truncated lines full file"},
{"url": "https://index.ros.org/p/adi_tmc_coe_interfaces", "package": "adi_tmc_coe_interfaces", "package_summary": "Custom interfaces for adi_tmc_coe", "package_details": "adi_tmc_coe_interfaces Custom interfaces ROS Driver Trinamic Motor Controllers (TMC) CANopen-over-etherCAT(CoE) protocol. Custom msg adi_tmc_coe_interfaces/msg/TmcCoeInfo Data Data Type Description interface_name string Interface commonly starting \"eth\" slave_number uint8 Slave number starting motor_number uint8 Motor number starting motor axis mode_of_operation string \"Profile Position\", \"Profile Velocity\", \"Homing Mode\", \"Cyclic Synchronous Position Mode\", \"Cyclic Synchronous Velocity Mode\", \"Cyclic Synchronous Torque Mode\" status_word int32 Reflects status CiA402 state machine velocity float32 wheel_diameter parameter set unit published velocity rpm, position int32 Position Scaler Encoder steps device parameter, unit published position steps, degree angle torque int32 Units Custom srv adi_tmc_coe_interfaces/srv/ReadWriteSDO Data Data Type Description Input Request slave_number uint8 Slave number selected device. count start object_name string Object Parameter Check autogenerated yaml module obj_name string reading, required writing, input writing, integer string form. Check object limits device's firmware manual. TMCM-1461 Response output int32 File truncated lines full file](https://github.com/analogdevicesinc/adi_tmc_coe_ros2/tree/humble/adi_tmc_coe_interfaces/README.md)"},
{"url": "https://index.ros.org/p/adi_tmcl", "package": "adi_tmcl", "package_summary": "The adi_tmcl ROS2 package", "package_details": "adi_tmcl adi_tmcl (previously tmcl_ros2) official ROS2 Driver ADI Trinamic Motor Controllers (TMC) Trinamic Motion Control Language (TMCL) protocol. Background Supported TMC boards: TMCM-343, TMCM-351, TMCM-0930, TMCM-1140, TMCM-1160, TMCM-1180, TMCM-1230, TMCM-1231, TMCM-1240, TMCM-1241 TMCM-1260 TMCM-1270, TMCM-1276, TMCM-1278, TMCM-1311, TMCM-1316, TMCM-1617 TMCM-1633, TMCM-1636 TMCM-1637, TMCM-1638, TMCM-1690 TMCM-2611 TMCM-3110, TMCM-3212, TMCM-3230, TMCM-3351, TMCM-6110, TMCM-6212, TMCM-6214 Supported communication interface interface driver: (SocketCAN) Supported ROS2 distro: Humble (Ubuntu Supported platform: Intel 64-bit (amd64) Supported setup: Single/Multiple TMC Single/Multiple channel (namespace-managed) :memo: Note: Tested boards marked asterisk(*), stands PanDrive, combines motor Trinamic board single package. TMCM files ROS package compatible version hardware. Contact Developers issues encountered. Hardware tested TMCM-1636 setup, TMCM-1636 QBL4208-61-04-013 BLDC motor External power supply USB Cable (w/SocketCAN support) ohm termination resistors PWR/GND board external power supply 5-pin Motor connector (Hall) Note 5-pin Motor connector (Encoder) Note pin Molex connectors :memo: Note: Check Section QBL4208-x-1k Datasheet motor wiring references. image shows connection diagram setup labels): image shows actual setup reference): Software Software Architecture Software Dependencies Assumptions building package: Installed ROS2 Humble. follow steps. Setup workspace workspace folder named \u201cros2_ws\u201d). follow steps. Clone website: branch dropdown set \u201chumble\u201d. Click \u201cClone\u201d \u201cCode\u201d button, copy SSH HTTPS link \u201c*.git\u201d). terminal, ~/ros2_ws/src git clone <copied SSH HTTPS link adi_tmcl #clones repo \"adi_tmcl\" directory Build ```bash [TERMINAL proper exports source /opt/ros//setup.bash source /opt/ros/humble/setup.bash Resolve dependencies ~/ros2_ws File truncated lines full file"},
{"url": "https://index.ros.org/p/as2_platform_gazebo", "package": "as2_platform_gazebo", "package_summary": "Package to communicate Gazebo Simulator with Aerostack2 framework", "package_details": "as2_gazebo_platform"},
{"url": "https://index.ros.org/p/as2_platform_multirotor_simulator", "package": "as2_platform_multirotor_simulator", "package_summary": "Lightweight simulator", "package_details": "as2_platform_multirotor_simulator Aerostack2 lightweight simulator multirotor drones, based multirotor_simulator. API documentation, Doxygen. documentation files built locally: Install doxygen: sudo apt install doxygen Run doxygen root folder as2_platform_multirotor_simulator/ doxygen Doxyfile Open documentation opening as2_platform_multirotor_simulator/doxygen/html/index.html Building package root folder workspace run: colcon build --packages-select as2_platform_multirotor_simulator Running colcon test Run colcon test colcon test --packages-select as2_platform_multirotor_simulator Optional, add verbosity --event-handlers console_direct+ Launching simulator Configuration files located as2_platform_multirotor_simulator/config/: control_modes.yaml: input control modes aerostack2 aerial platform. platform_config_file.yaml: ROS configuration, names, frequencies aerostack2 parameters. simulation_config.yaml: simulation configuration, frequency environment parameters. uav_configuav_config.yaml: UAV configuration, drone\u2019s physical parameters controller configuration. world_config.yaml: world configuration, parameters override drone namespace configuration file. Launcher parameters order Default configuration file as2_platform_multirotor_simulator/config/ folder. Custom configuration file launch command platform_config_file:=path/to/file.yaml). Custom parameters launch command frequency:=100). Custom world configuration launch command world_config:=path/to/file.yaml), world launcher. Examples: ros2 launch as2_platform_multirotor_simulator as2_platform_multirotor_simulator.launch.py namespace:=drone0 ros2 launch as2_platform_multirotor_simulator as2_platform_multirotor_simulator_world.launch.launch.py namespace:=drone0 world_config:=config/world_config.yaml References Fernandez-Cortizas, Molina, Arias-Perez, Perez-Segui, Perez-Saura, Campoy, \u201cAerostack2: software framework developing multi-robot aerial systems\u201d, ArXiv DOI"},
{"url": "https://index.ros.org/p/as2_behavior_tree", "package": "as2_behavior_tree", "package_summary": "AS2 behavior trees", "package_details": "as2_behavior_tree module implement ROS2 node executes navigation Behavior Trees navigation drone systems. behavior_trees module Behavior-Tree.CPP library core Behavior Tree processing. behavior_trees module navigation-specific behavior tree nodes ROS2 node implementation launchers. nav2_behavior_tree template class easily integrating ROS2 actions services Behavior Trees, Index Installation AeroStack2 Nodes Action Condition Control Decorator create nodes? Acknowledgements Installation Dependencies: sudo apt-get install ros-$ROS_DISTRO-behaviortree-cpp install Groot build trees. Aerostack2 Nodes AeroStack2 offers pull predefined behavior nodes build Behavior Tree. Action Show Actions Arm Arms drone. Input port intended user, `nav2_behavior_tree` service action node implementation. Returns **SUCCESS** service result true. returns **FAILURE**. ![arm_bt.png](docs/imgs/arm_bt.png) Port Description service_name Service called. Disarm Disarms drone. Input port intended user, `nav2_behavior_tree` service action node implementation. Returns **SUCCESS** service result true. returns **FAILURE**. ![disarm_bt.png](docs/imgs/disarm_bt.png) Port Description service_name Service called. Echo Prints data getted input port. debugging purpouses. returns **SUCCESS** echoing. ![echo_bt.png](docs/imgs/echo_bt.png) Port Description data String echoed. FollowPath **TBD** GoTo position maximum speed yaw. Returns **SUCCESS** action finishes successfully cancelled. Returns **FAILURE** action aborted, goal rejected action server fails. action executing returns **RUNNING**. ![goto_bt.png](docs/imgs/goto_bt.png) Port Description max_speed Maximum speed meters pose Goal pose meters `x;y;z`). yaw_angle Yaw angle radians. yaw_mode Yaw mode (KEEP_YAW PATH_FACING FIXED_YAW GoTo GPS GPS position maximum speed yaw. Returns **SUCCESS** action finishes successfully cancelled. Returns **FAILURE** action aborted, goal rejected action server fails. action executing returns **RUNNING**. ![goto_bt.png](docs/imgs/goto_gps_bt.png) Port Description alittude Altitude meters. latitude Latitude degrees. longitude Longitude degrees. max_speed Maximum speed meters yaw_angle Yaw angle radians. yaw_mode Yaw mode (KEEP_YAW PATH_FACING FIXED_YAW Land Land current position speed. File truncated lines full file](https://github.com/aerostack2/aerostack2/tree/main/as2_behavior_tree/README.md)"},
{"url": "https://index.ros.org/p/as2_behavior", "package": "as2_behavior", "package_summary": "Aerostack2 Behavior Class", "package_details": "AS2_behavior library Aerostack2 Behaviors handle mission execution behavior separated behavior Server behavior client. similar rclcpp actions differences. behavior server attends single goal (client) moment. Feedback visible nodes extend start, stop, feedback modify, pause, resume, behavior state data. ros2 services start modify syntax start) pause (std_srvs::srv::Empty) resume (std_srvs::srv::Empty) stop (std_srvs::srv::Empty) ros2 topics Feedback State advantage ros2 action message definitions: Goal: start modify services Feedback: feedback Response: state, inmediate behaviors) difference Inmediate, Recurrent Regular goal oriented) behaviors: Inmediate: act service, dont give paused modified. Recurrent: give feedback stopped paused. Goal Oriented: runing termination condition met."},
{"url": "https://index.ros.org/p/as2_behaviors_motion", "package": "as2_behaviors_motion", "package_summary": "AS2 Movement Behaviors Behaviors Meta Package", "package_details": "as2_behaviors_motion"},
{"url": "https://index.ros.org/p/as2_behaviors_path_planning", "package": "as2_behaviors_path_planning", "package_summary": "Aerostack2 behaviors collection for path planning", "package_details": "as2_behaviors_path_planning"},
{"url": "https://index.ros.org/p/as2_behaviors_perception", "package": "as2_behaviors_perception", "package_summary": "ArUco detector behavior", "package_details": "detect_aruco_markers_behavior"},
{"url": "https://index.ros.org/p/as2_behaviors_platform", "package": "as2_behaviors_platform", "package_summary": "Aerostack2 core package which contains launchers for the basic behaviors", "package_details": "as2_basic_behaviors"},
{"url": "https://index.ros.org/p/as2_behaviors_trajectory_generation", "package": "as2_behaviors_trajectory_generation", "package_summary": "Aerostack behaviors collection for trajectory generation", "package_details": "as2_behaviors_trajectory_generation"},
{"url": "https://index.ros.org/p/as2_core", "package": "as2_core", "package_summary": "Aerostack2 core package which contains the basic classes of the Aerostack2 framework", "package_details": "as2_core Core repository aerostack2 framework generating documentation run command: $AEROSTACK2_PATH/stack/core/as2_core doxygen doxygen.dox"},
{"url": "https://index.ros.org/p/as2_realsense_interface", "package": "as2_realsense_interface", "package_summary": "Intel Realsense cameras driver", "package_details": "realsense_interface"},
{"url": "https://index.ros.org/p/as2_motion_controller", "package": "as2_motion_controller", "package_summary": "AS2 Controller Package", "package_details": "controller_manager"},
{"url": "https://index.ros.org/p/as2_motion_reference_handlers", "package": "as2_motion_reference_handlers", "package_summary": "Motion handlers to ease the control of the UAVs inside the Aerostack2 framework", "package_details": "motion_reference_handlers"},
{"url": "https://index.ros.org/p/as2_msgs", "package": "as2_msgs", "package_summary": "Messages, services and action files for the AS2 stack", "package_details": "as2_msgs as2_msgs package set messages, services, actions Aerostack2 system"},
{"url": "https://index.ros.org/p/as2_python_api", "package": "as2_python_api", "package_summary": "AeroStack2 drone interface tool in python", "package_details": "as2_python_api AeroStack2 python interface. Index API ENUMERATIONS STATE YAW_MODE CONTROL_MODE REFERENCE_FRAME API Method Input Output Description str get_drone_id() drone namespace bool, bool, bool, STATE, YAW_MODE, CONTROL_MODE, REFERENCE_FRAME get_info() drone info {connected, armed, offboard, state, yaw_mode, control_mode, reference_frame} float, float, float get_position() float, float, float orientation() roll, pitch, yaw float, float, float get_gps_pose() lat, lon ,alt takeoff(float, float) heigth, speed follow_path([ float, float, float float) speed follow_gps_path([ float, float, float float) lat, lon, alt speed land() go_to() ENUMERATIONS STATE Field Description EMERGENCY DISARMED LANDED TAKING_OFF FLYING LANDING YAW_MODE Field Description YAW_ANGLE YAW_SPEED CONTROL_MODE Field Description UNSET mode vehicle set POSITION_MODE refs SPEED_MODE refs SPEED_IN_A_PLANE refs ACCEL_MODE refs ATTITUDE_MODE quaternions Thrust ACRO_MODE speed Thrust REFERENCE_FRAME Field Description LOCAL_ENU_FRAME Local coordinates BODY_FLU_FRAME Body coordinates GLOBAL_ENU_FRAME GPS coordinates"},
{"url": "https://index.ros.org/p/as2_gazebo_assets", "package": "as2_gazebo_assets", "package_summary": "Ignition Gazebo resources", "package_details": "as2_gazebo_assets Colletion Gazebo assets launching scripts. Tested Gazebo Fortress. installed. Gazebo naming changed ROS2 Galactic ROS2 Humble releases (Gazeno era). as2_gazebo_assets package version ROS2 version. INDEX INDEX RESOURCES DRONE MODELS SENSOR MODELS WORLD MODELS RUN: Basic usage OPTIONS CONFIG FILE EXAMPLES RESOURCES distinguish kinds reources: drone, sensor world models. DRONE MODELS Drone model list. SDF Status Image *quadroto_base* FLYING ![](docs/imgs/quadrotor_base.png) *hexrotor_base* FLYING ![](docs/imgs/hexrotor_base.png) *crazyflie* UNSTABLE FLYING ![](docs/imgs/crazyflie.png) SENSOR MODELS Sensor model list. SDF Description Plugin *imu* SDF**: Alreay included drone models. IMU sensor reports vertical position, angular velocity linear acceleration readings. ignition::gazebo::systems::Imu *air_pressure* Air pressure sensor reports vertical position velocity readings. ignition::gazebo::systems::AirPressure *magnetometer* Magnetometer sensor reports magnetic field current location. ignition::gazebo::systems::Magnetometer *hd_camera* RGB Camera resolution. *vga_camera* RGB Camera resolution. *semantic_camera* RGB Camera resolution semantic segmentation data. *rgbd_camera* RGBD Camera resolution meters depth sensing. *point_lidar* Single point lidar meter range. *planar_lidar* Planar scanning two-dimension lidar meter range. *3d_lidar* Three-dimensional scan meter range. *gps* Navigation satellite sensor reports position velocity spherical coordinates (latitude longitude). ignition::gazebo::systems::NavSat *suction_gripper* Light weight suction gripper. mbzirc::SuctionGripperPlugin WORLD MODELS World model list. SDF Description Image *empty* Empty world ground. ![](docs/imgs/empty.png) *test_gripper* Empty world small objects test gripper. ![](docs/imgs/test_gripper.png) *empty_gps* Empty world ground gps enabled ![](docs/imgs/empty.png) RUN: Basic usage Previously setting environment, simply run: ros2 launch as2_gazebo_assets launch_simulation.py config_file:=<config-file> run ign gazebo server, spawn models config file open ign gazebo client (GUI). OPTIONS config_file: Launch config file (JSON YAML format). gui_config_file: GUI config file. (default: use_sim_time: Deactivates clock bridge object publishes sys clock time. Valid choices [\u2018true\u2019, \u2018false\u2019] (default: \u2018true\u2019) headless: Launch headless mode ign server). Valid choices [\u2018true\u2019, \u2018false\u2019] (default: \u2018false\u2019) verbose: Launch verbose mode. Valid choices [\u2018true\u2019, \u2018false\u2019] (default: \u2018false\u2019) run_on_start: Run simulation start. Valid choices [\u2018true\u2019, \u2018false\u2019] (default: \u2018true\u2019) File truncated lines full file"},
{"url": "https://index.ros.org/p/as2_state_estimator", "package": "as2_state_estimator", "package_summary": "Basic state estimator for AeroStack2", "package_details": "as2_state_estimator State Estimator"},
{"url": "https://index.ros.org/p/as2_alphanumeric_viewer", "package": "as2_alphanumeric_viewer", "package_summary": "Alphanumeric Viewer", "package_details": "alphanumeric_viewer Alphanumeric viewer Aerostack2"},
{"url": "https://index.ros.org/p/as2_external_object_to_tf", "package": "as2_external_object_to_tf", "package_summary": "Adds external objects pose to tf", "package_details": "as2_external_object_to_tf node add external object tree Aerostack2. data sources add object tree. PoseStamped topic NavSatFix topic Azimuth topic Static transform: transform data defined configuration file, services configuration file defines adding object tree: YAML objects: type: pose parent_frame: earth frame: object_0 pose_topic: \"/object_0/pose\" type: gps parent_frame: earth frame: object_1 gps_topic: \"/object_1/sensor_measurements/gps\" azimuth_topic: \"/object_1/gps/azimuth\" type: gps_static parent_frame: earth frame: object_2 gps_pose: lat: lon: alt: orientation: azimuth: bank: elevation: type: pose_static frame: object_3 pose: position: orientation: type: mocap rigid_bodies: rigid_body: gate_0 frame: object_0 rigid_body: gate_1 frame: object_0 Aditionally, static transformations added tree services, defined pose gps data."},
{"url": "https://index.ros.org/p/as2_geozones", "package": "as2_geozones", "package_summary": "Geozones for AeroStack2", "package_details": "Geozones Geozones node Aerostack2. Params: config_file: Polygons define geofences defined (IMPORTANT) Remember order points defines polygon built, means point conected point point connected point. Config file parameters: (int): geozone alert (int): generated alert type (string): geofence geocage. Geofence generate alert entering area, geocage generate alert exiting area. data_type (string): gps cartesian. polygon (list(2DPoint)): List points forms polygon. Order matters. z_up (float): limit, cartesian. z_down (float): limit, cartesian. config file (.yaml): geozones: alert: type: geofence data_type: gps polygon: z_up: z_down: alert: type: geocage data_type: cartesian polygon: z_up: z_down: debug_rviz: Wheter publish array Polygons rviz2 visualization Interfaces: Services: /set_geozone Set geoestructure message. /get_geozone list geoestructures Published topics: /alert_event Publish defined alert message geoestructure event triggered."},
{"url": "https://index.ros.org/p/affordance_primitives", "package": "affordance_primitives", "package_summary": "Library for affordance motion primitives.", "package_details": "affordance_primitives Library affordance motion primitives."},
{"url": "https://index.ros.org/p/andino_apps", "package": "andino_apps", "package_summary": "Package for apps created with andino", "package_details": "Andino Apps package integration applications Andino robot. Applications Gazebo classic simulation Nav2 launch file running andino_gz_classic simulation Nav stack [turtlebot3world](https://github.com/ROBOTIS-GIT/turtlebot3_simulations/tree/master) world (_Apache license) default. ros2 launch andino_apps andino_simulation_navigation.launch.py visualize interact Andino robot RViz: Click pose estimate button select initial pose robot Click Nav2 Goal button select final point. robot start move selected goal. information examples check Nav2 tutorials. package tested Andino robot diff drive plugin Gazebo-classic. changing world file, change map file. navigation parameters tunning recommended."},
{"url": "https://index.ros.org/p/andino_base", "package": "andino_base", "package_summary": "The andino_base package", "package_details": "andino_base Description hardware-software-ros interaction andino project developed ROS Control. package: Implements andino\u2019s hardware interface. communication microcontroller: andino_base::MotorDriver class charge Serial communication commanding motors. application evaluating communication: Check applications/motor_driver_demo.cpp. application simply execute motor_driver_demo options. communication module hardware interface implementation. Hardware Interface ros2_control hardware system components libraries, dynamically loaded controller manager pluginlib interface. extra information hardware components Hardware Components. hardware interface accepts parameters passed urdf description ros2_control tag (Check andino_description) Params Description left_wheel_name left wheel joint. right_wheel_name wheel joint. serial_device Path serial device. baud_rate Baud rate serial communication. timeout Timeout communication. enc_ticks_per_rev Encoder ticks revolution wheel. State interfaces hardware interface implements state interfaces joint left joint): Position: position obtained encoder information microcontroller. Velocity: Velocity calculated encoder information microcontroller. Command interfaces hardware interface command interfaces joint left joint): Velocity: velocity received (rad/s) traduced microcontroller\u2019s velocity nomenclature motors. Motor Driver Application application testing connection microcontroller installing package application called motor_driver_demo motor_driver_demo application verifying communication microcontroller controlling motors. Commands reading encoders individually setting velocity motors possibilities. Extra Notes Serial communication: case serial port denied open, user added plugdev dialout groups: sudo usermod dialout $USER sudo usermod plugdev $USER"},
{"url": "https://index.ros.org/p/andino_bringup", "package": "andino_bringup", "package_summary": "Contains launch files to bring up andinobot robot.", "package_details": "andino_bringup Description package launch files order launch related driver nodes real robot. configuration files added set nodes launched \u2018config\u2019 folder. Launch Files Main file main launch file andino_robot.launch.py file. file executes nodes Andino Robot work. includes: andino_description.launch.py: file load model robot URDF. andino_control.launch.py: file ros2_control nodes drivers. camera.launch.py: file execute camera drivers, v4l2_camera package. disabled include_camera parameter. rplidar.launch.py: file execute drivers LiDAR attached robot. disabled include_rplidar parameter. launch files included launch files included case command robot ways, visualize information: rosbag_record.launch.py: executes ros2 bag record command store \u2018.bag\u2019 file topics. topics record rviz.launch.py: executes RViz visualization tool \u2018andino.rviz\u2019 configuration default, able visualize model robot information topics. teleop_joystick.launch.py: file command robot controller joystick, teleop_twist_joy joy_linux packages. teleop_keyboard.launch.py: file command robot keyboard, teleop_twist_keyboard package."},
{"url": "https://index.ros.org/p/andino_control", "package": "andino_control", "package_summary": "The andino_control package", "package_details": "andino_control Description ROS Control controlling robot interface ROS framework. diagram describes parts system controls robot ROS control tools. flowchart COLORS classDef blue fill:#2374f7,stroke:#000,stroke-width:2px,color:#fff classDef red fill:#ed2633,stroke:#000,stroke-width:2px,color:#fff classDef green fill:#16b522,stroke:#000,stroke-width:2px,color:#fff classDef orange fill:#fc822b,stroke:#000,stroke-width:2px,color:#fff DIAGRAM A(Diff Drive Controller):::blue ---|encoder read/velocity interface| B(Hardware Interface):::green C(Joint State Broadcaster):::blue ---|encoder read| B(Hardware Interface) M(Controller Manager):::orange -..->|manages lifecycle| M(Controller Manager) |manages lifecycle| M(Controller Manager) |activates component| D[\"/cmd_vel\"] -->|subs| -->|pubs| O[\"/odom\"] -->|pubs| T[\"/tf\"] -->|pubs| J[\"/joint_states\"] linkStyle default stroke:red linkStyle stroke-width:4px,stroke:green linkStyle stroke-width:4px,stroke:green linkStyle stroke:blue Hardware Interface hardware interface component robot implemented andino_base package. charge providing state command interfaces claimed controllers. Controller Manager Controller Manager charge managing lifecycle controllers, access hardware interfaces offers services ROS-world. hardware interface activated controller_manager node activated robot description passed ROS Parameter. tag <ros2_control> expected present robot description information hardware components activated state command interfaces. andino_control.urdf.xacro. ROS Controllers controllers ros2_controllers: diff_drive_controller: Controller mobile robots differential drive. Input control robot body velocity commands translated wheel commands differential drive base. Odometry computed hardware feedback published. state interfaces: left wheel velocity wheel velocity left wheel position wheel position command interfaces left wheel velocity wheel velocity joint_state_broadcaster: broadcaster reads state interfaces reports /joint_states /dynamic_joint_states. state interfaces: left wheel position wheel position controller accepts ROS parameters andino_controllers.yaml."},
{"url": "https://index.ros.org/p/andino_description", "package": "andino_description", "package_summary": "The andino_description package", "package_details": "andino_description Description package holds urdf description robot. urdf folder URDF files description robot, divided modules merged andino.urdf.xacro file. Configuration case change physical properties components robot, modifying default YAML files config/andino folder. add configuration files directory config folder, pass directory main file yaml_config_dir xacro argument launch files. Launch Files launching robot state publisher filling static information serving description robot. Typically robot bringup. ros2 launch andino_description andino_description.launch.py launching robot state publisher providing visualization rviz analyze robot description. ros2 launch andino_description view_andino.launch.py"},
{"url": "https://index.ros.org/p/andino_firmware", "package": "andino_firmware", "package_summary": "The andino_firmware package", "package_details": "andino_firmware Firmware code run arduino microcontroller proper control motors robot. Connection Check encoder_driver.h motor_driver.h files check expected pins connection. Installation Arduino Arduino IDE, tools->Manage Libraries install: \u201cAdafruit BNO055\u201d Verify Upload andino_firmware.ino arduino board. PlatformIO Install dependencies sudo apt-get install python3.10-venv Install platformio curl -fsSL /tmp/get-platformio.py https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py python3 /tmp/get-platformio.py Add platformio $PATH: echo \"PATH=\\\"\\$PATH:\\$HOME/.platformio/penv/bin\\\"\" $HOME/.bashrc source $HOME/.bashrc Build upload firmware you\u2019re arduino uno pio run --target upload uno you\u2019re arduino nano pio run --target upload nanoatmega328 Description serial connection baud) interact microcontroller. interface commands.h file. commands: encoder values: 'e' Set open-loop speed motors[pwm] <left> <right>' move full speed: Range Set closed-loop speed motors[ticks/sec] <left> <right>' Important!: Test section. Set PID values: <offset>' Note: Remember carriage return character message. Test serial port connection created bauds. serial monitor Arduino IDE Open loop verification: Send full speed Send stop Read encoders Send encoders values. ticks revolution motor. set encoders (reeboting rotate motors revs want,(say divide encoder ticks number revs. ticks revolution. Save calibration control loop. Closed loop verification Send <tps> <tps> tps stands ticks motor-encoder system ticks revolution sending rotate motors rev sec. (~3.14rad/sec)"},
{"url": "https://index.ros.org/p/andino_gz_classic", "package": "andino_gz_classic", "package_summary": "Launch Gazebo simulation with Andino", "package_details": "Gazebo Classic simulation Andino robot Build Install package dependencies: rosdep install --from-paths src Build package: colcon build Note: --symlink-install added needed. Finally, source install folder install/setup.bash Note: gazebo needed sourced /usr/share/gazebo/setup.bash Usage package option executed. Andino simulation Gazebo diff drive plugin ros2 launch andino_gz_classic andino_one_robot.launch.py initial_pose_x:=3.0 launch file supports launch arguments: use_sim_time parameter rviz work simulation time. (default: \u2018true\u2019) rviz parameter decide run rviz launch. False view rviz computer. (default: \u2018true\u2019) world SDF file world andino run. Note world gazebo paths.(default: \u2018empty_world.world\u2019) Finally, parameters spawn andino robot put robot specific position information parameters child launch files write: ros2 launch andino_gz_classic andino_one_robot.launch.py Andino simulation Gazebo ros2 control plugin ros2 launch andino_gz_classic andino_one_robot.launch.py use_gazebo_ros_control:=true Considerations note twist topic diff_controller/cmd_vel_unstamped. twist topic frequency action validity timeout. Spawn Andino robot ros2 launch andino_gz_classic spawn_robot.launch.py initial_pose_x:=3.0 entity:=andino robot_description_topic:=/andino/robot_description parameters launch put robot place simulation. use_sim_time: simulation (Gazebo) clock true. (default: \u2018true\u2019) initial_pose_x: Initial pose andino simulation. (default: initial_pose_y: Initial pose andino simulation. (default: initial_pose_z: Initial pose andino simulation. (default: robot_description_topic: robot description topic. (default: \u2018/robot_description\u2019) initial_pose_yaw: Initial yaw pose andino simulation. (default: use_gazebo_ros_control: True gazebo_ros_control plugin. (default: \u2018false\u2019) entity: robot. (default: \u2018andino\u2019) rsp_frequency: robot state publisher frequency. (default: Spawn multiple andino robots issues, namespace created."},
{"url": "https://index.ros.org/p/andino_hardware", "package": "andino_hardware", "package_summary": "The andino_hardware package", "package_details": "andino_hardware package aims provide information correct assembly robot. Bill Materials Number Module Part Links Comments SBC Raspberry PiShop, TiendaTec performance buy model Chassis Print Chassis Rubber Tyre Wheels Chassis, Wheels Sparkfun Motors Motor Encoder Sparkfun Microcontroller Arduino Nano Amazon Arduino Uno, mind size. include microUSB USB cable. purchase Motor Driver Dual Bridge Amazon Laser Scanner RPLidar RobotShop, Amazon microUSB-USB cable included, purchase Camera Raspi Camera Module Robotshop, Amazon, Longer cable link longer cable included, case included camera short. Electrical Power Supply Powerbank Amazon powerbank suitable: Mind size weight output current(>=2A) Power Step boost converter Amazon Europe motors support higher voltage step-up(e.g: added powerbank motor driver. Screw clockwise reduce output voltage. Fixing Mount bolts/fasteners Spacers bolts/fasteners SBC Mercado Libre, Amazon, Spacers replace default spacers LiDAR spacers printed parts Camera Mount models parts fixing Raspi Cam front robot Caster wheel Caster wheel Amazon Card Card Apokin, Amazon Card host Raspberry (Optional) Plastic seals longer fix powerbank upper chassis, shorter wires. don\u2019t method fix powerbank wires gather parts, (NOTE: printed encoder wheels longer motors equipped embedded encoder): Tooling Number Tool Links Comments Set screwdrivers Amazon flat star screwdrivers Silicon Pistol Amazon pistol include silicon bars won\u2019t purchase separately Assembly Process Screw Motor Driver idler wheel chassis. front image caster wheel mounted chassis: Screw printed parts Raspi Camera Module: Add Arduino Nano part chassis. Screw Raspberry DC-DC converter front part chassis: Fix powerbank upper part chassis: Add RPLidar front upper part chassis: Add IMU (WIP) Perform wiring Connections Diagram upper chassis. Note connections soldering cables. Join chassis complete remaining wiring robot ready: Connection Diagram Motor-Arduino frequent errors: motors rotates direction orientation motors chassis) output(+ L298N\u2019s output toggled. moving encoder values increase moving decrease. happening encoder signals toggled. Raspberry-Power *NOTE: depending power bank maximum output current, motors powered voltage higher voltage leads smoother operation motor speed control), increases open-loop speed, noticeable motion start varies power bank quality (output current capabilities). adjusting output voltage values required motors work expected. **NOTE: Ensure ribbon cable properly connected blue silver side facing USB ports. Microcontroller Configuration uploading microcontroller firmware refer andino_firmware package. Single Board Computer (SBC) SBC project Raspberry guidelines refer family on-board computers, extending families File truncated lines full file"},
{"url": "https://index.ros.org/p/andino_navigation", "package": "andino_navigation", "package_summary": "Bring up nav2 package with Andino.", "package_details": "Andino Navigation rely Nav2 stack order navigate Andino. Usage Prerequisites Run mobility stack real Andino robot simulated Real robot ros2 launch andino_bringup andino_robot.launch.py Gazebo Classic ros2 launch andino_gz_classic andino_one_robot.launch.py Provide recorded map. Refer andino_slam learn record map Andino. Run Nav Stack ros2 launch andino_navigation bringup.launch.py map:=<path-to-my-map-yaml-file> default, config file custom param file ros2 launch andino_navigation bringup.launch.py map:=<path-to-my-map-yaml-file> params_file:=<path-to-my-param-file>"},
{"url": "https://index.ros.org/p/andino_slam", "package": "andino_slam", "package_summary": "The andino_slam package", "package_details": "andino_slam Description achieving SLAM rely great slam_toolbox package. Usage robot bring simply execute launch file. ros2 launch andino_slam slam_toolbox_online_async.launch.py configuration forwarded slam_toolbox_node. default, configuration parameters obtained config/slam_toolbox_only_async.yaml. case custom file wanted passed, simply launch file argument indicating path file. ros2 launch andino_slam slam_toolbox_online_async.launch.py slams_param_file:=<my_path> saving map map_saver_cli node Nav2. ros2 run nav2_map_server map_saver_cli <my-map-name> modify threshold free space occupied space --free --occ arguments. ros2 run nav2_map_server map_saver_cli --free <my-map-name> information https://navigation.ros.org/configuration/packages/configuring-map-server.html https://github.com/ros-planning/navigation2/tree/main/nav2_map_server map saved, navigate andino_navigation learn"},
{"url": "https://index.ros.org/p/as2_platform_crazyflie", "package": "as2_platform_crazyflie", "package_summary": "Package to communicate Crazyflie drones with Aerostack2 framework", "package_details": "crazyflie_platform Crazyflie platform interface. crazyflie_cpp main library control communicate crazyflie drone. Check Crazyflie.h idea main functions. avaliable GitHub: https://github.com/whoenig/crazyflie_cpp/tree/master examples library https://github.com/whoenig/crazyflie_tools TODO Add Attitude control mode. thrust uint16_t type information range full range, explained issue Info Run debug mode information drone connection. connected Crazyflie Radio connect drone. project_crazyflie application python interface."},
{"url": "https://index.ros.org/p/as2_platform_dji_osdk", "package": "as2_platform_dji_osdk", "package_summary": "Package to communicate DJI OSDK with Aerostack2 framework", "package_details": "dji_matrice_platform"},
{"url": "https://index.ros.org/p/as2_platform_dji_psdk", "package": "as2_platform_dji_psdk", "package_summary": "AS2 DJI PSDK aerial platform", "package_details": "as2_platform_dji_psdk Aerostack2 DJI PSDK platform package. Dependencies Follow psdk_ros2 installation guide API documentation, Doxygen. documentation files built locally: Install doxygen: sudo apt install doxygen Run doxygen root folder as2_platform_dji_psdk/ doxygen Doxyfile Open documentation opening as2_platform_dji_psdk/doxygen/html/index.html Building package root folder workspace run: colcon build --packages-select as2_platform_dji_psdk Running colcon test Run colcon test colcon test --packages-select as2_platform_dji_psdk Optional, add verbosity --event-handlers console_direct+ References Fernandez-Cortizas, Molina, Arias-Perez, Perez-Segui, Perez-Saura, Campoy, \u201cAerostack2: software framework developing multi-robot aerial systems\u201d, ArXiv DOI"},
{"url": "https://index.ros.org/p/as2_platform_mavlink", "package": "as2_platform_mavlink", "package_summary": "Package to communicate Mavlink based drones with Aerostack2 framework", "package_details": "as2_platform_mavlink Aerostack2 Aerial platform autopilots MAVLINK communication standard Setup guides MAVROS ROS INDEX. Setup sudo apt install ros--mavros ros--mavros-extras required install geographic_lib_datasets wget https://raw.githubusercontent.com/mavlink/mavros/ros2/mavros/scripts/install_geographiclib_datasets.sh chmod install_geographiclib_datasets.sh ./install_geographiclib_datasets.sh"},
{"url": "https://index.ros.org/p/as2_platform_pixhawk", "package": "as2_platform_pixhawk", "package_summary": "Package to communicate PX4 based drones with Aerostack2 framework", "package_details": "as2_platform_pixhawk Aerostack2 Aerial platform autopilot complete installation guide follow instructions Multiple Operation modes: Msgs: Availables: /fmu/in/obstacle_distance /fmu/in/offboard_control_mode /fmu/in/onboard_computer_status /fmu/in/sensor_optical_flow /fmu/in/telemetry_status /fmu/in/trajectory_setpoint /fmu/in/vehicle_attitude_setpoint /fmu/in/vehicle_command /fmu/in/vehicle_mocap_odometry /fmu/in/vehicle_rates_setpoint /fmu/in/vehicle_trajectory_bezier /fmu/in/vehicle_trajectory_waypoint /fmu/in/vehicle_visual_odometry /fmu/out/failsafe_flags /fmu/out/sensor_combined /fmu/out/timesync_status /fmu/out/vehicle_attitude /fmu/out/vehicle_control_mode /fmu/out/vehicle_global_position /fmu/out/vehicle_gps_position /fmu/out/vehicle_local_position /fmu/out/vehicle_odometry /fmu/out/vehicle_status IMU: /fmu/out/sensor_combined Set Control Mode: /fmu/out/vehicle_control_mode GPS: /fmu/out/vehicle_gps_position position: /fmu/out/vehicle_odometry Set control Mode: /fmu/in/offboard_control_mode Set trajectory reference: /fmu/in/trajectory_setpoint Set attitude reference: /fmu/in/vehicle_attitude_setpoint Set rate reference: /fmu/in/vehicle_rates_setpoint Send vehicle command arm: /fmu/in/vehicle_command Send vehicle visual odometry: /fmu/in/vehicle_visual_odometry Availables: battery status: \u201c/fmu/out/battery_status\u201d Kill switch: fmu/in/manual_control_switches /fmu/in/obstacle_distance /fmu/in/onboard_computer_status /fmu/in/sensor_optical_flow /fmu/in/telemetry_status /fmu/in/vehicle_mocap_odometry /fmu/in/vehicle_trajectory_bezier /fmu/in/vehicle_trajectory_waypoint /fmu/out/failsafe_flags /fmu/out/timesync_status /fmu/out/vehicle_attitude /fmu/out/vehicle_control_mode /fmu/out/vehicle_global_position /fmu/out/vehicle_local_position /fmu/out/vehicle_status"},
{"url": "https://index.ros.org/p/as2_platform_tello", "package": "as2_platform_tello", "package_summary": "Package to communicate DJI Tello drones with Aerostack2 framework", "package_details": "tello_platform DJI Tello platform interface. repository includes functions communicate Tello DJI drone create link aerostack2 framework. package developed ROS2. tello_connection part, main classes connection robot platform. Check tello.hpp socketudp.hpp include folder. tested separately clientudp.cpp. case, compile /tello_connection/CMakeLists.txt Create folder move mkdir build build Create compilation files: cmake compilation: test tello_connection clientudp.cpp, tests, test tested separately framework. tello_platform main section. Check include/tello_platform.hpp library main class methods attributes stated. hand, src/tello_platform.cpp coded."},
{"url": "https://index.ros.org/p/autoware_adapi_adaptors", "package": "autoware_adapi_adaptors", "package_summary": "The adapi_adaptors package", "package_details": "adapi_adaptors initial_pose_adaptor node easy localization API RViz. initial pose topic received, call localization initialize API. node depends map height fitter library. details. Interface Local Global Description Subscription initialpose /initialpose pose localization initialization. Client /api/localization/initialize localization initialize API. routing_adaptor node easy routing API RViz. goal pose topic received, reset waypoints call API. waypoint pose topic received, append waypoints call API. clear API called automatically setting route. Interface Local Global Description Subscription /api/routing/state state routing API. Subscription ~/input/fixed_goal /planning/mission_planning/goal goal pose route. Disable goal modification. Subscription ~/input/rough_goal /rviz/routing/rough_goal goal pose route. Enable goal modification. Subscription ~/input/reroute /rviz/routing/reroute goal pose reroute. Subscription ~/input/waypoint /planning/mission_planning/checkpoint waypoint pose route. Client /api/routing/clear_route route clear API. Client /api/routing/set_route_points route points set API. Client /api/routing/change_route_points route points change API. parameters json_to_markdown(\u201csystem/autoware_default_adapi_helpers/adapi_adaptors/schema/adapi_adaptors.schema.json\u201d)"},
{"url": "https://index.ros.org/p/autoware_adapi_specs", "package": "autoware_adapi_specs", "package_summary": "The autoware_adapi_specs package", "package_details": "autoware_adapi_specs package specification Autoware API."},
{"url": "https://index.ros.org/p/autoware_core_api", "package": "autoware_core_api", "package_summary": "The autoware_core_api package", "package_details": "Autoware Core API Overview autoware_core_api meta-package Autoware project core Autonomous Driving API functionality. package serves central integration point API components, including default API implementation adaptors visualization external interfaces. Usage autoware_core_api package launched command: ros2 launch autoware_core_api autoware_core_api.launch.xml"},
{"url": "https://index.ros.org/p/autoware_default_adapi", "package": "autoware_default_adapi", "package_summary": "The autoware_default_adapi package", "package_details": "autoware_default_adapi Notes Components relay services executed Multi-Threaded Executor. Features package default implementation API. interface localization routing Interface Autoware API"},
{"url": "https://index.ros.org/p/autoware_core", "package": "autoware_core", "package_summary": "The autoware_core package", "package_details": "autoware_core"},
{"url": "https://index.ros.org/p/autoware_component_interface_specs", "package": "autoware_component_interface_specs", "package_summary": "The autoware_component_interface_specs package", "package_details": "autoware_component_interface_specs package defines standardized component interface specifications Autoware Core, ensuring consistent communication interaction components Autoware autonomous driving stack. Purpose purpose package Provide single source truth component interface definitions Ensure consistency implementations Facilitate modular development component interchangeability Document communication protocols Autoware Core components Structure package interface specifications components, including: Message definitions Service interfaces Action interfaces Usage interface specifications component: Add package dependency package.xml: <depend>autoware_component_interface_specs</depend> interfaces component code. #include <autoware/component_interface_specs/localization.hpp> Creating publisher interface specs KinematicState autoware::component_interface_specs::localization::KinematicState; rclcpp::Publisher<KinematicState::Message>::SharedPtr publisher_ create_publisher<KinematicState::Message>( KinematicState::name, autoware::component_interface_specs::get_qos<KinematicState>()); Creating subscription interface specs auto subscriber_ create_subscription<KinematicState::Message>( KinematicState::name, autoware::component_interface_specs::get_qos<KinematicState>(), std::bind(&YourClass::callback, std::placeholders::1));"},
{"url": "https://index.ros.org/p/autoware_geography_utils", "package": "autoware_geography_utils", "package_summary": "The autoware_geography_utils package", "package_details": "autoware_geography_utils Purpose package geography-related utility functions Autoware packages. functionality geographic coordinate transformations, height calculations, Lanelet2 map projections."},
{"url": "https://index.ros.org/p/autoware_interpolation", "package": "autoware_interpolation", "package_summary": "The spline interpolation package", "package_details": "Interpolation package package supplies linear spline interpolation functions. Linear Interpolation lerp(src_val, dst_val, ratio) scalar interpolation) interpolates src_val dst_val ratio. replaced std::lerp(src_val, dst_val, ratio) lerp(base_keys, base_values, query_keys) vector interpolation) applies linear regression continuous points values arebase_keys values base_values. calculates interpolated values y-axis query_keys x-axis. Spline Interpolation spline(base_keys, base_values, query_keys) vector interpolation) applies spline regression continuous points values arebase_keys values base_values. calculates interpolated values y-axis query_keys x-axis. Evaluation calculation cost evaluated calculation cost spline interpolation points, adopted tridiagonal matrix algorithm. Methods tridiagonal matrix algorithm exists spline_interpolation package, removed Autoware. Method Calculation time Tridiagonal Matrix Algorithm Preconditioned Conjugate Gradient Successive Over-Relaxation Spline Interpolation Algorithm Assuming size base_keys base_values aim calculate spline interpolation equation interpolate \\[Y_i(x) \\dots, Constraints spline interpolation number constraints equal number variables spline interpolation. \\[\\begin{align} \\dots, \\dots, '(x_{i+1}) Y_{i+1}' \\dots, (x_{i+1})'' Y_{i+1}'' \\dots, ''(x_0) Y_{N-1}'' \\end{align}\\] article, spline interpolation formulated linear equation. \\[\\begin{align} \\begin{pmatrix} \\ddots \\end{pmatrix} \\begin{pmatrix} \\vdots \\end{pmatrix}= \\begin{pmatrix} \\vdots \\end{pmatrix} \\end{align}\\] \\[\\begin{align} \\dots, \\left(\\frac{y_{i+1} y_{i+1}}{h_i} \\frac{y_i y_{i-1}}{h_{i-1}}\\right) \\dots, \\end{align}\\] coefficient matrix linear equation tridiagonal matrix. solve tridiagonal matrix algorithm, solve linear equations gradient descent methods. Solving linear equation tridiagonal matrix algorithm, calculate coefficients spline interpolation \\[\\begin{align} \\frac{v_{i+1} \\dots, \\frac{v_i}{2} \\dots, \\frac{y_{i+1} y_i}{x_{i+1} \\frac{1}{6}(x_{i+1} \\dots, \\dots, \\end{align}\\] Tridiagonal Matrix Algorithm solve tridiagonal linear equation article variables linear equation expressed implementation. \\begin{align} \\begin{pmatrix} File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_kalman_filter", "package": "autoware_kalman_filter", "package_summary": "The kalman filter package", "package_details": "kalman_filter Overview package kalman filter time delay calculation kalman filter. Design Kalman filter recursive algorithm estimate state dynamic system. Time Delay Kalman filter based standard Kalman filter takes account time delays measured values. Standard Kalman Filter System Model Assume system represented linear discrete model: state vector time control input vector time measurement vector time state transition matrix. control input matrix. measurement matrix. Prediction Step prediction step consists updating state covariance matrices: \\[x_{k|k-1} x_{k-1|k-1} P_{k|k-1} P_{k-1|k-1} priori state estimate. priori covariance matrix. Update Step measurement received, update steps P_{k|k-1} P_{k|k-1} x_{k|k} x_{k|k-1} x_{k|k-1}) P_{k|k} P_{k|k-1}\\] Kalman gain. posterior state estimate. posterior covariance matrix. Extension Time Delay Kalman Filter Time Delay Kalman filter, assumed maximum delay step measured handle delay, extend state vector \\[(x_{k})_e \\begin{bmatrix} \\vdots x_{k-d+1} \\end{bmatrix}\\] state transition matrix process noise covariance matrix expanded: \\begin{bmatrix} \\cdots \\cdots \\cdots \\vdots \\vdots \\vdots \\ddots \\vdots \\cdots \\end{bmatrix}, \\quad \\begin{bmatrix} \\cdots \\cdots \\cdots \\vdots \\vdots \\vdots \\ddots \\vdots \\cdots \\end{bmatrix}\\] Prediction Step prediction step consists updating extended state covariance matrices. Update extension status: (x_{k|k-1})_e \\begin{bmatrix} File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_lanelet2_utils", "package": "autoware_lanelet2_utils", "package_summary": "The autoware_lanelet2_utils package", "package_details": "autoware_lanelet2_utils Nomenclature package aims strictly define meaning words clarify documentation API\u2019s scope. table codespace words specific meanings API API description. italic words emphasized refers social common sense ambiguity. disambiguate meaning, illustration \u201cLanelet\u201d refers entity alanelet::ConstLanelet object order distinguish word \u201clane\u201d social customs. stands Lanelets objects. Word Meaning Illustration driving vehicle position belongs designated Lanelet. map, green Lanelet driving lanes vehicle.Open boundary,entry,exit boundary Lanelet refers left Linestring. Open adjacent adjacent share common boundary direction left side. map, orange Lanelet adjacent green Lanelet.Open same_direction Lanelet Lanelet same_direction indirectly adjacent map, orange Lanelets same_direction green Lanelet.Open bundle bundle refers transitive closure set Lanelets same_direction enclosed sets Lanelets bundles.Open share common boundary direction. map, green Lanelet orange Lanelet other.In map, red Lanelets relation share common LineString.Open opposite_direction opposite_direction, bundle map, green Lanelet orange Lanelet opposite_direction bundles(enclosed dotted line) relation.Open connected connected to(from) exit(entry) identical entry(exit) connected connected A.Open Lanelets list Lanelets connected. map, orange Lanelets green Lanelet.Open previous previous Lanelets list Lanelets connected. map, orange Lanelets previous green Lanelet. Open conflicting conflicting geometrically intersecting. merging merging Lanelet conflicting connected common Lanelet. map, orange Lanelet merging Lanelet orange Lanelet.Open sibling designated Lanelets referred sibling connected common Lanelet. map, orange Lanelets siblings.Open oncoming TBD TBD upcoming TBD TBD sequence sequence list Lanelets element connected adjacent previous element. Open current_route_lanelet current_route_lanelet lanelet route serves reference ego position. API description <autoware/lanelet2_utils/conversion.hpp> function description average computational complexity illustration load_mgrs_coordinate_map(path, centerline_resolution) Instantiate LaneletMap object path .osm file. sets dense centerline(at interval centerline_resolution) default Lanelet2 library, improve Planning accuracy. instantiate_routing_graph_and_traffic_rules function creates RoutingGraph TrafficRules object \u201croad\u201d lanes Vehicle participant, means \u201croad_shoulder\u201d,\u201dbicycle_lane\u201d, \u201ccrosswalk\u201d, Lanelets inaccessible left/right adjacency. <ul><li>from_autoware_map_msgs(...)</li><li>to_autoware_map_msgs(...)</li></ul> Convert LaneletMap object from/to autoware_mapping_msgs::LaneletMapBin message <ul><li>from_ros(...)</li><li>to_ros(...)</li></ul> Convert lanelet point (lanelet::BasicPoint3d lanelet::ConstPoint3d) from/to geometry_msgs::msg::Point geometry_msgs::msg::Pose create_safe_linestring Construct LineString vector lanelet points (BasicLineString3d BasicPoint3d ConstLineString3d ConstPoint3d) create_safe_lanelet Construct ConstLanelet vectors lanelet points (left BasicPoint3d ConstPoint3d <autoware/lanelet2_utils/kind.hpp> function description average computational complexity illustration is_road_lane function returns true input Lanelet road subtype. is_shoulder_lane function returns true input Lanelet road_shoulder subtype. is_bicycle_lane function returns true input Lanelet bicycle_lane subtype. <autoware/lanelet2_utils/hatched_road_markings.hpp> function description average computational complexity illustration get_adjacent_hatched_road_markings Returns polygons type hatched_road_markings touch left/right bounds lanelet sequence. Polygons grouped side duplicates removed. number boundary vertices inspected <autoware/lanelet2_utils/topology.hpp> function description average computational complexity illustration left_opposite_lanelet right_opposite_lanelet $O(1)$see findUsage detail right_opposite_lanelet functions returns Lanelet input Lanelet returns null. $O(1)$see findUsage detail map, green Lanelet right_opposite_lanelet orange Lanelet.In map, right_opposite_lanelet orange Lanelet null.Open following_lanelets function returns Lanelets input Lanelet. order defined. number Lanelets input connected previous_lanelets function returns previous Lanelets input Lanelet. order defined. number Lanelets input connected sibling_lanelets function returns sibling Lanelets input Lanelet excluding order defined. number sibling Lanelets from_ids function returns Lanelet objects order input IDs. <autoware/lanelet2_utils/intersection.hpp> function description average computational complexity illustration is_intersection_lanelet function returns true input Lanelet turn_direction attribute. <ul><li>is_straight_lanelet</li><li>is_left_lanelet</li><li>is_right_lanelet</li></ul> function returns true input Lanelet turn_direction attribute straight/left/right. <autoware/lanelet2_utils/lane_sequence.hpp function description average computational complexity illustration class LaneSequence class internally holds lanelet::ConstLanelets consecutive routing graph. class invariance .as_lanelets() return Lanelets consecutive routing graph create(lanelets, routing_graph) Return optional LaneSequence class satisfies invariance .as_lanelets() Return underlying lanelet::ConstLanelets <autoware/lanelet2_utils/nn_search.hpp> function description average computational complexity illustration get_closest_lanelet(lanelets, pose) function retrieves lanelet smallest distance pose(if lanelet, distance) centerline closest orientation number input lanelets:warning: \u201cNative R-tree API\u201d LaneletRTree efficient get_closest_lanelet_within_constraint(lanelets, pose, dist_thresh, yaw_thresh) addition get_closest_lanelet, filters lanelets distance pose $\\leq$ dist_thresh yaw angle difference $\\leq$ yaw_thresh number input lanelets:warning: \u201cNative R-tree API\u201d LaneletRTree efficient get_road_lanelets_at(lanelet_map, Retrieve \u201croad\u201d Lanelets position R-tree get_shoulder_lanelets_at(lanelet_map, Retrieve \u201croad_shoulder\u201d Lanelets position R-tree class LaneletRTree class LaneletRTree constructs R-tree structure Lanelets efficient operations. .get_closest_lanelet(pose) Efficient version get_closest_lanelet R-tree .get_closest_lanelet_within_constraint(pose, dist_thresh, yaw_thresh) Efficient version get_closest_lanelet_within_constraint R-tree <autoware/lanelet2_utils/map_handler.hpp> function description average computational complexity illustration class MapHandler class MapHandler convenient functions related adjacency, VRU lanes, Planning. class invariance <ul><li>lanelet_map_ptr nullptr</li><li>routing_graph_ptr nullptr</li><li>traffic_rules_ptr nullptr</li></ul> MapHandler::create(...) factory function construct invariance <ul><li>.lanelet_map_ptr()</li><li>.routing_graph_ptr()</li><li>.traffic_rules_ptr()</li></ul> Getter functions File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_motion_utils", "package": "autoware_motion_utils", "package_summary": "The autoware_motion_utils package", "package_details": "Motion Utils package Definition terms Segment Segment Autoware line segment successive points nearest segment index nearest point index position prepare utility functions calculate nearest index points segments. Nearest index search section, nearest index nearest segment index search explained. functions nearest index search nearest segment index search. nearest index search, types functions. function finds nearest index distance yaw thresholds. template <class size_t findFirstNearestIndexWithSoftConstraints( const points, const geometry_msgs::msg::Pose pose, const double dist_threshold std::numeric_limits<double>::max(), const double yaw_threshold std::numeric_limits<double>::max()); function finds local solution thresholds. reason find local deal edge cases explained subsection. default parameters thresholds arguments decide thresholds pass function. distance yaw thresholds find nearest index distance yaw thresholds. find distance threshold. find thresholds. distance find nearest index distance threshold. find thresholds. thresholds Find nearest index. function finds nearest index lane lane_id. size_t findNearestIndexFromLaneId( const autoware_internal_planning_msgs::msg::PathWithLaneId path, const geometry_msgs::msg::Point pos, const int64_t lane_id); Application object node packages calculate nearest index objects. explain recommended method calculate Nearest index ego Assuming path length ego short expect find correct nearest index edge cases findFirstNearestIndexWithSoftConstraints distance yaw thresholds. Blue circles describes distance threshold base link position blue lines describe yaw threshold base link orientation. points cases, correct nearest point red implementation const size_t ego_nearest_idx findFirstNearestIndexWithSoftConstraints(points, ego_pose, ego_nearest_dist_threshold, ego_nearest_yaw_threshold); const size_t ego_nearest_seg_idx findFirstNearestIndexWithSoftConstraints(points, ego_pose, ego_nearest_dist_threshold, ego_nearest_yaw_threshold); Nearest index dynamic objects ego nearest index, orientation considered addition position ego supposed follow points. dynamic objects predicted object), orientation points order, dynamic object driving ego driving yaw threshold considered dynamic object. implementation const size_t dynamic_obj_nearest_idx findFirstNearestIndexWithSoftConstraints(points, dynamic_obj_pose, dynamic_obj_nearest_dist_threshold); const size_t dynamic_obj_nearest_seg_idx findFirstNearestIndexWithSoftConstraints(points, dynamic_obj_pose, dynamic_obj_nearest_dist_threshold); Nearest index traffic objects lanelet maps, traffic objects belong specific lane. specific lane\u2019s correct nearest index implementation extract `lane_id` traffic object belong const size_t traffic_obj_nearest_idx findNearestIndexFromLaneId(path_with_lane_id, traffic_obj_pos, lane_id); const size_t traffic_obj_nearest_seg_idx findNearestSegmentIndexFromLaneId(path_with_lane_id, traffic_obj_pos, lane_id); developers File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_node", "package": "autoware_node", "package_summary": "Autoware Node is an Autoware Core package designed to provide a base class for all nodes in the system.", "package_details": "Autoware Node Abbreviations Autoware Node Overview autoware_core package designed provide base class future nodes system. Usage Check autoware_test_node package autoware::Node."},
{"url": "https://index.ros.org/p/autoware_object_recognition_utils", "package": "autoware_object_recognition_utils", "package_summary": "The autoware_object_recognition_utils package", "package_details": "autoware_object_recognition_utils Overview package library common functions perception module planning module. Design Conversion Ensuring accurate efficient converting DetectedObject TrackedObject types. Geometry specialized implementations object type DetectedObject, TrackedObject, PredictedObject) extract pose information. Matching utility functions calculating geometrical metrics, IoU (Intersection Union), GIoU (Generalized IoU), Precision, Recall objects. helper functions computing areas intersections, unions, convex hulls polygon Object Classification Designed processing classifying detected objects, implements functionalities: Handling vehicle category checks Conversion string class names numerical labels Probability-based classification selection String representation object labels Predicted Path Utils Providing utility functions handling predicted paths objects. includes functionalities: calcInterpolatedPose: Calculates interpolated pose predicted path based time. resamplePredictedPath (version Resamples predicted path time vector, optionally spline interpolation smoother results. resamplePredictedPath (version Resamples predicted path regular time intervals, including terminal point, optional spline interpolation. Usage include all-in-one header files multiple functionalities needed: #include <autoware_object_recognition_utils/object_recognition_utils.hpp> include specific header files subset functionalities needed: #include <autoware_object_recognition_utils/object_classifier.hpp>"},
{"url": "https://index.ros.org/p/autoware_point_types", "package": "autoware_point_types", "package_summary": "The point types definition to use point_cloud_msg_wrapper", "package_details": "Autoware Point Types Overview package variety structures represent types point cloud data, point cloud processing analysis. Design Point cloud data type definition autoware_point_types defines multiple structures PointXYZI, PointXYZIRC, PointXYZIRADRT, PointXYZIRCAEDT), structure attributes adapt application scenarios. autoware::point_types::PointXYZI: Point type intensity information. autoware::point_types::PointXYZIRC: Extended PointXYZI, adds return_type channel information. autoware::point_types::PointXYZIRADRT: Extended PointXYZI, adds ring, azimuth, distance, return_type time_stamp information. autoware::point_types::PointXYZIRCAEDT: Similar PointXYZIRADRT, adds elevation information std::uint32_t data type time_stamp. Operator overload structure overloads operator, allowing users easily compare points equal, deduplication matching point cloud data. Field generators field generator implemented macro definitions std::tuple, simplifies serialization deserialization process point cloud messages improves reusability readability code. Registration mechanism Register custom point cloud structures PCL library macro POINT_CLOUD_REGISTER_POINT_STRUCT, structures integrated functions PCL library. Usage Create point cloud object PointXYZIRC type #include \"autoware/point_types/types.hpp\" int main(){ pcl::PointCloud<autoware::point_types::PointXYZIRC>::Ptr cloud(new pcl::PointCloud<autoware::point_types::PointXYZIRC>()); (int autoware::point_types::PointXYZIRC point; point.x static_cast<float>(i point.y static_cast<float>(i point.z static_cast<float>(i point.intensity static_cast<std::uint8_t>(i point.return_type autoware::point_types::ReturnType::SINGLE_STRONGEST; point.channel static_cast<std::uint16_t>(i); cloud->points.push_back(point); cloud->width cloud->points.size(); cloud->height return Convert ROS message point cloud PointXYZIRC type ExampleNode::points_callback(const PointCloud2::ConstSharedPtr points_msg_ptr) pcl::PointCloud<autoware::point_types::PointXYZIRC>::Ptr points_ptr( pcl::PointCloud<autoware::point_types::PointXYZIRC>); pcl::fromROSMsg(*points_msg_ptr, *points_ptr);"},
{"url": "https://index.ros.org/p/autoware_qos_utils", "package": "autoware_qos_utils", "package_summary": "Autoware QoS Utils provides QoS compatibility utilities for different ROS 2 distributions.", "package_details": "autoware_qos_utils Autoware QoS Utils QoS compatibility utilities ROS distributions. Overview package compatibility functions QoS (Quality Service) configuration ROS distributions, addressing API introduced ROS Jazzy. Features QoS Compatibility: unified QoS configuration functions work ROS distributions Service QoS: Compatible service QoS configuration ROS APIs Topic QoS: Compatible default topic QoS configuration Header-Only: Pure header-only library compilation overhead Usage Service QoS #include <autoware/qos_utils/qos_compatibility.hpp> Create service client compatible QoS auto client node->create_client<MyService>( \"my_service\", AUTOWARE_DEFAULT_SERVICES_QOS_PROFILE() Create service compatible QoS auto service node->create_service<MyService>( \"my_service\", callback, AUTOWARE_DEFAULT_SERVICES_QOS_PROFILE() Topic QoS #include <autoware/qos_utils/qos_compatibility.hpp> Create publisher compatible QoS auto publisher node->create_publisher<MyMessage>( \"my_topic\", AUTOWARE_DEFAULT_TOPIC_QOS_PROFILE() Create subscription compatible QoS auto subscription node->create_subscription<MyMessage>( \"my_topic\", callback, AUTOWARE_DEFAULT_TOPIC_QOS_PROFILE() API Reference Macros AUTOWARE_DEFAULT_SERVICES_QOS_PROFILE(): Expands service QoS profile compatible current ROS distribution AUTOWARE_DEFAULT_TOPIC_QOS_PROFILE(): Expands topic QoS profile compatible current ROS distribution ROS Distribution Compatibility ROS Distribution Service QoS Topic QoS Humble earlier rclcpp::ServicesQoS().get_rmw_qos_profile() rmw_qos_profile_default Jazzy rclcpp::ServicesQoS() rclcpp::QoS(rclcpp::KeepLast(10)) Implementation Details package conditional compilation provide QoS configuration: Service QoS: interface (rclcpp::ServicesQoS()) compatibility Topic QoS: interface based ROS distribution Runtime Overhead: macros expand direct expressions optimal performance Dependencies rclcpp: ROS client library License Apache License"},
{"url": "https://index.ros.org/p/autoware_signal_processing", "package": "autoware_signal_processing", "package_summary": "The signal processing package", "package_details": "Signal Processing Methods package, present signal processing related methods Autoware applications. functionalities current version. Low-pass filter, Butterworth low-pass filter tools. low-pass filter supports pass filtering. Assumptions limits TBD."},
{"url": "https://index.ros.org/p/autoware_trajectory", "package": "autoware_trajectory", "package_summary": "The autoware_trajectory package", "package_details": "Autoware Trajectory package classes manage/manipulate Trajectory. Overview Interpolators interpolator class interpolates bases values. interpolators implemented. Linear AkimaSpline CubicSpline NearestNeighbor Stairstep View Drawio builder internally executes interpolation return result form expected<T, successful, interpolator object. ```cpp title=\u201d./examples/example_readme.cpp:53:68\u201d common/autoware_trajectory/examples/example_readme.cpp:53:68 error object representing failure reason. snippet, cubic spline interpolation fails number input points `minimum_required_points() `CubicSpline`. ```cpp title=\"./examples/example_readme.cpp:109:119\" common/autoware_trajectory/examples/example_readme.cpp:109:119 cases result expected object InterpolationFailure type error message \u201cbase size minimum required Trajectory class Trajectory class mathematical continuous representation object oriented interface discrete array point types geometry_msgs::Point geometry_msgs::Pose autoware_planning_msgs::PathPoint autoware_planning_msgs::PathPointWithLaneId autoware_planning_msgs::TrajectoryPoint interpolating underlying points. built, arbitrary point curve continuously parametrized single coordinate. ```cpp title=\u201d./examples/example_readme.cpp:549:561\u201d common/autoware_trajectory/examples/example_readme.cpp:549:561 ![overview_trajectory](./images/overview/trajectory.drawio.svg) [View Drawio]({{ drawio(\"/common/autoware_trajectory/images/overview/trajectory.drawio.svg\") Nomenclature section introduces strict definition words package clarify description API developers understand grasp geometric meaning algorithms. Word Meaning Illustration `curve` `curve` oriented bounded curve denoted additional properties, parameterized start). ![curve](./images/nomenclature/curve.drawio.svg)<br>[View Drawio]({{ drawio(\"/common/autoware_trajectory/images/nomenclature/curve.drawio.svg\") }})<br>There `underlying` points<br>$\\mathrm{P0} 0)$<br>$\\mathrm{P1} \\sqrt{2}, \\sqrt{2}, 0)$<br>$\\mathrm{P2} \\sqrt{2}, \\sqrt{2}, 0)$<br>$\\mathrm{P3} \\sqrt{2}, \\sqrt{2}, 0)$<br>$\\mathrm{P4} \\sqrt{2} \\sqrt{6}, \\sqrt{2} \\sqrt{3}, \\sqrt{2})$<br>and `arc length` interval $\\mathrm{start} $\\mathrm{end} `underlying` `underlying` points curve refers list points curve interpolated. `arc length`[m] `arc length` denotes approximate length curve computed based discrete `underlying` points. denotes `arc length` coordinate starting base point start point) curve point identified `trajectory(s)`.<br>Due definition, actual _curve length_ `arc length` subtle difference illustrated. ![approximation](./images/nomenclature/approximation.drawio.svg)<br>[View Drawio]({{ drawio(\"/common/autoware_trajectory/images/nomenclature/approximation.drawio.svg\") }})<br>The point purple dot, _curve length_ $\\mathrm{P0}$ point equal $0.5$.<br>The exact _curve length_ $\\int \\sqrt{(\\frac{dx}{dt})^2 (\\frac{dy}{dt})^2 (\\frac{dz}{dt})^2} obtained analytical closed form. `curvature` `curvature` computed coordinate**. based normal natural assumption _roads flat_. Mathematically, asserts [Gaussian curvature](https://en.wikipedia.org/wiki/Gaussian_curvature) road uniformly 0.<br>The sign curvature positive center turning circle left side, negative. ![curvature](./images/nomenclature/curvature.drawio.svg)<br>[View Drawio]({{ drawio(\"/common/autoware_trajectory/images/nomenclature/curvature.drawio.svg\") `k_points_minimum_dist_threshold` constant threshold check points values avoid division. `almost-same` pair points pair base values called `almost-same` distance difference `k_points_minimum_dist_threshold` API Interpolators Class Method/Function Description Common Functions `minimum_required_points()` return number points required concrete interpolator `compute(double compute interpolated base clamped underlying base range. `compute(vector<double> vector<T>` compute interpolated values base values `compute_first_derivative(double double` compute derivative base clamped. `compute_second_derivative(double double` compute derivative base clamped. `AkimaSpline` requires points interpolate. ```cpp title=\"./examples/example_readme.cpp:142:152\" common/autoware_trajectory/examples/example_readme.cpp:142:152 View Drawio CubicSpline requires points interpolate. ```cpp title=\u201d./examples/example_readme.cpp:192:201\u201d common/autoware_trajectory/examples/example_readme.cpp:192:201 File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_vehicle_info_utils", "package": "autoware_vehicle_info_utils", "package_summary": "The autoware_vehicle_info_utils package", "package_details": "Vehicle Info Util Purpose package vehicle info parameters. Description check vehicle dimensions detail. current format supports Ackermann model. file defines model assumed autoware path planning, control, represent exact physical model. model Ackermann model assumed vehicle interface designed change control output model. Versioning Policy implemented versioning system vehicle_info.param.yaml file ensure clarity consistency file format versions Autoware external applications. discussion details. Operate current file format set unversioned base version (version: field commented update involving additions, deletions, modifications): Uncomment update version line beginning file. Initiate versioning assigning version number, starting Follow semantic versioning format (MAJOR.MINOR.PATCH). Update Readme.md subsequent updates, continue incrementing version number accordance Discuss increment version depending amount file. ros__parameters: version: Uncomment update line future format wheel_radius: Versioning? Consistency Updates: Implementing version control accurate tracking time vehicle information parameters. Clarity External Applications: External applications depend vehicle_info.param.yaml reference correct file version optimal compatibility functionality. Simplified Management Customized Branches: Assigning versions vehicle_info.param.yaml file simplifies management compared maintaining separate versions multiple customized Autoware branches. approach streamlines version tracking reduces complexity. Scripts Minimum turning radius ros2 run autoware_vehicle_info_utils min_turning_radius_calculator.py yaml path /home/autoware/pilot-auto/install/autoware_vehicle_info_utils/share/autoware_vehicle_info_utils/config/vehicle_info.param.yaml Minimum turning radius rear, front. designate yaml file option ros2 run autoware_vehicle_info_utils min_turning_radius_calculator.py <path-to-yaml> Assumptions limits TBD."},
{"url": "https://index.ros.org/p/autoware_core_control", "package": "autoware_core_control", "package_summary": "The autoware_core_control package", "package_details": "Autoware Core Control Overview autoware_core_control meta-package Autoware project, designed manage organize control-related modules essential autonomous vehicle operations. package serves central point integrating control functionalities, trajectory Usage autoware_core_control meta-package launch manage control modules part Autoware system. start system ros2 launch autoware_launch control_launch.xml"},
{"url": "https://index.ros.org/p/autoware_simple_pure_pursuit", "package": "autoware_simple_pure_pursuit", "package_summary": "The autoware_simple_pure_pursuit package", "package_details": "Simple Pure Pursuit simple_pure_pursuit node receives reference trajectory motion_velocity_smoother calculates control command pure pursuit algorithm. Flowchart @startuml title on_timer start :takeData; data ready?) stop endif group create_control_command (reached goal?) :publish stop command; stop endif :calc_longitudinal_control; :calc_steering_angle; group :publish control command; stop @enduml Input topics Type Description ~/input/odometry nav_msgs::msg::Odometry ego odometry ~/input/trajectory autoware_planning_msgs::msg::Trajectory reference trajectory Output topics Type Description QoS Durability ~/output/control_command autoware_control_msgs::msg::Control control command volatile Parameters json_to_markdown(\u201ccontrol/autoware_simple_pure_pursuit/schema/simple_pure_pursuit.schema.json\u201d)"},
{"url": "https://index.ros.org/p/autoware_core_localization", "package": "autoware_core_localization", "package_summary": "The autoware_core_localization package", "package_details": "Autoware Core Localization Overview autoware_core_localization meta-package Autoware project, designed manage organize localization-related modules essential autonomous vehicle operations. package serves central point integrating localization functionalities estimate vehicle\u2019s pose, velocity, acceleration environment. Usage autoware_core_localization meta-package launch manage localization modules part Autoware system. start system ros2 launch autoware_launch localization_launch.xml"},
{"url": "https://index.ros.org/p/autoware_ekf_localizer", "package": "autoware_ekf_localizer", "package_summary": "The autoware_ekf_localizer package", "package_details": "Overview Extend Kalman Filter Localizer estimates robust noisy robot pose twist integrating vehicle dynamics model input ego-pose ego-twist messages. algorithm designed fast-moving robots autonomous driving systems. Flowchart flowchart autoware_ekf_localizer Features package includes features: Time delay compensation input messages, enables proper integration input information varying time delays. important high-speed moving robots, autonomous driving vehicles. figure). Automatic estimation yaw bias prevents modeling errors caused sensor mounting angle errors, improve estimation accuracy. Mahalanobis distance gate enables probabilistic outlier detection determine inputs Smooth update, Kalman Filter measurement update typically performed measurement obtained, large estimated low-frequency measurements. algorithm measurement time, measurement data divided multiple pieces integrated smoothly maintaining consistency figure). Calculation vertical correction amount pitch mitigates localization instability slopes. uphill, behaves buried ground left side \u201cCalculate delta pitch\u201d figure) EKF considers 3DoF(x,y,yaw). EKF corrects z-coordinate formula side \u201cCalculate delta pitch\u201d figure). Node Subscribed Topics Type Description measured_pose_with_covariance geometry_msgs::msg::PoseWithCovarianceStamped Input pose source measurement covariance matrix. measured_twist_with_covariance geometry_msgs::msg::TwistWithCovarianceStamped Input twist source measurement covariance matrix. initialpose geometry_msgs::msg::PoseWithCovarianceStamped Initial pose EKF. estimated pose initialized zeros start. initialized message published. Published Topics Type Description ekf_odom nav_msgs::msg::Odometry Estimated odometry. ekf_pose geometry_msgs::msg::PoseStamped Estimated pose. ekf_pose_with_covariance geometry_msgs::msg::PoseWithCovarianceStamped Estimated pose covariance. ekf_biased_pose geometry_msgs::msg::PoseStamped Estimated pose including yaw bias ekf_biased_pose_with_covariance geometry_msgs::msg::PoseWithCovarianceStamped Estimated pose covariance including yaw bias ekf_twist geometry_msgs::msg::TwistStamped Estimated twist. ekf_twist_with_covariance geometry_msgs::msg::TwistWithCovarianceStamped estimated twist covariance. diagnostics diagnostics_msgs::msg::DiagnosticArray diagnostic information. debug/processing_time_ms autoware_internal_debug_msgs::msg::Float64Stamped processing time Published base_link map coordinate estimated pose. Functions Predict current robot state predicted previously estimated data prediction model. calculation called constant interval (predict_frequency prediction equation page. Measurement Update update, Mahalanobis distance calculated measured input predicted state, measurement update performed inputs Mahalanobis distance exceeds threshold. predicted state updated latest measured inputs, measured_pose, measured_twist. updates performed frequency prediction, high frequency, order enable smooth state estimation. Parameter description parameters set launch/ekf_localizer.launch Node json_to_markdown(\u201clocalization/autoware_ekf_localizer/schema/sub/node.sub_schema.json\u201d) pose measurement json_to_markdown(\u201clocalization/autoware_ekf_localizer/schema/sub/pose_measurement.sub_schema.json\u201d) twist measurement json_to_markdown(\u201clocalization/autoware_ekf_localizer/schema/sub/twist_measurement.sub_schema.json\u201d) process noise json_to_markdown(\u201clocalization/autoware_ekf_localizer/schema/sub/process_noise.sub_schema.json\u201d) note: process noise positions calculated automatically nonlinear dynamics. Simple Filter Parameters json_to_markdown(\u201clocalization/autoware_ekf_localizer/schema/sub/simple_1d_filter_parameters.sub_schema.json\u201d) File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_gyro_odometer", "package": "autoware_gyro_odometer", "package_summary": "The autoware_gyro_odometer package as a ROS 2 node", "package_details": "autoware_gyro_odometer Overview autoware_gyro_odometer package estimate twist combining imu vehicle speed. Design autoware_gyro_odometer part perception localization stack, providing reliable motion estimates navigation control. designed estimate robot\u2019s motion combining vehicle twist data (linear angular velocities) angular velocity measurements IMU (Inertial Measurement Unit). Data Handling Synchronization: Message Queues: queues store vehicle twist gyro messages ensure data synchronization. Message Timeouts: Checks message timeouts discard stale data, preventing incorrect estimations. Error Checks Logging: Timeout Handling: Logs errors clears queues messages exceed defined time threshold. Transformation Checks: Verifies transforms IMU base frames logs errors Data Processing: Transformation: Converts gyro data base frame ensure accurate angular velocity measurements. Covariance Calculation: Averages multiple measurements reduce noise calculates covariances represent data reliability. Output Publishing: Twist Estimation: Constructs output messages estimated twist values covariances. Stationary Handling: Zeros twist components robot stationary avoid noise. Inputs Outputs Input Type Description vehicle/twist_with_covariance geometry_msgs::msg::TwistWithCovarianceStamped twist covariance vehicle imu sensor_msgs::msg::Imu imu sensor Output Type Description twist_with_covariance geometry_msgs::msg::TwistWithCovarianceStamped estimated twist covariance Parameters json_to_markdown(\u201clocalization/autoware_gyro_odometer/schema/gyro_odometer.schema.json\u201d) Assumptions limits [Assumption] frame_id input twist message set base_link. [Assumption] covariance input messages properly assigned. [Assumption] angular velocity set longitudinal vehicle velocity angular velocity yaw axis sufficiently small. suppression IMU angular velocity bias. process, misestimate vehicle status stationary. [Limitation] frequency output messages depends frequency input IMU message. [Limitation] produce reliable values lateral vertical velocities. assign large values elements output covariance matrix. Diagnostics Description Transition condition Warning Transition condition Error topic_time_stamp time stamp service calling. [nano is_arrived_first_vehicle_twist vehicle twist topic received arrive is_arrived_first_imu imu topic received arrive vehicle_twist_time_stamp_dt time difference current time latest vehicle twist topic. time longer message_timeout_sec imu_time_stamp_dt time difference current time latest imu topic. time longer message_timeout_sec vehicle_twist_queue_size size vehicle_twist_queue. imu_queue_size size gyro_queue. is_succeed_transform_imu transform imu succeed failed"},
{"url": "https://index.ros.org/p/autoware_localization_util", "package": "autoware_localization_util", "package_summary": "The autoware_localization_util package", "package_details": "autoware_localization_util Overview autoware_localization_util collection localization utility packages. individual library autoware localization nodes. covariance_ellipse covariance visualization wrapper. smart_pose_buffer pose buffer management library interpolate data validation. tree_structured_parzen_estimator Tree Structured Parzen Estimator library. util_func tool library function localization nodes. Design covariance_ellipse Translate geometry_msgs::msg::PoseWithCovariance message ellipse visual marker demonstrate covariance distribution. smart_pose_buffer buffer library implements pose message buffering, pose interpolate pose validation. tree_structured_parzen_estimator Probability Estimator library includes estimator log likelihood ratio calculation. util_func Tool function collection. Usage covariance_ellipse Include header file #include \"autoware/localization_util/covariance_ellipse.hpp\" calculate ellipse visualize autoware::localization_util::Ellipse ellipse_ autoware::localization_util::calculate_xy_ellipse(input_msg->pose, scale_); const auto ellipse_marker autoware::localization_util::create_ellipse_marker( ellipse_, input_msg->header, input_msg->pose); smart_pose_buffer buffer init #include \"autoware/localization_util/smart_pose_buffer.hpp\" autoware::localization_util::SmartPoseBuffer; std::unique_ptr<autoware::localization_util::SmartPoseBuffer> initial_pose_buffer_; initial_pose_buffer_ std::make_unique<SmartPoseBuffer>( this->get_logger(), param_.validation.initial_pose_timeout_sec, param_.validation.initial_pose_distance_tolerance_m); interpolate pop pose message std::optional<SmartPoseBuffer::InterpolateResult> interpolation_result_opt initial_pose_buffer_->interpolate(sensor_ros_time); initial_pose_buffer_->pop_old(sensor_ros_time); const SmartPoseBuffer::InterpolateResult interpolation_result interpolation_result_opt.value(); clear buffer initial_pose_buffer_->clear(); tree_structured_parzen_estimator init estimator. n_startup_trials number initial random trials TPE (Tree-Structured Parzen Estimator). equal \u2018initial_estimate_particles_num\u2019 equal \u2018initial_estimate_particles_num\u2019, search full random search. #include \"autoware/localization_util/tree_structured_parzen_estimator.hpp\" autoware::localization_util::TreeStructuredParzenEstimator; TreeStructuredParzenEstimator tpe( TreeStructuredParzenEstimator::Direction::MAXIMIZE, param_.initial_pose_estimation.n_startup_trials, sample_mean, sample_stddev); estimation result const TreeStructuredParzenEstimator::Input input tpe.get_next_input(); add data estimator ```cpp TreeStructuredParzenEstimator::Input result(6); result[0] pose.position.x; result[1] pose.position.y; result[2] pose.position.z; result[3] rpy.x; File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_ndt_scan_matcher", "package": "autoware_ndt_scan_matcher", "package_summary": "The autoware_ndt_scan_matcher package", "package_details": "autoware_ndt_scan_matcher Purpose autoware_ndt_scan_matcher package position estimation NDT scan matching method. main functions package: estimate position scan matching estimate initial position ROS service Monte Carlo method optional function regularization. regularization chapter details. disabled default. Inputs Outputs Input Type Description ekf_pose_with_covariance geometry_msgs::msg::PoseWithCovarianceStamped initial pose points_raw sensor_msgs::msg::PointCloud2 sensor pointcloud sensing/gnss/pose_with_covariance sensor_msgs::msg::PoseWithCovarianceStamped base position regularization term sensing/gnss/pose_with_covariance required regularization enabled. Output Type Description ndt_pose geometry_msgs::msg::PoseStamped estimated pose ndt_pose_with_covariance geometry_msgs::msg::PoseWithCovarianceStamped estimated pose covariance /diagnostics diagnostic_msgs::msg::DiagnosticArray diagnostics points_aligned sensor_msgs::msg::PointCloud2 [debug topic] pointcloud aligned scan matching points_aligned_no_ground sensor_msgs::msg::PointCloud2 [debug topic] ground pointcloud aligned scan matching initial_pose_with_covariance geometry_msgs::msg::PoseWithCovarianceStamped [debug topic] initial pose scan matching multi_ndt_pose geometry_msgs::msg::PoseArray [debug topic] estimated poses multiple initial poses real-time covariance estimation multi_initial_pose geometry_msgs::msg::PoseArray [debug topic] initial poses real-time covariance estimation exe_time_ms autoware_internal_debug_msgs::msg::Float32Stamped [debug topic] execution time scan matching transform_probability autoware_internal_debug_msgs::msg::Float32Stamped [debug topic] score scan matching no_ground_transform_probability autoware_internal_debug_msgs::msg::Float32Stamped [debug topic] score scan matching based ground LiDAR scan iteration_num autoware_internal_debug_msgs::msg::Int32Stamped [debug topic] number scan matching iterations initial_to_result_relative_pose geometry_msgs::msg::PoseStamped [debug topic] relative pose initial point convergence point initial_to_result_distance autoware_internal_debug_msgs::msg::Float32Stamped [debug topic] distance difference initial point convergence point initial_to_result_distance_old autoware_internal_debug_msgs::msg::Float32Stamped [debug topic] distance difference older initial points linear interpolation convergence point initial_to_result_distance_new autoware_internal_debug_msgs::msg::Float32Stamped [debug topic] distance difference newer initial points linear interpolation convergence point ndt_marker visualization_msgs::msg::MarkerArray [debug topic] markers debugging monte_carlo_initial_pose_marker visualization_msgs::msg::MarkerArray [debug topic] particles initial position estimation Service Type Description ndt_align_srv autoware_internal_localization_msgs::srv::PoseWithCovarianceStamped service estimate initial pose Parameters Core Parameters Frame json_to_markdown(\u201clocalization/autoware_ndt_scan_matcher/schema/sub/frame.json\u201d) Sensor Points json_to_markdown(\u201clocalization/autoware_ndt_scan_matcher/schema/sub/sensor_points.json\u201d) Ndt json_to_markdown(\u201clocalization/autoware_ndt_scan_matcher/schema/sub/ndt.json\u201d) Initial Pose Estimation json_to_markdown(\u201clocalization/autoware_ndt_scan_matcher/schema/sub/initial_pose_estimation.json\u201d) Validation json_to_markdown(\u201clocalization/autoware_ndt_scan_matcher/schema/sub/validation.json\u201d) Score Estimation json_to_markdown(\u201clocalization/autoware_ndt_scan_matcher/schema/sub/score_estimation.json\u201d) Covariance json_to_markdown(\u201clocalization/autoware_ndt_scan_matcher/schema/sub/covariance.json\u201d) Regularization Abstract function adds regularization term NDT optimization problem \\begin{align} \\min_{\\mathbf{R},\\mathbf{t}} \\mathrm{NDT}(\\mathbf{R},\\mathbf{t}) +\\mathrm{scale\\ factor}\\cdot \\left| \\mathbf{R}^\\top (\\mathbf{t_{base}-\\mathbf{t}}) \\cdot File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_pose_initializer", "package": "autoware_pose_initializer", "package_summary": "The autoware_pose_initializer package", "package_details": "autoware_pose_initializer Purpose autoware_pose_initializer package send initial pose ekf_localizer. receives roughly estimated initial pose GNSS/user. Passing pose ndt_scan_matcher, calculated ego pose ndt_scan_matcher service. Finally, publishes initial pose ekf_localizer. node depends map height fitter library. details. Interfaces Parameters json_to_markdown(\u201clocalization/autoware_pose_initializer/schema/pose_initializer.schema.json\u201d) Services Type Description /localization/initialize autoware_localization_msgs::srv::InitializeLocalization initial pose api Clients Type Description /localization/pose_estimator/ndt_align_srv autoware_internal_localization_msgs::srv::PoseWithCovarianceStamped pose estimation service /localization/pose_estimator/yabloc/initializer/yabloc_align_srv autoware_internal_localization_msgs::srv::PoseWithCovarianceStamped yabloc pose estimation service Subscriptions Type Description /sensing/gnss/pose_with_covariance geometry_msgs::msg::PoseWithCovarianceStamped pose gnss /sensing/vehicle_velocity_converter/twist_with_covariance geometry_msgs::msg::TwistStamped twist stop check Publications Type Description /localization/initialization_state autoware_adapi_v1_msgs::msg::LocalizationInitializationState pose initialization state /initialpose3d geometry_msgs::msg::PoseWithCovarianceStamped calculated initial ego pose /diagnostics diagnostic_msgs::msg::DiagnosticArray diagnostics Diagnostics pose_initializer_status score initial pose estimation result score threshold, ERROR message output /diagnostics topic. Connection Default API autoware_pose_initializer default API. detailed description API description, refer description autoware_default_adapi. Initialize pose CLI GNSS estimated position ros2 service call /localization/initialize autoware_internal_localization_msgs/srv/InitializeLocalization GNSS estimated position initial guess, localization algorithm automatically estimates accurate position. input position ros2 service call /localization/initialize autoware_internal_localization_msgs/srv/InitializeLocalization pose_with_covariance: header: frame_id: map pose: pose: position: orientation: covariance: method: input position initial guess, localization algorithm automatically estimates accurate position. Direct initial position set ```bash ros2 service call /localization/initialize autoware_internal_localization_msgs/srv/InitializeLocalization pose_with_covariance: header: File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_stop_filter", "package": "autoware_stop_filter", "package_summary": "The stop filter package", "package_details": "stop_filter Purpose function exist, node criterion determine vehicle stopping resulting nodes operation stopping vehicle nodes continued running drive mode. node aims apply uniform stopping decision criterion nodes. suppress control noise overwriting velocity angular velocity Inputs Outputs Input Type Description input/odom nav_msgs::msg::Odometry localization odometry Output Type Description output/odom nav_msgs::msg::Odometry odometry suppressed longitudinal yaw twist debug/stop_flag autoware_internal_debug_msgs::msg::BoolStamped flag represent vehicle stopping Parameters json_to_markdown(\u201clocalization/autoware_stop_filter/schema/stop_filter.schema.json\u201d)"},
{"url": "https://index.ros.org/p/autoware_twist2accel", "package": "autoware_twist2accel", "package_summary": "The acceleration estimation package", "package_details": "autoware_twist2accel Purpose package responsible estimating acceleration output ekf_localizer. lowpass filter mitigate noise. Inputs Outputs Input Type Description input/odom nav_msgs::msg::Odometry localization odometry input/twist geometry_msgs::msg::TwistWithCovarianceStamped twist Output Type Description output/accel geometry_msgs::msg::AccelWithCovarianceStamped estimated acceleration Parameters json_to_markdown(\u201clocalization/autoware_twist2accel/schema/twist2accel.schema.json\u201d) Future work Future work includes integrating acceleration EKF state."},
{"url": "https://index.ros.org/p/autoware_core_map", "package": "autoware_core_map", "package_summary": "The autoware_core_map package", "package_details": "Autoware Core Map Overview autoware_core_map meta-package Autoware project, designed manage organize map-related modules essential autonomous vehicle operations. package serves central point integrating map functionalities, map loading, serving, visualization, manipulation. Usage autoware_core_map meta-package launch manage map modules part Autoware system. start system ros2 launch autoware_launch map_launch.xml"},
{"url": "https://index.ros.org/p/autoware_lanelet2_map_visualizer", "package": "autoware_lanelet2_map_visualizer", "package_summary": "The autoware_lanelet2_map_visualizer package", "package_details": "autoware_lanelet2_map_visualizer package package features visualizing lanelet2 maps. lanelet2_map_visualization Feature lanelet2_map_visualization visualizes autoware_map_msgs/LaneletMapBin messages visualization_msgs/MarkerArray. Run ros2 run autoware_lanelet2_map_visualizer lanelet2_map_visualization Subscribed Topics ~input/lanelet2_map (autoware_map_msgs/LaneletMapBin) binary data Lanelet2 Map Published Topics ~output/lanelet2_map_marker (visualization_msgs/MarkerArray) visualization messages RViz"},
{"url": "https://index.ros.org/p/autoware_map_height_fitter", "package": "autoware_map_height_fitter", "package_summary": "The autoware_map_height_fitter package", "package_details": "autoware_map_height_fitter library fits point ground point cloud map. map loading operation switched parameter enable_partial_load node map_loader_name. node library multi thread executor. Parameters json_to_markdown(\u201cmap/autoware_map_height_fitter/schema/map_height_fitter.schema.json\u201d) Topic subscription Topic Description ~/pointcloud_map topic pointcloud map enable_partial_load false) Service client Service Description ~/partial_map_load service load partial map"},
{"url": "https://index.ros.org/p/autoware_map_loader", "package": "autoware_map_loader", "package_summary": "The autoware_map_loader package", "package_details": "autoware_map_loader package package features loading maps. pointcloud_map_loader Feature pointcloud_map_loader pointcloud maps Autoware nodes configurations. supports types: Publish raw pointcloud map Publish downsampled pointcloud map Send partial pointcloud map loading ROS service Send differential pointcloud map loading ROS service NOTE: strongly recommend divided maps large pointcloud map enable features (partial differential load). prerequisites section details, follow instruction dividing map preparing metadata. Prerequisites Prerequisites pointcloud map file(s) provide single .pcd file multiple .pcd files. multiple PCD data, obey rules: pointcloud map projected coordinate defined map_projection_loader, order consistent lanelet2 map packages converts local geodetic coordinates. information, refer readme map_projection_loader. divided straight lines parallel x-axis y-axis. system support division diagonal lines curved lines. division size axis equal. division size care large division size adverse effects dynamic map loading features ndt_scan_matcher autoware_compare_map_segmentation. split maps overlap Metadata file metadata structure description Metadata structure metadata x_resolution: y_resolution: A.pcd: B.pcd: C.pcd: D.pcd: x_resolution y_resolution A.pcd, B.pcd, names PCD files. List values PCD file, coordinates (x_resolution x_coordinate) coordinates (y_resolution y_coordinate). pointcloud_divider dividing pointcloud map generating compatible metadata.yaml. Directory structure files pointcloud map, Autoware assume directory structure default. sample-map-rosbag lanelet2_map.osm pointcloud_map.pcd multiple rosbags, directory structure Note metadata multiple pointcloud map files. sample-map-rosbag lanelet2_map.osm pointcloud_map.pcd A.pcd B.pcd C.pcd map_projector_info.yaml pointcloud_map_metadata.yaml Specific features Publish raw pointcloud map (ROS topic) node publishes raw pointcloud map loaded .pcd file(s). Publish downsampled pointcloud map (ROS topic) node publishes downsampled pointcloud map loaded .pcd file(s). downsample resolution changing leaf_size parameter. Publish metadata pointcloud map (ROS topic) node publishes pointcloud metadata attached Metadata loaded .yaml file. description PointCloudMapMetaData.msg details. Send partial pointcloud map (ROS service) assume pointcloud maps divided grids. query client node, node sends set pointcloud maps overlaps queried area. description GetPartialPointCloudMap.srv details. Send differential pointcloud map (ROS service) assume pointcloud maps divided grids. File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_map_projection_loader", "package": "autoware_map_projection_loader", "package_summary": "autoware_map_projection_loader package as a ROS 2 node", "package_details": "autoware_map_projection_loader Feature autoware_map_projection_loader responsible publishing map_projector_info defines kind coordinate Autoware operating. information convert global (geoid) local coordinate map_projector_info_path exist, node loads publishes map projection information map_projector_info_path exist, node assumes MGRS projection type, loads lanelet2 map extract MGRS grid. DEPRECATED WARNING: interface lanelet2 map recommended. prepare YAML file Map projector info file specification provide YAML file, map_projector_info.yaml map_path directory. pointcloud_map_metadata.yaml, refer Readme autoware_map_loader. sample-map-rosbag lanelet2_map.osm pointcloud_map.pcd map_projector_info.yaml pointcloud_map_metadata.yaml types transformations latitude longitude XYZ coordinate system shown figure refer details parameters projector type. local coordinate map_projector_info.yaml projector_type: Local Note input scale_factor, overwritten Limitation functionality requires latitude longitude unavailable. identified unavailable functionalities GNSS localization Sending self-position latitude longitude ADAPI MGRS MGRS, MGRS grid map_projector_info.yaml projector_type: MGRS vertical_datum: WGS84 mgrs_grid: 54SUE Note input scale_factor, overwritten Limitation maps span MGRS grids. falls scope single MGRS grid. LocalCartesianUTM local cartesian UTM, map origin map_projector_info.yaml projector_type: LocalCartesianUTM vertical_datum: WGS84 map_origin: latitude: [deg] longitude: [deg] Note input scale_factor, overwritten LocalCartesian local cartesian WGS84, map origin LocalCartesian lanelet2_map_loader, packages gnss_poser doesn\u2019t support map_projector_info.yaml projector_type: LocalCartesian vertical_datum: WGS84 map_origin: latitude: [deg] longitude: [deg] Note input scale_factor, overwritten TransverseMercator Transverse Mercator projection, map origin scale_factor map. didn\u2019t scale_factor, set default ```yaml File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_core_perception", "package": "autoware_core_perception", "package_summary": "The autoware_core_perception package", "package_details": "Autoware Core Perception Overview autoware_core_perception meta-package Autoware project, designed manage organize perception modules essential autonomous vehicle operations. package serves central point integrating perception capabilities, object detection, tracking, sensor fusion. Usage autoware_core_perception meta-package launch manage perception modules part Autoware system. start system ros2 launch autoware_launch autoware.launch.xml"},
{"url": "https://index.ros.org/p/autoware_euclidean_cluster_object_detector", "package": "autoware_euclidean_cluster_object_detector", "package_summary": "The autoware_euclidean_cluster_object_detector package", "package_details": "autoware_euclidean_cluster_object_detector Purpose autoware_euclidean_cluster_object_detector package clustering points smaller parts classify objects. package clustering methods: euclidean_cluster voxel_grid_based_euclidean_cluster. Inner-workings Algorithms euclidean_cluster pcl::EuclideanClusterExtraction applied points. official document details. voxel_grid_based_euclidean_cluster centroid voxel calculated pcl::VoxelGrid. centroids clustered pcl::EuclideanClusterExtraction. input points clustered based clustered centroids. Inputs Outputs Input Type Description input sensor_msgs::msg::PointCloud2 input pointcloud Output Type Description output autoware_perception_msgs::msg::DetectedObjects detected objects debug/clusters sensor_msgs::msg::PointCloud2 colored cluster pointcloud visualization Parameters Core Parameters euclidean_cluster Type Description use_height bool point.z clustering min_cluster_size int minimum number points cluster order considered valid max_cluster_size int maximum number points cluster order considered valid tolerance float spatial cluster tolerance measure Euclidean space voxel_grid_based_euclidean_cluster Type Description use_height bool point.z clustering min_cluster_size int minimum number points cluster order considered valid max_cluster_size int maximum number points cluster order considered valid tolerance float spatial cluster tolerance measure Euclidean space voxel_leaf_size float voxel leaf size min_points_number_per_voxel int minimum number points voxel Assumptions limits (Optional) Error detection handling (Optional) Performance characterization (Optional) References/External links (Optional) Future extensions Unimplemented parts File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_ground_filter", "package": "autoware_ground_filter", "package_summary": "The ROS 2 autoware_ground_filter package", "package_details": "autoware_ground_filter Purpose autoware_ground_filter node remove ground points input pointcloud. Inner-workings Algorithms Detail description ground segmentation algorithm links. Filter Description Detail ground_filter method removing ground based geometrical relationship points lined radiation link Inputs Outputs Input Type Description ~/input/points sensor_msgs::msg::PointCloud2 reference points ~/input/indices pcl_msgs::msg::Indices reference indices Output Type Description ~/output/points sensor_msgs::msg::PointCloud2 filtered points Parameters Node Parameters Type Default Description input_frame string input frame output_frame string output frame max_queue_size int max queue size input/output topics use_indices bool false flag pointcloud indices latched_indices bool false flag latch pointcloud indices approximate_sync bool false flag approximate sync option Assumptions limits Implemented based pcl_perception issue. References/External links https://github.com/ros-perception/perception_pcl/blob/ros2/pcl_ros/src/pcl_ros/filters/filter.cpp"},
{"url": "https://index.ros.org/p/autoware_perception_objects_converter", "package": "autoware_perception_objects_converter", "package_summary": "ROS 2 node for converting between different perception object message types", "package_details": "autoware_perception_objects_converter Purpose package nodes converting perception object message types Autoware. Nodes detected_to_predicted_objects_converter_node node converts DetectedObjects messages PredictedObjects messages. Input Type Description input/detected_objects autoware_perception_msgs::msg::DetectedObjects Input detected objects Output Type Description output/predicted_objects autoware_perception_msgs::msg::PredictedObjects Output predicted objects Parameters Usage ros2 launch autoware_perception_objects_converter detected_to_predicted_objects.launch.xml"},
{"url": "https://index.ros.org/p/autoware_core_planning", "package": "autoware_core_planning", "package_summary": "The autoware_core_planning package", "package_details": "Autoware Core Planning Overview autoware_core_planning meta-package Autoware project, designed manage organize planning-related modules essential autonomous vehicle operations. package serves central point integrating planning functionalities, path planning, path optimization, trajectory generation. Usage autoware_core_planning meta-package launch manage planning modules part Autoware system. start system ros2 launch autoware_launch planning_launch.xml"},
{"url": "https://index.ros.org/p/autoware_mission_planner", "package": "autoware_mission_planner", "package_summary": "The autoware_mission_planner package", "package_details": "Mission Planner Purpose Mission Planner calculates route navigates current ego pose goal pose check points. route sequence lanes static map. Dynamic objects pedestrians vehicles) dynamic map information road construction blocks lanes) considered route planning. output topic published goal pose check points latched goal pose check points core implementation depend map format. planning algorithms added plugin modules. current Autoware Universe, plugin Lanelet2 map format supported. Interfaces Parameters Type Description map_frame string frame map arrival_check_angle_deg double Angle threshold goal check arrival_check_distance double Distance threshold goal check arrival_check_duration double Duration threshold goal check goal_angle_threshold double Max goal pose angle goal approve enable_correct_goal_pose bool Enabling correction goal pose closest lanelet orientation reroute_time_threshold double time rerouting point current velocity greater threshold, rerouting minimum_reroute_length double Minimum Length publishing route consider_no_drivable_lanes bool flag no_drivable_lanes planning allow_reroute_in_autonomous_mode bool flag reroute autonomous driving mode. false, reroute fails. true, safe reroute allowed Services Type Description /planning/mission_planning/mission_planner/clear_route autoware_internal_planning_msgs/srv/ClearRoute route clear request /planning/mission_planning/mission_planner/set_waypoint_route autoware_internal_planning_msgs/srv/SetWaypointRoute route request lanelet waypoints. /planning/mission_planning/mission_planner/set_lanelet_route autoware_internal_planning_msgs/srv/SetLaneletRoute route request pose waypoints. Subscriptions Type Description input/vector_map autoware_map_msgs/msg/LaneletMapBin vector map Lanelet2 input/operation_mode_state autoware_adapi_v1_msgs/OperationModeState operation mode state input/odometry nav_msgs/msg/Odometry vehicle odometry Publications Type Description /planning/mission_planning/state autoware_internal_planning_msgs/msg/RouteState route state /planning/mission_planning/route autoware_planning_msgs/LaneletRoute route ~/debug/route_marker visualization_msgs/msg/MarkerArray route marker debug ~/debug/goal_footprint visualization_msgs/msg/MarkerArray goal footprint debug Route section Route section, type autoware_planning_msgs/LaneletSegment, \u201cslice\u201d road bundles lane changeable lanes. Note atomic unit route autoware_planning_msgs/LaneletPrimitive, unique lane vector map type. route message geometric information lane planning module\u2019s message dependency map data structure. ROS message route section elements route section. preferred_primitive: Preferred lane follow goal. primitives: neighbor lanes direction including preferred lane. Goal Validation mission planner control mechanism validate goal pose create route. goal pose angle goal pose lanelet goal pose\u2019 yaw greater goal_angle_threshold parameter, goal rejected. control mechanism creation footprint goal pose dimensions vehicle checking footprint lanelets. goal footprint exceeds lanelets, goal rejected. image sample goal pose validation cases. Implementation Mission Planner callbacks (goal check points) trigger route planning. Routing graph, plans route Lanelet2, created callbacks, routing graph created vector map callback. plan route explained detail section. ```plantuml @startuml title goal callback start :clear previously memorized check points; :memorize ego goal pose check points; (routing graph ready?) stop endif :plan route; File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_objects_of_interest_marker_interface", "package": "autoware_objects_of_interest_marker_interface", "package_summary": "The autoware_objects_of_interest_marker_interface package", "package_details": "Objects Interest Marker Interface Overview autoware_objects_of_interest_marker_interface collection object visualization function packages. Design package implement library manage visualize object information construct publish marker array rviz. object visualized, import characteristics. pose position object shape shape Bounding box object color color Bounding box object Usage init include header file init library #include <autoware/objects_of_interest_marker_interface/objects_of_interest_marker_interface.hpp> autoware::objects_of_interest_marker_interface::ObjectsOfInterestMarkerInterface objects_of_interest_marker_interface_{this, \"obstacle_cruise_planner\"}; insert insert object information \u2018objects_of_interest_marker_interface\u2019 manager autoware::objects_of_interest_marker_interface::ColorName; objects_of_interest_marker_interface_.insertObjectData( stopped_obstacle.pose, stopped_obstacle.shape, ColorName::RED); publish publish object information rviz visualize objects_of_interest_marker_interface_.publishMarkerArray();"},
{"url": "https://index.ros.org/p/autoware_path_generator", "package": "autoware_path_generator", "package_summary": "The autoware_path_generator package", "package_details": "Path Generator path_generator node receives route mission_planner converts center line path. route waypoints set, generates path passing package simple alternative behavior_path_generator. Path generation input data ready, searches lanelet closest vehicle. lanelets distance path_length.backward path_length.forward front. center lines concatenated generate path. waypoints exist route, replaces overlapped segment center line waypoints grouped shown figure. Path cut self-intersection path bounds, path cut distance intersection, shown figure (path: green, bound: blue). Depending crossing angle, return path\u2019s bound closer centerline outward\u2019s depicted diagram deal intersections left bounds (mutual intersection) account path cut nearest intersecting point. case figure, return path mutual intersection considered. path cut start edge path path bounds intersect. Goal connection path connected goal smoothly path reached lane goal goal connection performed. path reached goal lane connection section. longitudinal position path front goal, connect path goal. path passed goal terms longitudinal position). case, original path cropped connection section, connected pre-goal goal, sequentially. pre-goal inserted goal offset, helps align goal pose. start path connection section, connects path start, pre-goal, goal. Turn signal Turn signal determined based rules defined behavior_path_planner. details) general rule, turn signal turned distance lanelet turn designated, turned driving direction changed degree. consecutive turns required, turn signal required section section takes precedence. Hazard signal node publishes hazard signal autoware_vehicle_msgs::msg::HazardLightsCommand::NO_COMMAND. Flowchart ```plantuml @startuml title run start :take_data; :set_planner_data; (is_data_ready) stop endif group plan_path group generate_path :update_current_lanelet; lanelets route; (path bounds intersections?) :align path intersection point; endif (path range lanelets?) :extend lanelets endwhile (path start range lanelets?) :extend lanelets endwhile waypoint interval starts lanelets?) :extend lanelets endif center line point) (overlapped waypoint group?) (previously overlapped?) :add waypoints path; endif :add point path; File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_planning_factor_interface", "package": "autoware_planning_factor_interface", "package_summary": "The autoware_planning_factor_interface package", "package_details": "autoware_planning_factor_interface Overview PlanningFactorInterface class designed facilitate addition publication planning factors. Design PlanningFactorInterface class designed lightweight efficient, key components: Add: Methods add planning factors interface. Publisher: class includes publisher PlanningFactorArray messages, distribute planning factors nodes system. design emphasizes flexibility ease allowing developers quickly integrate planning factors autoware. Usage Including Header PlanningFactorInterface, include header file code: #include <autoware/planning_factor_interface/planning_factor_interface.hpp> Creating Instance Instantiate PlanningFactorInterface providing node factor module: class AvoidancePlanner public: AvoidancePlanner(rclcpp::Node node) planning_factor_interface_{std::make_unique< autoware::planning_factor_interface::PlanningFactorInterface>( &node, \"avoidance_planner\")} enable console output debugging setting parameters: Enable console output throttle duration planning_factor_interface_ std::make_unique< autoware::planning_factor_interface::PlanningFactorInterface>( &node, \"avoidance_planner\", true, Adding Planning Factors planning_factor_interface_->add( traj_points, ego_pose, stop_pose, autoware_internal_planning_msgs::msg::PlanningFactor::NONE, autoware_internal_planning_msgs::msg::SafetyFactorArray{}); Publishing Factors adding planning factors, publish calling publish method: Publish added factors planning_factor_interface_->publish();"},
{"url": "https://index.ros.org/p/autoware_planning_topic_converter", "package": "autoware_planning_topic_converter", "package_summary": "The autoware_planning_topic_converter package", "package_details": "Planning Topic Converter Purpose package tools convert topic type types defined https://github.com/autowarefoundation/autoware_msgs. Inner-workings Algorithms Usage tools package composable ROS component nodes, spawned existing process, launched launch files, invoked command line. <load_composable_node target=\"container_name\"> <composable_node pkg=\"planning_topic_converter\" plugin=\"autoware::planning_topic_converter::PathToTrajectory\" name=\"path_to_trajectory_converter\" namespace=\"\"> params <param name=\"input_topic\" value=\"foo\"/> <param name=\"output_topic\" value=\"bar\"/> composable node config <extra_arg name=\"use_intra_process_comms\" value=\"false\"/> </composable_node> </load_composable_node> Parameters Type Description input_topic string input topic output_topic string output topic Assumptions limits Future extensions Unimplemented parts"},
{"url": "https://index.ros.org/p/autoware_route_handler", "package": "autoware_route_handler", "package_summary": "The route_handling package", "package_details": "route handler route_handler library calculating driving route lanelet map. Unit Testing unit testing depends autoware_test_utils package. autoware_test_utils library common functions simplify unit test creating. default, route file create tests. illustrates route unit test Lane change test route route based map obtained autoware_test_utils\\test_map"},
{"url": "https://index.ros.org/p/autoware_velocity_smoother", "package": "autoware_velocity_smoother", "package_summary": "The autoware_velocity_smoother package", "package_details": "Velocity Smoother Purpose autoware_velocity_smoother outputs desired velocity profile reference trajectory. module plans velocity profile limitations velocity, acceleration jerk realize maximization velocity ride quality. call module autoware_velocity_smoother limitations acceleration jerk means smoothness velocity profile. Inner-workings Algorithms Flow chart Extract trajectory point reference trajectory closest center rear wheel axle vehicle, extracts reference path extract_behind_dist extract_ahead_dist Apply external velocity limit applies velocity limit input external autoware_velocity_smoother. Remark external velocity limit velocity limit set map reference trajectory. external velocity applied position able reach velocity limit deceleration jerk constraints set parameter. Apply stop approaching velocity applies velocity limit stopping point. function approach obstacle improve accuracy stopping. Apply lateral acceleration limit applies velocity limit decelerate curve. point trajectory, find maximum velocity, lateral acceleration thresholds defined lateral_acceleration_limits velocity_thresholds. trajectory speed larger computed max velocity, decelerate curve. velocity limit set fall min_curve_velocity. Note: velocity limit requests larger nominal.jerk applied. words, sharp curve planned front ego, deceleration performed. Apply steering rate limit calculates desired steering angles trajectory points, applies steering rate limit. point curve, find maximum velocity satisfy steering rate limit defined steering_angle_rate_limits velocity_thresholds. trajectory speed larger computed max velocity, decelerate curve. Resample trajectory resamples points reference trajectory designated time interval. Note range length trajectory set min_trajectory_length max_trajectory_length, distance points longer min_trajectory_interval_distance. samples densely distance traveled resample_time current velocity, samples sparsely sampling velocity, calculation load accuracy achieved samples finely velocity coarsely high velocity. Calculate initial state Calculate initial values velocity planning. initial values calculated situation shown table. Situation Initial velocity Initial acceleration calculation Current velocity Engaging engage_velocity engage_acceleration Deviate planned velocity current velocity Current velocity Previous planned Normal Previous planned Previous planned Smooth velocity plans velocity. algorithm velocity planning chosen JerkFiltered, Linf, set launch file. algorithms, OSQP[1] solver optimization. JerkFiltered minimizes sum square velocity square violation velocity limit, acceleration limit jerk limit. minimizes sum square velocity, square pseudo-jerk[2] square violation velocity limit acceleration limit. Linf minimizes sum square velocity, maximum absolute pseudo-jerk[2] square violation velocity limit acceleration limit. Post process performs post-process planned velocity. Set velocity stopping point Set maximum velocity config named max_velocity Set velocity current pose Resample trajectory (post resampling) Output debug data optimization, resampling called post resampling performed passing optimized trajectory node. required path interval optimization module, post resampling helps fill gap. post resampling, check path specification module determine parameters. Note computational load optimization algorithm high path interval sparser path specification module resampling, post resampling resample trajectory densely. hand, computational load optimization algorithm small path interval denser path specification module resampling, path sparsely resampled specification module. Inputs Outputs Input Type Description ~/input/trajectory autoware_planning_msgs/Trajectory Reference trajectory /planning/scenario_planning/max_velocity std_msgs/Float32 External velocity limit /localization/kinematic_state nav_msgs/Odometry Current odometry File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_behavior_velocity_planner", "package": "autoware_behavior_velocity_planner", "package_summary": "The autoware_behavior_velocity_planner package", "package_details": "Behavior Velocity Planner Overview behavior_velocity_planner planner adjust velocity based traffic rules. loads modules plugins. refer links listed detail module. Blind Spot Crosswalk Walkway Detection Area Intersection MergeFromPrivate Stop Line Virtual Traffic Light Traffic Light Occlusion Spot Stopping Area Speed Bump module plans velocity, considers based base_link(center rear-wheel axis) pose. order stop stop line vehicles\u2019 front stop line, calculates base_link position distance base_link front modifies path velocity base_link position. Input topics Type Description ~input/path_with_lane_id autoware_internal_planning_msgs::msg::PathWithLaneId path lane_id ~input/vector_map autoware_map_msgs::msg::LaneletMapBin vector map ~input/vehicle_odometry nav_msgs::msg::Odometry vehicle velocity ~input/dynamic_objects autoware_perception_msgs::msg::PredictedObjects dynamic objects ~input/no_ground_pointcloud sensor_msgs::msg::PointCloud2 obstacle pointcloud ~/input/compare_map_filtered_pointcloud sensor_msgs::msg::PointCloud2 obstacle pointcloud filtered compare map. Note detection method run module Points. ~input/traffic_signals autoware_perception_msgs::msg::TrafficLightGroupArray traffic light states Output topics Type Description ~output/path autoware_planning_msgs::msg::Path path ~output/stop_reasons tier4_planning_msgs::msg::StopReasonArray reasons vehicle stop Node parameters Parameter Type Description launch_modules vector<string> module names launch forward_path_length double path length backward_path_length double path length max_accel double global parameter) max acceleration vehicle system_delay double global parameter) delay time output control command delay_response_time double global parameter) delay time vehicle\u2019s response control commands Traffic Light Handling sim/real handling traffic light information varies depending usage. table, traffic signal topic element lane denoted info, info denoted null. module case info null info null intersection_occlusion(is_simulation <li>info latest non-null information</li></ul> GO(occlusion intersection_occlusion latest UNKNOWN observation queue present.<ul><li>If info GREEN UNKNOWN, occlusion cared</li><li>If info RED YELLOW, occlusion ignored(GO) NOTE: timeout considered</li> traffic_light(sim, is_simulation true) <li>info current information</li></ul> traffic_light perceived traffic light information present <ul><li>If info timeout, STOP color is</li> <li>If info timeout, act color. info UNKNOWN, STOP</li></ul> rowspan=2} traffic_light(real, is_simulation false) <li>info current information</li></ul> STOP style=\u201dpadding:0\u201d} crosswalk Traffic Light(is_simulation <li>info current information</li></ul> default <li>If disable_yield_for_new_stopped_object true, scene_module ignore newly detected pedestrians module instantiation.</li> <li>If ignore_with_traffic_light true, occlusion detection skipped.</li></ul> map_based_prediction(is_simulation <li>info current information</li></ul> default pedestrian traffic light is<ul> <li>RED, surrounding pedestrians predicted.</li> <li>GREEN, stopped pedestrians predicted.</li></ul>"},
{"url": "https://index.ros.org/p/autoware_behavior_velocity_planner_common", "package": "autoware_behavior_velocity_planner_common", "package_summary": "The autoware_behavior_velocity_planner_common package", "package_details": "Behavior Velocity Planner Common package behavior velocity interface RTC, common functions library, behavior_velocity_planner node modules."},
{"url": "https://index.ros.org/p/autoware_behavior_velocity_stop_line_module", "package": "autoware_behavior_velocity_stop_line_module", "package_summary": "The autoware_behavior_velocity_stop_line_module package", "package_details": "Stop Line Role module plans vehicle\u2019s velocity ensure stops stop lines resume movement stopping. Activation Timing module activated stop line target lane. Module Parameters Parameter Type Description stop_margin double Margin vehicle stop stop_line stop_duration_sec double Time parameter ego vehicle stop stop line hold_stop_margin_distance double Parameter restart prevention Algorithm section). ego vehicle distance stop line, ego state STOPPED APPROACHING use_initialization_stop_state bool Flag determine return approaching state vehicle moves stop line. Inner-workings Algorithms stop line map information. Inserts stop point path stop line defined map ego vehicle length. Sets velocities path stop point Releases inserted stop velocity vehicle halts stop point stop_duration_sec seconds. Flowchart @startuml title modifyPathVelocity start :find collision path stop_line; (collision stop endif :find offset segment; :calculate stop pose; :calculate distance stop line; (state APPROACH) :set stop velocity; (vehicle hold_stop_margin_distance?) (vehicle stopped?) :change state STOPPED; endif endif (state STOPPED) (stopping time longer stop_duration_sec :change state START; endif (state START) ([optional] stop line?) :change state APPROACH; endif endif stop @enduml algorithm based segment. segment consists node points. removing boundary conditions segment(i) exists assume node(i) node(i+1) exist. algorithm finds collision reference path stop line. collision segment collision point. based collision point, finds offset segment iterating points specific offset length. offset length stop_margin(parameter) base_link front(to adjust head pose stop line). offset segment offset segment start. calculate offset point offset segment offset. stop_pose. Restart Prevention vehicle requires meters meters) stop starts moving due poor vehicle control performance, overshoot stopping position, strictly observed. vehicle begins move order approach nearby stop point meters module includes parameter hold_stop_margin_distance prevent redundant restarts situation. vehicle stopped hold_stop_margin_distance meters stop point (_front_to_stop_line hold_stop_margin_distance), module determines vehicle stopped stop point maintain current stopping position, vehicle stop due factors. ![example](docs/restart_prevention.svg){width=1000} parameters File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_motion_velocity_obstacle_stop_module", "package": "autoware_motion_velocity_obstacle_stop_module", "package_summary": "obstacle stop feature in motion_velocity_planner", "package_details": "autoware_motion_velocity_obstacle_stop_module Overview obstacle_stop module stop planning static obstacle trajectory. Design Obstacle Filtering obstacles meeting condition determined obstacles stopping. object type stopping obstacle_filtering.object_type.*. lateral distance object ego\u2019s trajectory smaller obstacle_filtering.max_lat_margin. obstacle_filtering.max_lat_margin_against_predicted_object_unknown applied predicted object unknown. objects, objects\u2019 future poses \u2018obstacle_filtering.outside_obstacle.estimation_time_horizon\u2019 considered. object cross ego\u2019s trajectory collision time margin large obstacle_filtering.ignore_crossing_obstacle false. NOTE Crossing obstacles Crossing obstacle object orientation\u2019s yaw angle ego\u2019s trajectory smaller obstacle_filtering.crossing_obstacle.obstacle_traj_angle_threshold. collision time margin predict collision area time ego constant velocity motion obstacle predicted path. calculate collision time margin difference time ego collision area obstacle collision area. time margin smaller obstacle_filtering.crossing_obstacle.collision_time_margin, margin Stop Planning role stop planning keeping safe distance static vehicle objects dynamic/static vehicle objects. stop planning inserts stop point trajectory distance obstacles. safe distance parameterized stop_planning.stop_margin. stops trajectory, obstacle point, safe distance stop_planning.terminal_stop_margin. inserting stop point, required acceleration ego stop front stop point calculated. acceleration common.min_strong_accel, stop planning cancelled package assume strong sudden brake emergency. Leading Vehicle RSS Stop Position Determination function enables distance adjustment moving leading vehicles obstacle_stop module leading vehicle primarily handled obstacle_cruise_module, function supplementary role. operating principle assume constant deceleration leading vehicle predict stopping point leading vehicle stops deceleration. logic embeds stop point trajectory usual stop margin leading vehicle\u2019s stopping point. Leading vehicle realized cooperation function velocity_smoother. note ego vehicle\u2019s behavior influenced obstacle_stop settings velocity_smoother settings. objects moving slower obstacle_velocity_threshold_enter_fixed_stop, braking distance calculated. object\u2019s current position stop position calculation. Additionally, feature disabled use_rss_stop, stop planning performed objects moving slower obstacle_velocity_threshold_enter_fixed_stop. Minor functions Prioritization behavior module\u2019s stop point stopping pedestrian walking crosswalk, behavior module inserts velocity trajectory front crosswalk. obstacle_cruise_module\u2019s stop planning works, ego reach behavior module\u2019s stop point safe distance defined obstacle_cruise_module longer behavior module\u2019s safe distance. resolve non-alignment stop point behavior module module, stop_planning.min_behavior_stop_margin defined. case crosswalk module inserts stop point distance stop_planning.min_behavior_stop_margin minimum ego obstacle. Holding closest stop obstacle target obstacles order closest stop obstacle target obstacles perception\u2019s detection instability, check disappeared target obstacles check_consistency function. previous closest stop obstacle removed lists, lists obstacle_filtering.stop_obstacle_hold_time_threshold seconds. Note stop obstacle appears previous closest obstacle removes lists, add target obstacles Holding previous stop point ego stops front obstacle pointcloud, obstacle move, detected position obstacle change due perception\u2019s detection noise. case, ego start driving bit. order avoid ego restart, previous stop point ego\u2019s velocity stop_planning.hold_stop_velocity_threshold distance current previous stop points stop_planning.hold_stop_distance_threshold. Stop point adjustment curve ego stops curve road, stop margin bit long default curve road, shown figure, object ego object dangerous. avoid cut-in, feature shorter stop margin usual curve enabling stop_planning.stop_on_curve.enable_approaching. figure shows logic. calculate blue point straight driving footprint future ego\u2019s pose collides front object (object calculate stop point stop_planning.stop_on_curve.additional_stop_margin blue ego\u2019s pose. stop_planning.stop_on_curve.min_stop_margin minimum ego object. Sudden stop suppression Enabling obstacle_filtering.suppress_sudden_stop deceleration stop higher limit_min_acc force suppress sudden obstacle stop. Visualization Detection area Green polygons detection area visualized detection_polygons ~/debug/marker topic. File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_motion_velocity_planner", "package": "autoware_motion_velocity_planner", "package_summary": "Node of the motion_velocity_planner", "package_details": "Motion Velocity Planner Overview motion_velocity_planner planner adjust trajectory velocity based obstacles vehicle. loads modules plugins. refer links listed detail module. Lane module calculates stop slow points inserted ego trajectory. points assumed correspond base_link frame ego vehicle trajectory. means stop wall, stop point inserted trajectory distance wall equal vehicle front offset (wheelbase front overhang, vehicle dimensions. Input topics Type Description ~/input/trajectory autoware_planning_msgs::msg::Trajectory input trajectory ~/input/vector_map autoware_map_msgs::msg::LaneletMapBin vector map ~/input/vehicle_odometry nav_msgs::msg::Odometry vehicle position velocity ~/input/accel geometry_msgs::msg::AccelWithCovarianceStamped vehicle acceleration ~/input/dynamic_objects autoware_perception_msgs::msg::PredictedObjects dynamic objects ~/input/no_ground_pointcloud sensor_msgs::msg::PointCloud2 obstacle pointcloud ~/input/traffic_signals autoware_perception_msgs::msg::TrafficLightGroupArray traffic light states ~/input/occupancy_grid nav_msgs::msg::OccupancyGrid occupancy grid Output topics Type Description ~/output/trajectory autoware_planning_msgs::msg::Trajectory Ego trajectory updated velocity profile ~/output/planning_factors/<MODULE_NAME> autoware_internal_planning_msgs::msg::PlanningFactorsArray factors causing change ego velocity profile Services Type Description ~/service/load_plugin autoware_motion_velocity_planner::srv::LoadPlugin request loading plugin ~/service/unload_plugin autoware_motion_velocity_planner::srv::UnloadPlugin request unloaded plugin Node parameters Parameter Type Description launch_modules vector<string> module names launch addition, parameters node: nearest search parameters; vehicle info parameters; common planning parameters; smoother parameters Parameters plugin loaded."},
{"url": "https://index.ros.org/p/autoware_motion_velocity_planner_common", "package": "autoware_motion_velocity_planner_common", "package_summary": "Common functions and interfaces for motion_velocity_planner modules", "package_details": "Motion Velocity Planner Common package common utilities data structures motion velocity planner Autoware system. tools geometric calculations, trajectory processing, velocity planning results. Overview Package motion velocity planner responsible generating velocity profiles autonomous vehicles based current trajectory environment. package autoware_motion_velocity_planner_common essential utilities structures support planning process, including: Geometric operations polygons trajectories. General utilities trajectory processing visualization. Data structures storing velocity planning results. Design Key Components Polygon Utilities (polygon_utils.hpp) component functions handling geometric polygons related motion planning. includes: Collision detection trajectories obstacles. Creation polygons representing vehicle\u2019s trajectory time steps. Geometric calculations Boost Geometry. General Utilities (utils.hpp) component utility functions, including: Conversion point representations pcl::PointXYZ geometry_msgs::msg::Point). Distance calculations trajectory points obstacles. Functions concatenating vectors processing trajectories. Visualization tools creating markers. Velocity Planning Results (velocity_planning_result.hpp) component defines data structures storing results velocity planning, including: SlowdownInterval: Represents segment vehicle slow start points velocity. VelocityPlanningResult: collection stop points, slowdown intervals, optional velocity limits clear commands. Usage Including Package package project, include CMakeLists.txt: find_package(autoware_motion_velocity_planner_common REQUIRED) Usage Here\u2019s simple demonstrating utility functions: #include \"autoware/motion_velocity_planner_common/utils.hpp\" const auto decimated_traj_points autoware::motion_velocity_planner::utils::decimate_trajectory_points_from_ego( traj_points, current_pose, ego_nearest_dist_threshold, ego_nearest_yaw_threshold, p.decimate_trajectory_step_length, autoware_universe/planning/motion_velocity_planner/autoware_motion_velocity_obstacle_cruise_module/src/obstacle_cruise_module.cpp"},
{"url": "https://index.ros.org/p/autoware_core_sensing", "package": "autoware_core_sensing", "package_summary": "The autoware_core_sensing package", "package_details": "Autoware Core Sensing Overview autoware_core_sensing meta-package Autoware project, designed manage organize sensing-related modules essential autonomous vehicle operations. package serves central point integrating sensing functionalities, sensor data acquisition preprocessing. Usage autoware_core_sensing meta-package launch manage sensing modules part Autoware system. start system ros2 launch autoware_launch sensing_launch.xml"},
{"url": "https://index.ros.org/p/autoware_crop_box_filter", "package": "autoware_crop_box_filter", "package_summary": "The ROS 2 autoware_crop_box_filter package", "package_details": "autoware_crop_box_filter Overview autoware_crop_box_filter package crops input pointcloud bounding box. reducing computational load improving performance system. Design autoware_crop_box_filter implemented autoware core node subscribes input pointcloud, publishes filtered pointcloud. bounding box min_point max_point parameters. Inputs Outputs Input Type Description ~/input/points sensor_msgs::msg::PointCloud2 reference points Output Type Description ~/output/points sensor_msgs::msg::PointCloud2 filtered points ~/crop_box_polygon geometry_msgs::msg::PolygonStamped bounding box polygon Parameters Launch file Parameters Type Default Description input_frame string frame filtering performed output_frame string output frame filtered points input_pointcloud_frame string frame input pointcloud max_queue_size int max buffer size input/output topics crop_box_filter_param_file string path parameter file node Node Parameters Type Default Description min_x double minimum crop box min_y double minimum crop box min_z double minimum crop box max_x double maximum crop box max_y double maximum crop box max_z double maximum crop box negative bool true true, points box removed, points box removed Usage 1.publish static input pointcloud target frame filtering ros2 run tf2_ros static_transform_publisher velodyne_top_base_link base_link 2.launch node ros2 launch autoware_crop_box_filter crop_box_filter_node.launch.xml launch rviz2 AWSIM"},
{"url": "https://index.ros.org/p/autoware_downsample_filters", "package": "autoware_downsample_filters", "package_summary": "The ROS 2 autoware_downsample_filters package", "package_details": "autoware_downsample_filters Overview autoware_downsample_filters package reduces number points pointcloud. Design autoware_downsample_filters implemented reducing computational load improving performance system. Inner-workings Algorithms Random Downsample Filter pcl::RandomSample points sampled uniform probability. Voxel Grid Downsample Filter pcl::VoxelGrid points voxel approximated centroid. Pickup Based Voxel Grid Downsample Filter algorithm samples single actual point existing voxel, centroid. computation cost compared Centroid Based Voxel Grid Filter. Inputs Outputs Input Type Description input sensor_msgs::msg::PointCloud2 reference points Output Type Description output sensor_msgs::msg::PointCloud2 downsampled points Parameters Launch file Parameters Type Default Description input_frame string frame filtering performed output_frame string output frame filtered points max_queue_size size_t max buffer size input/output topics Node Parameters random_downsample_filter_node Type Default Description sample_num size_t random sample number voxel_grid_downsample_filter_node Type Default Description voxel_size_x double voxel voxel_size_y double voxel voxel_size_z double voxel Usage 1.publish static input pointcloud target frame filtering, ros2 run tf2_ros static_transform_publisher velodyne_top_base_link base_link 2.launch downsample node ros2 launch autoware_downsample_filters random_downsample_filter_node.launch.xml launch rviz2 AWSIM check downsample result Assumptions limits (Optional) Error detection handling (Optional) Performance characterization (Optional) References/External links (Optional) Future extensions Unimplemented parts"},
{"url": "https://index.ros.org/p/autoware_gnss_poser", "package": "autoware_gnss_poser", "package_summary": "The ROS 2 autoware_gnss_poser package", "package_details": "gnss_poser Overview gnss_poser node subscribes gnss sensing messages calculates vehicle pose covariance. Design node subscribes NavSatFix publish pose base_link. data NavSatFix represents antenna\u2019s position. performs coordinate transformation base_link antenna\u2019s position. frame_id antenna\u2019s position refers NavSatFix\u2019s header.frame_id. (Note header.frame_id NavSatFix antenna\u2019s frame_id, Earth reference ellipsoid. NavSatFix definition.) transformation base_link antenna obtained, outputs pose antenna position performing coordinate transformation. Inputs Outputs Input Type Description /map/map_projector_info autoware_map_msgs::msg::MapProjectorInfo map projection info ~/input/fix sensor_msgs::msg::NavSatFix gnss status message ~/input/autoware_orientation autoware_sensing_msgs::msg::GnssInsOrientationStamped orientation click details Output Type Description ~/output/pose geometry_msgs::msg::PoseStamped vehicle pose calculated gnss sensing data ~/output/gnss_pose_cov geometry_msgs::msg::PoseWithCovarianceStamped vehicle pose covariance calculated gnss sensing data ~/output/gnss_fixed autoware_internal_debug_msgs::msg::BoolStamped gnss fix status Parameters Parameters table Type Default Description base_frame string base_link frame base_frame gnss_base_frame string gnss_base_link frame gnss_base_frame map_frame string map frame map_frame use_gnss_ins_orientation boolean true Gnss-Ins orientation gnss_pose_pub_method integer Instant Average Median buffer_epoch set gnss_pose_pub_method loses affect. Range: buff_epoch integer Buffer epoch. Range: 0~inf. parameters changed config file gnss_poser.param.yaml"},
{"url": "https://index.ros.org/p/autoware_vehicle_velocity_converter", "package": "autoware_vehicle_velocity_converter", "package_summary": "The autoware_vehicle_velocity_converter package", "package_details": "autoware_vehicle_velocity_converter Purpose package converts autoware_vehicle_msgs::msg::VehicleReport message geometry_msgs::msg::TwistWithCovarianceStamped gyro odometer node. Inputs Outputs Input Type Description velocity_status autoware_vehicle_msgs::msg::VehicleReport vehicle velocity Output Type Description twist_with_covariance geometry_msgs::msg::TwistWithCovarianceStamped twist covariance converted VehicleReport Parameters Type Description speed_scale_factor double speed scale factor (ideal frame_id string frame output message velocity_stddev_xx double standard deviation angular_velocity_stddev_zz double standard deviation yaw rate"},
{"url": "https://index.ros.org/p/autoware_planning_test_manager", "package": "autoware_planning_test_manager", "package_summary": "ROS 2 node for testing interface of the nodes in planning module", "package_details": "Autoware Planning Test Manager Background node planning module, exceptional input, unusual routes significantly deviated ego-position, node prepared input crash. result, debugging node crashes time-consuming. empty trajectory input anticipated implementation, node crash due unaddressed exceptional input merged, scenario testing system running actual vehicle. Purpose purpose provide utility implementing tests ensure node operates correctly receiving exceptional input. utilizing utility implementing tests exceptional input, purpose reduce bugs discovered running system, requiring measures exceptional input merging PRs. Features Confirmation normal operation test target node, confirm node operates correctly publishes required messages subsequent nodes. test_node publish messages confirm node\u2019s output published. Robustness confirmation special inputs confirming normal operation, ensure test target node crash exceptional input. provide exceptional input test_node confirm node crash. (WIP) Usage TEST(PlanningModuleInterfaceTest, NodeTestWithExceptionTrajectory) rclcpp::init(0, nullptr); instantiate test_manager PlanningInterfaceTestManager type auto test_manager std::make_shared<autoware::planning_test_manager::PlanningInterfaceTestManager>(); package directories configuration files const auto autoware_test_utils_dir ament_index_cpp::get_package_share_directory(\"autoware_test_utils\"); const auto target_node_dir ament_index_cpp::get_package_share_directory(\"target_node\"); set arguments config file node_options.arguments( {\"--ros-args\", \"--params-file\", autoware_test_utils_dir \"/config/test_vehicle_info.param.yaml\", \"--params-file\", autoware_planning_validator_dir \"/config/planning_validator.param.yaml\"}); instantiate TargetNode node_options auto test_target_node std::make_shared<TargetNode>(node_options); publish topics test_manager argument topic test_manager->publishOdometry(test_target_node, \"/localization/kinematic_state\"); test_manager->publishMaxVelocity( test_target_node, \"velocity_smoother/input/external_velocity_limit_mps\"); set scenario_selector's input topic name(this topic changed test node) test_manager->setTrajectoryInputTopicName(\"input/parking/trajectory\"); test normal trajectory ASSERT_NO_THROW(test_manager->testWithNominalTrajectory(test_target_node)); target_node running EXPECT_GE(test_manager->getReceivedTopicNum(), test trajectory input empty/one point/overlapping point ASSERT_NO_THROW(test_manager->testWithAbnormalTrajectory(test_target_node)); shutdown ROS context rclcpp::shutdown(); Implemented tests Node Test exceptional input output Exceptional input pattern autoware_planning_validator NodeTestWithExceptionTrajectory trajectory trajectory Empty, single point, path duplicate points velocity_smoother NodeTestWithExceptionTrajectory trajectory trajectory Empty, single point, path duplicate points obstacle_velocity_limiter NodeTestWithExceptionTrajectory trajectory trajectory Empty, single point, path duplicate points path_optimizer NodeTestWithExceptionTrajectory trajectory trajectory Empty, single point, path duplicate points scenario_selector NodeTestWithExceptionTrajectoryLaneDrivingMode NodeTestWithExceptionTrajectoryParkingMode trajectory scenario Empty, single point, path duplicate points scenarios:LANEDRIVING PARKING freespace_planner NodeTestWithExceptionRoute route trajectory Empty route behavior_path_planner NodeTestWithExceptionRoute NodeTestWithOffTrackEgoPose route route odometry Empty route Off-lane ego-position behavior_velocity_planner NodeTestWithExceptionPathWithLaneID path_with_lane_id path Empty path Important Notes test execution, launching node, parameters loaded parameter file package. adding parameters, add required parameters parameter file target node package. prevent node unable launch missing parameters retrieving parameter file node launch. Future extensions Unimplemented parts (WIP)"},
{"url": "https://index.ros.org/p/autoware_pyplot", "package": "autoware_pyplot", "package_summary": "C++ interface for matplotlib based on pybind11", "package_details": "autoware_pyplot package interface notable matplotlib pybind11 backend creating scientific plots images illustrating function inputs/outputs debugging output internal data function unit testing lightweight manner planning_simulator usage main function, setup python context import matplotlib #include <autoware/pyplot/pyplot.hpp> #include <pybind11/embed.h> main... py::scoped_interpreter guard{}; auto plt autoware::pyplot::import(); major functionalities matplotlib native python code. plt.plot(Args(std::vector<int>({1, Kwargs(\"color\"_a \"blue\", \"linewidth\"_a plt.xlabel(Args(\"x-title\")); plt.ylabel(Args(\"y-title\")); plt.title(Args(\"title\")); plt.xlim(Args(0, plt.ylim(Args(0, plt.grid(Args(true)); plt.savefig(Args(\"test_single_plot.png\")); auto [fig, axes] plt.subplots(1, auto axes[0]; auto axes[1]; ax1.set_aspect(Args(\"equal\")); ax2.set_aspect(Args(\"equal\"));"},
{"url": "https://index.ros.org/p/autoware_test_node", "package": "autoware_test_node", "package_summary": "Test package for Autoware Node.", "package_details": "autoware_test_node package simple autoware::Node. Usage ros2 launch autoware_test_node autoware_test_node.launch.xml"},
{"url": "https://index.ros.org/p/autoware_test_utils", "package": "autoware_test_utils", "package_summary": "ROS 2 node for testing interface of the nodes in planning module", "package_details": "Test Utils Background Autoware\u2019s components modules adopted unit testing, common library ease process writing unit tests Purpose objective test_utils develop unit testing library Autoware components. library include commonly functions input/mock data parser maps testing common routes mock data testing. Maps maps Common common map multiple types usable inputs, including shoulder lanes, intersections, regulatory elements. common map named lanelet2_map.osm folder. Straight straight lanelet map consists lanes run direction. map named 2km_test.osm. illustrates design map. road_shoulders road_shoulders lanelet map consist variety pick-up/drop-off site maps road_shoulder tags including: pick-up/drop-off sites side street lanes pick-up/drop-off sites side curved lanes pick-up/drop-off sites private area easily launch planning_simulator ros2 launch autoware_test_utils psim_road_shoulder.launch.xml vehicle_model:=<> sensor_model:=<> use_sim_time:=true intersection intersections lanelet map consist variety intersections including: crossing traffic light crossing traffic light T-shape crossing traffic light intersection loop complicated intersection easily launch planning_simulator ros2 launch autoware_test_utils psim_intersection.launch.xml vehicle_model:=<> sensor_model:=<> use_sim_time:=true overlap overlap lanelet map includes U-turn gap U-turn full crossing U-turn crossing overpass cases Autoware Planning Test Manager goal Autoware Planning Test Manager test planning module nodes. PlanningInterfaceTestManager class (source code) creates wrapper functions based test_utils functions. Generate test data unit testing presented description, user save snapshot scene yaml file running Planning Simulation test map. ros2 launch autoware_test_utils psim_road_shoulder.launch.xml ros2 launch autoware_test_utils psim_intersection.launch.xml autoware sample_vehicle_description sample_sensor_kit default, autoware_test_utils/config/test_vehicle_info.param.yaml sample_vehicle_description. vehicle_model/sensor_model argument ros2 service call /autoware_test_utils/topic_snapshot_saver std_srvs/srv/Empty File truncated lines full file"},
{"url": "https://index.ros.org/p/autoware_core_vehicle", "package": "autoware_core_vehicle", "package_summary": "The autoware_core_vehicle package", "package_details": "autoware_core_vehicle Overview autoware_core_vehicle package part Autoware Core system, responsible interfacing vehicle hardware managing vehicle-specific operations. package essential functionalities vehicle control communication Autoware ecosystem. Features Vehicle driver interface Loading URDF model Configuration package configured parameters: vehicle_model: Specifies package urdf vehicle model sensor_model: Specifies package urdf sensor models Launch Files vehicle.launch.xml: Main launch file vehicle operations."},
{"url": "https://index.ros.org/p/cie_sample_application", "package": "cie_sample_application", "package_summary": "Sample application to demonstrate the use of cie_thread_configurator and callback_isolated_executor.", "package_details": "cie_sample_application sample application demonstrate Executors ComponentContainers callback_isolated_executor package. Launch ComponentContainer main function) ros2 run cie_sample_application sample_node_main Launch ComponentContainer Launch component container load node time. ros2 launch cie_sample_application sample_node.launch.xml load node exsiting component container. ros2 run callback_isolated_executor component_container_callback_isolated --ros-args --remap __node:=sample_container ros2 launch cie_sample_application load_sample_node.launch.xml"},
{"url": "https://index.ros.org/p/cie_thread_configurator", "package": "cie_thread_configurator", "package_summary": "A dedicated node that configures the scheduling attributes of each thread in callback_isolated_executor.", "package_details": "cie_thread_configurator library configure thread scheduling callback groups ROS nodes launched callback_isolated_executor package YAML file. instructions tool, refer https://github.com/tier4/callback_isolated_executor/tree/main?tab=readme-ov-file#usage. YAML Configuration File Format ROS application, prepare single YAML configuration file. format YAML configuration file top-level entry called callback_groups, arrays representing callback group. IDs callback groups automatically generated tool rules section. callback_groups: xxxxx affinity: policy: SCHED_OTHER priority: yyyyy affinity: policy: SCHED_FIFO priority: affinity field, provide array core numbers allowed run threads callback group. numbers correspond sched_setaffinity(2). Leaving array empty means allowing operation cores. policy field, scheduling policies: SCHED_OTHER SCHED_BATCH SCHED_FIFO SCHED_RR SCHED_DEADLINE task scheduling policy SCHED_OTHER SCHED_BATCH, executed CFS (Completely Fair Scheduler). set SCHED_FIFO SCHED_RR, runs FIFO scheduler. SCHED_DEADLINE, scheduled EDF (Earliest Deadline scheduler. Depending scheduler thread (CallbackGroup) operates configuration items vary. configurable items scheduler CFS threads operating CFS, nice YAML file, entry priority. values range (highest priority) (lowest priority). xxxxx affinity: policy: SCHED_OTHER priority: FIFO Scheduler threads operating FIFO scheduler, priority. YAML file, entry priority. values range (highest priority) (lowest priority). range corresponds return values sched_get_priority_max(2) sched_get_priority_min(2). Linux, values xxxxx affinity: policy: SCHED_FIFO priority: EDF Scheduler threads operating EDF scheduler, parameters named runtime, deadline, period. xxxxx affinity: policy: SCHED_DEADLINE runtime: deadline: period: CallbackGroup format YAML template generated cie_thread_configurator, CallbackGroup IDs automatically generated. explained usage instructions, YAML template file ```yaml callback_groups: /sample_node@Subscription(/parameter_events)@Service(/sample_node/get_parameters)@Service(/sample_node/get_parameter_types)@Service(/sample_node/set_parameters)@Service(/sample_node/set_parameters_atomically)@Service(/sample_node/describe_parameters)@Service(/sample_node/list_parameters)@Waitable@Waitable@Waitable@Waitable File truncated lines full file"},
{"url": "https://index.ros.org/p/digestible", "package": "digestible", "package_summary": "The TIERIV digestible ros vendor package", "package_details": "digestible modern implementation merging t-digest data structure. t-digests data structures provide highly accurate statistics large number inputs small memory footprint. minimum, maximum, average, quantile, continuous distribution readily calculated. improved histogram: compact accurately summarizing data bucket sizes set advance. Notable features include: runtime memory allocation. Strict, user-defined upper bound structure size. Written modern Templated weight data types save memory smaller input ranges smaller data type. Speed (average insertion time element Intel Requirements: compatible compiler (developed clang --std=c++17). CMake building utility running tests). Sample Code #include \"digestible/digestible.h\" namespace std; namespace digestible; Structure elements. default values type float weights type unsigned. tdigest digest(20); Add data structure. digest.insert(5); digest.insert(10); digest.insert(4); digestible buffers input data; explicitly merge querying statistics. digest.merge(); printf(\"50th quantile digest.quantile(50)); Additional examples tests directory. digestible Utility assist integrating digestible implementation, utility directory. Compression Factor lone parameter digestible constructor, compression factor requires discussion. Internally t-digests compression factor distribute values input range. combined internal distribution function t-digest distribute data head tail points middle significantly Higher compression factors yield accuracy expense increased memory usage. digestible utility strike balance. Data Structure Size compression factor type size weight type size approximate t-digest size bytes max(v, Acknowledgments work original algorithm reference implementation tdunning. local copy original t-digest paper"},
{"url": "https://index.ros.org/p/extrinsic_calibrator_core", "package": "extrinsic_calibrator_core", "package_summary": "ROS2 package designed to calibrate a set of cameras distributed throughout a room. The calibration is performed using ArUco markers scattered randomly in the environment. Each camera detects one or several ArUco markers within its field of view, and the algorithm reconstructs the positions of the markers to create a global map.", "package_details": "extrinsic_calibrator_core Overview extrinsic_calibrator_core ROS2 package designed calibrate set cameras distributed room. calibration performed ArUco markers scattered randomly environment. camera detects ArUco markers field view, algorithm reconstructs positions markers create global map. positions cameras computed incorporated aforementioned map map. algorithm utilizes OpenCV library detect markers performs matrix transformations compute positions markers cameras relative Features Extrinsically calibrate number cameras simultaneously. Automatically build global ArUco map marker detection multiple viewpoints. Configurable ArUco marker properties camera topics. Includes utility generating printable ArUco markers. Configuration package configuration options YAML files. ArUco Marker Parameters customize ArUco markers calibration process modifying aruco_parameters.yaml file. aruco_params: aruco_dict: OpenCV marker dictionary type: string default_value: \"DICT_6X6_250\" marker_length: Length marker side meters type: double default_value: Camera Topics Parameters topics camera camera_topics_parameters.yaml file. setup scalable handle cameras needed. cameras_params: cam1: image_topic: type: string default_value: \"/camera_1/image_raw\" camera_info_topic: type: string default_value: \"/camera_1/camera_info\" cam2: image_topic: type: string default_value: \"/camera_2/image_raw\" camera_info_topic: type: string default_value: \"/camera_2/camera_info\" cam3: image_topic: type: string default_value: \"/camera_3/image_raw\" camera_info_topic: type: string default_value: \"/camera_3/camera_info\" Usage Place ArUco marker camera marker serve reference point. system marker\u2019s position origin global coordinate system, called map. Distribute remaining ArUco markers room, ensuring they\u2019re visible cameras. results: camera multiple markers. Aim overlap, multiple cameras markers. markers camera detect, cameras markers, accurate calibration Remember, system builds map marker positions, determines camera positions based map. markers visible multiple cameras helps create accurate interconnected calibration. cameras_paint Initiate calibration process running extrinsic_calibrator_node. Wait algorithm gather transform marker camera. algorithm iteratively user marker transforms finally reliable verified. calibrator provide tables information, calibration place. Finally, calibration frame marker camera published Launching Calibrator File truncated lines full file"},
{"url": "https://index.ros.org/p/extrinsic_calibrator_examples", "package": "extrinsic_calibrator_examples", "package_summary": "ROS2 package designed to provide examples on how to use the extrinsic_calibrator_core package as well as useful ros2 launch files to launch the cameras, the calibrator, as well as a demonstration rviz file.", "package_details": "extrinsic_calibrator_examples Overview extrinsic_calibrator_examples ROS2 package designed provide examples extrinsic_calibrator_core package ros2 launch files launch cameras, calibrator, demonstration rviz file. Features Launch file launch set cameras usb_camera package set config files configure cameras. Laucnh file launch rviz file visualize markers camera frames rviz file configure Launch file launch previous, calibrator, set cameras, rviz visualizer calibrator Configuration package configuration options YAML files. Camera configuration configuration file l515.yaml file configure camera usb_camera package, intrinsic calibration file. ros__parameters: video_device: \"/dev/video12\" \"ffplay /dev/video12\" test framerate: io_method: \"mmap\" frame_id: \"cam2_frame\" pixel_format: \"yuyv\" usb_cam/supported_formats list supported formats av_device_format: \"YUV422P\" image_width: image_height: camera_name: \"cam2\" camera_info_url: \"package://extrinsic_calibrator_examples/config/l515_intrinsics.yaml\" brightness: contrast: saturation: sharpness: gain: auto_white_balance: true white_balance: autoexposure: true exposure: autofocus: false focus: Don\u2019t forget modify parameter camera_info_url properly link camera configuration intrinsic calibration file. image_width: image_height: camera_name: \"cam2\" camera_matrix: rows: cols: data: distortion_model: \"plumb_bob\" distortion_coefficients: rows: cols: data: rectification_matrix: rows: cols: data: projection_matrix: rows: cols: data: case launch cameras launch file, simply add additional nodes launch file launch_usb_cameras.launch.py: d435_config os.path.join(config_dir, \u2018d435.yaml\u2019) l515_config os.path.join(config_dir, \u2018l515.yaml\u2019) d457_config os.path.join(config_dir, \u2018d457.yaml\u2019) return LaunchDescription([ Node( package=\u2019usb_cam\u2019, executable=\u2019usb_cam_node_exe\u2019, name=\u2019d435_camera\u2019, namespace=\u2019camera_1\u2019, parameters=[d435_config], output=\u2019screen\u2019 Node( package=\u2019usb_cam\u2019, executable=\u2019usb_cam_node_exe\u2019, name=\u2019l515_camera\u2019, namespace=\u2019camera_2\u2019, parameters=[l515_config], output=\u2019screen\u2019 Node( package=\u2019usb_cam\u2019, executable=\u2019usb_cam_node_exe\u2019, name=\u2019d457_camera\u2019, File truncated lines full file"},
{"url": "https://index.ros.org/p/fadecandy_driver", "package": "fadecandy_driver", "package_summary": "ROS driver for fadecandy LED controllers", "package_details": "Fadecandy driver ROS node controlling LEDs fadecandy board. python-usb talk board, doesn\u2019t fadecandy server dependencies fadecandy repo. fadecandy board fadecandy firmware Nodes fadecandy_node Parameters ~restart_patience: Driver restart patience connection established (default=1.) Topics Subscribers set_leds (fadecandy_msgs/LEDArray): Leds reference Publishers diagnostics (diagnostic_msgs/DiagnosticStatus): Serial connection status diagnostics run Start node. Depending permissions, run root talk USB device. ros2 run fadecandy_driver fadecandy_node working, send test pattern client script. ros2 run fadecandy_driver example_client Note LEDs addressed fadecandy board pairs outputs, numbered PCB. control single Neopixel LED strip LEDs. LEDArray mesage, color outputs arbitrary number strips. \u201cstrips\u201d array LEDArray length colors applied strips, starting strip board. wanted provide colors strip strip include empty LEDStrip messages \u201cstrips\u201d message LEDStrip message provide list color values LED. colors LEDs rest set (completely (alpha) values colors aren\u2019t Finally, fadecandy board doesn\u2019t knowing strips attached long pushes values strips. Configuring linux device permissions default, access Fadecandy USB device linux libusb requires running root. fix copy rules file udev directory package /etc/udev/rules.d. sudo udev/10-fadecandy.rules /etc/udev/rules.d/ reload udev rules. sudo udevadm control --reload-rules udevadm trigger Fadecandy device plugged unplug replug user added dialout group. able run needing root!"},
{"url": "https://index.ros.org/p/fadecandy_msgs", "package": "fadecandy_msgs", "package_summary": "ROS msgs for fadecandy LED controllers", "package_details": "Fadecandy msgs ROS msgs fadecandy LED controllers"},
{"url": "https://index.ros.org/p/fluent_bit_vendor", "package": "fluent_bit_vendor", "package_summary": "A vendor package for An End to End Observability Pipeline", "package_details": "fluent_bit_vendor CMake wrapper provide Fluent Bit API. wrapper compiles Fluent Bit export library includes. includes standard package patch. ROS project: Add dependency package.xml Add dependency CMakeLists.txt find_package(fluent_bit_vendor REQUIRED) find_package(fluent_bit REQUIRED) Include project #pragma GCC diagnostic push #pragma GCC diagnostic \"-Wpedantic\" #pragma GCC diagnostic \"-Wunused-parameter\" #pragma GCC diagnostic \"-Wparentheses\" #pragma GCC diagnostic \"-Wsign-compare\" #include <fluent-bit.h> #pragma GCC diagnostic pop Link cpp file target_link_libraries( my_library fluent_bit::fluent_bit Run colcon build"},
{"url": "https://index.ros.org/p/fogros2", "package": "fogros2", "package_summary": "A ROS 2 extension for the cloud deployment of computational graphs in a cloud-provider\n    agnostic and security-conscious manner.", "package_details": "FogROS2 FogROS2 extends ROS cloud deployment computational graphs security-conscious manner. researchers easily securely deploy ROS abstractions cloud providers minimal effort, gaining access additional computing substrates including CPU cores, GPUs, FPGAs, TPUs, pre-deployed software researchers. FogROS2 extends ROS launch system, introducing additional syntax roboticists launch time components architecture deployed cloud components deployed edge. FogROS2 Install Quickstart Docker (Recommended) Natively Install Dependencies Launch ROS computational graphs cloud Docker (Recommended) Native Run robotics applications Setting Automatic Image Transport Command Line Interface Common Issues Running Examples: Install Quickstart ROS Ubuntu, install FogROS ROS requisites scratch, follow instructions Docker (Recommended) Alternatively, simplify reproduction virtualization environment Docker. watch video tutorial git clone humble https://github.com/BerkeleyAutomation/FogROS2 FogROS2 Install AWS CLI sudo apt install awscli Configure AWS Basic Settings. run command, security credentials, output format AWS Region. https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html aws configure #Build Docker Image docker build fogros2 default, command build docker image ROS Rolling Ubuntu (jammy). defaults changed --build-arg flag docker build fogros2:focal-humble --build-arg UBUNTU_DISTRO=focal --build-arg ROS_DISTRO=humble build ROS Humble image Ubuntu (focal)). Note: Dockerfile cooked you\u2019re workstation Arm-based architecture build container docker build --platform linux/amd64 fogros2 Natively FogROS2 ROS meta-package, fetch workspace, build source workspace overlay start capabilities. watch video tutorial Install Dependencies ROS dependencies: Ubuntu sudo apt install ros-rolling-rmw-cyclonedds-cpp FogROS dependencies: sudo apt install python3-pip wireguard unzip sudo pip3 install wgconfig boto3 paramiko scp Install AWS CLI sudo apt install awscli Configure AWS Basic Settings. run command, security credentials, output format AWS Region. https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html aws configure source /opt/ros/<your-ros2-distro>/setup.bash mkdir ~/fog_ws/src ~/fog_ws/src git clone humble https://github.com/BerkeleyAutomation/FogROS2 colcon build re-build workspace source install/setup.bash Launch ROS computational graphs cloud Docker (Recommended) video tutorial launch fogros2 container docker run --net=host $HOME/.aws:/root/.aws --cap-add=NET_ADMIN fogros2 launch talker node cloud ros2 launch fogros2_examples talker.aws.launch.py (Note: Dockerfile cooked you\u2019re workstation Arm-based architecture run container docker run --platform linux/amd64 --net=host --cap-add=NET_ADMIN fogros2.) Native Note: commands run root ROS workspace. video tutorial source /opt/ros/<your-ros2-distro>/setup.bash source install/setup.bash export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp export CYCLONEDDS_URI=file://$(pwd)/install/fogros2/share/fogros2/configs/cyclonedds.ubuntu.$(lsb_release sed 's/\\.//').xml ros2 launch fogros2_examples talker.aws.launch.py File truncated lines full file"},
{"url": "https://index.ros.org/p/fogros2_examples", "package": "fogros2_examples", "package_summary": "Examples using FogROS2", "package_details": "FogROS2 FogROS2 extends ROS cloud deployment computational graphs security-conscious manner. researchers easily securely deploy ROS abstractions cloud providers minimal effort, gaining access additional computing substrates including CPU cores, GPUs, FPGAs, TPUs, pre-deployed software researchers. FogROS2 extends ROS launch system, introducing additional syntax roboticists launch time components architecture deployed cloud components deployed edge. FogROS2 Install Quickstart Docker (Recommended) Natively Install Dependencies Launch ROS computational graphs cloud Docker (Recommended) Native Run robotics applications Setting Automatic Image Transport Command Line Interface Common Issues Running Examples: Install Quickstart ROS Ubuntu, install FogROS ROS requisites scratch, follow instructions Docker (Recommended) Alternatively, simplify reproduction virtualization environment Docker. watch video tutorial git clone humble https://github.com/BerkeleyAutomation/FogROS2 FogROS2 Install AWS CLI sudo apt install awscli Configure AWS Basic Settings. run command, security credentials, output format AWS Region. https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html aws configure #Build Docker Image docker build fogros2 default, command build docker image ROS Rolling Ubuntu (jammy). defaults changed --build-arg flag docker build fogros2:focal-humble --build-arg UBUNTU_DISTRO=focal --build-arg ROS_DISTRO=humble build ROS Humble image Ubuntu (focal)). Note: Dockerfile cooked you\u2019re workstation Arm-based architecture build container docker build --platform linux/amd64 fogros2 Natively FogROS2 ROS meta-package, fetch workspace, build source workspace overlay start capabilities. watch video tutorial Install Dependencies ROS dependencies: Ubuntu sudo apt install ros-rolling-rmw-cyclonedds-cpp FogROS dependencies: sudo apt install python3-pip wireguard unzip sudo pip3 install wgconfig boto3 paramiko scp Install AWS CLI sudo apt install awscli Configure AWS Basic Settings. run command, security credentials, output format AWS Region. https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html aws configure source /opt/ros/<your-ros2-distro>/setup.bash mkdir ~/fog_ws/src ~/fog_ws/src git clone humble https://github.com/BerkeleyAutomation/FogROS2 colcon build re-build workspace source install/setup.bash Launch ROS computational graphs cloud Docker (Recommended) video tutorial launch fogros2 container docker run --net=host $HOME/.aws:/root/.aws --cap-add=NET_ADMIN fogros2 launch talker node cloud ros2 launch fogros2_examples talker.aws.launch.py (Note: Dockerfile cooked you\u2019re workstation Arm-based architecture run container docker run --platform linux/amd64 --net=host --cap-add=NET_ADMIN fogros2.) Native Note: commands run root ROS workspace. video tutorial source /opt/ros/<your-ros2-distro>/setup.bash source install/setup.bash export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp export CYCLONEDDS_URI=file://$(pwd)/install/fogros2/share/fogros2/configs/cyclonedds.ubuntu.$(lsb_release sed 's/\\.//').xml ros2 launch fogros2_examples talker.aws.launch.py File truncated lines full file"},
{"url": "https://index.ros.org/p/franka_description", "package": "franka_description", "package_summary": "franka_description contains URDF files and meshes of Franka robots", "package_details": "Franka Description Overview Franka Description repository offers Franka Robotics models. includes detailed models essential robot parameters, crucial simulating robots environments. Additionally, repository feature create URDFs (Unified Robot Description Format) selected Franka robot model. Features Comprehensive Models: Detailed models Franka Robotics models accurate simulation visualization. Robot Parameters: robot parameters realistic reliable simulations. URDF Creation: Ability create URDF files selected Franka robot model, essential robot simulations ROS robotic middleware. Prerequisites Docker URDF Creation start generation, execute start.sh script. arguments passed script create_urdf.py. Start generation urdf model ./scripts/create_urdf.sh <robot_id> urdf generation performed create_urdf.py script offers parameters customize output urdf model: usage: create_urdf.py [--robot-ee] [--no-ee] [--with-sc] [--abs-path] [--host-dir HOST_DIR] [--only-ee] [--no-prefix] robot_model Generate franka robots urdf models. Script executed franka_description root folder! positional arguments: robot_model robot model (accepted values fr3v2, fer, fr3_duo, optional arguments: show message exit --robot-ee robot effector (accepted values franka_hand, cobot_pump) --no-ee Disable loading end-effector (robot-ee ingnored set) [WARNING: argument removed future releases, introducing --with-sc Include self-collision volumes urdf model. --abs-path absolute paths. --host-dir HOST_DIR Provide host directory absolute path. --only-ee URDF solely end-effector data --no-prefix Override robot prefix links, joints visuals urdf file. Visualize ROS2 franka_description offered ROS2 package. urdf file visualized RViz command: visualize_franka.sh launches visualize_franka.launch.py ros2 instance running docker container arguments script forwarded launch arguments Accepted launch arguments arm_id accepted values fr3v2, fer, fr3_duo load_gripper accepted values true (default ee_id franka_hand), false (ee_id [WARNING: argument removed future releases, introducing ee_id accepted values franka_hand, cobot_pump ./scripts/visualize_franka.sh arm_id:=<robot_id> visualize duo designed multiple controller managers, command ./scripts/visualize_franka_duo.sh arm_id:=<robot_id> License project licensed Apache License LICENSE file details."},
{"url": "https://index.ros.org/p/franka_ign_ros2_control", "package": "franka_ign_ros2_control", "package_summary": "Ignition ros2_control package allows to control simulated robots using ros2_control framework.", "package_details": "Franka Ign ROS Control package based https://github.com/ros-controls/gz_ros2_control/tree/humble main difference Franka robots gravity compenstation added hardware side. consistent examples, added gravity torque term joint ign_system.cpp"},
{"url": "https://index.ros.org/p/gazebo_no_physics_plugin", "package": "gazebo_no_physics_plugin", "package_summary": "Disables physics in gazebo", "package_details": "Distro Status Humble Gazebo Physics Plugin Motivation situations full physics simulation overkill serves complicate testing. advantageous simulate object movement, sensor input solid body collisions. Goals plugin disable underlying physics engine Gazebo objects react forces collisions. Gravity effect. Requirements plugin applied upper level world file. <gazebo> <plugin name=\"gazebo_no_physics_world_plugin\" filename=\"libgazebo_no_physics_world_plugin.so\"></plugin> </gazebo> Design plugin based source code Boeing, migrated ROS2. reference visit: https://gitlab.com/mtdi/pi9419/boeing/gazebo_no_physics_plugin License package released Apache-2.0 License Contributing contribution repository Apache-2.0 License, dictated license contribute, issue @brta-jc (jason.cochrane@boeing.com)"},
{"url": "https://index.ros.org/p/gazebo_planar_move_plugin", "package": "gazebo_planar_move_plugin", "package_summary": "Planar move of objects in gazebo", "package_details": "Gazebo Planar Movement Plugin Distro Status Humble Motivation Movement planning packages ROS differential drive omni-directional drive mobile robots publish Twist message topic cmd_vel. order simulate robots, Gazebo plugin required listen topic, apply movement simulated robot Model Gazebo. Goals position mode: Listen /cmd_vel Twist message update Gazebo Model time interpolated position update based Twist linear angular velocity. velocity mode: Listen /cmd_vel Twist message update Gazebo Model velocities Twist linear angular velocities. Odometry form nav_msgs/Odometry published /odom odometry_topic parmeter. external ROS localisation navigation packages. ground_truth False, configurable noise applied odometry Imu tracking published form sensor_msgs/Imu. Requirements Physics disabled gazebo_no_physics_plugin position mode. Definitions Definition Description Model instanced SDF Gazebo. Models consist Links connected Joints. Design Assumptions Limitations plugin simulates planar movements axis components velocity model position component set Position uncertainty reflected covariance components Odom Imu topics published. relevant xyz covariance components set License package released Apache License Contributing contribution repository Apache-2.0 License, dictated license contribute, issue @brta-jc (jason.cochrane@boeing.com)"},
{"url": "https://index.ros.org/p/hey5_description", "package": "hey5_description", "package_summary": "This package contains the description (mechanical, kinematic, visual,\n    etc.) of the Hey5 hand.  The files in this package are parsed and used by\n    a variety of other components.  Most users will not interact directly\n    with this package.", "package_details": "hey5_description package moved https://github.com/pal-robotics/pal_hey5"},
{"url": "https://index.ros.org/p/homing_local_planner", "package": "homing_local_planner", "package_summary": "The homing_local_planner package", "package_details": "homing_local_planner ROS Package simple, easy-to-use, effective path tracking planner complete demo. homing_local_planner package implements plug-in nav_core::BaseLocalPlanner navigation stack ROS1 plug-in nav2_core::Controller Nav2 ROS2. underlying method called Homing Control objective guide robot reference path, pure pursuit algorithm Implemented based reference. code implementation package reference teb_local_planner. scheme considers dynamic goal pose path located distance robots current pose. robot supposed chase moving goal pose (look-ahead pose) path. path tracking strategy similar human drivers steer vehicle dynamic lookahead point road, distance depends vehicle speed, road curvature visibility. obstacle avoidance feature designed detours exploration. obstacle appears planned path, robot slows stops obstacle cleared, rail vehicle. Install Git clone repository checkout branch, compile. ~/your_ws/src git clone https://github.com/zengxiaolei/homing_local_planner.git colcon_build catkin_make Parameter Robot: max_vel_x: maximum velocity direction robot max_vel_theta: maximum angular velocity robot acc_lim_x: maximum translational acceleration robot acc_lim_theta: maximum angular acceleration robot min_turn_radius: minimum turning radius robot turn_around_priority: true, robot preferentially adjusts orientation fit direction path stop_dist: Euclidean distance nearest lethal point planned path robot frame origin distance, robot stops dec_dist: Euclidean distance nearest lethal point planned path robot frame origin distance, robot slows Trajectory: max_global_plan_lookahead_dist: maximum length (cumulative Euclidean distances) subset global plan account optimization global_plan_viapoint_sep: min. separation consecutive via-points extracted global plan global_plan_goal_sep: min. separation via-point goal pose global_plan_prune_distance: distance robot via_points global plan pruning Goal Tolerance: yaw_goal_tolerance: allowed final orientation(yaw) error xy_goal_tolerance: allowed final euclidean distance goal position Optimization: k_rho: proportional parameter linear velocity adjustment based Euclidean distance robot position current target k_alpha: proportional parameter angular velocity adjustment based tangential angle target position robot\u2019s frame reference k_phi: proportional parameter angular velocity adjustment based difference robot\u2019s orientation(yaw) current target orientation(yaw) Run Demo Webots Simulator ROS2 Humble Firstly simulation platform installed. webots installtion (ubuntu) detail Run launch easily command: ros2 launch homing_local_planner robot_launch.py Demo launchecd world Stage Simulator ROS1 ROS2 foxy complete demo based stage simulator package. Firstly simulation platform installed. ROS2: stage_ros2 ROS1: stage_ros Run launch easily command: ROS2: ros2 run stage_ros stageros /home/.../homing_local_planner/test/stage/maze_diff_drive.world ros2 launch homing_local_planner demo.launch.py File truncated lines full file"},
{"url": "https://index.ros.org/p/hri_face_body_matcher", "package": "hri_face_body_matcher", "package_summary": "The hri_face_body_matcher package", "package_details": "hri_face_body_matcher Overview hri_face_body_matcher ROS4HRI-compatible face body matcher node. finds matches recognized faces bodies based relative position source image. Algorithm associations recognized face body, matching cost computed, linearly decreasing distance body nose face center image. rate confidence drops proportional ~confidence_scaling_factor parameter face size, intended diagonal length. confidence max(0, \\frac{distance c.s.f.}{2 face\\ size}) ROS API Parameters parameters loaded lifecycle configuration transition. ~confidence_threshold (double default: Candidate matches confidence threshold published. ~confidence_scaling_factor (double default: Factor scaling quickly estimated confidence drops distance matched face body increases. Topics package ROS4HRI conventions (REP-155). topic message type ROS4HRI convention implied. Subscribed /humans/bodies/tracked /humans/bodies/<body_id>/skeleton2d /humans/faces/tracked /humans/faces/<face_id>/roi Published /humans/candidate_matches Execution ros2 launch hri_face_body_matcher hri_face_body_matcher.launch.py usage, execute terminals: USB camera: apt install ros-humble-usb-cam ros2 run usb_cam usb_cam_node_exe HRI face detect: PAL robot apt install ros-humble-hri-face-detect build install source. ros2 launch hri_face_detect face_detect.launch.py HRI fullbody: PAL robot apt install ros-humble-hri-fullbody build install source. ros2 launch hri_fachri_fullbody hri_fullbody.launch.py HRI face body matcher: apt install ros-humble-hri-face-body-matcher ros2 launch hri_face_body_matcher hri_face_body_matcher.launch.py RViz HRI plugin: apt install ros-humble-rviz2 PAL robot apt install ros-humble-hri-rviz build install source. rviz2 RViz, add \u2018Humans\u2019 plugin detected faces. face IDs permanently assigned people."},
{"url": "https://index.ros.org/p/hri_face_detect", "package": "hri_face_detect", "package_summary": "Google Mediapipe-based face detection for ROS4HRI", "package_details": "hri_face_detect ROS4HRI-compiant ROS node perform fast face detection YuNet face detector Mediapipe Face Mesh. performs greater distances (depending image resolution image scaling applied) extracts keypoints. works close distances extracts ROS4HRI-defined landmarks. Installing dependencies running package PAL, install dependencies: pip install requirements.txt ROS API Parameters parameters loaded lifecycle configuration transition. processing_rate (int, default: Image processing logic execution rate Hertz. image_compressed (bool, default: false): Selects compressed image transport. face_mesh (bool, default: true): enables additional Mediapipe Face Mesh detection. confidence_threshold (double, default: Candidate face detections confidence threshold published. image_scale (double, default: YuNet face detector accepts input image dynamic size. parameter controls rescale factor applied input image running YuNet face detector. image scale results processing time required detection confidences. output data RoI) invariant parameter refers original input image size. filtering_frame (string, default: \u201ccamera_color_optical_frame\u201d): reference frame estimated face pose transformed performing filtering operations. Due proximity camera frame detected faces, cameras mounted frequently moving robot\u2019s components robot\u2019s head), filtering face pose expressed camera optical frame reduce filtering quality. deterministic_ids (bool, default: false): true face ids start increases face. false random letters sequence. debug (bool, default: false): true opens windows showing input image face detections overlayed. Topics package ROS4HRI conventions (REP-155). topic message type ROS4HRI convention implied. Subscribed image (sensor_msgs/msg/Image): image_compressed false image/compressed (sensor_msgs/msg/CompressedImage): image_compressed true; note suffix /compressed added remapping resolved, remap image image_compressed camera_info (sensor_msgs/msg/CameraInfo) Published /humans/faces/<faceID>/roi /humans/faces/<faceID>/landmarks /humans/faces/<faceID>/cropped /humans/faces/<faceID>/aligned /humans/faces/tracked /diagnostics (diagnostic_msgs/msg/DiagnosticArray) Execution ros2 launch hri_face_detect hri_face_detect.launch.py usage, execute terminals: USB camera: apt install ros-humble-usb-cam ros2 run usb_cam usb_cam_node_exe --ros-args pixel_format:=\"mjpeg2rgb\" HRI face detect: apt install ros-humble-hri-face-detect File truncated lines full file"},
{"url": "https://index.ros.org/p/hri_privacy_msgs", "package": "hri_privacy_msgs", "package_summary": "ROS message definitions for declaring privacy-sensitive data flows", "package_details": "hri_privacy_msgs ROS message definitions declaring privacy-sensitive data flows."},
{"url": "https://index.ros.org/p/imu_calib", "package": "imu_calib", "package_summary": "ROS2 package for computing and applying IMU calibration parameters", "package_details": "imu_calib (ROS Humble) repository ROS package tools computing applying calibration parameters IMU measurements. Originally developed ROS Daniel Koch, ported ROS Humble Nathan Romany Fares. Supported ROS Distribution ROS Humble Hawksbill Installation build package ROS workspace: ~/ros2_ws/src git clone https://github.com/Nathan85001/imu_calib.git ros2 rosdep install --from-paths src colcon build source install/setup.bash ros2 run imu_calib do_calib #Follow instructions node stop working ros2 run imu_calib apply_calib Usage package nodes. computes accelerometer calibration parameters saves YAML file, run run node generate YAML calibration file, node file apply calibration uncalibrated IMU topic produce calibrated IMU topic. Nodes do_calib Computes accelerometer calibration parameters. run rosrun terminal launch file, requires keyboard input. receiving IMU message, node prompt hold IMU orientation press Enter record measurements. orientations complete, node compute calibration parameters write YAML file. underlying algorithm least-squares calibration approach based similar STMicroeletronics Application Note Due nature algorithm, obtaining good calibration requires accurate positioning IMU axes. Topics Subscribed Topics imu (sensor_msgs/Imu) raw, uncalibrated IMU measurements Parameters ~calib_file (string, default: \u201cimu_calib.yaml\u201d) file calibration parameters written ~measurements (int, default: number measurements collect orientation ~reference_acceleration (double, default: expected acceleration due gravity apply_calib Applies accelerometer calibration parameters computed do_calib node. optionally (enabled default) computes gyro biases startup subtracts Topics Subscribed Topics raw (sensor_msgs/Imu) raw, uncalibrated IMU measurements Published Topics corrected (sensor_msgs/Imu) corrected, calibrated IMU measurements Parameters ~calib_file (string, default: \u201cimu_calib.yaml\u201d) file read calibration parameters ~calibrate_gyros (bool, default: true) compute gyro biases startup subsequently subtract ~gyro_calib_samples (int, default: number measurements computing gyro biases Acknowledgment Originally developed Daniel Koch ROS Ported ROS Humble maintained Nathan Romany Fares."},
{"url": "https://index.ros.org/p/inuros2", "package": "inuros2", "package_summary": "Inuitive image publisher", "package_details": "convert readme: source text invalid characters encoding UTF-8"},
{"url": "https://index.ros.org/p/kuka_drivers_core", "package": "kuka_drivers_core", "package_summary": "Package containing ROS2 core functions for KUKA robots", "package_details": "Core functionalities drivers package libraries implement common functionalities kuka drivers reduce code duplications code maintainable. Wrapper methods specific services kuka_drivers_core::communication_helpers header-only library providing wrapper methods commonly features. Synchronous service calls rclcpp provide synchronous service calls, implemented service_tools.hpp sendRequest() endpoint arguments: client [ClientT]: initialized service client request [RequestT]: filled request type service_timeout_ms [int] (default: timeout service discovery response_timeout_ms [int] (default: timeout response method returns service response shared pointer). calling ListControllers service controller_manager: rclcpp::Client<controller_manager_msgs::srv::ListControllers>::SharedPtr get_controllers_client_; auto request std::make_shared<controller_manager_msgs::srv::ListControllers::Request>(); auto response kuka_drivers_core::sendRequest<controller_manager_msgs::srv::ListControllers::Response>(get_controllers_client_, request, ros2_control state handling library ros2_control_tools.hpp header, implements wrapper methods modifying states controllers hardware components. Endpoints: changeHardwareState() change state hardware component arguments: client [rclcpp::Client<controller_manager_msgs::srv::SetHardwareComponentState>::SharedPtr]: initialized client hardware_name` [std::string]: hardware component state [uint8_t enum]: desired state state change transition call) timeout_ms [int] (default: timeout response method returns transition successful. changeControllerState() change state controllers arguments: client [rclcpp::Client<controller_manager_msgs::srv::SwitchController>::SharedPtr]: initialized client activate_controllers [std::vector<std::string>]: names controllers activate deactivate_controllers [std::vector<std::string>]: names controllers deactivate strictness [int32_t] (default: STRICT): fail state change unsuccessful method returns transitions successful. Examples: rclcpp::Client<controller_manager_msgs::srv::SetHardwareComponentState>::SharedPtr change_hardware_state_client_; rclcpp::Client<controller_manager_msgs::srv::SwitchController>::SharedPtr change_controller_state_client_; Activate hardware named 'lbr_iisy3_r760' bool success1 changeHardwareState(change_hardware_state_client_, \"lbr_iisy3_r760\", State::PRIMARY_STATE_ACTIVE); Activate 'joint_state_broadcaster' 'joint_trajectory_controller' bool success2 changeControllerState(change_controller_state_client_, {\"joint_state_broadcaster\", \"joint_trajectory_controller\"}, deactivate*/}); Core classes Base classes improved parameter handling core classes implemented repository, ROS2BaseNode improved parameter handling, ROS2BaseLCNode, derives rclcpp_lifecycle::LifecycleNode class implements lifecycle state transitions implemented case. virtual functions, override case desired implementation. Parameter handling base classes provide wrapper method parameter registration, handling parameters convenient. ParameterHandler class, includes ParameterBase template Parameter<T> nested class purpose. Improvements: add_on_set_parameters_callback() called constructors register callback parameter change requests. initial values parameters synced parameter server. parameter type enforced automatically. registered callback access registered parameters, parameter server node sync easy register callback additional checks requested parameter accepted. user define lifecycle states, parameter allowed ParameterSetAccessRights structure. endpoint static parameters, changed initialization. Parameter<T> class supports parameter types (identical types supported rclcpp::Parameter): bool int64_t type satisfying std::is_integral bool) double type satisfying std::is_floating_point) std::string std::vector<uint8_t> std::vector<bool> std::vector<int64_t> File truncated lines full file"},
{"url": "https://index.ros.org/p/kuka_rsi_driver", "package": "kuka_rsi_driver", "package_summary": "A ROS2 hardware interface for use with KUKA RSI", "package_details": "ROS2 ported interface based RSI communication. package interface heavily influenced originated https://github.com/ros-industrial/kuka_experimental."},
{"url": "https://index.ros.org/p/marvelmind_ros2_msgs", "package": "marvelmind_ros2_msgs", "package_summary": "Marvelmind message package for ROS2", "package_details": "marvelmind_ros2_msgs_upstream"},
{"url": "https://index.ros.org/p/marvelmind_ros2", "package": "marvelmind_ros2", "package_summary": "Marvelmind ROS2 package", "package_details": "marvelmind_ros2_upstream Credits Special Carson Loyal (mailto: ctl0021@auburn.edu), original author ROS2 package implementation. Original source code package link: https://drive.google.com/file/d/1R5RfeAG1CbsC296TrZgwc1sQUx_sHGKC/view?usp=sharing"},
{"url": "https://index.ros.org/p/mavlink", "package": "mavlink", "package_summary": "MAVLink message marshaling library.\n  This package provides C-headers and C++11 library\n  for both 1.0 and 2.0 versions of protocol.\n\n  For pymavlink use separate install via rosdep (python-pymavlink).", "package_details": "MAVLink MAVLink Micro Air Vehicle Message Marshalling Library. MAVLink lightweight, header-only message library communication drones and/or ground control stations. consists primarily message-set specifications systems (\u201cdialects\u201d) defined XML files, Python tools convert source code supported languages. additional Python scripts providing examples utilities working MAVLink data. Tip MAVLink suited applications limited communication bandwidth. reference implementation highly optimized resource-constrained systems limited RAM flash memory. field-proven deployed products serves interoperability interface components manufacturers. Quick start Generate headers install minimal MAVLink environment Ubuntu LTS enter terminal: Dependencies sudo apt install python3-pip Clone mavlink directory choice git clone https://github.com/mavlink/mavlink.git --recursive mavlink python3 pip install pymavlink/requirements.txt build MAVLink2 C-library message_definitions/v1.0/common.xml /mavlink directory shown: python3 pymavlink.tools.mavgen --lang=C --wire-protocol=2.0 --output=generated/include/mavlink/v2.0 message_definitions/v1.0/common.xml cmake include headers cmake, install locally, directory install: cmake -Bbuild -DCMAKE_INSTALL_PREFIX=install -DMAVLINK_DIALECT=common -DMAVLINK_VERSION=2.0 cmake --build build --target install find_package dependency CMakeLists.txt: find_package(MAVLink REQUIRED) add_executable(my_program my_program.c) target_link_libraries(my_program PRIVATE MAVLink::mavlink) pass local install directory cmake (adapt directory structure): ../my_program cmake -Bbuild -DCMAKE_PREFIX_PATH=../mavlink/install full check examples/c. Note: target_link_libraries cmake, doesn\u2019t \u201clink\u201d MAVLink header-only library. instructions Instructions libraries covered MAVLink Libraries (mavgen). Note: Installing MAVLink Toolchain explains install MAVLink Ubuntu platforms Windows, Generating MAVLink Libraries explains build MAVLink programming languages supported project. sub-topics MAVLink Libraries explain generated libraries. Key Links Documentation/Website (mavlink.io/en/) Discussion/Support Contributing License"},
{"url": "https://index.ros.org/p/base2d_kinematics", "package": "base2d_kinematics", "package_summary": "Implementation of simple kinematics in two and half dimensions", "package_details": "base2d_kinematics Based part dwb_plugins::KinematicParameters"},
{"url": "https://index.ros.org/p/mocap4r2_control_msgs", "package": "mocap4r2_control_msgs", "package_summary": "mocap4r2_control_msgs", "package_details": "mocap4r2_control_msgs repository ROS messages communicate drivers system. MOCAP4ROS2 project support ROS2 integration Vicon cameras (Mocap systems based vision) Technaid TechMCS IMUs (Mocap systems based motion sensors). project MOCAP4ROS2 funded Focused Technical Project ROSIN. Supported ROSIN ROS-Industrial Quality-Assured Robot Software Components. information: rosin-project.eu project received funding European Union\u2019s Horizon research innovation programme grant agreement"},
{"url": "https://index.ros.org/p/mocap4r2_marker_viz", "package": "mocap4r2_marker_viz", "package_summary": "Node for visualizing markers", "package_details": "Marker visualization node Sends marker data rviz graphical rendering. Parameters parameters configure visualization: default_marker_color_r marker color red scale default_marker_color_g marker color green scale default_marker_color_b marker color blue scale default_marker_color_b marker alpha scale marker_scale_x scale marker meters) marker_scale_y scale marker meters) marker_scale_z scale marker meters) marker_lifetime duration marker visible receiving marker data seconds) marker_frame (mocap): origin markers rendered relative correspond origin mocap system namespace (mocap_markers): namespace attached visualized markers use_markers_with_id (true): Marker messages false) MarkerWithId messages true). correspond configuration motion capture system driver. markers supported Qualisys driver. Services set_marker_color service marker color based marker color. highlighting markers external tools. reset_marker_color service resets color marker marker default services work MarkerWithId messages."},
{"url": "https://index.ros.org/p/mocap4r2_msgs", "package": "mocap4r2_msgs", "package_summary": "mocap4r2_msgs", "package_details": "mocap4r2_msgs repository ROS messages Motion Capture Systems MOCAP4ROS2 project support ROS2 integration Vicon cameras (MOCAP systems based vision) Technaid TechMCS IMUs (MOCAP systems based motion sensors). project MOCAP4ROS2 funded Focused Technical Project ROSIN. Supported ROSIN ROS-Industrial Quality-Assured Robot Software Components. information: rosin-project.eu project received funding European Union\u2019s Horizon research innovation programme grant agreement"},
{"url": "https://index.ros.org/p/multiple_topic_monitor", "package": "multiple_topic_monitor", "package_summary": "ROS 2 package for monitoring the frequency and delay of multiple topics.", "package_details": "Multiple Topic Monitor ROS package monitoring frequency delay multiple topics. Installation Clone repository ROS workspace build colcon: ~/your_ros2_workspace/src git clone https://github.com/yukkysaito/multiple_topic_monitor.git colcon build Usage Running Node run multiple topic monitor node, ros2 topic multiple_topic_monitor command, topics monitor: ros2 topic multiple_topic_monitor /topic1 /topic2 /topic3 Option Description --window Specifies window size calculating message averages. Default --csv Enables CSV output mode. Output node output frequency delay applicable) topic monitored. delay measured seconds. yukky@yukky:~/workspace/multiple_topic_monitor$ ros2 topic multiple_topic_monitor /planning/hazard_lights_cmd /perception/obstacle_segmentation/pointcloud [INFO [topic_monitor]: Subscribed /planning/hazard_lights_cmd [INFO [topic_monitor]: Subscribed [INFO [topic_monitor]: Subscribed /perception/obstacle_segmentation/pointcloud [INFO [topic_monitor]: header topic /planning/hazard_lights_cmd [INFO [topic_monitor]: header topic [INFO [topic_monitor]: [INFO [topic_monitor]: /planning/hazard_lights_cmd [INFO [topic_monitor]: [INFO [topic_monitor]: /perception/obstacle_segmentation/pointcloud [INFO [topic_monitor]: /perception/obstacle_segmentation/pointcloud Delay Avg: Min: Max: Std Dev: [INFO [topic_monitor]: [INFO [topic_monitor]: /planning/hazard_lights_cmd [INFO [topic_monitor]: [INFO [topic_monitor]: /perception/obstacle_segmentation/pointcloud [INFO [topic_monitor]: /perception/obstacle_segmentation/pointcloud Delay Avg: Min: Max: Std Dev: [INFO [topic_monitor]: [INFO [topic_monitor]: /planning/hazard_lights_cmd [INFO [topic_monitor]: [INFO [topic_monitor]: /perception/obstacle_segmentation/pointcloud [INFO [topic_monitor]: /perception/obstacle_segmentation/pointcloud Delay Avg: Min: Max: Std Dev: [INFO [topic_monitor]: [INFO [topic_monitor]: /planning/hazard_lights_cmd [INFO [topic_monitor]: [INFO [topic_monitor]: /perception/obstacle_segmentation/pointcloud [INFO [topic_monitor]: /perception/obstacle_segmentation/pointcloud Delay Avg: Min: Max: Std Dev: csv format yukky@yukky:~/workspace/multiple_topic_monitor/src/multiple_topic_monitor$ ros2 topic multiple_topic_monitor /planning/hazard_lights_cmd /perception/obstacle_segmentation/pointcloud --csv [INFO [topic_monitor]: Subscribed /planning/hazard_lights_cmd [INFO [topic_monitor]: Subscribed [INFO [topic_monitor]: Subscribed /perception/obstacle_segmentation/pointcloud [INFO [topic_monitor]: header topic /planning/hazard_lights_cmd [INFO [topic_monitor]: header topic timestamp, /planning/hazard_lights_cmd /perception/obstacle_segmentation/pointcloud /planning/hazard_lights_cmd delay[ms], delay[ms], /perception/obstacle_segmentation/pointcloud delay[ms] License software licensed BSD-3-Clause License original code, additional code written Yukihiro Saito licensed Apache License, Version LICENSE file details."},
{"url": "https://index.ros.org/p/namoros", "package": "namoros", "package_summary": "A ROS2 Package for Multi-Robot Navigation Among Movable Obstacles", "package_details": "namoros ROS2 nodes executing namosim plans real Gazebo-simulated robots. System Requirements Ubuntu ROS2 Humble Demo root repo run colcon build source install/setup.bash launch demo script. ./namoros/launch_demo.sh Usage demo script code details. Usage Real Robot step run real robot prepare map image yaml files namo-config yaml file. Note units namo_planner svg scenario files centimeters! High-Level Architecture High-Level Internal Operation"},
{"url": "https://index.ros.org/p/namosim", "package": "namosim", "package_summary": "A navigation planner for Navigation Among Movable Obstacles (NAMO)", "package_details": "NAMOSIM NAMOSIM robot motion planner designed problem navigation movable obstacles (NAMO). simulates mobile robots navigating polygonal environments obstacles grabbed relocated. supports holonomic differential drive motion models. variety agent types implemented, including primarily Stilman2005 baseline agent. agents utilizing alternative algorithmic approaches created plugged planner straightforward manner implementing Agent base class. Documentation check docs site installation usage instructions. build docs site locally, run: ./scripts/make_docs.sh Demos couple demo videos applying namosim real simulated robots. NAMOSIM Turtlebo NAMOSIM Multiple Robots Gazebo JOSS Paper Checkout JOSS paper: Authors Benoit Renault Jacques Saraydaryan David Brown Olivier Simonin Affiliated Teams Organisations Org/Team Inria INSA Lyon CITI Laboratory CHROMA CHROMA Team Cite reuse part project research, cite papers: @article{Brown2025, doi {10.21105/joss.08816}, url {https://doi.org/10.21105/joss.08816}, year publisher Open Journal}, volume number pages author {Brown, David Saraydaryan, Jacques Renault, Benoit Simonin, Olivier}, title {NAMOSIM: Robot Motion Planner Navigation Movable Obstacles}, journal {Journal Open Source Software} @inproceedings{renault_2024_iros, author {Renault, Benoit Saraydaryan, Jacques Brown, David Simonin, Olivier}, booktitle IEEE/RSJ International Conference Intelligent Robots Systems (IROS)}, title {Multi-Robot Navigation Movable Obstacles: Implicit Coordination Deal Conflicts Deadlocks}, year volume number pages keywords {Machine learning algorithms;Costs;Navigation;Robot kinematics;Machine learning;System recovery;Benchmark testing;Multi-robot systems;Intelligent robots}, doi {10.1109/IROS58592.2024.10802092} @inproceedings{renault_2020_iros, title {Modeling Social Placement Cost Extend Navigation Movable Obstacles (NAMO) Algorithms}, author {Renault, Benoit Saraydaryan, Jacques Simonin, Olivier}, booktitle {IEEE/RSJ International Conference Intelligent Robots Systems (IROS)}, address {Las Vegas, United States}, year month {October}, pages doi {10.1109/IROS45743.2020.9340892}, url {https://hal.archives-ouvertes.fr/hal-02912925}, pdf {https://hal.archives-ouvertes.fr/hal-02912925/file/IROS_2020_Camera_Ready.pdf}"},
{"url": "https://index.ros.org/p/openarm_bringup", "package": "openarm_bringup", "package_summary": "Bringup script for OpenArm", "package_details": "OpenArm Bringup package launch files bring OpenArm robot system. Quick Start Launch OpenArm configuration fake hardware: ros2 launch openarm_bringup openarm.launch.py arm_type:=v10 hardware_type:=real Launch Files openarm.launch.py Single arm configuration openarm.bimanual.launch.py Dual arm configuration Key Parameters arm_type Arm type (default: hardware_type real/mock/mujoco hardware (default: real) can_interface interface (default: robot_controller Controller type: joint_trajectory_controller forward_position_controller Launched Robot state publisher Controller manager ros2_control Joint state broadcaster Robot controller (joint trajectory position) Gripper controller RViz2 visualization"},
{"url": "https://index.ros.org/p/opennav_docking", "package": "opennav_docking", "package_summary": "A Task Server for robot charger docking", "package_details": "Open Navigation\u2019s Nav2 Docking Server package docking server"},
{"url": "https://index.ros.org/p/opennav_docking_bt", "package": "opennav_docking_bt", "package_summary": "A set of BT nodes and XMLs for docking", "package_details": "Open Navigation\u2019s Docking Nodes Examples XML files docking undocking nodes"},
{"url": "https://index.ros.org/p/opennav_docking_core", "package": "opennav_docking_core", "package_summary": "A set of headers for plugins core to the opennav docking framework", "package_details": "Open Navigation\u2019s Docking Plugin Headers plugin interfaces docking framework"},
{"url": "https://index.ros.org/p/opennav_docking_msgs", "package": "opennav_docking_msgs", "package_summary": "A set of ROS interfaces for docking and undocking", "package_details": "Open Navigation\u2019s Nav2 Docking Msgs package set messages docking undocking"},
{"url": "https://index.ros.org/p/opennav_following_bt", "package": "opennav_following_bt", "package_summary": "A set of BT nodes and XMLs for following", "package_details": "Nodes Examples XML files follow nodes"},
{"url": "https://index.ros.org/p/opennav_following_demo", "package": "opennav_following_demo", "package_summary": "Following demo.", "package_details": "Demo package launch file set configuration files server. purpose package provide simple easy-to-use set run server. installing sourcing\u2026 Publish continuosly message ```/detected_dynamic_pose topic simulate object follow. Start server ```bash ros2 launch opennav_following_demo setup.launch.py Execute command start demo, subscribe detected pose call server detected pose: opennav_following_demo python3 demo.py server follow detected pose."},
{"url": "https://index.ros.org/p/opennav_following_msgs", "package": "opennav_following_msgs", "package_summary": "A set of ROS interfaces for following", "package_details": "Msgs package set messages dynamic object"},
{"url": "https://index.ros.org/p/pal_gazebo_plugins", "package": "pal_gazebo_plugins", "package_summary": "Robot-independent Gazebo plugins used by PAL Robotics.", "package_details": "pal_gazebo_plugins Common Gazebo plugins PAL Robotics robots"},
{"url": "https://index.ros.org/p/proto2ros", "package": "proto2ros", "package_summary": "Protobuf to ROS 2 interoperability interfaces", "package_details": "proto2ros exposing Protobuf interfaces ROS proto2ros streamlines message translation generation, trivially augment rosidl pipeline invocations Protobuf definitions output ROS message definitions. Additionally, message conversion APIs generated simplify bridging Protobuf ROS message code. Table contents Features Message generation Package mapping Type mapping Scalar types Message types Enum types Map types types Recursive types Field mapping Optional fields Repeated fields One-of fields Deprecated fields Reserved fields Code generation Python APIs APIs Configuration cases Dual Protobuf ROS package ROS vendored Protobuf messages Features Message generation Protobuf enumeration message definitions translated equivalent ROS message definitions. Protobuf definitions, including comments, extracted Protobuf descriptor sets, generated protoc. ROS message definition represent Protobuf definition, explained map types one-of fields subsections. Package mapping Protobuf packages processed definitions belong implicitly mapped ROS package host ROS message equivalents. rest, user package mapping proto2ros configuration. depends message types mapped. Type mapping Scalar types mapping Protobuf ROS scalar types shown Protobuf scalar type ROS scalar type bool bool double float64 fixed32 uint32 fixed64 uint64 float float32 int32 int32 int64 int64 sfixed32 int32 sfixed64 int64 sint32 int32 sint64 int64 uint32 uint32 uint64 uint64 string string bytes uint8[] Note Protobuf bytes scalar type maps sequence type ROS convenient forces special handling repeated bytes fields. Messages types Protobuf message maps ROS message. statically typed message opposed dynamically typed google.protobuf.Any messages), mapping derived sequential application rules, match wins basis: user-defined message mapping proto2ros configuration matches. Fully qualified message names verbatim. user-defined implicit package mapping proto2ros configuration matches. multiple matches longest match applies. Fully qualified message names camel-cased. Passing unknown Protobuf messages allowed proto2ros configuration. proto2ros/AnyProto google.protobuf.Any messages, rules types apply. message mappings ad-hoc equivalences established Protobuf message equivalent standard ROS message case core Protobuf messages, default proto2ros configuration). package mappings equivalences generated proto2ros full, ROS package dependencies, interact configuration overlay: File truncated lines full file"},
{"url": "https://index.ros.org/p/robotont_driver", "package": "robotont_driver", "package_summary": "Hardware driver for the Robotont robot", "package_details": "robotont_driver ROS driver package robotont. package handles low-level communication ROS robotont hardware. Installing starting driver ROS distro Ensure System\u2019s Distribution Supported. ROS Humble supports Ubuntu (Jammy) Install ROS Humble Installing ROS2 Humble Install robotont driver sudo apt install ros-humble-robotont-driver Source install files start driver launch configuration source /opt/ros/humble/setup.bash ros2 launch robotont_driver driver_launch.py Launch parameters defined places. hierarchy number overwrites higher number): parameters defined parameters file parameters command line, launch file parameters hardcoded driver code change launch parameters command line: ros2 launch robotont_driver driver_launch.py device_name:='/dev/ttyACM0' Installing starting driver source code Ensure System\u2019s Distribution Supported. ROS Humble supports Ubuntu (Jammy) Install ROS Humble create workspace Creating workspace Pull driver repo install ROS dependencies Navigate workspace root folder sudo rosdep init rosdep update rosdep install --from-paths src --ignore-src driver relies packages: io-context serial-driver asio-cmake-module sudo apt install ros-humble-io-context ros-humble-serial-driver ros-humble-asio-cmake-module Build driver Ensure workspace root folder enter commands install colcon build Source install files start driver launch configuration source install/local_setup.bash ros2 launch robotont_driver driver_launch.py Launch parameters defined places. hierarchy number overwrites higher number): parameters defined parameters file parameters command line, launch file parameters hardcoded driver code change launch parameters command line: ros2 launch robotont_driver driver_launch.py device_name:='/dev/ttyACM0' Moving robot drivers simulated real robot subscribe cmd_vel topic. move robot, publish velocity messages exact topic. teleop_twist_keyboard node, translates command line keypresses velocity messages published default cmd_vel topic. Run node ros2 run teleop_twist_keyboard teleop_twist_keyboard Follow printout console learn control robot. Enjoy ride! plugins File truncated lines full file"},
{"url": "https://index.ros.org/p/ros2caret", "package": "ros2caret", "package_summary": "ROS 2 CLI package for caret", "package_details": "caret_analyze"},
{"url": "https://index.ros.org/p/sync_parameter_server", "package": "sync_parameter_server", "package_summary": "TODO: Package description", "package_details": "sync_parameter_server ROS2 package managing synchronization parameters multiple nodes. package synchronization parameter values ROS2 parameters. ROS2 dynamic parameters, management parameters per-node basis. set maintain relationships parameters nodes default, depending relationships disrupted. package addresses issue SyncParameterServer handle parameter change events synchronize parameters registered nodes, enhancing system\u2019s adaptability dynamic parameters. setting SyncParameterServer, clarify dependencies parameters. easier users understand intentions parameter adjusters. SyncParameterServer SyncParameterServer class manages synchronization parameters multiple nodes. default changed set_parameters service call node, parameters synchronized nodes changed. Parameter sync_parameters (string_array, default: Group names parameters synchronized. [sync_group_name].params (string_array, default: Parameter names synchronized. parameter form path/to/node/parameter_name. [sync_group_name].type (string, default: Type parameter synchronized. type parameter types. bool integer double string bool_array integer_array double_array string_array [sync_group_name].default Default parameter synchronized. [sync_group_name].[parameter_name].scale (double, default: optional): Scaling factor parameter synchronized. parameter valid [sync_group_name].type double integer. [sync_group_name].[parameter_name].offset (double, default: optional): Offset parameter synchronized. parameter valid [sync_group_name].type double integer. refer sample.yaml sample."},
{"url": "https://index.ros.org/p/tiago_moveit_config", "package": "tiago_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the tiago with the MoveIt Motion Planning Framework", "package_details": "TIAGo MoveIt! Config package MoveIt! config files TIAGo configurations effectors, force torque sensors..). maintenance easier, templates files differ configurations. understand template works read https://github.com/pal-robotics/tiago_robot/ readme. Running setup assistant modify setup assistant, you\u2019ll Provide arguments xacro file variant TIAGo MoveIt! parameters modify arm, end_effector ft_sensor. Create softlnk) SRDF file config/tiago.srdf load existing moveit configuration. SRDF files config/srdf, directory reflect robot. running reflect auto generated files."},
{"url": "https://index.ros.org/p/tiago_multi", "package": "tiago_multi", "package_summary": "The tiago_multi package", "package_details": "Multiple Tiago simulation project launch files simulate multiple Tiago robots single Gazebo environment. environment order multiple Tiago robots coexisting environment modifications nodes belonging specific robot pushed namespace. addition tree prepended tf_prefix. generates single tree map root, robot, classic robot/map robot/odom robot/base_footprint tree, robot robot\u2019s tf_prefix. Launchfiles launch files package launch Tiago specific namespace navigation), tree prefixed namespace; launch key_teleop node specific namespace; finally Tiago robots pal office environment navigation). teleop_tiago.launch Utility launch runs key_teleop node namespace robot parameter. launch_tiago.launch launch_tiago_navigation.launch main launch files package. launch files required arguments launch Tiago namespace, adding model gazebo, launching controllers case, launch navigation stack. launch file mandatory parameters: robot_name Namespace robot\u2019s nodes pushed tree tf_prefix). x_pose coordinate initial pose robot map. y_pose coordinate initial pose robot map. important robots start coordinates map avoid overlapping. addition parameters modified: robot Model robot instantiated steel titanium, gripper hand Default: steel. world Gazebo world Default: small_office. map Map file amcl. Default: ~/.pal/tiago_maps/configurations/small_office public_sim Set true public version Tiago simulation. parameter changed. navigation launch, addition, parameters modified: planner Planner navigation. Default: base (move_base planner). global_planner Global navigation planner. Default: global_planner. local_planner Local navigation planner. Default: eband (eband_planner). localization Localizacion stack. Default: amcl. multitiago_gazebo.launch multitiago_gazebo.launch launch files launches default Tiago robots pal_office environment. build specific multi-robot launch."},
{"url": "https://index.ros.org/p/urinterfaces", "package": "urinterfaces", "package_summary": "A package containing ROS2 ur message definitions.", "package_details": "urinterfaces repository Universal Robots ROS(2) interfaces messages, services actions. contrast ur_msgs package, package messages published robot controller natively starting Polyscope ur_robot_driver ur_msgs package, planned switch package future."},
{"url": "https://index.ros.org/p/vector_pursuit_controller", "package": "vector_pursuit_controller", "package_summary": "Vector Pursuit Controller", "package_details": "Vector Pursuit Controller ROS2 Humble package plugin Nav2 Controller Server implements Vector Pursuit path tracking algorithm. leverages Screw Theory achieve accurate path tracking active collision detection. controller computational overhead easy simple deploy. tracks path orientation geometrically-meaningful making ideal replacement Pure Pursuit Algorithm scenarios path accuracy vital. consumes single core ARM cortex-A72 CPU 1.8GHz designed track paths speeds upto https://github.com/user-attachments/assets/5a660fa0-054c-4b14-aecd-d9cfe471930b Started minimal, to-the-point instructions experienced ROS2/Nav2 users. Beginners recommended read Quickstart Tutorial simple 4-step controller Gazebo simulation. Install package binaries. sudo apt-get install ros-humble-vector-pursuit-controller Edit controller_server parameters Nav2 stack include vector pursuit plugin default configuration. Nav2\u2019s controller server supports multiple controller plugins time instructions setting official docs. Build workspace source run nav2 stack/controller server. Features Offered additional features top core Vector Pursuit algorithm extend functionality. Feature Description Adaptive Lookahead Distance lookahead distance find target pose path. target pose guide robot path. distance scaled robot\u2019s velocity ensure robot aims path moving greater velocity. adaptive lookahead distance computed product robots current linear velocity set lookahead_time.| Collision Aware Linear Velocity robot\u2019s linear velocity automatically scaled preemptively proximity obstacles completely halted collision imminent. Approach Aware Linear Velocity robots linear velocity automatically scaled nearing goal pose, prevents overshoot. Point Rotation controller rotate point attempting chase target pose heading robots current heading configurable angle. Optional Reversing controller output reverse velocity lookahead point robot coordinate lookahead point robot\u2019s base_link Configuration Core Parameters parameters tune core path-tracking algorithm needed additional features. Parameter Description equation Vector Pursuit Algorithm, constant relates time rotation translation. relationship rotation_time translation_time. Increasing result faster translation decreasing turn, result faster rotation. desired_linear_vel Target linear velocity. min_linear_velocity Magnitude minimum commandable linear velocity. min_turning_radius Minimum turning radius. min_turning_radius controller equal minimum turning radius planner case ensures controller follow path generated planner stuck loop. max_lateral_accel Maximum allowed lateral acceleration. slowdown robot making sharp turns. Higher values result higher achievable linear velocity turn. max_linear_accel Maximum linear acceleration. use_interpolation Calculate lookahead point lookahead distance. select discrete point path. use_heading_from_path set true, orientation path poses computes orientations. set true ypu planner takes robot heading account Smac Planner. max_robot_pose_search_dist Maximum search distance target poses. Feature Parameters parameters tune control behaviour Feature Parameter Description Adaptive Lookahead Distance use_velocity_scaled_lookahead_dist enable/disable min_lookahead_dist Minimum lookahead distance. max_lookahead_dist Maximum lookahead distance. lookahead_time time seconds integrate current linear velocity scaled lookahead distance Collision Aware Linear Velocity use_collision_detection Enable/disable collision detection. use_cost_regulated_linear_velocity_scaling Enable/disable cost-regulated linear velocity scaling. inflation_cost_scaling_factor Factor inflation cost scaling. max_allowed_time_to_collision_up_to_target Maximum time allowed collision checking. cost_scaling_dist Distance cost-based velocity scaling. cost_scaling_gain Gain factor cost-based velocity scaling. Approach Aware Linear Velocity approach_velocity_scaling_dist distance goal velocity scaling Set disable. min_approach_linear_velocity minimum velocity scaling produce. Point Rotation use_rotate_to_heading Enable/disable rotate-to-heading behavior. override reversing enabled. rotate_to_heading_angular_vel Angular velocity rotating heading. rotate_to_heading_min_angle Minimum angle trigger rotate-to-heading behavior. max_angular_accel Maximum angular acceleration. Optional Reversing allow_reversing move reverse lookahead point robot. Default Parameters ```yaml controller_server: ros__parameters: use_sim_time: True controller_frequency: min_x_velocity_threshold: min_y_velocity_threshold: min_theta_velocity_threshold: failure_tolerance: progress_checker_plugin: \u201cprogress_checker\u201d goal_checker_plugins: [\u201cgeneral_goal_checker\u201d] controller_plugins: [\u201cFollowPath\u201d] Progress checker parameters progress_checker: plugin: \"nav2_controller::SimpleProgressChecker\" required_movement_radius: movement_time_allowance: Goal checker parameters general_goal_checker: plugin: \"nav2_controller::SimpleGoalChecker\" xy_goal_tolerance: yaw_goal_tolerance: stateful: True FollowPath: plugin: \"vector_pursuit_controller::VectorPursuitController\" desired_linear_vel: File truncated lines full file"},
{"url": "https://index.ros.org/p/wall_follower_ros2", "package": "wall_follower_ros2", "package_summary": "wall_follower_ros2 package", "package_details": "wall_follower_ros2 package Author: Roberto Zegers Date: July Description Minimal rule based wall follower node data laser scan readings Instructions Build colcon build --packages-select wall_follower_ros2 compiling, source workspace Package 'wall_follower_ros2' error message: source install/setup.bash Dependencies ROS2 Galactic"},
{"url": "https://index.ros.org/p/weight_scale_interfaces", "package": "weight_scale_interfaces", "package_summary": "Definition of the interface for weight scale devices", "package_details": "weight_scale_interfaces install ~/dev_ws colcon build --cmake-clean-first --symlink-install --packages-select weight_scale_interfaces install/local_setup.zsh weight_scale_interfaces/msg/Weight type explanation builtin_interfaces/Time stamp Measurement time bool stable State scale measurement stable fluctuating) bool overload Couldn\u2019t measure due overweight float64 weight weight string unit unit measurement result weight_scale_interfaces/action/SetZero type explanation Goal float64 timeout timeout(sec) Result bool success True/False string message result message Feedback weight_scale_interfaces/Weight weight weight_scale_interfaces/action/GetWeight type explanation Goal float64 timeout timeout(sec) Result weight_scale_interfaces/Weight weight bool success succeeded obtaining stable weight string message result message Feedback weight_scale_interfaces/Weight weight"},
{"url": "https://index.ros.org/p/whill_bringup", "package": "whill_bringup", "package_summary": "This package boot WHILL Model CR2", "package_details": "whill_bringup \u201cwhill_bringup\u201d ROS2 package WHILL Model launcher. started Download projects Configure serial port Build project Launch Download projects ~/<your_ros2_ws>/src git clone https://github.com/whill-labs/ros2_whill_interfaces.git git clone https://github.com/whill-labs/ros2_whill.git Configure serial port serial port /dev/ttyUSB0, edit port_name file: ~/<your_ros2_ws>/src/ros2_whill/whill_bringup/config/params.yaml Build project colcon build --packages-up-to whill install/setup.bash Launch ros2 launch whill_bringup whill_launch.py steps, able execute commands. Command examples License Copyright WHILL, Released MIT license"},
{"url": "https://index.ros.org/p/whill_description", "package": "whill_description", "package_summary": "WHILL Model CR2 description package", "package_details": "whill_description \u201cwhill_description\u201d ROS2 package descriptions WHILL Model preview URDF, run command: ros2 launch urdf_tutorial display.launch.py model:=\"$(ros2 pkg prefix whill_description --share)/urdf/whill_model_cr2.urdf\" License Copyright WHILL, Released MIT license"},
{"url": "https://index.ros.org/p/whill_driver", "package": "whill_driver", "package_summary": "WHILL Model CR2 driver package", "package_details": "whill_driver \u201cwhill_driver\u201d ROS2 package WHILL Model controller. <img width=22% title=\u201dWHILL Model src=\u201dhttps://github.com/WHILL/Model_CR_Technical_Support/assets/129816934/387a8aac-3808-4727-895d-9857059ee342\u201d> <img width=24% title=\u201dWheeled Robot Base\u201d src=\u201dhttps://github.com/WHILL/Model_CR_Technical_Support/assets/129816934/6a63ed45-9e0c-40ca-b71c-8dff614af141\u201d> Package Structure classDiagram namespace whill_driver class WhillNode{ -publiser -subscriber -server class Whill{ +SendCommand() +ReceiveDataset() class Parser{ +Parse() +Checksum() class SerialPort{ +Open() +Close() +Send() +Receive() namespace rclcpp class Node{ class Publisher{ class Subscription{ class Service{ namespace whill_msgs class WhillModelCMsg{ class SpeedProfileMsg{ class SetPowerSrv{ class SetSpeedProfileSrv{ class SetBatterySavingSrv{ namespace class unistd{ +open() +close() +write() +read() WhillNode Node WhillNode Publisher WhillNode Subscription WhillNode Service WhillNode Whill Whill Parser Whill SerialPort SerialPort unistd Whill WhillModelCMsg Whill SpeedProfileMsg Whill SetPowerSrv Whill SetSpeedProfileSrv Whill SetBatterySavingSrv Class Explanation WhillNode class ROS2 Node, responsible RCLCPP abstraction. Whill class WHILL Model domain. class understand control commands WHILL state datasets. Parser class ability parse packets WHILL. SerialPort class serial port driver, responsible hardware abstraction. Note: whill_msgs repository. License Copyright WHILL, Released MIT license"},
{"url": "https://index.ros.org/p/whill_examples", "package": "whill_examples", "package_summary": "This package boot WHILL Model CR2", "package_details": "whill_examples \u201cwhill_examples\u201d ROS2 package WHILL Model demo examples. started Download projects Configure serial port Build project Launch Download projects ~/<your_ros2_ws>/src git clone https://github.com/whill-labs/ros2_whill_interfaces.git git clone https://github.com/whill-labs/ros2_whill.git Configure serial port serial port /dev/ttyUSB0, edit port_name file: ~/<your_ros2_ws>/src/ros2_whill/whill_examples/config/params.yaml Build project colcon build --packages-up-to whill install/setup.bash Launch ros2 launch whill_examples whill_examples_launch.py steps, WHILL move turn power spin counterclockwise spin clockwise turn power License Copyright WHILL, Released MIT license"},
{"url": "https://index.ros.org/p/wrapyfi_ros2_interfaces", "package": "wrapyfi_ros2_interfaces", "package_summary": "Wrapyfi ROS 2 interfaces", "package_details": "Wrapyfi ROS interfaces WARNING: instructions located https://github.com/modular-ml/wrapyfi_ros2_interfaces run Wrapyfi ROS services transmit audio messages, compile ROS interfaces. ROS installed system, build dependencies. find installation instructions install Robostack. Prerequisites ROS Galactic/Humble Python Installation recommend compiling Wrapyfi ROS interfaces installing ROS installed locally mamba/micromamba), Wrapyfi interfaces installed APT APT (local Humble source /opt/ros/humble/setup.bash sudo apt update sudo apt install ros-humble-wrapyfi-ros2-interfaces test package: return service message types ROS Native objects ros2 interface show wrapyfi_ros2_interfaces/srv/ROS2NativeObjectService Compiling Copy wrapyfi_ros2_interfaces folder ROS workspace (assumed ~/ros2_ws). current directory wrapyfi_ros2_interfaces ~/ros2_ws/src Compile ROS interfaces: ~/ros2_ws colcon build --packages-select wrapyfi_ros2_interfaces **Note**: wrong version Python compilation fail. correct version cmake modifying `cmake_minimum_required` version `~/ros2_ws/src/wrapyfi_ros2_interfaces/CMakeLists.txt` file: CMakeLists.txt cmake_minimum_required(VERSION Replacing VERSION correct version cmake. Source ROS workspace: source ~/ros2_ws/install/setup.bash Verify ROS Native object service interface compiled: ros2 interface show wrapyfi_ros2_interfaces/srv/ROS2NativeObjectService output: string request string response Verify ROS Image service interface compiled: ros2 interface show wrapyfi_ros2_interfaces/srv/ROS2ImageService output: ```bash string request sensor_msgs/Image response std_msgs/Header header builtin_interfaces/Time stamp int32 sec uint32 nanosec string frame_id Header frame_id optical frame camera origin frame optical center cameara File truncated lines full file"},
{"url": "https://index.ros.org/p/yashar_turtle_chase", "package": "yashar_turtle_chase", "package_summary": "Dynamic leader-follower turtlesim demo with leader switching service", "package_details": "package README file written Robotics-Lab Yashar Zafari Student Number: Sharif University Technology. email yashar_turtle_chase dynamic leader-follower demo ROS2\u2019s turtlesim, multiple turtles follow designated leader real-time leader switching capability. Overview package demonstrates multi-turtle simulation Multiple turtles spawned turtlesim environment. turtle acts leader, controllable keyboard. turtles follow leader proportional control. leader switched dynamically runtime. Features Dynamic Turtle Spawning: Automatically spawns number turtles random, non-overlapping positions. Leader-Follower Mechanism: Implements simple proportional controller followers track leader\u2019s position. Real-Time Leader Switching: Change leader turtle runtime ROS topic. Launch File: Convenient launch file start entire setup, including turtlesim, turtle spawner, follower logic, teleoperation. Installation Clone Repository: ~/ros2_ws/src git clone https://github.com/your_username/yashar_turtle_chase.git **Install Dependencies**: ```bash ~/ros2_ws rosdep install --from-paths src --ignore-src Build Package: colcon build --packages-select yashar_turtle_chase source install/setup.bash Usage Launch Simulation ros2 launch yashar_turtle_chase dynamic_chase.launch.py Start turtlesim_node. Spawn number turtles (default Initiate dynamic follower node. Teleoperate leader command window opened. Switch leader terminal. Control Leader Turtle keyboard teleoperation terminal move leader turtle. Switch Leader Turtle Publish leader /switch_leader topic: ros2 topic pub /switch_leader std_msgs/String \"{data: 'turtle2'}\" Replace 'turtle2' desired turtle 'turtle1', 'turtle3', Implementation Details Follower Logic dynamic_follower.py node: Subscribes /turtleX/pose topics positions turtles. Publishes velocity commands /turtleY/cmd_vel follower turtles. Calculates distance angle leader applies proportional control follow. Leader Detection current leader stored variable node. updated runtime publishing /switch_leader topic. Challenges Faced Dynamic Spawning: Ensuring turtles spawn non-overlapping positions required implementing check existing positions. Real-Time Leader Switching: Maintaining smooth transitions changing leaders disrupting follower behavior. Demonstration https://github.com/user-attachments/assets/0013b428-5731-40c6-85f9-7b0369217965 demo, observe follower turtle tracks leader switching leader affects behavior. License File truncated lines full file"},
{"url": "https://index.ros.org/p/depthai_ros_msgs", "package": "depthai_ros_msgs", "package_summary": "Package to keep interface independent of the driver", "package_details": ""},
{"url": "https://index.ros.org/p/depthai_ros_driver", "package": "depthai_ros_driver", "package_summary": "Depthai ROS Monolithic node.", "package_details": ""},
{"url": "https://index.ros.org/p/dynamixel_workbench", "package": "dynamixel_workbench", "package_summary": "Dynamixel-Workbench is dynamixel solution for ROS.\n    This metapackage allows you to easily change the ID, baudrate and operating mode of the Dynamixel.\n    Furthermore, it supports various controllers based on operating mode and Dynamixel SDK.\n    These controllers are commanded by operators.", "package_details": ""},
{"url": "https://index.ros.org/p/depthai_filters", "package": "depthai_filters", "package_summary": "Depthai filters package", "package_details": ""},
{"url": "https://index.ros.org/p/depthai_examples", "package": "depthai_examples", "package_summary": "The depthai_examples package", "package_details": ""},
{"url": "https://index.ros.org/p/diagnostics", "package": "diagnostics", "package_summary": "diagnostics", "package_details": ""},
{"url": "https://index.ros.org/p/depthai_descriptions", "package": "depthai_descriptions", "package_summary": "The depthai_descriptions package", "package_details": ""},
{"url": "https://index.ros.org/p/depthai_bridge", "package": "depthai_bridge", "package_summary": "The depthai_bridge package", "package_details": ""},
{"url": "https://index.ros.org/p/depthai-ros", "package": "depthai-ros", "package_summary": "The depthai-ros package", "package_details": ""},
{"url": "https://index.ros.org/p/dataspeed_can_usb", "package": "dataspeed_can_usb", "package_summary": "Driver to interface with the Dataspeed Inc. USB CAN Tool", "package_details": ""},
{"url": "https://index.ros.org/p/dataspeed_can_msgs", "package": "dataspeed_can_msgs", "package_summary": "Controller Area Network (CAN) messages", "package_details": ""},
{"url": "https://index.ros.org/p/dataspeed_can", "package": "dataspeed_can", "package_summary": "CAN bus tools using Dataspeed hardware", "package_details": ""},
{"url": "https://index.ros.org/p/create_robot", "package": "create_robot", "package_summary": "ROS driver for iRobot's Create 1 and 2, based on the libcreate C++ library", "package_details": ""},
{"url": "https://index.ros.org/p/control_msgs", "package": "control_msgs", "package_summary": "control_msgs contains base messages and actions useful for\n    controlling robots. It provides representations for controller\n    setpoints and joint and cartesian trajectories.", "package_details": ""},
{"url": "https://index.ros.org/p/create_msgs", "package": "create_msgs", "package_summary": "Common message definitions for create_robot", "package_details": ""},
{"url": "https://index.ros.org/p/create_bringup", "package": "create_bringup", "package_summary": "Launch and configuration files for common accessories when working with Create/Roomba platforms.", "package_details": ""},
{"url": "https://index.ros.org/p/whill_msgs", "package": "whill_msgs", "package_summary": "WHILL Model CR2 interfaces package", "package_details": ""},
{"url": "https://index.ros.org/p/whill", "package": "whill", "package_summary": "ROS2 package for WHILL Model CR2", "package_details": ""},
{"url": "https://index.ros.org/p/vmbc_interface", "package": "vmbc_interface", "package_summary": "VmbC interface package", "package_details": ""},
{"url": "https://index.ros.org/p/vimbax_camera_msgs", "package": "vimbax_camera_msgs", "package_summary": "Topic and Service definitions used by the vimbax_camera_node", "package_details": ""},
{"url": "https://index.ros.org/p/vimbax_camera_examples", "package": "vimbax_camera_examples", "package_summary": "VimbaX camera examples", "package_details": ""},
{"url": "https://index.ros.org/p/vimbax_camera_events", "package": "vimbax_camera_events", "package_summary": "Vimba X event support library", "package_details": ""},
{"url": "https://index.ros.org/p/vimbax_camera", "package": "vimbax_camera", "package_summary": "ROS 2 node package for Vimba X cameras", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_simulation", "package": "tiago_simulation", "package_summary": "The tiago_simulation package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_gazebo", "package": "tiago_gazebo", "package_summary": "The tiago_gazebo package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_robot", "package": "tiago_robot", "package_summary": "Description and controller configuration of TIAGo", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_description", "package": "tiago_description", "package_summary": "This package contains the description (mechanical, kinematic, visual,\n      etc.) of the TIAGO robot.  The files in this package are parsed and used by\n      a variety of other components.  Most users will not interact directly\n      with this package.", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_controller_configuration", "package": "tiago_controller_configuration", "package_summary": "Configuration and launch files of TIAGo's controllers", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_bringup", "package": "tiago_bringup", "package_summary": "Launch files to upload the robot description and start the controllers", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_simulation", "package": "tiago_pro_simulation", "package_summary": "The tiago_pro_simulation package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_gazebo", "package": "tiago_pro_gazebo", "package_summary": "The tiago_pro_gazebo package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_robot", "package": "tiago_pro_robot", "package_summary": "The tiago_pro_robot package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_description", "package": "tiago_pro_description", "package_summary": "The tiago_pro_description package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_controller_configuration", "package": "tiago_pro_controller_configuration", "package_summary": "The tiago_pro_controller_configuration package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_bringup", "package": "tiago_pro_bringup", "package_summary": "Launch files to upload the TIAGo pro robot description and start the controllers", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_rgbd_sensors", "package": "tiago_pro_rgbd_sensors", "package_summary": "tiago_pro-specific rgbd sensors launch and config files.", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_navigation", "package": "tiago_pro_navigation", "package_summary": "The tiago_pro Navigation metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_laser_sensors", "package": "tiago_pro_laser_sensors", "package_summary": "tiago_pro-specific laser sensors launch and config files.", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_2dnav", "package": "tiago_pro_2dnav", "package_summary": "tiago pro-specific launch files needed to run navigation on the tiago_pro robot.", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_moveit_config", "package": "tiago_pro_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the tiago_pro with the MoveIt! Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_head_simulation", "package": "tiago_pro_head_simulation", "package_summary": "The tiago_pro_head_simulation package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_head_gazebo", "package": "tiago_pro_head_gazebo", "package_summary": "The tiago_pro_head_gazebo package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_head_robot", "package": "tiago_pro_head_robot", "package_summary": "The tiago_pro_head_robot package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_head_description", "package": "tiago_pro_head_description", "package_summary": "The tiago_pro_head_description package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_head_controller_configuration", "package": "tiago_pro_head_controller_configuration", "package_summary": "The tiago_pro_head_controller_configuration package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_pro_head_bringup", "package": "tiago_pro_head_bringup", "package_summary": "The tiago_pro_head_bringup package", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_rgbd_sensors", "package": "tiago_rgbd_sensors", "package_summary": "Launch files and scripts needed to bring up the ROS nodes of a TIAGo robot.", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_navigation", "package": "tiago_navigation", "package_summary": "TIAGo navigation metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_laser_sensors", "package": "tiago_laser_sensors", "package_summary": "Launch files and scripts needed to bring up the ROS nodes of a TIAGo robot.", "package_details": ""},
{"url": "https://index.ros.org/p/tiago_2dnav", "package": "tiago_2dnav", "package_summary": "TIAGo-specific launch files needed to run navigation on a TIAGo robot.", "package_details": ""},
{"url": "https://index.ros.org/p/navigation_metrics", "package": "navigation_metrics", "package_summary": "Tools for computing a collection of metrics about navigation behavior", "package_details": ""},
{"url": "https://index.ros.org/p/talos_gazebo", "package": "talos_gazebo", "package_summary": "The talos_gazebo package", "package_details": ""},
{"url": "https://index.ros.org/p/talos_moveit_config", "package": "talos_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the talos with the MoveIt! Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/stcamera_msgs", "package": "stcamera_msgs", "package_summary": "stcamera_msgs package contains a basic functionality to access OMRON SENTECH Camera. \n    This package requires installation of SentechSDK.", "package_details": ""},
{"url": "https://index.ros.org/p/stcamera_launch", "package": "stcamera_launch", "package_summary": "stcamera_launch package contains a basic functionality to access OMRON SENTECH Camera. \n    This package requires installation of SentechSDK.", "package_details": ""},
{"url": "https://index.ros.org/p/stcamera_grabber", "package": "stcamera_grabber", "package_summary": "stcamera_grabber package contains a basic functionality to access OMRON SENTECH Camera. \n    This package requires installation of SentechSDK.", "package_details": ""},
{"url": "https://index.ros.org/p/stcamera_components", "package": "stcamera_components", "package_summary": "stcamera_components package contains a basic functionality to access OMRON SENTECH Camera. \n    This package requires installation of SentechSDK.", "package_details": ""},
{"url": "https://index.ros.org/p/psdk_wrapper", "package": "psdk_wrapper", "package_summary": "ROS2 wrapper for the DJI PSDK", "package_details": ""},
{"url": "https://index.ros.org/p/psdk_interfaces", "package": "psdk_interfaces", "package_summary": "Provides custom message, srv and action types for psdk ros2 wrapper", "package_details": ""},
{"url": "https://index.ros.org/p/proto2ros_tests", "package": "proto2ros_tests", "package_summary": "Protobuf to ROS 2 interoperability interfaces tests", "package_details": ""},
{"url": "https://index.ros.org/p/pal_urdf_utils", "package": "pal_urdf_utils", "package_summary": "This package contains the color materials of common elements of PAL Robotics' robot.\n      The files in this package are parsed and used by\n      a variety of other components.  Most users will not interact directly\n      with this package.", "package_details": ""},
{"url": "https://index.ros.org/p/pal_sea_arm_simulation", "package": "pal_sea_arm_simulation", "package_summary": "The pal_sea_arm_simulation package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_sea_arm_gazebo", "package": "pal_sea_arm_gazebo", "package_summary": "The pal_sea_arm_gazebo package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_sea_arm_moveit_config", "package": "pal_sea_arm_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the pal_sea_arm with the MoveIt Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/pal_sea_arm_description", "package": "pal_sea_arm_description", "package_summary": "The pal_sea_arm_description package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_sea_arm_controller_configuration", "package": "pal_sea_arm_controller_configuration", "package_summary": "The pal_sea_arm_controller_configuration package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_sea_arm_bringup", "package": "pal_sea_arm_bringup", "package_summary": "Launch files to upload the robot description and start the controllers", "package_details": ""},
{"url": "https://index.ros.org/p/pal_sea_arm", "package": "pal_sea_arm", "package_summary": "The pal_sea_arm package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_robotiq_gripper_wrapper", "package": "pal_robotiq_gripper_wrapper", "package_summary": "The pal_robotiq_gripper_wrapper package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_robotiq_gripper", "package": "pal_robotiq_gripper", "package_summary": "Robotiq Gripper Definition Packages", "package_details": ""},
{"url": "https://index.ros.org/p/pal_robotiq_epick_gripper", "package": "pal_robotiq_epick_gripper", "package_summary": "Robotiq Gripper Epick Definition Packages", "package_details": ""},
{"url": "https://index.ros.org/p/pal_robotiq_epick_description", "package": "pal_robotiq_epick_description", "package_summary": "The pal_robotiq_epick_description package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_robotiq_description", "package": "pal_robotiq_description", "package_summary": "The pal_robotiq_description package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_robotiq_controller_configuration", "package": "pal_robotiq_controller_configuration", "package_summary": "The pal_robotiq_controller_configuration package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_pro_gripper_wrapper", "package": "pal_pro_gripper_wrapper", "package_summary": "Grasp controller to close with a determined error on position only\n    so to skip overheating.", "package_details": ""},
{"url": "https://index.ros.org/p/pal_pro_gripper_description", "package": "pal_pro_gripper_description", "package_summary": "The pal_pro_gripper_description package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_pro_gripper_controller_configuration", "package": "pal_pro_gripper_controller_configuration", "package_summary": "The pal_pro_gripper_controller_configuration package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_pro_gripper_bringup", "package": "pal_pro_gripper_bringup", "package_summary": "Launch files to upload the robot description and start the controllers", "package_details": ""},
{"url": "https://index.ros.org/p/pal_pro_gripper", "package": "pal_pro_gripper", "package_summary": "The pal_pro_gripper package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_navigation_cfg", "package": "pal_navigation_cfg", "package_summary": "PAL Navigation Configuration metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/pal_navigation_cfg_params", "package": "pal_navigation_cfg_params", "package_summary": "Central storage of navigation configuration parameters", "package_details": ""},
{"url": "https://index.ros.org/p/pal_navigation_cfg_bringup", "package": "pal_navigation_cfg_bringup", "package_summary": "Central storage of PAL Navigation launch files", "package_details": ""},
{"url": "https://index.ros.org/p/pal_maps", "package": "pal_maps", "package_summary": "Public Maps used for the Navigation of PAL Robotics robots.", "package_details": ""},
{"url": "https://index.ros.org/p/pal_hey5_description", "package": "pal_hey5_description", "package_summary": "This package contains the description (mechanical, kinematic, visual,\n    etc.) of the Hey5 hand.  The files in this package are parsed and used by\n    a variety of other components.  Most users will not interact directly\n    with this package.", "package_details": ""},
{"url": "https://index.ros.org/p/pal_hey5_controller_configuration", "package": "pal_hey5_controller_configuration", "package_summary": "The pal_hey5_controller_configuration package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_hey5", "package": "pal_hey5", "package_summary": "The pal_hey5 package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_parallel_gripper_wrapper", "package": "pal_parallel_gripper_wrapper", "package_summary": "The pal_parallel_gripper_wrapper package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_gripper_simulation", "package": "pal_gripper_simulation", "package_summary": "Pal gripper simulation package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_gripper_gazebo", "package": "pal_gripper_gazebo", "package_summary": "The pal_gripper_gazebo package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_gripper_description", "package": "pal_gripper_description", "package_summary": "The pal_gripper_description package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_gripper_controller_configuration", "package": "pal_gripper_controller_configuration", "package_summary": "The pal_gripper_controller_configuration package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_gripper", "package": "pal_gripper", "package_summary": "The pal_gripper package", "package_details": ""},
{"url": "https://index.ros.org/p/opennav_following", "package": "opennav_following", "package_summary": "A Task Server for dynamic following object", "package_details": ""},
{"url": "https://index.ros.org/p/openarm_hardware", "package": "openarm_hardware", "package_summary": "Hardware interface for  OpenArm", "package_details": ""},
{"url": "https://index.ros.org/p/openarm_bimanual_moveit_config", "package": "openarm_bimanual_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the openarm with the MoveIt Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/openarm", "package": "openarm", "package_summary": "Metapackage for OpenArm", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_simulation", "package": "omni_base_simulation", "package_summary": "The omni_base_simulation package", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_gazebo", "package": "omni_base_gazebo", "package_summary": "The omni_base_gazebo package", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_robot", "package": "omni_base_robot", "package_summary": "The omni_base_robot package", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_description", "package": "omni_base_description", "package_summary": "This package contains the description (mechanical, kinematic, visual,\n      etc.) of the omni_base robot.  The files in this package are parsed and used by\n      a variety of other components.  Most users will not interact directly\n      with this package.", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_controller_configuration", "package": "omni_base_controller_configuration", "package_summary": "The omni_base_controller_configuration package", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_bringup", "package": "omni_base_bringup", "package_summary": "The omni_base_bringup package", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_rgbd_sensors", "package": "omni_base_rgbd_sensors", "package_summary": "omni_base-specific RGBD sensors module and params files.", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_navigation", "package": "omni_base_navigation", "package_summary": "The omni_base Navigatgion metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_laser_sensors", "package": "omni_base_laser_sensors", "package_summary": "omni_base-specific laser sensors launch and config files.", "package_details": ""},
{"url": "https://index.ros.org/p/omni_base_2dnav", "package": "omni_base_2dnav", "package_summary": "omni_base-specific launch files needed to run\n    navigation on the omni_base robot.", "package_details": ""},
{"url": "https://index.ros.org/p/namoros_msgs", "package": "namoros_msgs", "package_summary": "The namoros_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/namoros_gz", "package": "namoros_gz", "package_summary": "A gazebo plugin for namoros", "package_details": ""},
{"url": "https://index.ros.org/p/myactuator_rmd", "package": "myactuator_rmd", "package_summary": "CAN driver for MyActuator RMD-X-series", "package_details": ""},
{"url": "https://index.ros.org/p/mod", "package": "mod", "package_summary": "Maps of Dynamics Package", "package_details": ""},
{"url": "https://index.ros.org/p/mocap4r2_robot_gt_msgs", "package": "mocap4r2_robot_gt_msgs", "package_summary": "mocap4r2_robot_gt_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/mocap4r2_robot_gt", "package": "mocap4r2_robot_gt", "package_summary": "Package that provides Ground Truth tools for robots", "package_details": ""},
{"url": "https://index.ros.org/p/mocap4r2_marker_viz_srvs", "package": "mocap4r2_marker_viz_srvs", "package_summary": "Service definitions for the marker visualization node", "package_details": ""},
{"url": "https://index.ros.org/p/mocap4r2_marker_publisher", "package": "mocap4r2_marker_publisher", "package_summary": "Node for publishing some simple marker data for testing purposes", "package_details": ""},
{"url": "https://index.ros.org/p/mocap4r2_dummy_driver", "package": "mocap4r2_dummy_driver", "package_summary": "This is a MOCAP4ROS2 Dummy driver for testing.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_mocap4r2_control", "package": "rqt_mocap4r2_control", "package_summary": "Control tools GUI", "package_details": ""},
{"url": "https://index.ros.org/p/mocap4r2_control", "package": "mocap4r2_control", "package_summary": "Control protocol for MOCAP4ROS2 Project", "package_details": ""},
{"url": "https://index.ros.org/p/metro_nav_demo_utils", "package": "metro_nav_demo_utils", "package_summary": "Some utilities for testing out different parts of navigation", "package_details": ""},
{"url": "https://index.ros.org/p/base2d_kinematics_msgs", "package": "base2d_kinematics_msgs", "package_summary": "Interfaces for 2.5D kinematics", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_collision_plugin", "package": "gazebo_collision_plugin", "package_summary": "Detect and report all collisions in the scene", "package_details": ""},
{"url": "https://index.ros.org/p/metro_benchmark_pub", "package": "metro_benchmark_pub", "package_summary": "Utilities for publishing / processing metro_benchmark_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/metro_benchmark_msgs", "package": "metro_benchmark_msgs", "package_summary": "ROS interfaces for recording compute time and other related benchmarking concepts", "package_details": ""},
{"url": "https://index.ros.org/p/collision_log_msgs", "package": "collision_log_msgs", "package_summary": "Messages for describing collisions (simulated or not)", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_robot_descriptions", "package": "kuka_robot_descriptions", "package_summary": "Robot descriptions and moveit configurations for KUKA robots", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_quantec_support", "package": "kuka_quantec_support", "package_summary": "Robot models for the KUKA quantec family.", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_resources", "package": "kuka_resources", "package_summary": "This package contains common urdf / xacro resources used by KUKA robot support packages within the ROS-Industrial program.", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_mock_hardware_interface", "package": "kuka_mock_hardware_interface", "package_summary": "ROS2 control mock hardware for KUKA robots", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_lbr_iiwa_moveit_config", "package": "kuka_lbr_iiwa_moveit_config", "package_summary": "Package containing moveit configurations for KUKA LBR iiwa family", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_lbr_iiwa_support", "package": "kuka_lbr_iiwa_support", "package_summary": "ROS2 support package for the KUKA LBR iiwa", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_lbr_iisy_support", "package": "kuka_lbr_iisy_support", "package_summary": "Package containing models of KUKA LBR iisy family", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_lbr_iisy_moveit_config", "package": "kuka_lbr_iisy_moveit_config", "package_summary": "Package containing moveit configurations for KUKA LBR iisy family", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_kr_moveit_config", "package": "kuka_kr_moveit_config", "package_summary": "Package containing moveit configurations for KUKA LBR iiwa family", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_iontec_support", "package": "kuka_iontec_support", "package_summary": "Robot models for the KUKA Iontec family.", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_gazebo", "package": "kuka_gazebo", "package_summary": "A helper package for Gazebo support with KUKA robots", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_fortec_support", "package": "kuka_fortec_support", "package_summary": "Robot models for the KUKA FORTEC family.", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_cybertech_support", "package": "kuka_cybertech_support", "package_summary": "Robot models for the KUKA cybertech family.", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_agilus_support", "package": "kuka_agilus_support", "package_summary": "Robot models for the KUKA agilus family.", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_external_control_sdk_examples", "package": "kuka_external_control_sdk_examples", "package_summary": "Examples for using KUKA external control SDK", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_external_control_sdk", "package": "kuka_external_control_sdk", "package_summary": "Client libraries for external control interfaces of KUKA", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_sunrise_fri_driver", "package": "kuka_sunrise_fri_driver", "package_summary": "ROS2 KUKA sunrise interface", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_iiqka_eac_driver", "package": "kuka_iiqka_eac_driver", "package_summary": "A ROS2 hardware interface for use with KUKA iiQKA OS", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_rsi_simulator", "package": "kuka_rsi_simulator", "package_summary": "Simple package for simulating the KUKA RSI interface", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_drivers", "package": "kuka_drivers", "package_summary": "ROS2 drivers for KUKA robots", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_driver_interfaces", "package": "kuka_driver_interfaces", "package_summary": "Message definitions necessary for using KUKA drivers", "package_details": ""},
{"url": "https://index.ros.org/p/iiqka_moveit_example", "package": "iiqka_moveit_example", "package_summary": "ROS example package using the iiQKA driver and moveit", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_kss_message_handler", "package": "kuka_kss_message_handler", "package_summary": "Non-real time message handler for KSS KUKA robots", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_event_broadcaster", "package": "kuka_event_broadcaster", "package_summary": "Broadcaster of hardware events of KUKA robots", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_controllers", "package": "kuka_controllers", "package_summary": "ROS2 controllers for KUKA robots", "package_details": ""},
{"url": "https://index.ros.org/p/kuka_control_mode_handler", "package": "kuka_control_mode_handler", "package_summary": "Controller for setting the control mode of KUKA robots in runtime", "package_details": ""},
{"url": "https://index.ros.org/p/joint_group_impedance_controller", "package": "joint_group_impedance_controller", "package_summary": "Controller for modifying impedance (stiffness and damping) interfaces of a joint group", "package_details": ""},
{"url": "https://index.ros.org/p/fri_state_broadcaster", "package": "fri_state_broadcaster", "package_summary": "Broadcaster for FRI state", "package_details": ""},
{"url": "https://index.ros.org/p/fri_configuration_controller", "package": "fri_configuration_controller", "package_summary": "Controller for configuration of FRI", "package_details": ""},
{"url": "https://index.ros.org/p/hokuyo_node2", "package": "hokuyo_node2", "package_summary": "Packege for Hokuyo in ros2", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_geo_msgs", "package": "grid_map_geo_msgs", "package_summary": "geomap_msgs includes the definition for custom services and messages for the grid_map_geo package.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_geo", "package": "grid_map_geo", "package_summary": "Georeferenced grid map", "package_details": ""},
{"url": "https://index.ros.org/p/integration_launch_testing", "package": "integration_launch_testing", "package_summary": "Functional integration tests for franka controllers", "package_details": ""},
{"url": "https://index.ros.org/p/franka_semantic_components", "package": "franka_semantic_components", "package_summary": "franka_semantic_components provides semantic components for using Franka Robotics research robots with ros2_control", "package_details": ""},
{"url": "https://index.ros.org/p/franka_ros2", "package": "franka_ros2", "package_summary": "Meta package of franka_ros2", "package_details": ""},
{"url": "https://index.ros.org/p/franka_robot_state_broadcaster", "package": "franka_robot_state_broadcaster", "package_summary": "Broadcaster to publish robot states", "package_details": ""},
{"url": "https://index.ros.org/p/franka_hardware", "package": "franka_hardware", "package_summary": "franka_hardware provides hardware interfaces for using Franka Robotics research robots with ros2_control", "package_details": ""},
{"url": "https://index.ros.org/p/franka_msgs", "package": "franka_msgs", "package_summary": "franka_msgs provides messages and actions specific to Franka Robotics research robots", "package_details": ""},
{"url": "https://index.ros.org/p/franka_gazebo_bringup", "package": "franka_gazebo_bringup", "package_summary": "Contains launch files for the franka_gazebo project", "package_details": ""},
{"url": "https://index.ros.org/p/franka_fr3_moveit_config", "package": "franka_fr3_moveit_config", "package_summary": "Contains Moveit2 configuration files for Franka Robotics research robots", "package_details": ""},
{"url": "https://index.ros.org/p/franka_gripper", "package": "franka_gripper", "package_summary": "This package implements the franka gripper of type Franka Hand for the use in ROS2", "package_details": ""},
{"url": "https://index.ros.org/p/franka_bringup", "package": "franka_bringup", "package_summary": "Package with launch files and run-time configurations for using Franka Robotics research robots with ros2_control", "package_details": ""},
{"url": "https://index.ros.org/p/franka_example_controllers", "package": "franka_example_controllers", "package_summary": "franka_example_controllers provides example code for controllingFranka Robotics research robots with ros2_control", "package_details": ""},
{"url": "https://index.ros.org/p/extrinsic_calibrator", "package": "extrinsic_calibrator", "package_summary": "ROS2 package designed to extrinsically calibrate a set of cameras distributed throughout a room.", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_mecanum_drive_controller", "package": "clearpath_mecanum_drive_controller", "package_summary": "Clearpath fork of mecanum drive controller for 4 wheel drive.", "package_details": ""},
{"url": "https://index.ros.org/p/caret_msgs", "package": "caret_msgs", "package_summary": "Message definitions for CARET", "package_details": ""},
{"url": "https://index.ros.org/p/caret_trace", "package": "caret_trace", "package_summary": "Library to add tracepoints for CARET", "package_details": ""},
{"url": "https://index.ros.org/p/caret_analyze_cpp_impl", "package": "caret_analyze_cpp_impl", "package_summary": "c++ implementation of caret_analyze", "package_details": ""},
{"url": "https://index.ros.org/p/caret_analyze", "package": "caret_analyze", "package_summary": "CARET's tools for analyzing trace results", "package_details": ""},
{"url": "https://index.ros.org/p/cie_config_msgs", "package": "cie_config_msgs", "package_summary": "ROS messages for interaction between cie_thread_configurator and callback_isolated_executor.", "package_details": ""},
{"url": "https://index.ros.org/p/callback_isolated_executor", "package": "callback_isolated_executor", "package_summary": "Component container and executor assigning a dedicated thread to each callback group.", "package_details": ""},
{"url": "https://index.ros.org/p/bno08x_driver", "package": "bno08x_driver", "package_summary": "ROS 2 Driver for CEVA BNO08x IMU", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_testing", "package": "autoware_testing", "package_summary": "Tools for handling standard tests based on ros_testing", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_qp_interface", "package": "autoware_qp_interface", "package_summary": "Interface for the QP solvers", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_osqp_interface", "package": "autoware_osqp_interface", "package_summary": "Interface for the OSQP solver", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_marker_utils", "package": "autoware_marker_utils", "package_summary": "The autoware_marker_utils package", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_global_parameter_loader", "package": "autoware_global_parameter_loader", "package_summary": "The autoware_global_parameter_loader package", "package_details": ""},
{"url": "https://index.ros.org/p/andino_gz", "package": "andino_gz", "package_summary": "Launch Gazebo simulation with andino robot.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2agnocast", "package": "ros2agnocast", "package_summary": "The ROS 2 command line tool extension for Agnocast.", "package_details": ""},
{"url": "https://index.ros.org/p/agnocastlib", "package": "agnocastlib", "package_summary": "True Zero Copy Communication Middleware for Unsized ROS 2 Message Types.", "package_details": ""},
{"url": "https://index.ros.org/p/agnocast_sample_interfaces", "package": "agnocast_sample_interfaces", "package_summary": "Sample interfaces for the Agnocast sample application.", "package_details": ""},
{"url": "https://index.ros.org/p/agnocast_sample_application", "package": "agnocast_sample_application", "package_summary": "A sample application for Agnocast.", "package_details": ""},
{"url": "https://index.ros.org/p/agnocast_ioctl_wrapper", "package": "agnocast_ioctl_wrapper", "package_summary": "The wrapper of ioctl for command line tool extension for Agnocast.", "package_details": ""},
{"url": "https://index.ros.org/p/agnocast_e2e_test", "package": "agnocast_e2e_test", "package_summary": "E2E test for Agnocast.", "package_details": ""},
{"url": "https://index.ros.org/p/as2_visualization", "package": "as2_visualization", "package_summary": "Aerostack2 Visualization Tools", "package_details": ""},
{"url": "https://index.ros.org/p/as2_rviz_plugins", "package": "as2_rviz_plugins", "package_summary": "A very simple plugin for RViz.", "package_details": ""},
{"url": "https://index.ros.org/p/as2_keyboard_teleoperation", "package": "as2_keyboard_teleoperation", "package_summary": "Keyboard Teleoperation", "package_details": ""},
{"url": "https://index.ros.org/p/as2_map_server", "package": "as2_map_server", "package_summary": "Aerostack2 map server node for mapping the environment", "package_details": ""},
{"url": "https://index.ros.org/p/as2_usb_camera_interface", "package": "as2_usb_camera_interface", "package_summary": "USB camera driver", "package_details": ""},
{"url": "https://index.ros.org/p/as2_cli", "package": "as2_cli", "package_summary": "AS2 CLI Package", "package_details": ""},
{"url": "https://index.ros.org/p/as2_behaviors_swarm_flocking", "package": "as2_behaviors_swarm_flocking", "package_summary": "AS2 behavior swarm flocking", "package_details": ""},
{"url": "https://index.ros.org/p/aerostack2", "package": "aerostack2", "package_summary": "Aerostack2 is a ROS2-based framework for the development of autonomous systems for aerial robotics.", "package_details": ""},
{"url": "https://index.ros.org/p/ptz_action_server_msgs", "package": "ptz_action_server_msgs", "package_summary": "Messages for controlling Pan-Tilt and Pan-Tilt-Zoom devices", "package_details": ""},
{"url": "https://index.ros.org/p/orbbec_description", "package": "orbbec_description", "package_summary": "TODO: Package description", "package_details": ""},
{"url": "https://index.ros.org/p/orbbec_camera_msgs", "package": "orbbec_camera_msgs", "package_summary": "A package containing orbbec camera messages definitions.", "package_details": ""},
{"url": "https://index.ros.org/p/orbbec_camera", "package": "orbbec_camera", "package_summary": "Orbbec Camera package", "package_details": ""},
{"url": "https://index.ros.org/p/ewellix_viz", "package": "ewellix_viz", "package_summary": "Clearpath's visualization package for Ewellix TLT lifting columns", "package_details": ""},
{"url": "https://index.ros.org/p/ewellix_sim", "package": "ewellix_sim", "package_summary": "Clearpath's simulation package for Ewellix TLT lifting columns", "package_details": ""},
{"url": "https://index.ros.org/p/ewellix_moveit_config", "package": "ewellix_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the ewellix_lift with the MoveIt Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/ewellix_lift_common", "package": "ewellix_lift_common", "package_summary": "Metapackage for common Ewellix lift packages", "package_details": ""},
{"url": "https://index.ros.org/p/ewellix_interfaces", "package": "ewellix_interfaces", "package_summary": "Ewellix lift ROS 2 driver", "package_details": ""},
{"url": "https://index.ros.org/p/ewellix_description", "package": "ewellix_description", "package_summary": "Clearpath's description package for Ewellix TLT lifting columns", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_simulator", "package": "clearpath_simulator", "package_summary": "Clearpath Simulator Metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_gz", "package": "clearpath_gz", "package_summary": "Clearpath Gazebo Simulator", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_generator_gz", "package": "clearpath_generator_gz", "package_summary": "Clearpath Gazebo Generator", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_viz", "package": "clearpath_viz", "package_summary": "Visualization launchers for Clearpath Platforms.", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_desktop", "package": "clearpath_desktop", "package_summary": "Packages for working with Clearpath Platforms from a ROS 2 desktop.", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_config_live", "package": "clearpath_config_live", "package_summary": "Live URDF Updater from Clearpath Configuration.", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_sensors_description", "package": "clearpath_sensors_description", "package_summary": "Clearpath sensors URDF descriptions", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_platform_description", "package": "clearpath_platform_description", "package_summary": "Clearpath Platform URDF descriptions", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_mounts_description", "package": "clearpath_mounts_description", "package_summary": "Clearpath mounts URDF descriptions", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_manipulators_description", "package": "clearpath_manipulators_description", "package_summary": "Clearpath manipulator URDF descriptions", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_manipulators", "package": "clearpath_manipulators", "package_summary": "MoveIt configuration built around Clearpath Configuration", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_generator_common", "package": "clearpath_generator_common", "package_summary": "Clearpath Common Generator", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_description", "package": "clearpath_description", "package_summary": "Clearpath URDF descriptions metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_customization", "package": "clearpath_customization", "package_summary": "Clearpath customization packages.", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_control", "package": "clearpath_control", "package_summary": "Controllers for Clearpath Robotics platforms", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_common", "package": "clearpath_common", "package_summary": "Clearpath Common Metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/bcr_arm_moveit_config", "package": "bcr_arm_moveit_config", "package_summary": "moveit configuration and launch files for motion planning with the bcr arm", "package_details": ""},
{"url": "https://index.ros.org/p/bcr_arm_gazebo", "package": "bcr_arm_gazebo", "package_summary": "gazebo simulation and control scripts for bcr 7-dof robotic arm", "package_details": ""},
{"url": "https://index.ros.org/p/bcr_arm_description", "package": "bcr_arm_description", "package_summary": "robot description files including urdf, meshes and launch files for the bcr arm", "package_details": ""},
{"url": "https://index.ros.org/p/bcr_arm", "package": "bcr_arm", "package_summary": "Metapackage for the BCR Arm robot stack", "package_details": ""},
{"url": "https://index.ros.org/p/roadmap_explorer_rviz_plugins", "package": "roadmap_explorer_rviz_plugins", "package_summary": "A package that contains an RViz plugins for roadmap_explorer", "package_details": ""},
{"url": "https://index.ros.org/p/roadmap_explorer_msgs", "package": "roadmap_explorer_msgs", "package_summary": "A package that has the ROS 2 interfaces for running roadmap-explorer", "package_details": ""},
{"url": "https://index.ros.org/p/roadmap_explorer", "package": "roadmap_explorer", "package_summary": "The roadmap explorer package", "package_details": ""},
{"url": "https://index.ros.org/p/yasmin_viewer", "package": "yasmin_viewer", "package_summary": "YASMIN viewer for FSM", "package_details": ""},
{"url": "https://index.ros.org/p/yasmin_ros", "package": "yasmin_ros", "package_summary": "YASMIN (Yet Another State MachINe) for ROS 2", "package_details": ""},
{"url": "https://index.ros.org/p/yasmin_msgs", "package": "yasmin_msgs", "package_summary": "Msgs of (Yet Another State MachINe)", "package_details": ""},
{"url": "https://index.ros.org/p/yasmin_demos", "package": "yasmin_demos", "package_summary": "Demos of YASMIN (Yet Another State MachINe)", "package_details": ""},
{"url": "https://index.ros.org/p/yasmin", "package": "yasmin", "package_summary": "YASMIN (Yet Another State MachINe) main package", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_machine_learning", "package": "turtlebot3_machine_learning", "package_summary": "This metapackage for ROS 2 TurtleBot3 machine learning.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_dqn", "package": "turtlebot3_dqn", "package_summary": "The turtlebot3_dqn package using reinforcement learning with DQN (Deep Q-Learning).", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_home_service_challenge_tools", "package": "turtlebot3_home_service_challenge_tools", "package_summary": "turtlebot3_home_service_challenge_tools", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_home_service_challenge_manipulator", "package": "turtlebot3_home_service_challenge_manipulator", "package_summary": "Manipulator controller package for turtlebot3_home_service_challenge", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_home_service_challenge", "package": "turtlebot3_home_service_challenge", "package_summary": "ROS packages for the Turtlebot3 Home Service Challenge (meta package)", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_home_service_challenge_core", "package": "turtlebot3_home_service_challenge_core", "package_summary": "Core package for turtlebot3_home_service_challenge", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_home_service_challenge_aruco", "package": "turtlebot3_home_service_challenge_aruco", "package_summary": "Using aruco package for turtlebot3_home_service_challenge", "package_details": ""},
{"url": "https://index.ros.org/p/ros_babel_fish_test_msgs", "package": "ros_babel_fish_test_msgs", "package_summary": "Test messages for the ros_babel_fish project tests.", "package_details": ""},
{"url": "https://index.ros.org/p/ros_babel_fish", "package": "ros_babel_fish", "package_summary": "A runtime message handler for ROS.\n    Allows subscription, publishing, calling of services and actions with messages known only at runtime as long\n    as they are available in the local environment.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2_control_cmake", "package": "ros2_control_cmake", "package_summary": "Provides CMake macros used by the ros2_control framework", "package_details": ""},
{"url": "https://index.ros.org/p/lely_core_libraries", "package": "lely_core_libraries", "package_summary": "ROS wrapper for lely-core-libraries", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_utils", "package": "canopen_utils", "package_summary": "Utils for working with ros2_canopen.", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_ros2_controllers", "package": "canopen_ros2_controllers", "package_summary": "ros2_control controllers for ros2_canopen functionalities", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_ros2_control", "package": "canopen_ros2_control", "package_summary": "ros2_control wrapper for ros2_canopen functionalities", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_proxy_driver", "package": "canopen_proxy_driver", "package_summary": "Simple proxy driver for the ros2_canopen stack", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_master_driver", "package": "canopen_master_driver", "package_summary": "Basic canopen master implementation", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_interfaces", "package": "canopen_interfaces", "package_summary": "Services and Messages for ros2_canopen stack", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_fake_slaves", "package": "canopen_fake_slaves", "package_summary": "Package with mock canopen slave", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_core", "package": "canopen_core", "package_summary": "Core ros2_canopen functionalities such as DeviceContainer and master", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_base_driver", "package": "canopen_base_driver", "package_summary": "Library containing abstract CANopen driver class for ros2_canopen", "package_details": ""},
{"url": "https://index.ros.org/p/canopen_402_driver", "package": "canopen_402_driver", "package_summary": "Driiver for devices implementing CIA402 profile", "package_details": ""},
{"url": "https://index.ros.org/p/canopen", "package": "canopen", "package_summary": "Meta-package aggregating the ros2_canopen packages and documentation", "package_details": ""},
{"url": "https://index.ros.org/p/zenoh_cpp_vendor", "package": "zenoh_cpp_vendor", "package_summary": "Vendor pkg to install zenoh-cpp", "package_details": ""},
{"url": "https://index.ros.org/p/rmw_zenoh_cpp", "package": "rmw_zenoh_cpp", "package_summary": "A ROS 2 middleware implementation using zenoh-cpp", "package_details": ""},
{"url": "https://index.ros.org/p/play_motion2_msgs", "package": "play_motion2_msgs", "package_summary": "Play a pre-recorded motion on a robot", "package_details": ""},
{"url": "https://index.ros.org/p/play_motion2", "package": "play_motion2", "package_summary": "Play a pre-recorded motion on a robot", "package_details": ""},
{"url": "https://index.ros.org/p/phone_sensors_bridge_examples", "package": "phone_sensors_bridge_examples", "package_summary": "Examples for phone_sensors_bridge", "package_details": ""},
{"url": "https://index.ros.org/p/phone_sensors_bridge", "package": "phone_sensors_bridge", "package_summary": "Serve a webpage to open from a mobile device. The phone's browser will send video, imu and gps data back to the node", "package_details": ""},
{"url": "https://index.ros.org/p/off_highway_sensor_drivers", "package": "off_highway_sensor_drivers", "package_summary": "The off_highway_sensor_drivers package", "package_details": ""},
{"url": "https://index.ros.org/p/off_highway_general_purpose_radar_msgs", "package": "off_highway_general_purpose_radar_msgs", "package_summary": "The off_highway_general_purpose_radar_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_task_constructor_visualization", "package": "moveit_task_constructor_visualization", "package_summary": "Visualization tools for MoveIt Task Pipeline", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_marker_tools", "package": "rviz_marker_tools", "package_summary": "Tools for marker creation / handling", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_task_constructor_msgs", "package": "moveit_task_constructor_msgs", "package_summary": "Messages for MoveIt Task Pipeline", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_task_constructor_core", "package": "moveit_task_constructor_core", "package_summary": "MoveIt Task Pipeline", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_task_constructor_capabilities", "package": "moveit_task_constructor_capabilities", "package_summary": "MoveGroupCapabilites to interact with MoveIt", "package_details": ""},
{"url": "https://index.ros.org/p/mola_state_estimation", "package": "mola_state_estimation", "package_summary": "Metapackage with all MOLA state estimation packages.", "package_details": ""},
{"url": "https://index.ros.org/p/kompass", "package": "kompass", "package_summary": "Kompass: Event-driven navigation system", "package_details": ""},
{"url": "https://index.ros.org/p/greenwave_monitor_interfaces", "package": "greenwave_monitor_interfaces", "package_summary": "Interfaces for the greenwave_monitor package", "package_details": ""},
{"url": "https://index.ros.org/p/greenwave_monitor", "package": "greenwave_monitor", "package_summary": "A ROS 2 diagnostic tool for monitoring topic frame rates and latency metrics.", "package_details": ""},
{"url": "https://index.ros.org/p/data_tamer_msgs", "package": "data_tamer_msgs", "package_summary": "Interfaces for data_tamer", "package_details": ""},
{"url": "https://index.ros.org/p/data_tamer_cpp", "package": "data_tamer_cpp", "package_summary": "DataTamer data logging library", "package_details": ""},
{"url": "https://index.ros.org/p/crazyflie_sim", "package": "crazyflie_sim", "package_summary": "Simulator for the Crazyswarm2 ROS stack", "package_details": ""},
{"url": "https://index.ros.org/p/crazyflie_py", "package": "crazyflie_py", "package_summary": "Simple Python Interface for Crayzswarm2", "package_details": ""},
{"url": "https://index.ros.org/p/crazyflie_interfaces", "package": "crazyflie_interfaces", "package_summary": "Interfaces for Crazyswarm2 package.", "package_details": ""},
{"url": "https://index.ros.org/p/crazyflie_examples", "package": "crazyflie_examples", "package_summary": "Examples for the Crazyswarm2 ROS stack", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_vehicle_msgs", "package": "autoware_vehicle_msgs", "package_summary": "Interfaces between core Autoware vehicle components", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_system_msgs", "package": "autoware_system_msgs", "package_summary": "Autoware system messages package.", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_msgs", "package": "autoware_msgs", "package_summary": "Meta package for the autoware_msgs packages", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_localization_msgs", "package": "autoware_localization_msgs", "package_summary": "Autoware localization messages package.", "package_details": ""},
{"url": "https://index.ros.org/p/crazyflie", "package": "crazyflie", "package_summary": "ROS 2 Package for Bitcraze Crazyflie robots", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_common_msgs", "package": "autoware_common_msgs", "package_summary": "Autoware common messages package.", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_lanelet2_extension_python", "package": "autoware_lanelet2_extension_python", "package_summary": "The autoware_lanelet2_extension_python package contains Python bindings for lanelet2_extension package", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_internal_planning_msgs", "package": "autoware_internal_planning_msgs", "package_summary": "The autoware_internal_planning_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_internal_perception_msgs", "package": "autoware_internal_perception_msgs", "package_summary": "Autoware internal perception messages package.", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_internal_msgs", "package": "autoware_internal_msgs", "package_summary": "Autoware internal messages package.", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_internal_metric_msgs", "package": "autoware_internal_metric_msgs", "package_summary": "The autoware_internal_metric_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_internal_debug_msgs", "package": "autoware_internal_debug_msgs", "package_summary": "Autoware internal debug messages package.", "package_details": ""},
{"url": "https://index.ros.org/p/aruco_markers_msgs", "package": "aruco_markers_msgs", "package_summary": "The aruco_markers_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/ardrone_sumo", "package": "ardrone_sumo", "package_summary": "Control the Parrot JumpingSumo drone via ROS2 topics", "package_details": ""},
{"url": "https://index.ros.org/p/ardrone_sdk", "package": "ardrone_sdk", "package_summary": "Exports ARSDK3 as a library", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_safety_controller", "package": "kobuki_safety_controller", "package_summary": "A controller ensuring the safe operation of Kobuki.\n\n    The SafetyController keeps track of bumper, cliff and wheel drop events. In case of the first two,\n    Kobuki is commanded to move back. In the latter case, Kobuki is stopped.\n\n    This controller can be enabled/disabled.\n    The safety states (bumper pressed etc.) can be reset. WARNING: Dangerous!", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_ros", "package": "kobuki_ros", "package_summary": "ROS 2 runtime software for Kobuki, Yujin Robot's mobile research base.", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_node", "package": "kobuki_node", "package_summary": "ROS 2 node for Kobuki: ROS wrapper for the Kobuki driver.", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_keyop", "package": "kobuki_keyop", "package_summary": "Keyboard teleoperation for Kobuki: relays commands from a keyboard to Kobuki.", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_random_walker", "package": "kobuki_random_walker", "package_summary": "Random walker app for Kobuki", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_description", "package": "kobuki_description", "package_summary": "Description of the Kobuki model.\n      Provides the model description of Kobuki for simulation and visualisation. The files in this\n      package are parsed and used by a variety of other components. Most users will not interact directly\n      with this package.", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_controller_tutorial", "package": "kobuki_controller_tutorial", "package_summary": "Code for the Kobuki controller tutorial.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_tutorials", "package": "turtlebot4_tutorials", "package_summary": "Turtlebot4 Tutorials Metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_bumper2pc", "package": "kobuki_bumper2pc", "package_summary": "Bumper/cliff to pointcloud nodelet:\n    Publish bumpers and cliff sensors events as points in a pointcloud, so navistack can use them\n    for poor-man navigation. Implemented as a nodelet intended to run together with kobuki_node.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_python_tutorials", "package": "turtlebot4_python_tutorials", "package_summary": "TurtleBot 4 Python Tutorials", "package_details": ""},
{"url": "https://index.ros.org/p/kobuki_auto_docking", "package": "kobuki_auto_docking", "package_summary": "Automatic docking for Kobuki:\n\t    Users owning a docking station for Kobuki can use this tool to let Kobuki find its nest autonomously.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_openai_tutorials", "package": "turtlebot4_openai_tutorials", "package_summary": "Tutorials on using OpenAI to control Turtlebot 4", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_cpp_tutorials", "package": "turtlebot4_cpp_tutorials", "package_summary": "TurtleBot 4 C++ Tutorials", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_simulator", "package": "turtlebot4_simulator", "package_summary": "TODO: Package description", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_ignition_toolbox", "package": "turtlebot4_ignition_toolbox", "package_summary": "Turtlebot4 Ignition Toolbox", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_tests", "package": "turtlebot4_tests", "package_summary": "Turtlebot4 System Tests", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_robot", "package": "turtlebot4_robot", "package_summary": "Turtlebot4 Robot Metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_diagnostics", "package": "turtlebot4_diagnostics", "package_summary": "Turtlebot4 Diagnostics", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_base", "package": "turtlebot4_base", "package_summary": "Turtlebot4 Base Node", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_viz", "package": "turtlebot4_viz", "package_summary": "Visualization launchers and helpers for Turtlebot4", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_desktop", "package": "turtlebot4_desktop", "package_summary": "Turtlebot4 Desktop Metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_node", "package": "turtlebot4_node", "package_summary": "Turtlebot4 Node", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_navigation", "package": "turtlebot4_navigation", "package_summary": "Turtlebot4 Navigation", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_msgs", "package": "turtlebot4_msgs", "package_summary": "Turtlebot4 Messages", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot4_description", "package": "turtlebot4_description", "package_summary": "Turtlebot4 Description package", "package_details": ""},
{"url": "https://index.ros.org/p/foros_msgs", "package": "foros_msgs", "package_summary": "Fail over ROS messages (raft RPCs)", "package_details": ""},
{"url": "https://index.ros.org/p/foros_inspector", "package": "foros_inspector", "package_summary": "Fail over ROS inspector", "package_details": ""},
{"url": "https://index.ros.org/p/foros_examples", "package": "foros_examples", "package_summary": "Fail over ROS examples", "package_details": ""},
{"url": "https://index.ros.org/p/foros", "package": "foros", "package_summary": "Fail Over ROS framework", "package_details": ""},
{"url": "https://index.ros.org/p/irobot_create_gz_toolbox", "package": "irobot_create_gz_toolbox", "package_summary": "Nodes and tools for simulating in Ignition iRobot(R) Create(R) 3 Educational Robot.", "package_details": ""},
{"url": "https://index.ros.org/p/irobot_create_gz_sim", "package": "irobot_create_gz_sim", "package_summary": "Metapackage for the iRobot(R) Create(R) 3 robot Ignition simulator", "package_details": ""},
{"url": "https://index.ros.org/p/irobot_create_description", "package": "irobot_create_description", "package_summary": "Provides the model description for the iRobot(R) Create(R) 3 Educational Robot.", "package_details": ""},
{"url": "https://index.ros.org/p/irobot_create_control", "package": "irobot_create_control", "package_summary": "Provides the diff-drive controller for the iRobot(R) Create(R) 3 Educational Robot.", "package_details": ""},
{"url": "https://index.ros.org/p/irobot_create_common_bringup", "package": "irobot_create_common_bringup", "package_summary": "Provides common launch and configuration scripts for a simulated iRobot(R) Create(R) 3 Educational Robot.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation_teleop", "package": "turtlebot3_manipulation_teleop", "package_summary": "Ros2 Package of the turtlebot3_manipulation_teleop", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation_navigation2", "package": "turtlebot3_manipulation_navigation2", "package_summary": "ROS 2 launch scripts for navigation2", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation_moveit_config", "package": "turtlebot3_manipulation_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the turtlebot3_manipulation with the MoveIt Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation_hardware", "package": "turtlebot3_manipulation_hardware", "package_summary": "ROS 2 package for turtlebot3_manipulation_hardware", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation_description", "package": "turtlebot3_manipulation_description", "package_summary": "ROS 2 package for turtlebot3_manipulation_description", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation_cartographer", "package": "turtlebot3_manipulation_cartographer", "package_summary": "ROS 2 launch scripts for cartographer", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation_bringup", "package": "turtlebot3_manipulation_bringup", "package_summary": "ROS 2 package for turtlebot3_manipulation", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation", "package": "turtlebot3_manipulation", "package_summary": "ROS 2 package for turtlebot3_manipulation", "package_details": ""},
{"url": "https://index.ros.org/p/stubborn_buddies_msgs", "package": "stubborn_buddies_msgs", "package_summary": "Messages to support library of stubborn buddies", "package_details": ""},
{"url": "https://index.ros.org/p/stubborn_buddies", "package": "stubborn_buddies", "package_summary": "Demo that uses node composition of lifecycle nodes to achieve fail-over robustness on ROS nodes", "package_details": ""},
{"url": "https://index.ros.org/p/plansys2_pddl_parser", "package": "plansys2_pddl_parser", "package_summary": "This package contains a library for parsing PDDL domains and problems.\n  \n    This package derives from the work of Anders Jonsson, contained in https://github.com/wisdompoet/universal-pddl-parser.git\n    with many modifications by Francisco Martin:\n      * ROS2 packaging\n      * Source code structure refactor\n      * CMakeLists.txt for cmake compilation\n      * Reading from String instead of files\n      * Licensing", "package_details": ""},
{"url": "https://index.ros.org/p/plansys2_lifecycle_manager", "package": "plansys2_lifecycle_manager", "package_summary": "A controller/manager for the lifecycle nodes of the ROS2 Planning System", "package_details": ""},
{"url": "https://index.ros.org/p/plansys2_bringup", "package": "plansys2_bringup", "package_summary": "Bringup scripts and configurations for the ROS2 Planning System", "package_details": ""},
{"url": "https://index.ros.org/p/ouster_msgs", "package": "ouster_msgs", "package_summary": "ROS2 messages for ouster lidar driver", "package_details": ""},
{"url": "https://index.ros.org/p/raspimouse_slam_navigation", "package": "raspimouse_slam_navigation", "package_summary": "SLAM and navigation packages for Raspberry Pi Mouse V3", "package_details": ""},
{"url": "https://index.ros.org/p/raspimouse_slam", "package": "raspimouse_slam", "package_summary": "SLAM package for Raspberry Pi Mouse", "package_details": ""},
{"url": "https://index.ros.org/p/raspimouse_msgs", "package": "raspimouse_msgs", "package_summary": "RaspiMouse messages", "package_details": ""},
{"url": "https://index.ros.org/p/raspimouse", "package": "raspimouse", "package_summary": "RaspiMouse ROS 2 node", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_rgbd_sensors", "package": "pmb2_rgbd_sensors", "package_summary": "pmb2-specific RGBD sensors module and params files.", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_navigation", "package": "pmb2_navigation", "package_summary": "PMB2 navigation metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_laser_sensors", "package": "pmb2_laser_sensors", "package_summary": "Launch files and scripts needed to bring up the ROS nodes of a PMB2 robot.", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_2dnav", "package": "pmb2_2dnav", "package_summary": "PMB2-specific launch files needed to run\n    navigation on the PMB2 robot.", "package_details": ""},
{"url": "https://index.ros.org/p/pal_gazebo_worlds", "package": "pal_gazebo_worlds", "package_summary": "Simulation worlds for PAL robots.", "package_details": ""},
{"url": "https://index.ros.org/p/ds_dbw_msgs", "package": "ds_dbw_msgs", "package_summary": "Drive-by-wire messages", "package_details": ""},
{"url": "https://index.ros.org/p/ds_dbw_can", "package": "ds_dbw_can", "package_summary": "Interface to the Dataspeed Inc. Drive-By-Wire kit", "package_details": ""},
{"url": "https://index.ros.org/p/ds_dbw", "package": "ds_dbw", "package_summary": "Interface to the Dataspeed Inc. Drive-By-Wire kits", "package_details": ""},
{"url": "https://index.ros.org/p/crane_plus", "package": "crane_plus", "package_summary": "ROS 2 package suite of CRANE+ V2", "package_details": ""},
{"url": "https://index.ros.org/p/apex_containers", "package": "apex_containers", "package_summary": "Containers", "package_details": ""},
{"url": "https://index.ros.org/p/yaml_cpp_vendor", "package": "yaml_cpp_vendor", "package_summary": "Wrapper around yaml-cpp, it provides a fixed CMake module and an ExternalProject build of it.", "package_details": ""},
{"url": "https://index.ros.org/p/webots_ros2_crazyflie", "package": "webots_ros2_crazyflie", "package_summary": "ROS2 package for Crazyflie webots simulator", "package_details": ""},
{"url": "https://index.ros.org/p/vitis_common", "package": "vitis_common", "package_summary": "Common code for working with Vitis\u2122 Unified Software Platform in ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/webots_ros2_husarion", "package": "webots_ros2_husarion", "package_summary": "Husarion ROSbot 2R and XL robots ROS2 interface for Webots.", "package_details": ""},
{"url": "https://index.ros.org/p/vision_msgs_layers", "package": "vision_msgs_layers", "package_summary": "Collection of RQt Image Overlay Plugins for Vision Msgs", "package_details": ""},
{"url": "https://index.ros.org/p/vision_msgs", "package": "vision_msgs", "package_summary": "Messages for interfacing with various computer vision pipelines, such as\n    object detectors.", "package_details": ""},
{"url": "https://index.ros.org/p/simulation", "package": "simulation", "package_summary": "A package which extends 'ros_base' and includes simulation packages.", "package_details": ""},
{"url": "https://index.ros.org/p/ros_core", "package": "ros_core", "package_summary": "A package to aggregate the packages required to use publish / subscribe, services, generate messages and other core ROS concepts.", "package_details": ""},
{"url": "https://index.ros.org/p/ros_base", "package": "ros_base", "package_summary": "A package which extends 'ros_core' and includes other basic functionalities like tf2 and urdf.", "package_details": ""},
{"url": "https://index.ros.org/p/perception", "package": "perception", "package_summary": "A package which aggregates common perception packages.", "package_details": ""},
{"url": "https://index.ros.org/p/desktop_full", "package": "desktop_full", "package_summary": "Provides a \"batteries included\" experience to novice users.", "package_details": ""},
{"url": "https://index.ros.org/p/desktop", "package": "desktop", "package_summary": "A package which extends 'ros_base' and includes high level packages like vizualization tools and demos.", "package_details": ""},
{"url": "https://index.ros.org/p/ur_simulation_gz", "package": "ur_simulation_gz", "package_summary": "Example and configuration files for Gazebo simulation of UR manipulators.", "package_details": ""},
{"url": "https://index.ros.org/p/urdf_parser_plugin", "package": "urdf_parser_plugin", "package_summary": "This package contains a C++ base class for URDF parsers.", "package_details": ""},
{"url": "https://index.ros.org/p/urdf", "package": "urdf", "package_summary": "This package contains a C++ parser for the Unified Robot Description\n    Format (URDF), which is an XML format for representing a robot model.\n    The code API of the parser has been through our review process and will remain\n    backwards compatible in future releases.", "package_details": ""},
{"url": "https://index.ros.org/p/ur_moveit_config", "package": "ur_moveit_config", "package_summary": "An example package with MoveIt2 configurations for UR robots.", "package_details": ""},
{"url": "https://index.ros.org/p/ur_dashboard_msgs", "package": "ur_dashboard_msgs", "package_summary": "Messages around the UR Dashboard server.", "package_details": ""},
{"url": "https://index.ros.org/p/ur", "package": "ur", "package_summary": "Metapackage for universal robots", "package_details": ""},
{"url": "https://index.ros.org/p/ublox_ubx_msgs", "package": "ublox_ubx_msgs", "package_summary": "UBLOX UBX ROS2 Msgs", "package_details": ""},
{"url": "https://index.ros.org/p/ur_bringup", "package": "ur_bringup", "package_summary": "Launch file and run-time configurations, e.g. controllers.", "package_details": ""},
{"url": "https://index.ros.org/p/ublox_ubx_interfaces", "package": "ublox_ubx_interfaces", "package_summary": "UBLOX UBX Interfaces", "package_details": ""},
{"url": "https://index.ros.org/p/ublox_nav_sat_fix_hp_node", "package": "ublox_nav_sat_fix_hp_node", "package_summary": "Provides a NavSatFix node for a u-blox GPS GNSS receiver using Gen 9 UBX Protocol", "package_details": ""},
{"url": "https://index.ros.org/p/ublox_dgnss_node", "package": "ublox_dgnss_node", "package_summary": "Provides a ublox_gnss node for a u-blox GPS GNSS receiver using Gen 9 UBX Protocol", "package_details": ""},
{"url": "https://index.ros.org/p/ublox_dgnss", "package": "ublox_dgnss", "package_summary": "Provides a ublox_dgnss node for a u-blox GPS DGNSS receiver using Gen 9 UBX Protocol", "package_details": ""},
{"url": "https://index.ros.org/p/ntrip_client_node", "package": "ntrip_client_node", "package_summary": "Publishes RTCM ntrip messages from an external mountpoint", "package_details": ""},
{"url": "https://index.ros.org/p/turtle_nest", "package": "turtle_nest", "package_summary": "ROS 2 Package Creator", "package_details": ""},
{"url": "https://index.ros.org/p/turbojpeg_compressed_image_transport", "package": "turbojpeg_compressed_image_transport", "package_summary": "Compressed_image_transport provides a plugin to image_transport for transparently sending images\n    encoded as JPEG by turbojpeg.", "package_details": ""},
{"url": "https://index.ros.org/p/asio_cmake_module", "package": "asio_cmake_module", "package_summary": "A CMake module for using the ASIO network library", "package_details": ""},
{"url": "https://index.ros.org/p/tracetools_analysis", "package": "tracetools_analysis", "package_summary": "Tools for analysing trace data.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2trace_analysis", "package": "ros2trace_analysis", "package_summary": "The trace-analysis command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/topic_tools_interfaces", "package": "topic_tools_interfaces", "package_summary": "topic_tools_interfaces contains messages and services for topic_tools", "package_details": ""},
{"url": "https://index.ros.org/p/test_interface_files", "package": "test_interface_files", "package_summary": "A package containing message definitions and fixtures used exclusively for testing purposes.", "package_details": ""},
{"url": "https://index.ros.org/p/topic_tools", "package": "topic_tools", "package_summary": "Tools for directing, throttling, selecting, and otherwise messing with\n    ROS 2 topics at a meta level.", "package_details": ""},
{"url": "https://index.ros.org/p/test_security", "package": "test_security", "package_summary": "Test nodes, publishers and subscribers with DDS-Security.", "package_details": ""},
{"url": "https://index.ros.org/p/test_rclcpp", "package": "test_rclcpp", "package_summary": "Test rclcpp API.\n    Each test is run with every available rmw implementation.", "package_details": ""},
{"url": "https://index.ros.org/p/tango_icons_vendor", "package": "tango_icons_vendor", "package_summary": "tango_icons_vendor provides the public domain Tango icons for non-linux systems (", "package_details": ""},
{"url": "https://index.ros.org/p/test_quality_of_service", "package": "test_quality_of_service", "package_summary": "Test quality of service features, specifically liveliness, deadline, and lifespan.", "package_details": ""},
{"url": "https://index.ros.org/p/test_communication", "package": "test_communication", "package_summary": "Test publish / subscribe and request / response communication with all primitive as well as builtin types.\n    Also exchange dynamic and static arrays and nested message structures.\n    Each test is run with every available rmw implementation for the sending as well as the receiving side.", "package_details": ""},
{"url": "https://index.ros.org/p/test_cli_remapping", "package": "test_cli_remapping", "package_summary": "Test command line remapping of topic names, service names, node namespace, and node name.", "package_details": ""},
{"url": "https://index.ros.org/p/test_cli", "package": "test_cli", "package_summary": "Test command line arguments passed to ros2 executables.", "package_details": ""},
{"url": "https://index.ros.org/p/sros2", "package": "sros2", "package_summary": "Command line tools for managing SROS2 keys", "package_details": ""},
{"url": "https://index.ros.org/p/social_nav_util", "package": "social_nav_util", "package_summary": "Utilities for social navigation work", "package_details": ""},
{"url": "https://index.ros.org/p/social_nav_msgs", "package": "social_nav_msgs", "package_summary": "ROS interfaces for social navigation", "package_details": ""},
{"url": "https://index.ros.org/p/social_nav_metrics", "package": "social_nav_metrics", "package_summary": "Navigation metrics for navigating around people", "package_details": ""},
{"url": "https://index.ros.org/p/soccer_marker_generation", "package": "soccer_marker_generation", "package_summary": "Generates rviz display markers from soccer msgs", "package_details": ""},
{"url": "https://index.ros.org/p/soccer_interfaces", "package": "soccer_interfaces", "package_summary": "Metapackage for soccer-related interfaces", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_2d_overlay_msgs", "package": "rviz_2d_overlay_msgs", "package_summary": "Messages describing 2D overlays for RVIZ, extracted/derived from the jsk_visualization ROS1 packege.", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_rendering_tests", "package": "rviz_rendering_tests", "package_summary": "Example plugin for RViz - documents and tests RViz plugin development", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_visual_testing_framework", "package": "rviz_visual_testing_framework", "package_summary": "3D testing framework for RViz.", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_rendering", "package": "rviz_rendering", "package_summary": "Library which provides the 3D rendering functionality in rviz.", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_ogre_vendor", "package": "rviz_ogre_vendor", "package_summary": "Wrapper around ogre3d, it provides a fixed CMake module and an ExternalProject build of ogre.", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_default_plugins", "package": "rviz_default_plugins", "package_summary": "Several default plugins for rviz to cover the basic functionality.", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_common", "package": "rviz_common", "package_summary": "Common rviz API, used by rviz plugins and applications.", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_assimp_vendor", "package": "rviz_assimp_vendor", "package_summary": "Wrapper around assimp, providing nothing but a dependency on assimp, on some systems.\n    On others, it provides a fixed CMake module or even an ExternalProject build of assimp.", "package_details": ""},
{"url": "https://index.ros.org/p/rviz2", "package": "rviz2", "package_summary": "3D visualization tool for ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_image_overlay_layer", "package": "rqt_image_overlay_layer", "package_summary": "Provides an rqt_image_overlay_layer plugin interface, and a template impelementation class", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_image_overlay", "package": "rqt_image_overlay", "package_summary": "An rqt plugin to display overlays for custom msgs on an image using plugins.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_runtime_py", "package": "rosidl_runtime_py", "package_summary": "Runtime utilities for working with generated ROS interfaces in Python.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_generator_py", "package": "rosidl_generator_py", "package_summary": "Generate the ROS interfaces in Python.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_default_generators", "package": "rosidl_default_generators", "package_summary": "A configuration package defining the default ROS interface generators.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_generator_dds_idl", "package": "rosidl_generator_dds_idl", "package_summary": "Generate the DDS interfaces for ROS interfaces.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_typesupport_introspection_tests", "package": "rosidl_typesupport_introspection_tests", "package_summary": "Integration tests of the rosidl_typesupport_introspection_c/cpp packages.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_parser", "package": "rosidl_parser", "package_summary": "The parser for `.idl` ROS interface files.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_generator_cpp", "package": "rosidl_generator_cpp", "package_summary": "Generate the ROS interfaces in C++.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_generator_c", "package": "rosidl_generator_c", "package_summary": "Generate the ROS interfaces in C.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_cmake", "package": "rosidl_cmake", "package_summary": "The CMake functionality to invoke code generation for ROS interface files.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_cli", "package": "rosidl_cli", "package_summary": "Command line tools for ROS interface generation.", "package_details": ""},
{"url": "https://index.ros.org/p/rosidl_adapter", "package": "rosidl_adapter", "package_summary": "API and scripts to parse .msg/.srv/.action files and convert them to .idl.", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_bag_v2_plugins", "package": "rosbag2_bag_v2_plugins", "package_summary": "Package containing storage and converter plugins for rosbag 1", "package_details": ""},
{"url": "https://index.ros.org/p/ros1_rosbag_storage_vendor", "package": "ros1_rosbag_storage_vendor", "package_summary": "Vendor package for rosbag_storage of ROS1", "package_details": ""},
{"url": "https://index.ros.org/p/sqlite3_vendor", "package": "sqlite3_vendor", "package_summary": "SQLite 3 vendor package", "package_details": ""},
{"url": "https://index.ros.org/p/shared_queues_vendor", "package": "shared_queues_vendor", "package_summary": "Vendor package for concurrent queues from moodycamel", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_transport", "package": "rosbag2_transport", "package_summary": "Layer encapsulating ROS middleware to allow rosbag2 to be used with or without middleware", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_tests", "package": "rosbag2_tests", "package_summary": "Tests package for rosbag2", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_test_common", "package": "rosbag2_test_common", "package_summary": "Commonly used test helper classes and fixtures for rosbag2", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_storage_mcap_testdata", "package": "rosbag2_storage_mcap_testdata", "package_summary": "message definition test fixtures for MCAP schema recording", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_storage_default_plugins", "package": "rosbag2_storage_default_plugins", "package_summary": "ROSBag2 SQLite3 storage plugin", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_storage", "package": "rosbag2_storage", "package_summary": "ROS2 independent storage format to store serialized ROS2 messages", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_py", "package": "rosbag2_py", "package_summary": "Python API for rosbag2", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_interfaces", "package": "rosbag2_interfaces", "package_summary": "Interface definitions for controlling rosbag2", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_cpp", "package": "rosbag2_cpp", "package_summary": "C++ ROSBag2 client library", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_compression_zstd", "package": "rosbag2_compression_zstd", "package_summary": "Zstandard compression library implementation of rosbag2_compression", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2_compression", "package": "rosbag2_compression", "package_summary": "Compression implementations for rosbag2 bags and messages.", "package_details": ""},
{"url": "https://index.ros.org/p/rosbag2", "package": "rosbag2", "package_summary": "Meta package for rosbag2 related packages", "package_details": ""},
{"url": "https://index.ros.org/p/ros2bag", "package": "ros2bag", "package_summary": "Entry point for rosbag in ROS 2", "package_details": ""},
{"url": "https://index.ros.org/p/mcap_vendor", "package": "mcap_vendor", "package_summary": "mcap vendor package", "package_details": ""},
{"url": "https://index.ros.org/p/ros_workspace", "package": "ros_workspace", "package_summary": "Provides the prefix level environment files for ROS 2 packages.", "package_details": ""},
{"url": "https://index.ros.org/p/ros_testing", "package": "ros_testing", "package_summary": "The entry point package to launch testing in ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2test", "package": "ros2test", "package_summary": "The test command for ROS 2 launch tests.", "package_details": ""},
{"url": "https://index.ros.org/p/test_ros_gz_bridge", "package": "test_ros_gz_bridge", "package_summary": "Bridge communication between ROS and Gazebo Transport", "package_details": ""},
{"url": "https://index.ros.org/p/ros_gz_point_cloud", "package": "ros_gz_point_cloud", "package_summary": "Point cloud utilities for Gazebo simulation with ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2launch_security_examples", "package": "ros2launch_security_examples", "package_summary": "Examples of how to use the ros2launch_security extension.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2launch_security", "package": "ros2launch_security", "package_summary": "Security extensions for ros2 launch", "package_details": ""},
{"url": "https://index.ros.org/p/ros2cli_common_extensions", "package": "ros2cli_common_extensions", "package_summary": "Meta package for ros2cli common extensions", "package_details": ""},
{"url": "https://index.ros.org/p/ros2topic", "package": "ros2topic", "package_summary": "The topic command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2service", "package": "ros2service", "package_summary": "The service command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2run", "package": "ros2run", "package_summary": "The run command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2pkg", "package": "ros2pkg", "package_summary": "The pkg command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2param", "package": "ros2param", "package_summary": "The param command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2node", "package": "ros2node", "package_summary": "The node command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2lifecycle_test_fixtures", "package": "ros2lifecycle_test_fixtures", "package_summary": "Package containing fixture nodes for ros2lifecycle tests", "package_details": ""},
{"url": "https://index.ros.org/p/ros2lifecycle", "package": "ros2lifecycle", "package_summary": "The lifecycle command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2interface", "package": "ros2interface", "package_summary": "The interface command for ROS 2 command line tools", "package_details": ""},
{"url": "https://index.ros.org/p/ros2component", "package": "ros2component", "package_summary": "The component command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2cli_test_interfaces", "package": "ros2cli_test_interfaces", "package_summary": "A package containing interface definitions for testing ros2cli.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2cli", "package": "ros2cli", "package_summary": "Framework for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2action", "package": "ros2action", "package_summary": "The action command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/tracetools_trace", "package": "tracetools_trace", "package_summary": "Tools for setting up tracing sessions.", "package_details": ""},
{"url": "https://index.ros.org/p/tracetools_test", "package": "tracetools_test", "package_summary": "Utilities for tracing-related tests.", "package_details": ""},
{"url": "https://index.ros.org/p/tracetools_read", "package": "tracetools_read", "package_summary": "Tools for reading traces.", "package_details": ""},
{"url": "https://index.ros.org/p/tracetools_launch", "package": "tracetools_launch", "package_summary": "Launch integration for tracing.", "package_details": ""},
{"url": "https://index.ros.org/p/tracetools", "package": "tracetools", "package_summary": "Tracing wrapper for ROS 2.", "package_details": ""},
{"url": "https://index.ros.org/p/test_tracetools_launch", "package": "test_tracetools_launch", "package_summary": "Tests for the tracetools_launch package.", "package_details": ""},
{"url": "https://index.ros.org/p/test_tracetools", "package": "test_tracetools", "package_summary": "Tests for the tracetools package.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2trace", "package": "ros2trace", "package_summary": "The trace command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2_socketcan_msgs", "package": "ros2_socketcan_msgs", "package_summary": "Messages for SocketCAN", "package_details": ""},
{"url": "https://index.ros.org/p/ros2_socketcan", "package": "ros2_socketcan", "package_summary": "Simple wrapper around SocketCAN", "package_details": ""},
{"url": "https://index.ros.org/p/robotiq_hardware_tests", "package": "robotiq_hardware_tests", "package_summary": "ROS2 driver for the Robotiq gripper.", "package_details": ""},
{"url": "https://index.ros.org/p/robotiq_driver", "package": "robotiq_driver", "package_summary": "ROS2 driver package for the Robotiq gripper.", "package_details": ""},
{"url": "https://index.ros.org/p/robotiq_description", "package": "robotiq_description", "package_summary": "URDF and xacro description package for the Robotiq gripper.", "package_details": ""},
{"url": "https://index.ros.org/p/robotiq_controllers", "package": "robotiq_controllers", "package_summary": "Controllers for the Robotiq gripper.", "package_details": ""},
{"url": "https://index.ros.org/p/kinova_gen3_lite_moveit_config", "package": "kinova_gen3_lite_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the gen3_lite with the MoveIt Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/kinova_gen3_7dof_robotiq_2f_85_moveit_config", "package": "kinova_gen3_7dof_robotiq_2f_85_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the gen3 with the MoveIt Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/kinova_gen3_6dof_robotiq_2f_85_moveit_config", "package": "kinova_gen3_6dof_robotiq_2f_85_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the gen3 with the MoveIt Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/kortex_description", "package": "kortex_description", "package_summary": "", "package_details": ""},
{"url": "https://index.ros.org/p/kortex_bringup", "package": "kortex_bringup", "package_summary": "Launch file and run-time configurations, e.g. controllers.", "package_details": ""},
{"url": "https://index.ros.org/p/kortex_api", "package": "kortex_api", "package_summary": "KINOVA KORTEX\u2122 API", "package_details": ""},
{"url": "https://index.ros.org/p/velocity_controllers", "package": "velocity_controllers", "package_summary": "Generic controller for forwarding commands.", "package_details": ""},
{"url": "https://index.ros.org/p/tricycle_steering_controller", "package": "tricycle_steering_controller", "package_summary": "Steering controller with tricycle kinematics. Rear fixed wheels are powering the vehicle and front wheel is steering.", "package_details": ""},
{"url": "https://index.ros.org/p/tricycle_controller", "package": "tricycle_controller", "package_summary": "Controller for a tricycle drive mobile base", "package_details": ""},
{"url": "https://index.ros.org/p/steering_controllers_library", "package": "steering_controllers_library", "package_summary": "Package for steering robot configurations including odometry and interfaces.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_joint_trajectory_controller", "package": "rqt_joint_trajectory_controller", "package_summary": "Graphical frontend for interacting with joint_trajectory_controller instances.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2_controllers_test_nodes", "package": "ros2_controllers_test_nodes", "package_summary": "Demo nodes for showing and testing functionalities of the ros2_control framework.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2_controllers", "package": "ros2_controllers", "package_summary": "Metapackage for ros2_controllers related packages", "package_details": ""},
{"url": "https://index.ros.org/p/position_controllers", "package": "position_controllers", "package_summary": "Generic position controller for forwarding position commands.", "package_details": ""},
{"url": "https://index.ros.org/p/mecanum_drive_controller", "package": "mecanum_drive_controller", "package_summary": "Implementation of mecanum drive controller for 4 wheel drive.", "package_details": ""},
{"url": "https://index.ros.org/p/joint_state_broadcaster", "package": "joint_state_broadcaster", "package_summary": "Broadcaster to publish joint state", "package_details": ""},
{"url": "https://index.ros.org/p/gripper_controllers", "package": "gripper_controllers", "package_summary": "The gripper_controllers package", "package_details": ""},
{"url": "https://index.ros.org/p/gpio_controllers", "package": "gpio_controllers", "package_summary": "Controllers to interact with gpios.", "package_details": ""},
{"url": "https://index.ros.org/p/forward_command_controller", "package": "forward_command_controller", "package_summary": "Generic controller for forwarding commands.", "package_details": ""},
{"url": "https://index.ros.org/p/effort_controllers", "package": "effort_controllers", "package_summary": "Generic controller for forwarding commands.", "package_details": ""},
{"url": "https://index.ros.org/p/diff_drive_controller", "package": "diff_drive_controller", "package_summary": "Controller for a differential-drive mobile base.", "package_details": ""},
{"url": "https://index.ros.org/p/bicycle_steering_controller", "package": "bicycle_steering_controller", "package_summary": "Steering controller with bicycle kinematics. Rear fixed wheel is powering the vehicle and front wheel is steering.", "package_details": ""},
{"url": "https://index.ros.org/p/admittance_controller", "package": "admittance_controller", "package_summary": "Implementation of admittance controllers for different input and output interface.", "package_details": ""},
{"url": "https://index.ros.org/p/ackermann_steering_controller", "package": "ackermann_steering_controller", "package_summary": "Steering controller for Ackermann kinematics. Rear fixed wheels are powering the vehicle and front wheels are steering it.", "package_details": ""},
{"url": "https://index.ros.org/p/transmission_interface", "package": "transmission_interface", "package_summary": "transmission_interface contains data structures for representing mechanical transmissions, methods for propagating values between actuator and joint spaces and tooling to support this.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2_control_test_assets", "package": "ros2_control_test_assets", "package_summary": "The package provides shared test resources for ros2_control stack", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_controller_manager", "package": "rqt_controller_manager", "package_summary": "Graphical frontend for interacting with the controller manager.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2_control", "package": "ros2_control", "package_summary": "Metapackage for ROS2 control related packages", "package_details": ""},
{"url": "https://index.ros.org/p/joint_limits", "package": "joint_limits", "package_summary": "Interfaces for handling of joint limits for controllers or hardware.", "package_details": ""},
{"url": "https://index.ros.org/p/controller_manager", "package": "controller_manager", "package_summary": "Description of controller_manager", "package_details": ""},
{"url": "https://index.ros.org/p/controller_manager_msgs", "package": "controller_manager_msgs", "package_summary": "Messages and services for the controller manager.", "package_details": ""},
{"url": "https://index.ros.org/p/controller_interface", "package": "controller_interface", "package_summary": "Description of controller_interface", "package_details": ""},
{"url": "https://index.ros.org/p/test_rmw_implementation", "package": "test_rmw_implementation", "package_summary": "Test suite for ROS middleware API.", "package_details": ""},
{"url": "https://index.ros.org/p/rmw_gurumdds_cpp", "package": "rmw_gurumdds_cpp", "package_summary": "Implement the ROS middleware interface using GurumNetworks GurumDDS static code generation in C++.", "package_details": ""},
{"url": "https://index.ros.org/p/gurumdds_cmake_module", "package": "gurumdds_cmake_module", "package_summary": "Provide CMake module to find GurumNetworks GurumDDS.", "package_details": ""},
{"url": "https://index.ros.org/p/rmw_cyclonedds_cpp", "package": "rmw_cyclonedds_cpp", "package_summary": "Implement the ROS middleware interface using Eclipse CycloneDDS in C++.", "package_details": ""},
{"url": "https://index.ros.org/p/rti_connext_dds_cmake_module", "package": "rti_connext_dds_cmake_module", "package_summary": "Helper module to provide access to RTI products like Connext DDS Professional", "package_details": ""},
{"url": "https://index.ros.org/p/rmw_connextddsmicro", "package": "rmw_connextddsmicro", "package_summary": "A ROS2 RMW implementation built with RTI Connext DDS Micro.", "package_details": ""},
{"url": "https://index.ros.org/p/rmw_connextdds_common", "package": "rmw_connextdds_common", "package_summary": "Common source for RMW implementations built with RTI Connext DDS Professional and RTI Connext DDS Micro.", "package_details": ""},
{"url": "https://index.ros.org/p/rmw_connextdds", "package": "rmw_connextdds", "package_summary": "A ROS2 RMW implementation built with RTI Connext DDS Professional.", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization_msgs", "package": "rmf_visualization_msgs", "package_summary": "A package containing messages used for visualizations", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization_schedule", "package": "rmf_visualization_schedule", "package_summary": "A visualizer for trajectories in rmf schedule", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization_rviz2_plugins", "package": "rmf_visualization_rviz2_plugins", "package_summary": "A package containing RViz2 plugins for RMF", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization_obstacles", "package": "rmf_visualization_obstacles", "package_summary": "A visualizer for obstacles in RMF", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization_navgraphs", "package": "rmf_visualization_navgraphs", "package_summary": "A package to visualiize the navigation graphs of fleets", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization_floorplans", "package": "rmf_visualization_floorplans", "package_summary": "A package to visualize the floorplans for levels in a building", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization_fleet_states", "package": "rmf_visualization_fleet_states", "package_summary": "A package to visualize positions of robots from different fleets in the a building", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization_building_systems", "package": "rmf_visualization_building_systems", "package_summary": "A visualizer for doors and lifts", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_visualization", "package": "rmf_visualization", "package_summary": "Package containing a single launch file to bringup various visualizations", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_dev", "package": "rmf_dev", "package_summary": "A package to aggregate the packages required for a minimal installation of Open-RMF", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_traffic_examples", "package": "rmf_traffic_examples", "package_summary": "Examples of how to use the rmf_traffic library", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_site_map_msgs", "package": "rmf_site_map_msgs", "package_summary": "Messages that contain GeoPackage maps", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_obstacle_msgs", "package": "rmf_obstacle_msgs", "package_summary": "A package containing messages for describing obstacles in the environment", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_demos_bridges", "package": "rmf_demos_bridges", "package_summary": "Nodes for bridging between different communication stacks", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_demos_assets", "package": "rmf_demos_assets", "package_summary": "Models and other media used for RMF demos", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_cmake_uncrustify", "package": "rmf_cmake_uncrustify", "package_summary": "ament_cmake_uncrustify with support for parsing a config file.", "package_details": ""},
{"url": "https://index.ros.org/p/rmf_api_msgs", "package": "rmf_api_msgs", "package_summary": "RMF API msgs definition", "package_details": ""},
{"url": "https://index.ros.org/p/tlsf_cpp", "package": "tlsf_cpp", "package_summary": "C++ stdlib-compatible wrapper around tlsf allocator and ROS2 examples", "package_details": ""},
{"url": "https://index.ros.org/p/rcss3d_agent_msgs", "package": "rcss3d_agent_msgs", "package_summary": "Custom messages for communicating with rcss3d_agent", "package_details": ""},
{"url": "https://index.ros.org/p/rcss3d_agent_basic", "package": "rcss3d_agent_basic", "package_summary": "Basic rcss3d agent node that uses rcss3d_agent_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/rcss3d_agent", "package": "rcss3d_agent", "package_summary": "Launches a RoboCup 3D Simulation Agent, and converts data to and from ROS2 msgs", "package_details": ""},
{"url": "https://index.ros.org/p/rclpy", "package": "rclpy", "package_summary": "Package containing the Python client.", "package_details": ""},
{"url": "https://index.ros.org/p/rcl_logging_noop", "package": "rcl_logging_noop", "package_summary": "An rcl logger implementation that doesn't do anything with log messages.", "package_details": ""},
{"url": "https://index.ros.org/p/rcl_logging_interface", "package": "rcl_logging_interface", "package_summary": "Interface that rcl_logging backends needs to implement.", "package_details": ""},
{"url": "https://index.ros.org/p/test_msgs", "package": "test_msgs", "package_summary": "A package containing message definitions and fixtures used exclusively for testing purposes.", "package_details": ""},
{"url": "https://index.ros.org/p/splsm_8_conversion", "package": "splsm_8_conversion", "package_summary": "Converts Standard Platform League Standard Message V8 between ROS msg and UDP raw bytes", "package_details": ""},
{"url": "https://index.ros.org/p/splsm_8", "package": "splsm_8", "package_summary": "RoboCup Standard Platform League Standard Message V8 ROS msg", "package_details": ""},
{"url": "https://index.ros.org/p/splsm_7_conversion", "package": "splsm_7_conversion", "package_summary": "Converts Standard Platform League Standard Message V7 between ROS msg and UDP raw bytes", "package_details": ""},
{"url": "https://index.ros.org/p/splsm_7", "package": "splsm_7", "package_summary": "RoboCup Standard Platform League Standard Message V7 ROS msg", "package_details": ""},
{"url": "https://index.ros.org/p/r2r_spl_test_interfaces", "package": "r2r_spl_test_interfaces", "package_summary": "Messages for testing r2r_spl", "package_details": ""},
{"url": "https://index.ros.org/p/r2r_spl_8", "package": "r2r_spl_8", "package_summary": "Robot-To-Robot communication in RoboCup SPL", "package_details": ""},
{"url": "https://index.ros.org/p/r2r_spl_7", "package": "r2r_spl_7", "package_summary": "Robot-To-Robot communication in RoboCup SPL using SPLSM V7", "package_details": ""},
{"url": "https://index.ros.org/p/r2r_spl", "package": "r2r_spl", "package_summary": "Robot-to-Robot Communication in RoboCup Standard Platform League", "package_details": ""},
{"url": "https://index.ros.org/p/python_cmake_module", "package": "python_cmake_module", "package_summary": "Provide CMake module with extra functionality for Python.", "package_details": ""},
{"url": "https://index.ros.org/p/pybind11_vendor", "package": "pybind11_vendor", "package_summary": "Wrapper around pybind11.", "package_details": ""},
{"url": "https://index.ros.org/p/polygon_utils", "package": "polygon_utils", "package_summary": "Utilities for working with polygons, including triangulation", "package_details": ""},
{"url": "https://index.ros.org/p/polygon_rviz_plugins", "package": "polygon_rviz_plugins", "package_summary": "RViz visualizations for polygons", "package_details": ""},
{"url": "https://index.ros.org/p/polygon_msgs", "package": "polygon_msgs", "package_summary": "General purpose two-dimensional polygons. Formerly a part of nav_2d_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/polygon_demos", "package": "polygon_demos", "package_summary": "Demo of polygon_rviz_plugins", "package_details": ""},
{"url": "https://index.ros.org/p/zstd_point_cloud_transport", "package": "zstd_point_cloud_transport", "package_summary": "zstd_point_cloud_transport provides a plugin to point_cloud_transport for sending point clouds\n    encoded with lib", "package_details": ""},
{"url": "https://index.ros.org/p/zlib_point_cloud_transport", "package": "zlib_point_cloud_transport", "package_summary": "zlib_point_cloud_transport provides a plugin to point_cloud_transport for sending point clouds\n    encoded with zlib", "package_details": ""},
{"url": "https://index.ros.org/p/point_cloud_transport_plugins", "package": "point_cloud_transport_plugins", "package_summary": "Metapackage with common point_cloud_transport plugins", "package_details": ""},
{"url": "https://index.ros.org/p/point_cloud_interfaces", "package": "point_cloud_interfaces", "package_summary": "msg definitions for use with point_cloud_transport plugins.", "package_details": ""},
{"url": "https://index.ros.org/p/point_cloud_transport_py", "package": "point_cloud_transport_py", "package_summary": "Python API for point_cloud_transport", "package_details": ""},
{"url": "https://index.ros.org/p/point_cloud_msg_wrapper", "package": "point_cloud_msg_wrapper", "package_summary": "A point cloud message wrapper that allows for simple and safe PointCloud2 msg usage", "package_details": ""},
{"url": "https://index.ros.org/p/point_cloud_transport", "package": "point_cloud_transport", "package_summary": "Support for transporting PointCloud2 messages in compressed format and plugin interface for implementing additional PointCloud2 transports.", "package_details": ""},
{"url": "https://index.ros.org/p/picknik_twist_controller", "package": "picknik_twist_controller", "package_summary": "Subscribes to twist msg and forwards to hardware", "package_details": ""},
{"url": "https://index.ros.org/p/picknik_reset_fault_controller", "package": "picknik_reset_fault_controller", "package_summary": "ROS 2 controller that offers a service to clear faults in a hardware interface", "package_details": ""},
{"url": "https://index.ros.org/p/performance_test_ros1_publisher", "package": "performance_test_ros1_publisher", "package_summary": "A ROS1 publisher to use with performance_test", "package_details": ""},
{"url": "https://index.ros.org/p/performance_test_ros1_msgs", "package": "performance_test_ros1_msgs", "package_summary": "ROS1 versions of performance_test messages to use when testing with a ROS1 bridge", "package_details": ""},
{"url": "https://index.ros.org/p/ouxt_lint_common", "package": "ouxt_lint_common", "package_summary": "common linter settings for OUXT Polaris ROS2 packages", "package_details": ""},
{"url": "https://index.ros.org/p/ouxt_common", "package": "ouxt_common", "package_summary": "common settings for OUXT Polaris ROS2 packages", "package_details": ""},
{"url": "https://index.ros.org/p/ouster_sensor_msgs", "package": "ouster_sensor_msgs", "package_summary": "ouster_ros message and service definitions", "package_details": ""},
{"url": "https://index.ros.org/p/ouster_ros", "package": "ouster_ros", "package_summary": "Ouster ROS2 driver", "package_details": ""},
{"url": "https://index.ros.org/p/test_osrf_testing_tools_cpp", "package": "test_osrf_testing_tools_cpp", "package_summary": "Test package, which uses things exported by osrf_testing_tools_cpp.", "package_details": ""},
{"url": "https://index.ros.org/p/osrf_testing_tools_cpp", "package": "osrf_testing_tools_cpp", "package_summary": "Testing tools for C++, and is used in various OSRF projects.", "package_details": ""},
{"url": "https://index.ros.org/p/python_orocos_kdl_vendor", "package": "python_orocos_kdl_vendor", "package_summary": "Wrapper around PyKDL, providing nothing but a dependency on PyKDL on some systems.\n    On others, it fetches and builds python_orocos_kdl locally.", "package_details": ""},
{"url": "https://index.ros.org/p/orocos_kdl_vendor", "package": "orocos_kdl_vendor", "package_summary": "Wrapper around orocos_kdl, providing nothing but a dependency on orocos_kdl on some systems.\n    On others, it fetches and builds orocos_kdl locally.", "package_details": ""},
{"url": "https://index.ros.org/p/dynamic_edt_3d", "package": "dynamic_edt_3d", "package_summary": "The dynamicEDT3D library implements an inrementally updatable Euclidean distance transform (EDT) in 3D. It comes with a wrapper to use the OctoMap 3D representation and hooks into the change detection of the OctoMap library to propagate changes to the EDT.", "package_details": ""},
{"url": "https://index.ros.org/p/navigation2", "package": "navigation2", "package_summary": "ROS2 Navigation Stack", "package_details": ""},
{"url": "https://index.ros.org/p/nav2_rviz_plugins", "package": "nav2_rviz_plugins", "package_summary": "Navigation 2 plugins for rviz", "package_details": ""},
{"url": "https://index.ros.org/p/nav_2d_utils", "package": "nav_2d_utils", "package_summary": "A handful of useful utility functions for nav_2d packages.", "package_details": ""},
{"url": "https://index.ros.org/p/nav_2d_msgs", "package": "nav_2d_msgs", "package_summary": "Basic message types for two dimensional navigation, extending from geometry_msgs::Pose2D.", "package_details": ""},
{"url": "https://index.ros.org/p/nav2_dwb_controller", "package": "nav2_dwb_controller", "package_summary": "ROS2 controller (DWB) metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/dwb_plugins", "package": "dwb_plugins", "package_summary": "Standard implementations of the GoalChecker\n      and TrajectoryGenerators for dwb_core", "package_details": ""},
{"url": "https://index.ros.org/p/dwb_msgs", "package": "dwb_msgs", "package_summary": "Message/Service definitions specifically for the dwb_core", "package_details": ""},
{"url": "https://index.ros.org/p/dwb_critics", "package": "dwb_critics", "package_summary": "The dwb_critics package", "package_details": ""},
{"url": "https://index.ros.org/p/dwb_core", "package": "dwb_core", "package_summary": "TODO", "package_details": ""},
{"url": "https://index.ros.org/p/costmap_queue", "package": "costmap_queue", "package_summary": "The costmap_queue package", "package_details": ""},
{"url": "https://index.ros.org/p/nav2_common", "package": "nav2_common", "package_summary": "Common support functionality used throughout the navigation 2 stack", "package_details": ""},
{"url": "https://index.ros.org/p/nao_sensor_msgs", "package": "nao_sensor_msgs", "package_summary": "Package defining sensor msgs to be received from NAO robot.", "package_details": ""},
{"url": "https://index.ros.org/p/nao_command_msgs", "package": "nao_command_msgs", "package_summary": "Package defining command msgs to be sent to NAO robot.", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_setup_srdf_plugins", "package": "moveit_setup_srdf_plugins", "package_summary": "SRDF-based plugins for MoveIt Setup Assistant", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_setup_simulation", "package": "moveit_setup_simulation", "package_summary": "MoveIt Setup Steps for Simulation", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_setup_framework", "package": "moveit_setup_framework", "package_summary": "C++ Interface for defining setup steps for MoveIt Setup Assistant", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_setup_core_plugins", "package": "moveit_setup_core_plugins", "package_summary": "Core (meta) plugins for MoveIt Setup Assistant", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_setup_controllers", "package": "moveit_setup_controllers", "package_summary": "MoveIt Setup Steps for ROS 2 Control", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_setup_assistant", "package": "moveit_setup_assistant", "package_summary": "Generates a configuration package that makes it easy to use MoveIt", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_setup_app_plugins", "package": "moveit_setup_app_plugins", "package_summary": "Various specialty plugins for MoveIt Setup Assistant", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_runtime", "package": "moveit_runtime", "package_summary": "moveit_runtime meta package contains MoveIt packages that are essential for its runtime (e.g. running MoveIt on robots).", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_warehouse", "package": "moveit_ros_warehouse", "package_summary": "Components of MoveIt connecting to MongoDB", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_visualization", "package": "moveit_ros_visualization", "package_summary": "Components of MoveIt that offer visualization", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_tests", "package": "moveit_ros_tests", "package_summary": "Integration tests for moveit_ros", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_robot_interaction", "package": "moveit_ros_robot_interaction", "package_summary": "Components of MoveIt that offer interaction via interactive markers", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_planning_interface", "package": "moveit_ros_planning_interface", "package_summary": "Components of MoveIt that offer simpler remote (as from another ROS 2 node) interfaces to planning and execution", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_planning", "package": "moveit_ros_planning", "package_summary": "Planning components of MoveIt that use ROS", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_perception", "package": "moveit_ros_perception", "package_summary": "Components of MoveIt connecting to perception", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_occupancy_map_monitor", "package": "moveit_ros_occupancy_map_monitor", "package_summary": "Components of MoveIt connecting to occupancy map", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros", "package": "moveit_ros", "package_summary": "Components of MoveIt that use ROS", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_ros_move_group", "package": "moveit_ros_move_group", "package_summary": "The move_group node for MoveIt", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_simple_controller_manager", "package": "moveit_simple_controller_manager", "package_summary": "A generic, simple controller manager plugin for MoveIt.", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_plugins", "package": "moveit_plugins", "package_summary": "Metapackage for MoveIt plugins.", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_resources_prbt_pg70_support", "package": "moveit_resources_prbt_pg70_support", "package_summary": "PRBT support for Schunk pg70 gripper.", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_resources_prbt_moveit_config", "package": "moveit_resources_prbt_moveit_config", "package_summary": "", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_resources_prbt_ikfast_manipulator_plugin", "package": "moveit_resources_prbt_ikfast_manipulator_plugin", "package_summary": "The prbt_ikfast_manipulator_plugin package", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_planners_stomp", "package": "moveit_planners_stomp", "package_summary": "STOMP Motion Planner for MoveIt", "package_details": ""},
{"url": "https://index.ros.org/p/pilz_industrial_motion_planner_testutils", "package": "pilz_industrial_motion_planner_testutils", "package_summary": "Helper scripts and functionality to test industrial motion generation", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_planners_ompl", "package": "moveit_planners_ompl", "package_summary": "MoveIt interface to OMPL", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_planners", "package": "moveit_planners", "package_summary": "Meta package that installs all available planners for MoveIt", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_planners_chomp", "package": "moveit_planners_chomp", "package_summary": "The interface for using CHOMP within MoveIt", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_kinematics", "package": "moveit_kinematics", "package_summary": "Package for all inverse kinematics solvers in MoveIt", "package_details": ""},
{"url": "https://index.ros.org/p/chomp_motion_planner", "package": "chomp_motion_planner", "package_summary": "chomp_motion_planner", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_configs_utils", "package": "moveit_configs_utils", "package_summary": "Python library for loading moveit config parameters in launch files", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_common", "package": "moveit_common", "package_summary": "Common support functionality used throughout MoveIt", "package_details": ""},
{"url": "https://index.ros.org/p/moveit", "package": "moveit", "package_summary": "Meta package that contains all essential packages of MoveIt 2", "package_details": ""},
{"url": "https://index.ros.org/p/motion_capture_tracking_interfaces", "package": "motion_capture_tracking_interfaces", "package_summary": "Interfaces for motion_capture_tracking package.", "package_details": ""},
{"url": "https://index.ros.org/p/motion_capture_tracking", "package": "motion_capture_tracking", "package_summary": "ROS Package for different motion capture systems, including custom rigid body tracking support", "package_details": ""},
{"url": "https://index.ros.org/p/mola_msgs", "package": "mola_msgs", "package_summary": "ROS message, services, and actions used in other MOLA packages.", "package_details": ""},
{"url": "https://index.ros.org/p/message_filters", "package": "message_filters", "package_summary": "A set of ROS2 message filters which take in messages and may output those messages at a later time, based on the conditions that filter needs met.", "package_details": ""},
{"url": "https://index.ros.org/p/lidar_situational_graphs", "package": "lidar_situational_graphs", "package_summary": "The lidar situational graphs package for generating 3D optimizable scene graphs", "package_details": ""},
{"url": "https://index.ros.org/p/leo_gz_plugins", "package": "leo_gz_plugins", "package_summary": "Plugins for Leo Rover Gazebo simulation in ROS 2", "package_details": ""},
{"url": "https://index.ros.org/p/leo_simulator", "package": "leo_simulator", "package_summary": "Metapackage for Leo Rover Gazebo simulation in ROS2", "package_details": ""},
{"url": "https://index.ros.org/p/leo_gz_bringup", "package": "leo_gz_bringup", "package_summary": "Bringup package for Leo Rover Gazebo simulation in ROS 2", "package_details": ""},
{"url": "https://index.ros.org/p/leo_robot", "package": "leo_robot", "package_summary": "Metapackage of software to install on Leo Rover.", "package_details": ""},
{"url": "https://index.ros.org/p/leo_filters", "package": "leo_filters", "package_summary": "Nodes for filtering and processing imu and wheel odom messages.", "package_details": ""},
{"url": "https://index.ros.org/p/leo_fw", "package": "leo_fw", "package_summary": "Binary releases of Leo Rover firmware and related utilities", "package_details": ""},
{"url": "https://index.ros.org/p/leo_bringup", "package": "leo_bringup", "package_summary": "Scripts and launch files for starting basic Leo Rover functionalities.", "package_details": ""},
{"url": "https://index.ros.org/p/leo_viz", "package": "leo_viz", "package_summary": "Visualization launch files and RViz configurations for Leo Rover", "package_details": ""},
{"url": "https://index.ros.org/p/leo_desktop", "package": "leo_desktop", "package_summary": "Metapackage of software for operating Leo Rover from ROS desktop", "package_details": ""},
{"url": "https://index.ros.org/p/leo_teleop", "package": "leo_teleop", "package_summary": "Scripts and launch files for Leo Rover teleoperation", "package_details": ""},
{"url": "https://index.ros.org/p/test_launch_ros", "package": "test_launch_ros", "package_summary": "Tests for ROS specific extensions to the launch tool.", "package_details": ""},
{"url": "https://index.ros.org/p/leo_msgs", "package": "leo_msgs", "package_summary": "Message and Service definitions for Leo Rover", "package_details": ""},
{"url": "https://index.ros.org/p/leo_description", "package": "leo_description", "package_summary": "URDF Description package for Leo Rover", "package_details": ""},
{"url": "https://index.ros.org/p/leo", "package": "leo", "package_summary": "Metapackage of software for Leo Rover common to the robot and ROS desktop", "package_details": ""},
{"url": "https://index.ros.org/p/ros2launch", "package": "ros2launch", "package_summary": "The launch command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/launch_ros", "package": "launch_ros", "package_summary": "ROS specific extensions to the launch tool.", "package_details": ""},
{"url": "https://index.ros.org/p/test_launch_testing", "package": "test_launch_testing", "package_summary": "Tests for the launch_testing package.", "package_details": ""},
{"url": "https://index.ros.org/p/launch_testing_ament_cmake", "package": "launch_testing_ament_cmake", "package_summary": "A package providing cmake functions for running launch tests from the build.", "package_details": ""},
{"url": "https://index.ros.org/p/launch", "package": "launch", "package_summary": "The ROS launch tool.", "package_details": ""},
{"url": "https://index.ros.org/p/kinematics_interface_kdl", "package": "kinematics_interface_kdl", "package_summary": "KDL implementation of ros2_control kinematics interface", "package_details": ""},
{"url": "https://index.ros.org/p/kinematics_interface", "package": "kinematics_interface", "package_summary": "Kinematics interface for ROS 2 control", "package_details": ""},
{"url": "https://index.ros.org/p/keyboard_handler", "package": "keyboard_handler", "package_summary": "Handler for input from keyboard", "package_details": ""},
{"url": "https://index.ros.org/p/ignition_math6_vendor", "package": "ignition_math6_vendor", "package_summary": "This package provides the Ignition Math 6.x library.", "package_details": ""},
{"url": "https://index.ros.org/p/ignition_cmake2_vendor", "package": "ignition_cmake2_vendor", "package_summary": "This package provides the Ignition CMake 2.x library.", "package_details": ""},
{"url": "https://index.ros.org/p/ign_rviz_common", "package": "ign_rviz_common", "package_summary": "Common libraries for ign_rviz and ign_rviz_plugins", "package_details": ""},
{"url": "https://index.ros.org/p/iceoryx_introspection", "package": "iceoryx_introspection", "package_summary": "Eclipse iceoryx inter-process-communication (IPC) middleware introspection client", "package_details": ""},
{"url": "https://index.ros.org/p/iceoryx_posh", "package": "iceoryx_posh", "package_summary": "Eclipse iceoryx inter-process-communication (IPC) middleware Posix Shared Memory Library and middleware daemon (RouDi)", "package_details": ""},
{"url": "https://index.ros.org/p/iceoryx_integrationtest", "package": "iceoryx_integrationtest", "package_summary": "iceoryx Software Integrationtest", "package_details": ""},
{"url": "https://index.ros.org/p/ign_ros2_control_demos", "package": "ign_ros2_control_demos", "package_summary": "Shim package for gz_ros2_control_demos", "package_details": ""},
{"url": "https://index.ros.org/p/ign_ros2_control", "package": "ign_ros2_control", "package_summary": "Ignition ros2_control package allows to control simulated robots using ros2_control framework.", "package_details": ""},
{"url": "https://index.ros.org/p/gz_ros2_control_tests", "package": "gz_ros2_control_tests", "package_summary": "Gazebo ros2 control tests", "package_details": ""},
{"url": "https://index.ros.org/p/gz_ros2_control_demos", "package": "gz_ros2_control_demos", "package_summary": "gz_ros2_control_demos", "package_details": ""},
{"url": "https://index.ros.org/p/gz_ros2_control", "package": "gz_ros2_control", "package_summary": "Gazebo ros2_control package allows to control simulated robots using ros2_control framework.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_visualization", "package": "grid_map_visualization", "package_summary": "Configurable tool to visualize grid maps in RViz.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_sdf", "package": "grid_map_sdf", "package_summary": "Generates signed distance fields from grid maps.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_rviz_plugin", "package": "grid_map_rviz_plugin", "package_summary": "RViz plugin for displaying grid map messages.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_ros", "package": "grid_map_ros", "package_summary": "ROS interface for the grid map library to manage two-dimensional grid maps with multiple data layers.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_octomap", "package": "grid_map_octomap", "package_summary": "Conversions between grid maps and OctoMap types.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_msgs", "package": "grid_map_msgs", "package_summary": "Definition of the multi-layered grid map message type.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_loader", "package": "grid_map_loader", "package_summary": "Loading and publishing grid maps from bag files.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_filters", "package": "grid_map_filters", "package_summary": "Processing grid maps as a sequence of ROS filters.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_demos", "package": "grid_map_demos", "package_summary": "Demo nodes to demonstrate the usage of the grid map library.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_cv", "package": "grid_map_cv", "package_summary": "Conversions between grid maps and OpenCV images.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_costmap_2d", "package": "grid_map_costmap_2d", "package_summary": "Interface for grid maps to the costmap_2d format.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_core", "package": "grid_map_core", "package_summary": "Universal grid map library to manage two-dimensional grid maps with multiple data layers.", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map_cmake_helpers", "package": "grid_map_cmake_helpers", "package_summary": "CMake support functionality used throughout grid_map", "package_details": ""},
{"url": "https://index.ros.org/p/grid_map", "package": "grid_map", "package_summary": "Meta-package for the universal grid map library.", "package_details": ""},
{"url": "https://index.ros.org/p/google_benchmark_vendor", "package": "google_benchmark_vendor", "package_summary": "This package provides Google Benchmark.", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_tools", "package": "tf2_tools", "package_summary": "tf2_tools", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_sensor_msgs", "package": "tf2_sensor_msgs", "package_summary": "Small lib to transform sensor_msgs with tf. Most notably, PointCloud2", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_ros_py", "package": "tf2_ros_py", "package_summary": "This package contains the ROS Python bindings for the tf2 library", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_ros", "package": "tf2_ros", "package_summary": "This package contains the C++ ROS bindings for the tf2 library", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_py", "package": "tf2_py", "package_summary": "The tf2_py package", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_msgs", "package": "tf2_msgs", "package_summary": "tf2_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_kdl", "package": "tf2_kdl", "package_summary": "KDL binding for tf2", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_eigen_kdl", "package": "tf2_eigen_kdl", "package_summary": "Conversion functions between:\n      - Eigen and KDL", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_geometry_msgs", "package": "tf2_geometry_msgs", "package_summary": "tf2_geometry_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_eigen", "package": "tf2_eigen", "package_summary": "tf2_eigen", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_bullet", "package": "tf2_bullet", "package_summary": "tf2_bullet", "package_details": ""},
{"url": "https://index.ros.org/p/tf2", "package": "tf2", "package_summary": "tf2 is the second generation of the transform library, which lets\n    the user keep track of multiple coordinate frames over time. tf2\n    maintains the relationship between coordinate frames in a tree\n    structure buffered in time, and lets the user transform points,\n    vectors, etc between any two coordinate frames at any desired\n    point in time.", "package_details": ""},
{"url": "https://index.ros.org/p/test_tf2", "package": "test_tf2", "package_summary": "tf2 unit tests", "package_details": ""},
{"url": "https://index.ros.org/p/geometry2", "package": "geometry2", "package_summary": "A metapackage to bring in the default packages second generation Transform Library in ros, tf2.", "package_details": ""},
{"url": "https://index.ros.org/p/parameter_traits", "package": "parameter_traits", "package_summary": "Functions and types for rclcpp::Parameter", "package_details": ""},
{"url": "https://index.ros.org/p/generate_parameter_library_py", "package": "generate_parameter_library_py", "package_summary": "Python to generate ROS parameter library.", "package_details": ""},
{"url": "https://index.ros.org/p/generate_parameter_library", "package": "generate_parameter_library", "package_summary": "CMake to generate ROS parameter library.", "package_details": ""},
{"url": "https://index.ros.org/p/rcgcrd_spl_4_conversion", "package": "rcgcrd_spl_4_conversion", "package_summary": "Converts RoboCup SPL GameController Return Data V4 between ROS msg and UDP raw bytes", "package_details": ""},
{"url": "https://index.ros.org/p/rcgcrd_spl_4", "package": "rcgcrd_spl_4", "package_summary": "RoboCup SPL GameController Return Data V4 ROS msg", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_ros2_control_demos", "package": "gazebo_ros2_control_demos", "package_summary": "gazebo_ros2_control_demos", "package_details": ""},
{"url": "https://index.ros.org/p/rcgcd_spl_14_conversion", "package": "rcgcd_spl_14_conversion", "package_summary": "Converts RoboCup SPL GameController Data V14 between ROS msg and UDP raw bytes", "package_details": ""},
{"url": "https://index.ros.org/p/rcgcd_spl_14", "package": "rcgcd_spl_14", "package_summary": "RoboCup SPL GameController Data V14 ROS msg", "package_details": ""},
{"url": "https://index.ros.org/p/gc_spl_interfaces", "package": "gc_spl_interfaces", "package_summary": "RoboCup SPL GameController Data ROS msg", "package_details": ""},
{"url": "https://index.ros.org/p/gc_spl_2022", "package": "gc_spl_2022", "package_summary": "GameController-Robot communication in RoboCup SPL at RoboCup2022", "package_details": ""},
{"url": "https://index.ros.org/p/gc_spl", "package": "gc_spl", "package_summary": "GameController-Robot communication in RoboCup SPL", "package_details": ""},
{"url": "https://index.ros.org/p/game_controller_spl_interfaces", "package": "game_controller_spl_interfaces", "package_summary": "RoboCup SPL GameController Data ROS msg", "package_details": ""},
{"url": "https://index.ros.org/p/game_controller_spl", "package": "game_controller_spl", "package_summary": "GameController-Robot communication in RoboCup SPL", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclpy_pointcloud_publisher", "package": "examples_rclpy_pointcloud_publisher", "package_summary": "Example on how to publish a Pointcloud2 message", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclpy_guard_conditions", "package": "examples_rclpy_guard_conditions", "package_summary": "Examples of using guard conditions.", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclpy_executors", "package": "examples_rclpy_executors", "package_summary": "Examples of creating and using exectors to run multiple nodes in the same process", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclpy_minimal_action_server", "package": "examples_rclpy_minimal_action_server", "package_summary": "Examples of minimal action servers using rclpy.", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclpy_minimal_action_client", "package": "examples_rclpy_minimal_action_client", "package_summary": "Examples of minimal action clients using rclpy.", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclcpp_minimal_client", "package": "examples_rclcpp_minimal_client", "package_summary": "Examples of minimal service clients", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclcpp_async_client", "package": "examples_rclcpp_async_client", "package_summary": "Example of an async service client", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclcpp_multithreaded_executor", "package": "examples_rclcpp_multithreaded_executor", "package_summary": "Package containing example of how to implement a multithreaded executor", "package_details": ""},
{"url": "https://index.ros.org/p/examples_rclcpp_minimal_composition", "package": "examples_rclcpp_minimal_composition", "package_summary": "Minimalist examples of composing nodes in the same\n  process", "package_details": ""},
{"url": "https://index.ros.org/p/pantilt_bot_description", "package": "pantilt_bot_description", "package_summary": "TODO: Package description", "package_details": ""},
{"url": "https://index.ros.org/p/dynamixel_hardware", "package": "dynamixel_hardware", "package_summary": "ros2_control hardware for ROBOTIS Dynamixel", "package_details": ""},
{"url": "https://index.ros.org/p/open_manipulator_x_description", "package": "open_manipulator_x_description", "package_summary": "TODO: Package description", "package_details": ""},
{"url": "https://index.ros.org/p/dolly_tests", "package": "dolly_tests", "package_summary": "Tests for the Dolly robot.", "package_details": ""},
{"url": "https://index.ros.org/p/dolly_ignition", "package": "dolly_ignition", "package_summary": "Launch Ignition simulation with Dolly robot.", "package_details": ""},
{"url": "https://index.ros.org/p/dolly_gazebo", "package": "dolly_gazebo", "package_summary": "Launch Gazebo simulation with Dolly robot.", "package_details": ""},
{"url": "https://index.ros.org/p/dolly_follow", "package": "dolly_follow", "package_summary": "Follow node for Dolly, the robot sheep.", "package_details": ""},
{"url": "https://index.ros.org/p/dolly", "package": "dolly", "package_summary": "Meta-package for Dolly, the robot sheep.", "package_details": ""},
{"url": "https://index.ros.org/p/quality_of_service_demo_py", "package": "quality_of_service_demo_py", "package_summary": "Python Demo applications for Quality of Service features", "package_details": ""},
{"url": "https://index.ros.org/p/quality_of_service_demo_cpp", "package": "quality_of_service_demo_cpp", "package_summary": "C++ Demo applications for Quality of Service features", "package_details": ""},
{"url": "https://index.ros.org/p/pendulum_msgs", "package": "pendulum_msgs", "package_summary": "Custom messages for real-time pendulum control.", "package_details": ""},
{"url": "https://index.ros.org/p/logging_demo", "package": "logging_demo", "package_summary": "Examples for using and configuring loggers.", "package_details": ""},
{"url": "https://index.ros.org/p/intra_process_demo", "package": "intra_process_demo", "package_summary": "Demonstrations of intra process communication.", "package_details": ""},
{"url": "https://index.ros.org/p/image_tools", "package": "image_tools", "package_summary": "Tools to capture and play back images to and from DDS subscriptions and publications.", "package_details": ""},
{"url": "https://index.ros.org/p/dummy_sensors", "package": "dummy_sensors", "package_summary": "dummy sensor nodes", "package_details": ""},
{"url": "https://index.ros.org/p/dummy_robot_bringup", "package": "dummy_robot_bringup", "package_summary": "dummy robot bringup", "package_details": ""},
{"url": "https://index.ros.org/p/dummy_map_server", "package": "dummy_map_server", "package_summary": "dummy map server node", "package_details": ""},
{"url": "https://index.ros.org/p/demo_nodes_py", "package": "demo_nodes_py", "package_summary": "Python nodes which were previously in the ros2/examples repository but are now just used for demo purposes.", "package_details": ""},
{"url": "https://index.ros.org/p/demo_nodes_cpp_native", "package": "demo_nodes_cpp_native", "package_summary": "C++ nodes which access the native handles of the rmw implementation.", "package_details": ""},
{"url": "https://index.ros.org/p/demo_nodes_cpp", "package": "demo_nodes_cpp", "package_summary": "C++ nodes which were previously in the ros2/examples repository but are now just used for demo purposes.", "package_details": ""},
{"url": "https://index.ros.org/p/action_tutorials_py", "package": "action_tutorials_py", "package_summary": "Python action tutorial code", "package_details": ""},
{"url": "https://index.ros.org/p/action_tutorials_interfaces", "package": "action_tutorials_interfaces", "package_summary": "Action tutorials action", "package_details": ""},
{"url": "https://index.ros.org/p/action_tutorials_cpp", "package": "action_tutorials_cpp", "package_summary": "C++ action tutorial cpp code", "package_details": ""},
{"url": "https://index.ros.org/p/tl_expected", "package": "tl_expected", "package_summary": "C++11/14/17 std::expected with functional-style extensions", "package_details": ""},
{"url": "https://index.ros.org/p/tcb_span", "package": "tcb_span", "package_summary": "Implementation of C++20's std::span", "package_details": ""},
{"url": "https://index.ros.org/p/sensor_msgs_py", "package": "sensor_msgs_py", "package_summary": "A package for easy creation and reading of PointCloud2 messages in Python.", "package_details": ""},
{"url": "https://index.ros.org/p/common_interfaces", "package": "common_interfaces", "package_summary": "common_interfaces contains messages and services that are widely used by other ROS packages.", "package_details": ""},
{"url": "https://index.ros.org/p/color_util", "package": "color_util", "package_summary": "An almost dependency-less library for converting between color spaces", "package_details": ""},
{"url": "https://index.ros.org/p/rclcpp_cascade_lifecycle", "package": "rclcpp_cascade_lifecycle", "package_summary": "Provides a mechanism to make trees of lifecycle nodes to propagate state changes", "package_details": ""},
{"url": "https://index.ros.org/p/cascade_lifecycle_msgs", "package": "cascade_lifecycle_msgs", "package_summary": "Messages for rclcpp_cascade_lifecycle package", "package_details": ""},
{"url": "https://index.ros.org/p/cartographer_rviz", "package": "cartographer_rviz", "package_summary": "Cartographer is a system that provides real-time simultaneous localization\n    and mapping (SLAM) in 2D and 3D across multiple platforms and sensor\n    configurations. This package provides Cartographer's RViz integration.", "package_details": ""},
{"url": "https://index.ros.org/p/cartographer_ros_msgs", "package": "cartographer_ros_msgs", "package_summary": "ROS messages for the cartographer_ros package.", "package_details": ""},
{"url": "https://index.ros.org/p/cartographer_ros", "package": "cartographer_ros", "package_summary": "Cartographer is a system that provides real-time simultaneous localization\n    and mapping (SLAM) in 2D and 3D across multiple platforms and sensor\n    configurations. This package provides Cartographer's ROS integration.", "package_details": ""},
{"url": "https://index.ros.org/p/camera_aravis2_msgs", "package": "camera_aravis2_msgs", "package_summary": "Messages and service definitions for the camera_aravis2 package.", "package_details": ""},
{"url": "https://index.ros.org/p/camera_aravis2", "package": "camera_aravis2", "package_summary": "ROS2 camera driver for [GenICam](https://www.emva.org/standards-technology/genicam/)-based GigEVision and USB3Vision cameras.", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_vehicle_msgs", "package": "autoware_auto_vehicle_msgs", "package_summary": "Interfaces between core Autoware.Auto vehicle components", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_system_msgs", "package": "autoware_auto_system_msgs", "package_summary": "Interfaces between core Autoware.Auto system components", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_planning_msgs", "package": "autoware_auto_planning_msgs", "package_summary": "Interfaces between core Autoware.Auto planning components", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_perception_msgs", "package": "autoware_auto_perception_msgs", "package_summary": "Interfaces between core Autoware.Auto perception components", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_msgs", "package": "autoware_auto_msgs", "package_summary": "Interfaces between core Autoware.Auto components", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_mapping_msgs", "package": "autoware_auto_mapping_msgs", "package_summary": "Interfaces between core Autoware.Auto mapping components", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_geometry_msgs", "package": "autoware_auto_geometry_msgs", "package_summary": "Geometry related message definitions in Autoware.Auto", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_debug_msgs", "package": "autoware_auto_debug_msgs", "package_summary": "The autoware_auto_debug_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/autoware_auto_control_msgs", "package": "autoware_auto_control_msgs", "package_summary": "Interfaces between core Autoware.Auto control components", "package_details": ""},
{"url": "https://index.ros.org/p/aruco_opencv_msgs", "package": "aruco_opencv_msgs", "package_summary": "Message definitions for aruco_opencv package.", "package_details": ""},
{"url": "https://index.ros.org/p/apriltag_msgs", "package": "apriltag_msgs", "package_summary": "AprilTag message definitions", "package_details": ""},
{"url": "https://index.ros.org/p/test_apex_test_tools", "package": "test_apex_test_tools", "package_summary": "Test package, which uses things exported by apex_test_tools", "package_details": ""},
{"url": "https://index.ros.org/p/apex_test_tools", "package": "apex_test_tools", "package_summary": "The package Apex.OS Test Tools contains test helpers", "package_details": ""},
{"url": "https://index.ros.org/p/ament_package", "package": "ament_package", "package_summary": "The parser for the manifest files in the ament buildsystem.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_xmllint", "package": "ament_xmllint", "package_summary": "The ability to check XML files like the package manifest using xmllint\n    and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_uncrustify", "package": "ament_uncrustify", "package_summary": "The ability to check code against style conventions using uncrustify\n    and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_pyflakes", "package": "ament_pyflakes", "package_summary": "The ability to check code using pyflakes and generate xUnit test\n    result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_pycodestyle", "package": "ament_pycodestyle", "package_summary": "The ability to check code against the style conventions in PEP 8 and\n    generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_pep257", "package": "ament_pep257", "package_summary": "The ability to check code against the docstring style conventions in\n    PEP 257 and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_pclint", "package": "ament_pclint", "package_summary": "The ability to perform static code analysis on C/C++ code using PC-lint\n    and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_mypy", "package": "ament_mypy", "package_summary": "Support for mypy static type checking in ament.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_lint_common", "package": "ament_lint_common", "package_summary": "The list of commonly used linters in the ament build system in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_lint_cmake", "package": "ament_lint_cmake", "package_summary": "The ability to lint CMake code using cmakelint and generate xUnit test\n    result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_lint_auto", "package": "ament_lint_auto", "package_summary": "The auto-magic functions for ease to use of the ament linters in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_lint", "package": "ament_lint", "package_summary": "Providing common API for ament linter packages.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_flake8", "package": "ament_flake8", "package_summary": "The ability to check code for style and syntax conventions with flake8.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cpplint", "package": "ament_cpplint", "package_summary": "The ability to check code against the Google style conventions using\n    cpplint and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cppcheck", "package": "ament_cppcheck", "package_summary": "The ability to perform static code analysis on C/C++ code using Cppcheck\n    and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_copyright", "package": "ament_copyright", "package_summary": "The ability to check source files for copyright and license\n    information.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_xmllint", "package": "ament_cmake_xmllint", "package_summary": "The CMake API for ament_xmllint to check XML file using xmmlint.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_uncrustify", "package": "ament_cmake_uncrustify", "package_summary": "The CMake API for ament_uncrustify to check code against styleconventions\n    using uncrustify.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_pyflakes", "package": "ament_cmake_pyflakes", "package_summary": "The CMake API for ament_pyflakes to check code using pyflakes.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_pycodestyle", "package": "ament_cmake_pycodestyle", "package_summary": "The CMake API for ament_pycodestyle to check code against the style conventions in\n    PEP 8.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_pep257", "package": "ament_cmake_pep257", "package_summary": "The CMake API for ament_pep257 to check code against the docstring style conventions in\n    PEP 257.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_pclint", "package": "ament_cmake_pclint", "package_summary": "The CMake API for ament_pclint to perform static code analysis on C/C++\n    code using PC-lint.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_mypy", "package": "ament_cmake_mypy", "package_summary": "The CMake API for ament_mypy to perform static type analysis on python code\n    with mypy.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_lint_cmake", "package": "ament_cmake_lint_cmake", "package_summary": "The CMake API for ament_lint_cmake to lint CMake code using cmakelint.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_flake8", "package": "ament_cmake_flake8", "package_summary": "The CMake API for ament_flake8 to check code syntax and style conventions\n    with flake8.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_cpplint", "package": "ament_cmake_cpplint", "package_summary": "The CMake API for ament_cpplint to lint C / C++ code using cpplint.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_cppcheck", "package": "ament_cmake_cppcheck", "package_summary": "The CMake API for ament_cppcheck to perform static code analysis on C/C++\n    code using Cppcheck.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_copyright", "package": "ament_cmake_copyright", "package_summary": "The CMake API for ament_copyright to check every source file contains copyright reference.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_clang_tidy", "package": "ament_cmake_clang_tidy", "package_summary": "The CMake API for ament_clang_tidy to lint C / C++ code using clang tidy.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_clang_format", "package": "ament_cmake_clang_format", "package_summary": "The CMake API for ament_clang_format to lint C / C++ code using clang format.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_clang_tidy", "package": "ament_clang_tidy", "package_summary": "The ability to check code against style conventions using\n    clang-tidy and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_clang_format", "package": "ament_clang_format", "package_summary": "The ability to check code against style conventions using\n    clang-format and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/domain_coordinator", "package": "domain_coordinator", "package_summary": "A tool to coordinate unique ROS_DOMAIN_IDs across multiple processes", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_ros", "package": "ament_cmake_ros", "package_summary": "The ROS specific CMake bits in the ament buildsystem.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_version", "package": "ament_cmake_version", "package_summary": "The ability to override the exported package version in the ament buildsystem.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_vendor_package", "package": "ament_cmake_vendor_package", "package_summary": "Macros for maintaining a 'vendor' package.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_test", "package": "ament_cmake_test", "package_summary": "The ability to add tests in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_target_dependencies", "package": "ament_cmake_target_dependencies", "package_summary": "The ability to add definitions, include directories and libraries of a package to a target in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_pytest", "package": "ament_cmake_pytest", "package_summary": "The ability to run Python tests using pytest in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_nose", "package": "ament_cmake_nose", "package_summary": "The ability to add nose-based tests in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_libraries", "package": "ament_cmake_libraries", "package_summary": "The functionality to deduplicate libraries in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_include_directories", "package": "ament_cmake_include_directories", "package_summary": "The functionality to order include directories according to a chain of prefixes in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_gtest", "package": "ament_cmake_gtest", "package_summary": "The ability to add gtest-based tests in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_gmock", "package": "ament_cmake_gmock", "package_summary": "The ability to add Google mock-based tests in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_gen_version_h", "package": "ament_cmake_gen_version_h", "package_summary": "Generate a C header containing the version number of the package", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_export_targets", "package": "ament_cmake_export_targets", "package_summary": "The ability to export targets to downstream packages in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_export_link_flags", "package": "ament_cmake_export_link_flags", "package_summary": "The ability to export link flags to downstream packages in the ament buildsystem.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_export_libraries", "package": "ament_cmake_export_libraries", "package_summary": "The ability to export libraries to downstream packages in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_export_interfaces", "package": "ament_cmake_export_interfaces", "package_summary": "The ability to export interfaces to downstream packages in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_export_include_directories", "package": "ament_cmake_export_include_directories", "package_summary": "The ability to export include directories to downstream packages in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_export_dependencies", "package": "ament_cmake_export_dependencies", "package_summary": "The ability to export dependencies to downstream packages in the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_export_definitions", "package": "ament_cmake_export_definitions", "package_summary": "The ability to export definitions to downstream packages in the ament buildsystem.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_core", "package": "ament_cmake_core", "package_summary": "The core of the ament buildsystem in CMake.\n\n    Several subcomponents provide specific funtionalities:\n    * environment: provide prefix-level setup files\n    * environment_hooks: provide package-level setup files and environment hooks\n    * index: store information in an index and retrieve them without crawling\n    * package_templates: templates from the ament_package Python package\n    * symlink_install: use symlinks for CMake install commands", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_auto", "package": "ament_cmake_auto", "package_summary": "The auto-magic functions for ease to use of the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake", "package": "ament_cmake", "package_summary": "The entry point package for the ament buildsystem in CMake.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_cmake_black", "package": "ament_cmake_black", "package_summary": "The CMake API for ament_black to lint Python code using black.", "package_details": ""},
{"url": "https://index.ros.org/p/ament_black", "package": "ament_black", "package_summary": "The ability to check code against style conventions using\n    black and generate xUnit test result files.", "package_details": ""},
{"url": "https://index.ros.org/p/acado_vendor", "package": "acado_vendor", "package_summary": "ament package for ACADO toolkit for MPC code generation", "package_details": ""},
{"url": "https://index.ros.org/p/sr_event_countdown", "package": "sr_event_countdown", "package_summary": "The sr_event_countdown package", "package_details": ""},
{"url": "https://index.ros.org/p/sr_conditional", "package": "sr_conditional", "package_summary": "The sr_conditional package", "package_details": ""},
{"url": "https://index.ros.org/p/sr_all_events_go", "package": "sr_all_events_go", "package_summary": "The sr_all_events_go package", "package_details": ""},
{"url": "https://index.ros.org/p/smacc2_msgs", "package": "smacc2_msgs", "package_summary": "Messages and services used in smacc2.", "package_details": ""},
{"url": "https://index.ros.org/p/eg_random_generator", "package": "eg_random_generator", "package_summary": "The eg_random_generator package", "package_details": ""},
{"url": "https://index.ros.org/p/eg_conditional_generator", "package": "eg_conditional_generator", "package_summary": "The eg_random_generator package", "package_details": ""},
{"url": "https://index.ros.org/p/ros_timer_client", "package": "ros_timer_client", "package_summary": "The ros_timer_client package", "package_details": ""},
{"url": "https://index.ros.org/p/nav2z_client", "package": "nav2z_client", "package_summary": "The nav2z_client package implements SMACC Action Client Plugin for the ROS Navigation State - move_base node.  Developed by Reel Robotics.", "package_details": ""},
{"url": "https://index.ros.org/p/undo_path_global_planner", "package": "undo_path_global_planner", "package_summary": "The undo_path_global_planner package.", "package_details": ""},
{"url": "https://index.ros.org/p/pure_spinning_local_planner", "package": "pure_spinning_local_planner", "package_summary": "The pure_spinning_local_planner package", "package_details": ""},
{"url": "https://index.ros.org/p/nav2z_planners_common", "package": "nav2z_planners_common", "package_summary": "The nav2z_planners_common package.", "package_details": ""},
{"url": "https://index.ros.org/p/forward_local_planner", "package": "forward_local_planner", "package_summary": "forward_local_planner package.", "package_details": ""},
{"url": "https://index.ros.org/p/forward_global_planner", "package": "forward_global_planner", "package_summary": "The forward_global_planner package.", "package_details": ""},
{"url": "https://index.ros.org/p/backward_local_planner", "package": "backward_local_planner", "package_summary": "The backward_local_planner package.", "package_details": ""},
{"url": "https://index.ros.org/p/backward_global_planner", "package": "backward_global_planner", "package_summary": "The backward_global_planner package.", "package_details": ""},
{"url": "https://index.ros.org/p/multirole_sensor_client", "package": "multirole_sensor_client", "package_summary": "The multirole_sensor_client package", "package_details": ""},
{"url": "https://index.ros.org/p/moveit2z_client", "package": "moveit2z_client", "package_summary": "The moveit2z_client package", "package_details": ""},
{"url": "https://index.ros.org/p/lifecyclenode_client", "package": "lifecyclenode_client", "package_summary": "The lifecyclenode_client package implements SMACC Action Client Plugin for the ROS Navigation State - move_base node.  Developed by Reel Robotics.", "package_details": ""},
{"url": "https://index.ros.org/p/keyboard_client", "package": "keyboard_client", "package_summary": "The keyboard_client package", "package_details": ""},
{"url": "https://index.ros.org/p/http_client", "package": "http_client", "package_summary": "The http_client package", "package_details": ""},
{"url": "https://index.ros.org/p/cl_ros2_timer", "package": "cl_ros2_timer", "package_summary": "The cl_ros2_timer package", "package_details": ""},
{"url": "https://index.ros.org/p/cl_nav2z", "package": "cl_nav2z", "package_summary": "The cl_nav2z package implements SMACC Action Client Plugin for the ROS Navigation State - move_base node.  Developed by Reel Robotics.", "package_details": ""},
{"url": "https://index.ros.org/p/cl_moveit2z", "package": "cl_moveit2z", "package_summary": "The cl_moveit2z package", "package_details": ""},
{"url": "https://index.ros.org/p/cl_keyboard", "package": "cl_keyboard", "package_summary": "The cl_keyboard package", "package_details": ""},
{"url": "https://index.ros.org/p/smacc2", "package": "smacc2", "package_summary": "An Event-Driven, Asynchronous, Behavioral State Machine Library for ROS2 (Robotic Operating System) applications written in C++.", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_simulation", "package": "pmb2_simulation", "package_summary": "PMB2-specific simulation components. These include plugins\n               and launch scripts necessary for running PMB2 in simulation.", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_gazebo", "package": "pmb2_gazebo", "package_summary": "Simulation files for the PMB2 robot.", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_robot", "package": "pmb2_robot", "package_summary": "PMB2 robot description and launch files", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_description", "package": "pmb2_description", "package_summary": "Mechanical, kinematic, visual, etc. description of the PMB2 robot.\n      The files in this package are parsed and used by\n      a variety of other components.  Most users will not interact directly\n      with this package.", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_controller_configuration", "package": "pmb2_controller_configuration", "package_summary": "Launch files and scripts needed to configure\n    the controllers of the PMB2 robot.", "package_details": ""},
{"url": "https://index.ros.org/p/pmb2_bringup", "package": "pmb2_bringup", "package_summary": "Launch files and scripts needed to bring up the ROS nodes of a PMB2 robot.", "package_details": ""},
{"url": "https://index.ros.org/p/puma_motor_msgs", "package": "puma_motor_msgs", "package_summary": "Messages specific to Puma.", "package_details": ""},
{"url": "https://index.ros.org/p/puma_motor_driver", "package": "puma_motor_driver", "package_summary": "A ROS driver for Puma single-channel motor control board.", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_socketcan_interface", "package": "clearpath_socketcan_interface", "package_summary": "Clearpath's CAN interface description with helpers for filtering and driver implementation. Further a socketcan implementation based on boost::asio is included.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_autorace_mission", "package": "turtlebot3_autorace_mission", "package_summary": "ROS 2 packages for turtlebot3_autorace_mission", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_autorace_detect", "package": "turtlebot3_autorace_detect", "package_summary": "ROS 2 packages for turtlebot3_autorace_detect", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_autorace_camera", "package": "turtlebot3_autorace_camera", "package_summary": "ROS 2 packages for camera calibration and image processing in TurtleBot AutoRace", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_autorace", "package": "turtlebot3_autorace", "package_summary": "ROS 2 meta packages for turtlebot3_autorace", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_yolo_object_detection", "package": "turtlebot3_yolo_object_detection", "package_summary": "YOLO-based object detection for TurtleBot3", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_panorama", "package": "turtlebot3_panorama", "package_summary": "Package for turtlebot3 panorama.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_follower", "package": "turtlebot3_follower", "package_summary": "TurtleBot3 Follower Example for ROS2.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_automatic_parking_vision", "package": "turtlebot3_automatic_parking_vision", "package_summary": "Automatic Parking Vision for TurtleBot3 Examples.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_automatic_parking", "package": "turtlebot3_automatic_parking", "package_summary": "Package for turtlebot3 automatic_parking.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_aruco_tracker", "package": "turtlebot3_aruco_tracker", "package_summary": "ArUco Tracker for TurtleBot3 Examples.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_applications", "package": "turtlebot3_applications", "package_summary": "ROS packages for the turtlebot3 applications (meta package)", "package_details": ""},
{"url": "https://index.ros.org/p/talos_robot", "package": "talos_robot", "package_summary": "Description and launch files for the TOR robot", "package_details": ""},
{"url": "https://index.ros.org/p/talos_description_inertial", "package": "talos_description_inertial", "package_summary": "Inertial parameters of talos", "package_details": ""},
{"url": "https://index.ros.org/p/talos_description_calibration", "package": "talos_description_calibration", "package_summary": "This package contains the description of the hand-eye calibration of the TALOS robot.  The files in this package are used also from the talos_description package.", "package_details": ""},
{"url": "https://index.ros.org/p/talos_description", "package": "talos_description", "package_summary": "The talos_description package", "package_details": ""},
{"url": "https://index.ros.org/p/talos_bringup", "package": "talos_bringup", "package_summary": "The talos_bringup package", "package_details": ""},
{"url": "https://index.ros.org/p/raspimouse_sim", "package": "raspimouse_sim", "package_summary": "ROS 2 package suite for Raspberry Pi Mouse Simulator", "package_details": ""},
{"url": "https://index.ros.org/p/raspimouse_gazebo", "package": "raspimouse_gazebo", "package_summary": "The raspimouse_gazebo package", "package_details": ""},
{"url": "https://index.ros.org/p/raspimouse_fake", "package": "raspimouse_fake", "package_summary": "The raspimouse_control package", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_play_motion_builder", "package": "rqt_play_motion_builder", "package_summary": "The rqt_play_motion_builder package, a front-end interface for play_motion_builder", "package_details": ""},
{"url": "https://index.ros.org/p/play_motion_builder_msgs", "package": "play_motion_builder_msgs", "package_summary": "The play_motion_builder_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/play_motion_builder", "package": "play_motion_builder", "package_summary": "The play_motion_builder package, a node to handle the creation of new motions for play_motion.", "package_details": ""},
{"url": "https://index.ros.org/p/open_manipulator_x_teleop", "package": "open_manipulator_x_teleop", "package_summary": "OpenMANIPULATOR-X teleop ROS 2 package.", "package_details": ""},
{"url": "https://index.ros.org/p/open_manipulator_x_playground", "package": "open_manipulator_x_playground", "package_summary": "This package provides an example for utilizing the MoveIt API with the OpenMANIPULATOR-X,\n    allowing users to practice and experiment freely.", "package_details": ""},
{"url": "https://index.ros.org/p/open_manipulator_x_moveit_config", "package": "open_manipulator_x_moveit_config", "package_summary": "An automatically generated package with all the configuration and launch files for using the open_manipulator_x with the MoveIt Motion Planning Framework", "package_details": ""},
{"url": "https://index.ros.org/p/open_manipulator_x_gui", "package": "open_manipulator_x_gui", "package_summary": "The OpenMANIPULATOR-X GUI ROS 2 package enables users to explore Joint Space,\n    Task Space, and even work with the Task Constructor functionality.", "package_details": ""},
{"url": "https://index.ros.org/p/open_manipulator_x_description", "package": "open_manipulator_x_description", "package_summary": "open_manipulator_x_description ROS 2 package.", "package_details": ""},
{"url": "https://index.ros.org/p/wireless_watcher", "package": "wireless_watcher", "package_summary": "A Python-based node which publishes connection information about a linux wireless interface.", "package_details": ""},
{"url": "https://index.ros.org/p/open_manipulator_x_bringup", "package": "open_manipulator_x_bringup", "package_summary": "OpenMANIPULATOR-X bringup ROS 2 package.", "package_details": ""},
{"url": "https://index.ros.org/p/wireless_msgs", "package": "wireless_msgs", "package_summary": "Messages for describing a wireless network such as bitrate, essid, and link quality.", "package_details": ""},
{"url": "https://index.ros.org/p/open_manipulator", "package": "open_manipulator", "package_summary": "OpenMANIPULATOR-X meta ROS 2 package.", "package_details": ""},
{"url": "https://index.ros.org/p/vizanti_server", "package": "vizanti_server", "package_summary": "A mission planner and visualizer for controlling outdoor ROS robots.", "package_details": ""},
{"url": "https://index.ros.org/p/vizanti_msgs", "package": "vizanti_msgs", "package_summary": "Interfaces for Vizanti.", "package_details": ""},
{"url": "https://index.ros.org/p/vizanti_demos", "package": "vizanti_demos", "package_summary": "Demonstration package for Vizanti", "package_details": ""},
{"url": "https://index.ros.org/p/vizanti_cpp", "package": "vizanti_cpp", "package_summary": "An ament built package for any cpp nodes.", "package_details": ""},
{"url": "https://index.ros.org/p/vizanti", "package": "vizanti", "package_summary": "Web mission planner and visualizer for controlling outdoor ROS robots.", "package_details": ""},
{"url": "https://index.ros.org/p/vision_opencv", "package": "vision_opencv", "package_summary": "Packages for interfacing ROS2 with OpenCV, a library of programming functions for real time computer vision.", "package_details": ""},
{"url": "https://index.ros.org/p/opencv_tests", "package": "opencv_tests", "package_summary": "OpenCV tests for the Python and C++ implementations of CvBridge with Image message in ROS2.", "package_details": ""},
{"url": "https://index.ros.org/p/image_geometry", "package": "image_geometry", "package_summary": "`image_geometry` contains C++ and Python libraries for interpreting images\n    geometrically. It interfaces the calibration parameters in sensor_msgs/CameraInfo\n    messages with OpenCV functions such as image rectification, much as cv_bridge\n    interfaces ROS sensor_msgs/Image with OpenCV data types.", "package_details": ""},
{"url": "https://index.ros.org/p/velodyne_simulator", "package": "velodyne_simulator", "package_summary": "Metapackage allowing easy installation of Velodyne simulation components.", "package_details": ""},
{"url": "https://index.ros.org/p/velodyne_gazebo_plugins", "package": "velodyne_gazebo_plugins", "package_summary": "Gazebo plugin to provide simulated data from Velodyne laser scanners.", "package_details": ""},
{"url": "https://index.ros.org/p/velodyne_description", "package": "velodyne_description", "package_summary": "URDF and meshes describing Velodyne laser scanners.", "package_details": ""},
{"url": "https://index.ros.org/p/velodyne_msgs", "package": "velodyne_msgs", "package_summary": "ROS message definitions for Velodyne 3D LIDARs.", "package_details": ""},
{"url": "https://index.ros.org/p/velodyne", "package": "velodyne", "package_summary": "Basic ROS support for the Velodyne 3D LIDARs.", "package_details": ""},
{"url": "https://index.ros.org/p/ublox_serialization", "package": "ublox_serialization", "package_summary": "ublox_serialization provides header files for serialization of ROS messages to and from u-blox message format.", "package_details": ""},
{"url": "https://index.ros.org/p/ublox_msgs", "package": "ublox_msgs", "package_summary": "ublox_msgs contains raw messages for u-blox GNSS devices.", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_std_msgs", "package": "tuw_std_msgs", "package_summary": "The tuw_std_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/ublox", "package": "ublox", "package_summary": "Provides a ublox_gps node for u-blox GPS receivers, messages, and serialization packages for the binary UBX protocol.", "package_details": ""},
{"url": "https://index.ros.org/p/ublox_gps", "package": "ublox_gps", "package_summary": "Driver for u-blox GPS devices.", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_object_msgs", "package": "tuw_object_msgs", "package_summary": "The tuw_object_msgs package. This pkg provides a set of messages used to detect, map and track objects of different types.", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_object_map_msgs", "package": "tuw_object_map_msgs", "package_summary": "The tuw_object_map_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_nav_msgs", "package": "tuw_nav_msgs", "package_summary": "The tuw_nav_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_multi_robot_msgs", "package": "tuw_multi_robot_msgs", "package_summary": "The tuw_multi_robot_msgs package contains messages for sending graph, route and sync data over topics.", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_msgs", "package": "tuw_msgs", "package_summary": "tuw_msgs meta package with write and read file libs for tuw_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_graph_msgs", "package": "tuw_graph_msgs", "package_summary": "The tuw_graph_msgs package contains messages for sending graphs.", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_geometry_msgs", "package": "tuw_geometry_msgs", "package_summary": "The tuw_geometry_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_geo_msgs", "package": "tuw_geo_msgs", "package_summary": "The tuw_geo_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/tuw_airskin_msgs", "package": "tuw_airskin_msgs", "package_summary": "The tuw_airskin_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_simulations", "package": "turtlebot3_simulations", "package_summary": "ROS 2 packages for TurtleBot3 simulations", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_manipulation_gazebo", "package": "turtlebot3_manipulation_gazebo", "package_summary": "Gazebo simulation package for the TurtleBot3 manipulation", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_gazebo", "package": "turtlebot3_gazebo", "package_summary": "Gazebo simulation package for the TurtleBot3", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_fake_node", "package": "turtlebot3_fake_node", "package_summary": "Package for TurtleBot3 fake node. With this package, simple tests can be done without a robot.\n    You can do simple tests using this package on rviz without real robots.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_teleop", "package": "turtlebot3_teleop", "package_summary": "Teleoperation node using keyboard for TurtleBot3.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_node", "package": "turtlebot3_node", "package_summary": "TurtleBot3 driver node that include diff drive controller, odometry and tf node", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_navigation2", "package": "turtlebot3_navigation2", "package_summary": "ROS 2 launch scripts for navigation2", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_example", "package": "turtlebot3_example", "package_summary": "This package provides four basic examples for TurtleBot3 (i.e., interactive marker, object detection, patrol and position control).", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_description", "package": "turtlebot3_description", "package_summary": "3D models of the TurtleBot3 for simulation and visualization", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_cartographer", "package": "turtlebot3_cartographer", "package_summary": "ROS 2 launch scripts for cartographer", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3_bringup", "package": "turtlebot3_bringup", "package_summary": "ROS 2 launch scripts for starting the TurtleBot3", "package_details": ""},
{"url": "https://index.ros.org/p/turtlebot3", "package": "turtlebot3", "package_summary": "ROS 2 packages for TurtleBot3", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_web_republisher_interfaces", "package": "tf2_web_republisher_interfaces", "package_summary": "Interface definitions for tf2_web_republisher", "package_details": ""},
{"url": "https://index.ros.org/p/teleop_tools_msgs", "package": "teleop_tools_msgs", "package_summary": "The teleop_tools_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/tf2_web_republisher", "package": "tf2_web_republisher", "package_summary": "Republishing of Selected TFs", "package_details": ""},
{"url": "https://index.ros.org/p/teleop_tools", "package": "teleop_tools", "package_summary": "A set of generic teleoperation tools for any robot.", "package_details": ""},
{"url": "https://index.ros.org/p/spatio_temporal_voxel_layer", "package": "spatio_temporal_voxel_layer", "package_summary": "The spatio-temporal 3D obstacle costmap package", "package_details": ""},
{"url": "https://index.ros.org/p/openvdb_vendor", "package": "openvdb_vendor", "package_summary": "Wrapper around OpenVDB, if not found on the system, will compile from source", "package_details": ""},
{"url": "https://index.ros.org/p/rtcm_msgs", "package": "rtcm_msgs", "package_summary": "The rtcm_msgs package contains messages related to data in the RTCM format.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_viz", "package": "rtabmap_viz", "package_summary": "RTAB-Map's visualization package.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_util", "package": "rtabmap_util", "package_summary": "RTAB-Map's various useful nodes and nodelets.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_sync", "package": "rtabmap_sync", "package_summary": "RTAB-Map's synchronization package.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_slam", "package": "rtabmap_slam", "package_summary": "RTAB-Map's SLAM package.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_rviz_plugins", "package": "rtabmap_rviz_plugins", "package_summary": "RTAB-Map's rviz plugins.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_ros", "package": "rtabmap_ros", "package_summary": "RTAB-Map Stack", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_python", "package": "rtabmap_python", "package_summary": "RTAB-Map's python package.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_odom", "package": "rtabmap_odom", "package_summary": "RTAB-Map's odometry package.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_msgs", "package": "rtabmap_msgs", "package_summary": "RTAB-Map's msgs package.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_examples", "package": "rtabmap_examples", "package_summary": "RTAB-Map's example launch files.", "package_details": ""},
{"url": "https://index.ros.org/p/rtabmap_conversions", "package": "rtabmap_conversions", "package_summary": "RTAB-Map's conversions package. This package can be used to convert rtabmap_msgs's msgs into RTAB-Map's library objects.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_topic", "package": "rqt_topic", "package_summary": "rqt_topic provides a GUI plugin for displaying debug information about ROS topics including publishers, subscribers, publishing rate, and ROS Messages.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_tf_tree", "package": "rqt_tf_tree", "package_summary": "rqt_tf_tree provides a GUI plugin for visualizing the ROS TF frame tree.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_srv", "package": "rqt_srv", "package_summary": "A Python GUI plugin for introspecting available ROS message types.\n  Note that the srvs available through this plugin is the ones that are stored\n  on your machine, not on the ROS core your rqt instance connects to.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_shell", "package": "rqt_shell", "package_summary": "rqt_shell is a Python GUI plugin providing an interactive shell.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_service_caller", "package": "rqt_service_caller", "package_summary": "rqt_service_caller provides a GUI plugin for calling arbitrary services.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_runtime_monitor", "package": "rqt_runtime_monitor", "package_summary": "rqt_runtime_monitor provides a GUI plugin viewing DiagnosticsArray messages.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_robot_steering", "package": "rqt_robot_steering", "package_summary": "rqt_robot_steering provides a GUI plugin for steering a robot using Twist messages.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_robot_monitor", "package": "rqt_robot_monitor", "package_summary": "rqt_robot_monitor displays diagnostics_agg topics messages that\n   are published by", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_reconfigure", "package": "rqt_reconfigure", "package_summary": "This rqt plugin provides a way to view and edit parameters on nodes.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_py_console", "package": "rqt_py_console", "package_summary": "rqt_py_console is a Python GUI plugin providing an interactive Python console.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_publisher", "package": "rqt_publisher", "package_summary": "rqt_publisher provides a GUI plugin for publishing arbitrary messages with fixed or computed field values.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_plot", "package": "rqt_plot", "package_summary": "rqt_plot provides a GUI plugin visualizing numeric values in a 2D plot using different plotting backends.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_msg", "package": "rqt_msg", "package_summary": "A Python GUI plugin for introspecting available ROS message types.\n  Note that the msgs available through this plugin is the ones that are stored\n  on your machine, not on the ROS core your rqt instance connects to.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_moveit", "package": "rqt_moveit", "package_summary": "An rqt-based tool that assists monitoring tasks\n   for", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_image_view", "package": "rqt_image_view", "package_summary": "rqt_image_view provides a GUI plugin for displaying images using image_transport.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_common_plugins", "package": "rqt_common_plugins", "package_summary": "rqt_common_plugins metapackage provides ROS backend graphical tools suite that can be used on/off of robot runtime.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_graph", "package": "rqt_graph", "package_summary": "rqt_graph provides a GUI plugin for visualizing the ROS\n      computation graph.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_console", "package": "rqt_console", "package_summary": "rqt_console provides a GUI plugin for displaying and filtering ROS messages.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_bag_plugins", "package": "rqt_bag_plugins", "package_summary": "rqt_bag provides a GUI plugin for displaying and replaying ROS bag files.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_bag", "package": "rqt_bag", "package_summary": "rqt_bag provides a GUI plugin for displaying and replaying ROS bag files.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_py_common", "package": "rqt_py_common", "package_summary": "rqt_py_common provides common functionality for rqt plugins written in Python.\n    Despite no plugin is provided, this package is part of the rqt_common_plugins\n    repository to keep refactoring generic functionality from these common plugins\n    into this package as easy as possible.\n\n    Functionality included in this package should cover generic ROS concepts and\n    should not introduce any special dependencies beside \"ros_base\".", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_action", "package": "rqt_action", "package_summary": "rqt_action provides a feature to introspect all available ROS\n  action types. By utilizing rqt_msg, the output format is\n  unified with it and rqt_srv. Note that the actions shown on this plugin\n  is the ones that are stored on your machine, not on the ROS core your rqt\n  instance connects to.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_gui_py", "package": "rqt_gui_py", "package_summary": "rqt_gui_py enables GUI plugins to use the Python client library for ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_gui_cpp", "package": "rqt_gui_cpp", "package_summary": "rqt_gui_cpp enables GUI plugins to use the C++ client library for ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt_gui", "package": "rqt_gui", "package_summary": "rqt_gui provides the main to start an instance of the ROS integrated graphical user interface provided by qt_gui.", "package_details": ""},
{"url": "https://index.ros.org/p/rqt", "package": "rqt", "package_summary": "rqt is a Qt-based framework for GUI development for ROS. It consists of three parts/metapackages", "package_details": ""},
{"url": "https://index.ros.org/p/rclpy_message_converter_msgs", "package": "rclpy_message_converter_msgs", "package_summary": "Messages for rclpy_message_converter", "package_details": ""},
{"url": "https://index.ros.org/p/rclpy_message_converter", "package": "rclpy_message_converter", "package_summary": "Converts between Python dictionaries and JSON to rclpy messages.", "package_details": ""},
{"url": "https://index.ros.org/p/rosbridge_test_msgs", "package": "rosbridge_test_msgs", "package_summary": "Message and service definitions used in internal tests for rosbridge packages.", "package_details": ""},
{"url": "https://index.ros.org/p/rosbridge_msgs", "package": "rosbridge_msgs", "package_summary": "Interface definitions for the rosbridge library.", "package_details": ""},
{"url": "https://index.ros.org/p/rosbridge_suite", "package": "rosbridge_suite", "package_summary": "Rosbridge provides a JSON API to ROS functionality for non-ROS programs.\nThere are a variety of front ends that interface with rosbridge, including\na WebSocket server for web browsers to interact with.\n\nRosbridge_suite is a meta-package containing rosbridge, various front end\npackages for rosbridge like a WebSocket package, and helper packages.", "package_details": ""},
{"url": "https://index.ros.org/p/rosbridge_server", "package": "rosbridge_server", "package_summary": "A WebSocket interface to rosbridge.", "package_details": ""},
{"url": "https://index.ros.org/p/rosbridge_library", "package": "rosbridge_library", "package_summary": "The core rosbridge package, responsible for interpreting JSON and performing the appropriate\nROS action, like subscribe, publish, call service, and interact with params.", "package_details": ""},
{"url": "https://index.ros.org/p/rosapi_msgs", "package": "rosapi_msgs", "package_summary": "Interface definitions for rosapi package.", "package_details": ""},
{"url": "https://index.ros.org/p/turtlesim", "package": "turtlesim", "package_summary": "turtlesim is a tool made for teaching ROS and ROS packages.", "package_details": ""},
{"url": "https://index.ros.org/p/ros_environment", "package": "ros_environment", "package_summary": "The package provides the environment variables `ROS_VERSION` and `ROS_DISTRO`.", "package_details": ""},
{"url": "https://index.ros.org/p/rospy_tutorials", "package": "rospy_tutorials", "package_summary": "This package attempts to show the features of ROS python API step-by-step,\n    including using messages, servers, parameters, etc. These tutorials are compatible with the nodes in roscpp_tutorial.", "package_details": ""},
{"url": "https://index.ros.org/p/roscpp_tutorials", "package": "roscpp_tutorials", "package_summary": "This package attempts to show the features of ROS step-by-step,\n    including using messages, servers, parameters, etc.", "package_details": ""},
{"url": "https://index.ros.org/p/ros_tutorials", "package": "ros_tutorials", "package_summary": "ros_tutorials contains packages that demonstrate various features of ROS,\n    as well as support packages which help demonstrate those features.", "package_details": ""},
{"url": "https://index.ros.org/p/can_msgs", "package": "can_msgs", "package_summary": "CAN related message types.", "package_details": ""},
{"url": "https://index.ros.org/p/robot_controllers_msgs", "package": "robot_controllers_msgs", "package_summary": "Messages for use with robot_controllers framework.", "package_details": ""},
{"url": "https://index.ros.org/p/robot_controllers_interface", "package": "robot_controllers_interface", "package_summary": "Generic framework for robot controls.", "package_details": ""},
{"url": "https://index.ros.org/p/robot_controllers", "package": "robot_controllers", "package_summary": "Some basic robot controllers for use with robot_controllers_interface.", "package_details": ""},
{"url": "https://index.ros.org/p/robot_calibration_msgs", "package": "robot_calibration_msgs", "package_summary": "Messages for calibrating a robot", "package_details": ""},
{"url": "https://index.ros.org/p/robot_calibration", "package": "robot_calibration", "package_summary": "Calibrate a Robot", "package_details": ""},
{"url": "https://index.ros.org/p/libcurl_vendor", "package": "libcurl_vendor", "package_summary": "Wrapper around libcurl, it provides a fixed CMake module and an ExternalProject build of it.", "package_details": ""},
{"url": "https://index.ros.org/p/resource_retriever", "package": "resource_retriever", "package_summary": "This package retrieves data from url-format files such as http://,\n   ftp://, package:// file://, etc., and loads the data into memory.\n   The package:// url for ros packages is translated into a local\n   file:// url.  The resourse retriever was initially designed to load\n   mesh files into memory, but it can be used for any type of\n   data. The resource retriever is based on the the libcurl library.", "package_details": ""},
{"url": "https://index.ros.org/p/realsense2_description", "package": "realsense2_description", "package_summary": "RealSense description package for Intel 3D D400 cameras", "package_details": ""},
{"url": "https://index.ros.org/p/realsense2_camera_msgs", "package": "realsense2_camera_msgs", "package_summary": "RealSense camera_msgs package containing realsense camera messages definitions", "package_details": ""},
{"url": "https://index.ros.org/p/realsense2_camera", "package": "realsense2_camera", "package_summary": "RealSense camera package allowing access to Intel D400 3D cameras", "package_details": ""},
{"url": "https://index.ros.org/p/qt_gui_py_common", "package": "qt_gui_py_common", "package_summary": "qt_gui_py_common provides common functionality for GUI plugins written in Python.", "package_details": ""},
{"url": "https://index.ros.org/p/qt_gui_cpp", "package": "qt_gui_cpp", "package_summary": "qt_gui_cpp provides the foundation for C++-bindings for qt_gui and creates bindings for every generator available.\n    At least one specific binding must be available in order to use C++-plugins.", "package_details": ""},
{"url": "https://index.ros.org/p/qt_gui_core", "package": "qt_gui_core", "package_summary": "Integration of the ROS package system and ROS-specific plugins for a Qt-based GUI.", "package_details": ""},
{"url": "https://index.ros.org/p/qt_gui_app", "package": "qt_gui_app", "package_summary": "qt_gui_app provides the main to start an instance of the integrated graphical user interface provided by qt_gui.", "package_details": ""},
{"url": "https://index.ros.org/p/qt_gui", "package": "qt_gui", "package_summary": "qt_gui provides the infrastructure for an integrated graphical user interface based on Qt.\n    It is extensible with Python- and C++-based plugins (implemented in separate packages) which can contribute arbitrary widgets.\n    It requires either PyQt or PySide bindings.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_softhand_industry_srvs", "package": "qb_softhand_industry_srvs", "package_summary": "This package contains the ROS services for qbrobotics\u00ae SoftHand Industry.", "package_details": ""},
{"url": "https://index.ros.org/p/qt_dotgraph", "package": "qt_dotgraph", "package_summary": "qt_dotgraph provides helpers to work with dot graphs.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_softhand_industry_ros2_control", "package": "qb_softhand_industry_ros2_control", "package_summary": "Package of `ros2_control` hardware for qbSoftHand Industry with transmission interface.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_softhand_industry_msgs", "package": "qb_softhand_industry_msgs", "package_summary": "This package contains the ROS messages for qbrobotics\u00ae SoftHand Industry.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_softhand_industry_driver", "package": "qb_softhand_industry_driver", "package_summary": "This package contains communication interface for qbrobotics\u00ae SoftHand Industry.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_softhand_industry_description", "package": "qb_softhand_industry_description", "package_summary": "This package contains the ROS description for qbrobotics\u00ae SoftHand INdustry device.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_softhand_industry", "package": "qb_softhand_industry", "package_summary": "This package contains the ROS interface for qbrobotics\u00ae SoftHand INdustry device.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_device_test_controllers", "package": "qb_device_test_controllers", "package_summary": "Demo nodes for showing and testing qb devices through waypoints.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_device_ros2_control", "package": "qb_device_ros2_control", "package_summary": "Package of `ros2_control` hardware for qb robotics Devices with transmission interface.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_device_msgs", "package": "qb_device_msgs", "package_summary": "This package contains the device-independent custom ROS messages for qbrobotics\u00ae devices.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_device_driver", "package": "qb_device_driver", "package_summary": "This package contains a device-independent API wrapper for qbrobotics\u00ae devices.", "package_details": ""},
{"url": "https://index.ros.org/p/python_mrpt", "package": "python_mrpt", "package_summary": "Python wrapper for Mobile Robot Programming Toolkit (MRPT) libraries", "package_details": ""},
{"url": "https://index.ros.org/p/qb_device_bringup", "package": "qb_device_bringup", "package_summary": "This package contains a device-independent bringup utilities for qbrobotics\u00ae devices.", "package_details": ""},
{"url": "https://index.ros.org/p/ros2plugin", "package": "ros2plugin", "package_summary": "The plugin command for ROS 2 command line tools.", "package_details": ""},
{"url": "https://index.ros.org/p/qb_device", "package": "qb_device", "package_summary": "This package contains a device-independent ROS interface for qbrobotics\u00ae devices.", "package_details": ""},
{"url": "https://index.ros.org/p/phidgets_msgs", "package": "phidgets_msgs", "package_summary": "Custom ROS messages for Phidgets drivers", "package_details": ""},
{"url": "https://index.ros.org/p/pluginlib", "package": "pluginlib", "package_summary": "The pluginlib package provides tools for writing and dynamically loading plugins using the ROS build infrastructure.\n    To work, these tools require plugin providers to register their plugins in the package.xml of their package.", "package_details": ""},
{"url": "https://index.ros.org/p/phidgets_drivers", "package": "phidgets_drivers", "package_summary": "API and ROS drivers for Phidgets devices", "package_details": ""},
{"url": "https://index.ros.org/p/phidgets_api", "package": "phidgets_api", "package_summary": "A C++ Wrapper for the Phidgets C API", "package_details": ""},
{"url": "https://index.ros.org/p/libphidget22", "package": "libphidget22", "package_summary": "This package wraps the libphidget22 to use it as a ROS dependency", "package_details": ""},
{"url": "https://index.ros.org/p/perception_pcl", "package": "perception_pcl", "package_summary": "PCL (Point Cloud Library) ROS interface stack. PCL-ROS is the preferred\n  bridge for 3D applications involving n-D Point Clouds and 3D geometry\n  processing in ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/pal_statistics_msgs", "package": "pal_statistics_msgs", "package_summary": "Statistics msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/pcl_ros", "package": "pcl_ros", "package_summary": "PCL (Point Cloud Library) ROS interface stack. PCL-ROS is the preferred\n  bridge for 3D applications involving n-D Point Clouds and 3D geometry\n  processing in ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/pal_statistics", "package": "pal_statistics", "package_summary": "The pal_statistics package", "package_details": ""},
{"url": "https://index.ros.org/p/pal_carbon_collector", "package": "pal_carbon_collector", "package_summary": "Node that collects statistics from topics and sends them to carbon", "package_details": ""},
{"url": "https://index.ros.org/p/openni2_camera", "package": "openni2_camera", "package_summary": "Drivers for the Asus Xtion and Primesense Devices. For using a kinect\n  with ROS, try the", "package_details": ""},
{"url": "https://index.ros.org/p/octomap_server", "package": "octomap_server", "package_summary": "octomap_server loads a 3D map (as Octree-based OctoMap) and distributes it to other nodes in a compact binary format. It also allows to incrementally build 3D OctoMaps, and provides map saving in the node octomap_saver.", "package_details": ""},
{"url": "https://index.ros.org/p/octomap_mapping", "package": "octomap_mapping", "package_summary": "Mapping tools to be used with the", "package_details": ""},
{"url": "https://index.ros.org/p/novatel_oem7_msgs", "package": "novatel_oem7_msgs", "package_summary": "Messages for NovAtel Oem7 family of receivers.", "package_details": ""},
{"url": "https://index.ros.org/p/novatel_oem7_driver", "package": "novatel_oem7_driver", "package_summary": "NovAtel Oem7 ROS Driver", "package_details": ""},
{"url": "https://index.ros.org/p/object_recognition_msgs", "package": "object_recognition_msgs", "package_summary": "Object_recognition_msgs contains the ROS message and the actionlib definition used in object_recognition_core", "package_details": ""},
{"url": "https://index.ros.org/p/novatel_gps_msgs", "package": "novatel_gps_msgs", "package_summary": "Messages for proprietary (non-NMEA) sentences from Novatel GPS receivers.", "package_details": ""},
{"url": "https://index.ros.org/p/novatel_gps_driver", "package": "novatel_gps_driver", "package_summary": "Driver for NovAtel receivers", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_sensors", "package": "mrpt_sensors", "package_summary": "ROS nodes for various robotics sensors via mrpt-hwdrivers. Metapackage for all mrpt_sensor packages.", "package_details": ""},
{"url": "https://index.ros.org/p/map_msgs", "package": "map_msgs", "package_summary": "This package defines messages commonly used in mapping packages.", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_sensorlib", "package": "mrpt_sensorlib", "package_summary": "C++ library for the base generic MRPT sensor node", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_sensor_imu_taobotics", "package": "mrpt_sensor_imu_taobotics", "package_summary": "ROS node for Taobotics USB IMUs (based on mrpt-hwdrivers)", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_sensor_gnss_novatel", "package": "mrpt_sensor_gnss_novatel", "package_summary": "ROS node for GNSS/IMU Novatel receivers with RTK precision using an NTRIP HTTP source (based on mrpt-hwdrivers)", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_sensor_gnss_nmea", "package": "mrpt_sensor_gnss_nmea", "package_summary": "ROS node for GNSS receivers generating NMEA messages (based on mrpt-hwdrivers)", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_sensor_bumblebee_stereo", "package": "mrpt_sensor_bumblebee_stereo", "package_summary": "ROS node for Bumblebee Stereo Cameras using libdc1394 interface (based on mrpt-hwdrivers)", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_generic_sensor", "package": "mrpt_generic_sensor", "package_summary": "ROS node for interfacing any sensor supported by mrpt-hwdrivers", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libtclap", "package": "mrpt_libtclap", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (tclap C++ library).\n  This package contains: mrpt-tclap", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libslam", "package": "mrpt_libslam", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (slam/vision C++ libraries).\n  This package contains: mrpt-slam, mrpt-vision", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libposes", "package": "mrpt_libposes", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (poses C++ libraries).\n  This package contains: mrpt-poses, mrpt-tfest, mrpt-bayes", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libopengl", "package": "mrpt_libopengl", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (opengl/img C++ libraries).\n  This package contains: mrpt-opengl, mrpt-img", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libobs", "package": "mrpt_libobs", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (obs C++ libraries).\n  This package contains: mrpt-obs, mrpt-topography", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libnav", "package": "mrpt_libnav", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (nav C++ libraries).\n  This package contains: mrpt-nav, mrpt-kinematics", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libmath", "package": "mrpt_libmath", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (math C++ libraries).\n  This package contains: mrpt-math", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libmaps", "package": "mrpt_libmaps", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (maps C++ libraries).\n  This package contains: mrpt-maps, mrpt-graphs", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libhwdrivers", "package": "mrpt_libhwdrivers", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (hwdrivers C++ libraries).\n  This package contains: mrpt-hwdrivers, mrpt-comms", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libgui", "package": "mrpt_libgui", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (GUI C++ libraries).\n  This package contains: mrpt-gui, nanogui", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libbase", "package": "mrpt_libbase", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (core C++ libraries).\n  This package contains: mrpt-io, mrpt-serialization, mrpt-random, mrpt-system, mrpt-rtti, mrpt-containers, mrpt-typemeta, mrpt-core, mrpt-random, mrpt-config, mrpt-expr", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_libapps", "package": "mrpt_libapps", "package_summary": "Mobile Robot Programming Toolkit (MRPT) libraries (apps C++ libraries).\n  This package contains: mrpt-apps lib, mrpt-graphslam", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_apps", "package": "mrpt_apps", "package_summary": "Mobile Robot Programming Toolkit (MRPT) applications", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_tutorials", "package": "mrpt_tutorials", "package_summary": "Example files used as tutorials for MRPT ROS packages", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_pointcloud_pipeline", "package": "mrpt_pointcloud_pipeline", "package_summary": "Maintains a local obstacle map from recent sensor readings, including optional point cloud pipeline filtering or processing.", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_nav_interfaces", "package": "mrpt_nav_interfaces", "package_summary": "Message, services, and actions, for other mrpt navigation packages.", "package_details": ""},
{"url": "https://index.ros.org/p/mrpt_msgs_bridge", "package": "mrpt_msgs_bridge", "package_summary": "C++ library to convert between custom mrpt_msgs messages and native MRPT classes", "package_details": ""},
{"url": "https://index.ros.org/p/mqtt_client_interfaces", "package": "mqtt_client_interfaces", "package_summary": "Message and service definitions for mqtt_client", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_resources_pr2_description", "package": "moveit_resources_pr2_description", "package_summary": "PR2 Resources used for MoveIt! testing", "package_details": ""},
{"url": "https://index.ros.org/p/mqtt_client", "package": "mqtt_client", "package_summary": "Node that enables connected ROS-based devices or robots to exchange ROS messages via an MQTT broker using the MQTT protocol.", "package_details": ""},
{"url": "https://index.ros.org/p/moveit_resources", "package": "moveit_resources", "package_summary": "Resources used for MoveIt testing", "package_details": ""},
{"url": "https://index.ros.org/p/sdc21x0", "package": "sdc21x0", "package_summary": "Message definitions for the sdc21x0 motor controller", "package_details": ""},
{"url": "https://index.ros.org/p/mocap_optitrack", "package": "mocap_optitrack", "package_summary": "Streaming of OptiTrack mocap data to tf", "package_details": ""},
{"url": "https://index.ros.org/p/mir_robot", "package": "mir_robot", "package_summary": "URDF description, Gazebo simulation, navigation, bringup launch files, message and action descriptions for the MiR100 robot.", "package_details": ""},
{"url": "https://index.ros.org/p/mir_navigation", "package": "mir_navigation", "package_summary": "Launch and configuration files for move_base, localization etc. on the MiR robot.", "package_details": ""},
{"url": "https://index.ros.org/p/mir_msgs", "package": "mir_msgs", "package_summary": "Message definitions for the MiR100 robot", "package_details": ""},
{"url": "https://index.ros.org/p/mir_gazebo", "package": "mir_gazebo", "package_summary": "Simulation specific launch and configuration files for the MiR100 robot.", "package_details": ""},
{"url": "https://index.ros.org/p/mir_dwb_critics", "package": "mir_dwb_critics", "package_summary": "Trajectory critics for the dwb_local_planner that work well together with the SBPL global planner on the MiR robot", "package_details": ""},
{"url": "https://index.ros.org/p/mir_driver", "package": "mir_driver", "package_summary": "A reverse ROS bridge for the MiR100 robot", "package_details": ""},
{"url": "https://index.ros.org/p/mir_description", "package": "mir_description", "package_summary": "URDF description of the MiR100 robot", "package_details": ""},
{"url": "https://index.ros.org/p/mir_actions", "package": "mir_actions", "package_summary": "Action definitions for the MiR100 robot", "package_details": ""},
{"url": "https://index.ros.org/p/microstrain_inertial_rqt", "package": "microstrain_inertial_rqt", "package_summary": "The microstrain_inertial_rqt package provides several RQT widgets to view the status of Microstrain devices", "package_details": ""},
{"url": "https://index.ros.org/p/microstrain_inertial_msgs", "package": "microstrain_inertial_msgs", "package_summary": "A package that contains ROS message corresponding to microstrain message types.", "package_details": ""},
{"url": "https://index.ros.org/p/microstrain_inertial_driver", "package": "microstrain_inertial_driver", "package_summary": "The ros_mscl package provides a driver for the LORD/Microstrain inertial products.", "package_details": ""},
{"url": "https://index.ros.org/p/microstrain_inertial_description", "package": "microstrain_inertial_description", "package_summary": "URDF and stl files for MicroStrain sensors.", "package_details": ""},
{"url": "https://index.ros.org/p/marti_visualization_msgs", "package": "marti_visualization_msgs", "package_summary": "marti_visualization_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/marti_status_msgs", "package": "marti_status_msgs", "package_summary": "marti_status_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/mavros_msgs", "package": "mavros_msgs", "package_summary": "Messages for", "package_details": ""},
{"url": "https://index.ros.org/p/marti_sensor_msgs", "package": "marti_sensor_msgs", "package_summary": "marti_sensor_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/marti_perception_msgs", "package": "marti_perception_msgs", "package_summary": "marti_perception_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/marti_nav_msgs", "package": "marti_nav_msgs", "package_summary": "marti_nav_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/marti_introspection_msgs", "package": "marti_introspection_msgs", "package_summary": "marti_introspection_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/marti_dbw_msgs", "package": "marti_dbw_msgs", "package_summary": "marti_dbw_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/marti_common_msgs", "package": "marti_common_msgs", "package_summary": "marti_common_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/marti_can_msgs", "package": "marti_can_msgs", "package_summary": "marti_can_msgs", "package_details": ""},
{"url": "https://index.ros.org/p/swri_transform_util", "package": "swri_transform_util", "package_summary": "The swri_transform_util package contains utility functions and classes for\n     transforming between coordinate frames.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_serial_util", "package": "swri_serial_util", "package_summary": "Contains nodes and utilities for serial communication in ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_route_util", "package": "swri_route_util", "package_summary": "This library provides functionality to simplify working with the\n    navigation messages defined in marti_nav_msgs.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_roscpp", "package": "swri_roscpp", "package_summary": "A package that extends rclcpp with some commonly used functionality to reduce boilerplate code.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_opencv_util", "package": "swri_opencv_util", "package_summary": "A package with commonly used OpenCV functionality.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_math_util", "package": "swri_math_util", "package_summary": "A package with commonly used math utility code.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_image_util", "package": "swri_image_util", "package_summary": "A package of commonly image manipulation utilities.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_geometry_util", "package": "swri_geometry_util", "package_summary": "Commonly used geometry routines, implemented in a ROS friendly package.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_dbw_interface", "package": "swri_dbw_interface", "package_summary": "This package provides documentation on common interface conventions for\n    drive-by-wire systems.", "package_details": ""},
{"url": "https://index.ros.org/p/swri_console_util", "package": "swri_console_util", "package_summary": "Utility functions for interacting with console", "package_details": ""},
{"url": "https://index.ros.org/p/swri_cli_tools", "package": "swri_cli_tools", "package_summary": "Command line tools for introspecting ROS systems", "package_details": ""},
{"url": "https://index.ros.org/p/tile_map", "package": "tile_map", "package_summary": "Tile map provides a slippy map style interface for visualizing \n     OpenStreetMap and GoogleMap tiles.  A mapviz visualization plug-in is also\n     implemented", "package_details": ""},
{"url": "https://index.ros.org/p/multires_image", "package": "multires_image", "package_summary": "multires_image", "package_details": ""},
{"url": "https://index.ros.org/p/mapviz_plugins", "package": "mapviz_plugins", "package_summary": "Common plugins for the Mapviz visualization tool", "package_details": ""},
{"url": "https://index.ros.org/p/mapviz_interfaces", "package": "mapviz_interfaces", "package_summary": "ROS interfaces used by Mapviz", "package_details": ""},
{"url": "https://index.ros.org/p/mapviz", "package": "mapviz", "package_summary": "2D mapping display with extensible data overlays", "package_details": ""},
{"url": "https://index.ros.org/p/librealsense2", "package": "librealsense2", "package_summary": "Library for controlling and capturing data from the Intel(R) RealSense(TM) D400 devices.", "package_details": ""},
{"url": "https://index.ros.org/p/laser_geometry", "package": "laser_geometry", "package_summary": "This package contains a class for converting from a 2D laser scan as defined by\n    sensor_msgs/LaserScan into a point cloud as defined by sensor_msgs/PointCloud\n    or sensor_msgs/PointCloud2. In particular, it contains functionality to account\n    for the skew resulting from moving robots or tilting laser scanners.", "package_details": ""},
{"url": "https://index.ros.org/p/laser_filters", "package": "laser_filters", "package_summary": "Assorted filters designed to operate on 2D planar laser scanners,\n    which use the sensor_msgs/LaserScan type.", "package_details": ""},
{"url": "https://index.ros.org/p/lanelet2", "package": "lanelet2", "package_summary": "Meta-package for lanelet2", "package_details": ""},
{"url": "https://index.ros.org/p/kdl_parser", "package": "kdl_parser", "package_summary": "The Kinematics and Dynamics Library (KDL) defines a tree structure\n   to represent the kinematic and dynamic parameters of a robot\n   mechanism.", "package_details": ""},
{"url": "https://index.ros.org/p/wiimote_msgs", "package": "wiimote_msgs", "package_summary": "Messages used by wiimote package.", "package_details": ""},
{"url": "https://index.ros.org/p/joint_state_publisher_gui", "package": "joint_state_publisher_gui", "package_summary": "This package contains a GUI tool for setting and publishing joint state values for a given URDF.", "package_details": ""},
{"url": "https://index.ros.org/p/interactive_markers", "package": "interactive_markers", "package_summary": "3D interactive marker communication library for RViz and similar tools.", "package_details": ""},
{"url": "https://index.ros.org/p/rviz_imu_plugin", "package": "rviz_imu_plugin", "package_summary": "RVIZ plugin for IMU visualization", "package_details": ""},
{"url": "https://index.ros.org/p/imu_complementary_filter", "package": "imu_complementary_filter", "package_summary": "Filter which fuses angular velocities, accelerations, and (optionally) magnetic readings from a generic IMU device into a quaternion to represent the orientation of the device wrt the global frame. Based on the algorithm by Roberto G. Valenti etal. described in the paper \"Keeping a Good Attitude: A Quaternion-Based Orientation Filter for IMUs and MARGs\" available at http://www.mdpi.com/1424-8220/15/8/19302 .", "package_details": ""},
{"url": "https://index.ros.org/p/imu_tools", "package": "imu_tools", "package_summary": "Various tools for IMU devices", "package_details": ""},
{"url": "https://index.ros.org/p/imu_filter_madgwick", "package": "imu_filter_madgwick", "package_summary": "Filter which fuses angular velocities, accelerations, and (optionally) magnetic readings from a generic IMU device into an orientation. Based on code by Sebastian Madgwick, http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms.", "package_details": ""},
{"url": "https://index.ros.org/p/imu_transformer", "package": "imu_transformer", "package_summary": "Node/components to transform sensor_msgs::Imu data from one frame into another.", "package_details": ""},
{"url": "https://index.ros.org/p/imu_processors", "package": "imu_processors", "package_summary": "Processors for sensor_msgs::Imu data", "package_details": ""},
{"url": "https://index.ros.org/p/imu_pipeline", "package": "imu_pipeline", "package_summary": "imu_pipeline", "package_details": ""},
{"url": "https://index.ros.org/p/theora_image_transport", "package": "theora_image_transport", "package_summary": "Theora_image_transport provides a plugin to image_transport for\n    transparently sending an image stream encoded with the Theora codec.", "package_details": ""},
{"url": "https://index.ros.org/p/image_transport_plugins", "package": "image_transport_plugins", "package_summary": "A set of plugins for publishing and subscribing to sensor_msgs/Image topics\n    in representations other than raw pixel data. For example, for viewing a\n    stream of images off-robot, a video codec will give much lower bandwidth\n    and latency. For low frame rate tranport of high-definition images, you\n    might prefer sending them as JPEG or PNG-compressed form.", "package_details": ""},
{"url": "https://index.ros.org/p/compressed_image_transport", "package": "compressed_image_transport", "package_summary": "Compressed_image_transport provides a plugin to image_transport for transparently sending images\n    encoded as JPEG or PNG.", "package_details": ""},
{"url": "https://index.ros.org/p/stereo_image_proc", "package": "stereo_image_proc", "package_summary": "Stereo and single image rectification and disparity processing.", "package_details": ""},
{"url": "https://index.ros.org/p/compressed_depth_image_transport", "package": "compressed_depth_image_transport", "package_summary": "Compressed_depth_image_transport provides a plugin to image_transport for transparently sending\n    depth images (raw, floating-point) using PNG compression.", "package_details": ""},
{"url": "https://index.ros.org/p/image_view", "package": "image_view", "package_summary": "A simple viewer for ROS image topics. Includes a specialized viewer\n  for stereo + disparity images.", "package_details": ""},
{"url": "https://index.ros.org/p/image_rotate", "package": "image_rotate", "package_summary": "", "package_details": ""},
{"url": "https://index.ros.org/p/image_publisher", "package": "image_publisher", "package_summary": "Contains a node publish an image stream from single image file\n      or avi motion file.", "package_details": ""},
{"url": "https://index.ros.org/p/image_proc", "package": "image_proc", "package_summary": "Single image rectification and color processing.", "package_details": ""},
{"url": "https://index.ros.org/p/image_pipeline", "package": "image_pipeline", "package_summary": "image_pipeline fills the gap between getting raw images from a camera driver and higher-level vision processing.", "package_details": ""},
{"url": "https://index.ros.org/p/depth_image_proc", "package": "depth_image_proc", "package_summary": "Contains components for processing depth images such as those\n     produced by OpenNI camera. Functions include creating disparity\n     images and point clouds, as well as registering (reprojecting)\n     a depth image into another camera frame.", "package_details": ""},
{"url": "https://index.ros.org/p/camera_calibration", "package": "camera_calibration", "package_summary": "camera_calibration allows easy calibration of monocular or stereo\n     cameras using a checkerboard calibration target.", "package_details": ""},
{"url": "https://index.ros.org/p/polled_camera", "package": "polled_camera", "package_summary": "polled_camera contains a service and C++ helper classes for implementing a polled\n     camera driver node and requesting images from it. The package is currently for\n     internal use as the API is still under development.", "package_details": ""},
{"url": "https://index.ros.org/p/image_transport", "package": "image_transport", "package_summary": "image_transport should always be used to subscribe to and publish images. It provides transparent\n     support for transporting images in low-bandwidth compressed formats. Examples (provided by separate\n     plugin packages) include JPEG/PNG compression and Theora streaming video.", "package_details": ""},
{"url": "https://index.ros.org/p/image_common", "package": "image_common", "package_summary": "Common code for working with images in ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/camera_info_manager", "package": "camera_info_manager", "package_summary": "This package provides a C++ interface for camera calibration\n     information.  It provides CameraInfo, and handles SetCameraInfo\n     service requests, saving and restoring the camera calibration\n     data.", "package_details": ""},
{"url": "https://index.ros.org/p/camera_calibration_parsers", "package": "camera_calibration_parsers", "package_summary": "camera_calibration_parsers contains routines for reading and writing camera calibration parameters.", "package_details": ""},
{"url": "https://index.ros.org/p/hebi_cpp_api", "package": "hebi_cpp_api", "package_summary": "A ROS 2 package providing access to the HEBI C++ API.", "package_details": ""},
{"url": "https://index.ros.org/p/gpsd_client", "package": "gpsd_client", "package_summary": "connects to a GPSd server and broadcasts GPS fixes \n   using the NavSatFix message", "package_details": ""},
{"url": "https://index.ros.org/p/gps_umd", "package": "gps_umd", "package_summary": "gps_umd metapackage", "package_details": ""},
{"url": "https://index.ros.org/p/gps_tools", "package": "gps_tools", "package_summary": "GPS routines for use in GPS drivers", "package_details": ""},
{"url": "https://index.ros.org/p/turtle_tf2_py", "package": "turtle_tf2_py", "package_summary": "turtle_tf2_py demonstrates how to write a ROS2 Python tf2 broadcaster and listener with the turtlesim. The turtle_tf2_listener commands turtle2 to follow turtle1 around as you drive turtle1 using the keyboard.", "package_details": ""},
{"url": "https://index.ros.org/p/gps_msgs", "package": "gps_msgs", "package_summary": "GPS messages for use in GPS drivers", "package_details": ""},
{"url": "https://index.ros.org/p/turtle_tf2_cpp", "package": "turtle_tf2_cpp", "package_summary": "turtle_tf2_cpp demonstrates how to write a ROS2 C++ tf2 broadcaster and listener with the turtlesim. The turtle_tf2_listener commands turtle2 to follow turtle1 around as you drive turtle1 using the keyboard.", "package_details": ""},
{"url": "https://index.ros.org/p/geometry_tutorials", "package": "geometry_tutorials", "package_summary": "Metapackage of geometry tutorials ROS.", "package_details": ""},
{"url": "https://index.ros.org/p/geographic_msgs", "package": "geographic_msgs", "package_summary": "ROS messages for Geographic Information Systems.", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_video_monitors", "package": "gazebo_video_monitors", "package_summary": "Metapackage that groups together the gazebo_video_monitors packages.", "package_details": ""},
{"url": "https://index.ros.org/p/geographic_info", "package": "geographic_info", "package_summary": "Geographic information metapackage.\n\n    Not needed for wet packages, use only to resolve dry stack\n    dependencies.", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_video_monitor_utils", "package": "gazebo_video_monitor_utils", "package_summary": "Contains utility scripts that are meant to interact with the gazebo video monitor plugins.", "package_details": ""},
{"url": "https://index.ros.org/p/geodesy", "package": "geodesy", "package_summary": "Python and C++ interfaces for manipulating geodetic coordinates.", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_video_monitor_plugins", "package": "gazebo_video_monitor_plugins", "package_summary": "gazebo_video_monitor_plugins is a package that lets the user record videos of a", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_video_monitor_interfaces", "package": "gazebo_video_monitor_interfaces", "package_summary": "gazebo_video_monitor_interfaces defines interfaces for the gazebo_video_monitor_plugins package.", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_ros_pkgs", "package": "gazebo_ros_pkgs", "package_summary": "Interface for using ROS with the", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_ros", "package": "gazebo_ros", "package_summary": "Utilities to interface with", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_plugins", "package": "gazebo_plugins", "package_summary": "Robot-independent Gazebo plugins for sensors, motors and dynamic reconfigurable components.", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_msgs", "package": "gazebo_msgs", "package_summary": "Message and service data structures for interacting with Gazebo from ROS2.", "package_details": ""},
{"url": "https://index.ros.org/p/gazebo_dev", "package": "gazebo_dev", "package_summary": "Provides a cmake config for the default version of Gazebo for the ROS distribution.", "package_details": ""},
{"url": "https://index.ros.org/p/boeing_gazebo_model_attachment_plugin_msgs", "package": "boeing_gazebo_model_attachment_plugin_msgs", "package_summary": "Model Attachment Plugin", "package_details": ""},
{"url": "https://index.ros.org/p/boeing_gazebo_model_attachment_plugin", "package": "boeing_gazebo_model_attachment_plugin", "package_summary": "Model Attachment Plugin", "package_details": ""},
{"url": "https://index.ros.org/p/foxglove_msgs", "package": "foxglove_msgs", "package_summary": "foxglove_msgs provides visualization messages that are supported by Foxglove.", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_widget", "package": "flexbe_widget", "package_summary": "flexbe_widget implements some smaller scripts for the behavior engine.", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_testing", "package": "flexbe_testing", "package_summary": "flexbe_testing provides a framework for unit testing states.", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_states", "package": "flexbe_states", "package_summary": "flexbe_states provides a collection of common generic predefined states.", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_onboard", "package": "flexbe_onboard", "package_summary": "flexbe_onboard implements the robot-side of the behavior engine from where all behaviors are started.", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_msgs", "package": "flexbe_msgs", "package_summary": "flexbe_msgs provides the messages used by FlexBE.", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_mirror", "package": "flexbe_mirror", "package_summary": "flexbe_mirror implements functionality to remotely mirror an executed behavior.", "package_details": ""},
{"url": "https://index.ros.org/p/fkie_potree_rviz_plugin", "package": "fkie_potree_rviz_plugin", "package_summary": "Render large point clouds in rviz", "package_details": ""},
{"url": "https://index.ros.org/p/fkie_message_filters", "package": "fkie_message_filters", "package_summary": "Improved ROS message filters", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_input", "package": "flexbe_input", "package_summary": "flexbe_input enables to send data to onboard behavior when required.", "package_details": ""},
{"url": "https://index.ros.org/p/smach_ros", "package": "smach_ros", "package_summary": "The smach_ros package contains extensions for the SMACH library to\n    integrate it tightly with ROS.  For example, SMACH-ROS can call\n    ROS services, listen to ROS topics, and integrate\n    with", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_core", "package": "flexbe_core", "package_summary": "flexbe_core provides the core components for the FlexBE behavior engine.", "package_details": ""},
{"url": "https://index.ros.org/p/flexbe_behavior_engine", "package": "flexbe_behavior_engine", "package_summary": "A meta-package to aggregate all the FlexBE packages", "package_details": ""},
{"url": "https://index.ros.org/p/smach_msgs", "package": "smach_msgs", "package_summary": "this package contains a set of messages that are used by the introspection\n    interfaces for smach.", "package_details": ""},
{"url": "https://index.ros.org/p/smach", "package": "smach", "package_summary": "SMACH is a task-level architecture for rapidly creating complex robot\n    behavior. At its core, SMACH is a ROS-independent Python library to build\n    hierarchical state machines. SMACH is a new library that takes advantage of\n    very old concepts in order to quickly create robust robot behavior with\n    maintainable and modular code.", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_rviz_plugins", "package": "etsi_its_rviz_plugins", "package_summary": "RViz plugins for etsi_its_messages", "package_details": ""},
{"url": "https://index.ros.org/p/executive_smach", "package": "executive_smach", "package_summary": "This metapackage depends on the SMACH library and ROS SMACH integration\n    packages.", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_msgs_utils", "package": "etsi_its_msgs_utils", "package_summary": "ROS messages and utility functions for ETSI ITS messages", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_vam_ts_msgs", "package": "etsi_its_vam_ts_msgs", "package_summary": "ROS messages for ETSI ITS VAM (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_spatem_ts_msgs", "package": "etsi_its_spatem_ts_msgs", "package_summary": "ROS messages for ETSI ITS SPATEM (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_msgs", "package": "etsi_its_msgs", "package_summary": "ROS messages for ETSI ITS messages", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_mcm_uulm_msgs", "package": "etsi_its_mcm_uulm_msgs", "package_summary": "ROS messages for draft MCM (TS) version of UULM", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_mapem_ts_msgs", "package": "etsi_its_mapem_ts_msgs", "package_summary": "ROS messages for ETSI ITS MAPEM (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_denm_ts_msgs", "package": "etsi_its_denm_ts_msgs", "package_summary": "ROS messages for ETSI ITS DENM (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_denm_msgs", "package": "etsi_its_denm_msgs", "package_summary": "ROS messages for ETSI ITS DENM", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cpm_ts_msgs", "package": "etsi_its_cpm_ts_msgs", "package_summary": "ROS messages for ETSI ITS CPM (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cam_ts_msgs", "package": "etsi_its_cam_ts_msgs", "package_summary": "ROS messages for ETSI ITS CAM (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cam_msgs", "package": "etsi_its_cam_msgs", "package_summary": "ROS messages for ETSI ITS CAM", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_messages", "package": "etsi_its_messages", "package_summary": "ROS support for ETSI ITS messages", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_vam_ts_conversion", "package": "etsi_its_vam_ts_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded ETSI ITS VAMs (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_spatem_ts_conversion", "package": "etsi_its_spatem_ts_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded ETSI ITS SPATEMs (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_primitives_conversion", "package": "etsi_its_primitives_conversion", "package_summary": "Conversion functions for converting ROS primitives to and from ASN.1-encoded primitives", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_mcm_uulm_conversion", "package": "etsi_its_mcm_uulm_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded UULM draft MCMs (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_mapem_ts_conversion", "package": "etsi_its_mapem_ts_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded ETSI ITS MAPEMs (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_denm_ts_conversion", "package": "etsi_its_denm_ts_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded ETSI ITS DENMs (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_denm_conversion", "package": "etsi_its_denm_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded ETSI ITS DENMs", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cpm_ts_conversion", "package": "etsi_its_cpm_ts_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded ETSI ITS CPMs (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_conversion_srvs", "package": "etsi_its_conversion_srvs", "package_summary": "Services to convert ROS messages to and from ASN.1-encoded ETSI ITS messages", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_conversion", "package": "etsi_its_conversion", "package_summary": "Converts ROS messages to and from ASN.1-encoded ETSI ITS messages", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cam_ts_conversion", "package": "etsi_its_cam_ts_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded ETSI ITS CAMs (TS)", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cam_conversion", "package": "etsi_its_cam_conversion", "package_summary": "Conversion functions for converting ROS messages to and from ASN.1-encoded ETSI ITS CAMs", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_vam_ts_coding", "package": "etsi_its_vam_ts_coding", "package_summary": "C++ compatible C source code for ETSI ITS VAMs (TS) generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_spatem_ts_coding", "package": "etsi_its_spatem_ts_coding", "package_summary": "C++ compatible C source code for ETSI ITS SPATEMs (TS) generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_mcm_uulm_coding", "package": "etsi_its_mcm_uulm_coding", "package_summary": "C++ compatible C source code for draft MCM (TS) version of UULM generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_mapem_ts_coding", "package": "etsi_its_mapem_ts_coding", "package_summary": "C++ compatible C source code for ETSI ITS MAPEMs (TS) generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_denm_ts_coding", "package": "etsi_its_denm_ts_coding", "package_summary": "C++ compatible C source code for ETSI ITS DENMs (TS) generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_denm_coding", "package": "etsi_its_denm_coding", "package_summary": "C++ compatible C source code for ETSI ITS DENMs generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cpm_ts_coding", "package": "etsi_its_cpm_ts_coding", "package_summary": "C++ compatible C source code for ETSI ITS CPMs (TS) generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_coding", "package": "etsi_its_coding", "package_summary": "C++ compatible C source code for ETSI ITS messages generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cam_ts_coding", "package": "etsi_its_cam_ts_coding", "package_summary": "C++ compatible C source code for ETSI ITS CAMs (TS) generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/etsi_its_cam_coding", "package": "etsi_its_cam_coding", "package_summary": "C++ compatible C source code for ETSI ITS CAMs generated from ASN.1 using asn1c", "package_details": ""},
{"url": "https://index.ros.org/p/eigen_stl_containers", "package": "eigen_stl_containers", "package_summary": "This package provides a set of typedef's that allow\n  using Eigen datatypes in STL containers", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_tools", "package": "ecl_tools", "package_summary": "Tools and utilities for ecl development.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_license", "package": "ecl_license", "package_summary": "Maintains the ecl licenses and also provides an install\n     target for deploying licenses with the ecl libraries.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_build", "package": "ecl_build", "package_summary": "Collection of cmake/make build tools primarily for ecl development itself, but also\n     contains a few cmake modules useful outside of the ecl.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_time_lite", "package": "ecl_time_lite", "package_summary": "Provides a portable set of time functions that are especially useful for\n     porting other code or being wrapped by higher level c++ classes.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_lite", "package": "ecl_lite", "package_summary": "Libraries and utilities for embedded and low-level linux development.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_sigslots_lite", "package": "ecl_sigslots_lite", "package_summary": "This avoids use of dynamic storage (malloc/new) and thread safety (mutexes) to\n     provide a very simple sigslots implementation that can be used for *very*\n     embedded development.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_io", "package": "ecl_io", "package_summary": "Most implementations (windows, posix, ...) have slightly different api for\n     low level input-output functions. These are gathered here and re-represented\n     with a cross platform set of functions.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_errors", "package": "ecl_errors", "package_summary": "This library provides lean and mean error mechanisms.\n    It includes c style error functions as well as a few\n    useful macros. For higher level mechanisms,\n    refer to ecl_exceptions.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_converters_lite", "package": "ecl_converters_lite", "package_summary": "These are a very simple version of some of the functions in ecl_converters\n     suitable for firmware development. That is, there is no use of new,\n     templates or exceptions.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_console", "package": "ecl_console", "package_summary": "Color codes for ansii consoles.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_config", "package": "ecl_config", "package_summary": "These tools inspect and describe your system with macros, types\n     and functions.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_utilities", "package": "ecl_utilities", "package_summary": "Includes various supporting tools and utilities for c++ programming.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_type_traits", "package": "ecl_type_traits", "package_summary": "Extends c++ type traits and implements a few more to boot.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_time", "package": "ecl_time", "package_summary": "Timing utilities are very dependent on the system api provided for their use.\n\tThis package provides a means for handling different timing models. Current support\n\n\t- posix rt : complete.\n\t- macosx : posix timers only, missing absolute timers.\n\t- win : none.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_threads", "package": "ecl_threads", "package_summary": "This package provides the c++ extensions for a variety of threaded\n     programming tools. These are usually different on different\n     platforms, so the architecture for a cross-platform framework\n     is also implemented.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_streams", "package": "ecl_streams", "package_summary": "These are lightweight text streaming classes that connect to standardised\n     ecl type devices.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_statistics", "package": "ecl_statistics", "package_summary": "Common statistical structures and algorithms for control systems.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_sigslots", "package": "ecl_sigslots", "package_summary": "Provides a signal/slot mechanism (in the same vein as qt sigslots,\n     boost::signals etc for intra-process communication. These include\n     some improvements - they do not need a preprocessor, are fully type safe,\n     allow for simple connections via a posix style string identifier\n     and are multithread-safe.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_mpl", "package": "ecl_mpl", "package_summary": "Metaprogramming tools move alot of runtime calculations to be shifted to\n    compile time. This has only very elementary structures at this stage.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_mobile_robot", "package": "ecl_mobile_robot", "package_summary": "Contains transforms (e.g. differential drive inverse kinematics)\n    for the various types of mobile robot platforms.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_math", "package": "ecl_math", "package_summary": "This package provides simple support to cmath, filling in holes\n    or redefining in a c++ formulation where desirable.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_manipulators", "package": "ecl_manipulators", "package_summary": "Deploys various manipulation algorithms, currently just\n    feedforward filters (interpolations).", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_linear_algebra", "package": "ecl_linear_algebra", "package_summary": "Ecl frontend to a linear matrix package (currently eigen).", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_ipc", "package": "ecl_ipc", "package_summary": "Interprocess mechanisms vary greatly across platforms - sysv, posix, win32, there\n  are more than a few. This package provides an infrastructure to allow for developing\n  cross platform c++ wrappers around the lower level c api's that handle these\n  mechanisms. These make it not only easier to utilise such mechanisms, but allow it\n  to be done consistently across platforms.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_geometry", "package": "ecl_geometry", "package_summary": "Any tools relating to mathematical geometry.\n     Primarily featuring polynomials and interpolations.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_formatters", "package": "ecl_formatters", "package_summary": "The formatters here simply format various input types to a specified\n   text format. They can be used with most streaming types (including both\n   ecl and stl streams).", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_filesystem", "package": "ecl_filesystem", "package_summary": "Cross platform filesystem utilities (until c++11 makes its way in).", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_exceptions", "package": "ecl_exceptions", "package_summary": "Template based exceptions - these are simple and practical\n     and avoid the proliferation of exception types. Although not\n     syntatactically ideal, it is convenient and eminently practical.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_eigen", "package": "ecl_eigen", "package_summary": "This provides an Eigen implementation for ecl's linear algebra.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_devices", "package": "ecl_devices", "package_summary": "Provides an extensible and standardised framework for input-output devices.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_core_apps", "package": "ecl_core_apps", "package_summary": "This includes a suite of programs demo'ing various aspects of the\n     ecl_core. It also includes various benchmarking and utility programs for\n     use primarily with embedded systems.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_core", "package": "ecl_core", "package_summary": "A set of tools and interfaces extending the capabilities of c++ to\n    provide a lightweight, consistent interface with a focus for control\n    programming.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_converters", "package": "ecl_converters", "package_summary": "Some fast/convenient type converters, mostly for char strings or strings.\n     These are not really fully fleshed out, alot of them could use the addition for\n     the whole range of fundamental types (e.g. all integers, not just int, unsigned int).\n\n     They will come as the need arises.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_containers", "package": "ecl_containers", "package_summary": "The containers included here are intended to extend the stl containers.\n    In all cases, these implementations are designed to implement\n    c++ conveniences and safety where speed is not sacrificed.\n\n    Also includes techniques for memory debugging of common problems such\n    as buffer overruns.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_concepts", "package": "ecl_concepts", "package_summary": "Introduces a compile time concept checking mechanism that can be used\n     most commonly to check for required functionality when passing\n     template arguments.", "package_details": ""},
{"url": "https://index.ros.org/p/ecl_command_line", "package": "ecl_command_line", "package_summary": "Embeds the TCLAP library inside the ecl. This is a very convenient\n     command line parser in templatised c++.", "package_details": ""},
{"url": "https://index.ros.org/p/dynamixel_sdk_examples", "package": "dynamixel_sdk_examples", "package_summary": "ROS2 examples using ROBOTIS DYNAMIXEL SDK", "package_details": ""},
{"url": "https://index.ros.org/p/dynamixel_sdk_custom_interfaces", "package": "dynamixel_sdk_custom_interfaces", "package_summary": "ROS2 custom interface examples using ROBOTIS DYNAMIXEL SDK", "package_details": ""},
{"url": "https://index.ros.org/p/dynamixel_sdk", "package": "dynamixel_sdk", "package_summary": "This package is wrapping version of ROBOTIS Dynamixel SDK for ROS 2. The ROBOTIS Dynamixel SDK, or SDK, is a software development library that provides Dynamixel control functions for packet communication. The API is designed for Dynamixel actuators and Dynamixel-based platforms.", "package_details": ""},
{"url": "https://index.ros.org/p/cob_msgs", "package": "cob_msgs", "package_summary": "Messages for representing state information, such as battery information and emergency stop status.", "package_details": ""},
{"url": "https://index.ros.org/p/cob_srvs", "package": "cob_srvs", "package_summary": "This Package contains Care-O-bot specific service definitions.", "package_details": ""},
{"url": "https://index.ros.org/p/dynamixel_workbench_msgs", "package": "dynamixel_workbench_msgs", "package_summary": "This package includes ROS messages and services for dynamixel_workbench packages", "package_details": ""},
{"url": "https://index.ros.org/p/cob_common", "package": "cob_common", "package_summary": "The cob_common stack hosts common packages that are used within the Care-O-bot repository. E.g. utility packages or common message and service definitions etc. Also the urdf desciption of the robot is located in this stack.", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_platform_msgs", "package": "clearpath_platform_msgs", "package_summary": "Messages for Clearpath Platforms.", "package_details": ""},
{"url": "https://index.ros.org/p/cob_actions", "package": "cob_actions", "package_summary": "This Package contains Care-O-bot specific action definitions.", "package_details": ""},
{"url": "https://index.ros.org/p/clearpath_msgs", "package": "clearpath_msgs", "package_summary": "Metapackage for Clearapth messages.", "package_details": ""},
{"url": "https://index.ros.org/p/smclib", "package": "smclib", "package_summary": "The State Machine Compiler (SMC) from http://smc.sourceforge.net/\n    converts a language-independent description of a state machine\n    into the source code to support that state machine.\n\n    This package contains the libraries that a compiled state machine\n    depends on, but it does not contain the compiler itself.", "package_details": ""},
{"url": "https://index.ros.org/p/test_bond", "package": "test_bond", "package_summary": "Contains tests for [[bond]], including tests for [[bondcpp]].", "package_details": ""},
{"url": "https://index.ros.org/p/bondpy", "package": "bondpy", "package_summary": "Python implementation of bond, a mechanism for checking when\n    another process has terminated.", "package_details": ""},
{"url": "https://index.ros.org/p/bondcpp", "package": "bondcpp", "package_summary": "C++ implementation of bond, a mechanism for checking when\n    another process has terminated.", "package_details": ""},
{"url": "https://index.ros.org/p/bond_core", "package": "bond_core", "package_summary": "A bond allows two processes, A and B, to know when the other has\n    terminated, either cleanly or by crashing. The bond remains\n    connected until it is either broken explicitly or until a\n    heartbeat times out.", "package_details": ""},
{"url": "https://index.ros.org/p/beluga_tutorial", "package": "beluga_tutorial", "package_summary": "Primer on Particle Filtering with Beluga.", "package_details": ""},
{"url": "https://index.ros.org/p/bond", "package": "bond", "package_summary": "A bond allows two processes, A and B, to know when the other has\n    terminated, either cleanly or by crashing.  The bond remains\n    connected until it is either broken explicitly or until a\n    heartbeat times out.", "package_details": ""},
{"url": "https://index.ros.org/p/beluga_tools", "package": "beluga_tools", "package_summary": "Set of miscellaneous tools to work with beluga.", "package_details": ""},
{"url": "https://index.ros.org/p/beluga_ros", "package": "beluga_ros", "package_summary": "Utilities to interface ROS with Beluga.", "package_details": ""},
{"url": "https://index.ros.org/p/axis_description", "package": "axis_description", "package_summary": "Description package with URDF files for common Axis fixed and PTZ cameras", "package_details": ""},
{"url": "https://index.ros.org/p/axis_msgs", "package": "axis_msgs", "package_summary": "ROS messages used by the axis_camera package to control Axis PTZ and fixed cameras", "package_details": ""},
{"url": "https://index.ros.org/p/avt_vimba_camera_msgs", "package": "avt_vimba_camera_msgs", "package_summary": "Message definitions for controlling Allied Vision Technologies (AVT) cameras", "package_details": ""},
{"url": "https://index.ros.org/p/axis_camera", "package": "axis_camera", "package_summary": "ROS 2 driver for fixed and PTZ Axis cameras", "package_details": ""},
{"url": "https://index.ros.org/p/avt_vimba_camera", "package": "avt_vimba_camera", "package_summary": "Camera driver for Allied Vision Technologies (AVT) cameras, based on their Vimba SDK.", "package_details": ""},
{"url": "https://index.ros.org/p/automotive_platform_msgs", "package": "automotive_platform_msgs", "package_summary": "Generic Messages for Communication with an Automotive Autonomous Platform", "package_details": ""},
{"url": "https://index.ros.org/p/automotive_navigation_msgs", "package": "automotive_navigation_msgs", "package_summary": "Generic Messages for Navigation Objectives in Automotive Automation Software", "package_details": ""},
{"url": "https://index.ros.org/p/automotive_autonomy_msgs", "package": "automotive_autonomy_msgs", "package_summary": "Messages for vehicle automation", "package_details": ""},
{"url": "https://index.ros.org/p/neobotix_usboard_msgs", "package": "neobotix_usboard_msgs", "package_summary": "neobotix_usboard package", "package_details": ""},
{"url": "https://index.ros.org/p/mobileye_560_660_msgs", "package": "mobileye_560_660_msgs", "package_summary": "Message definitions for the Mobileye 560/660", "package_details": ""},
{"url": "https://index.ros.org/p/kartech_linear_actuator_msgs", "package": "kartech_linear_actuator_msgs", "package_summary": "The kartech_linear_actuator_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/ibeo_msgs", "package": "ibeo_msgs", "package_summary": "The ibeo_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/derived_object_msgs", "package": "derived_object_msgs", "package_summary": "Abstracted Messages from Perception Modalities", "package_details": ""},
{"url": "https://index.ros.org/p/aruco_ros", "package": "aruco_ros", "package_summary": "The ARUCO Library has been developed by the Ava group of the Univeristy of Cordoba(Spain).\n    It provides real-time marker based 3D pose estimation using AR markers.", "package_details": ""},
{"url": "https://index.ros.org/p/delphi_srr_msgs", "package": "delphi_srr_msgs", "package_summary": "Message definitions for the Delphi SRR", "package_details": ""},
{"url": "https://index.ros.org/p/aruco_msgs", "package": "aruco_msgs", "package_summary": "The aruco_msgs package", "package_details": ""},
{"url": "https://index.ros.org/p/aruco", "package": "aruco", "package_summary": "The ARUCO Library has been developed by the Ava group of the Univeristy of Cordoba(Spain).\n    It provides real-time marker based 3D pose estimation using AR markers.", "package_details": ""},
{"url": "https://index.ros.org/p/delphi_mrr_msgs", "package": "delphi_mrr_msgs", "package_summary": "Message definitions for the Delphi MRR", "package_details": ""},
{"url": "https://index.ros.org/p/delphi_esr_msgs", "package": "delphi_esr_msgs", "package_summary": "Message definitions for the Delphi ESR", "package_details": ""},
{"url": "https://index.ros.org/p/angles", "package": "angles", "package_summary": "This package provides a set of simple math utilities to work\n        with angles. The utilities cover simple things like\n        normalizing an angle and conversion between degrees and\n        radians. But even if you're trying to calculate things like\n        the shortest angular distance between two joint space\n        positions of your robot, but the joint motion is constrained\n        by joint limits, this package is what you need. The code in\n        this package is stable and well tested. There are no plans for\n        major changes in the near future.", "package_details": ""}
]